<?xml version="1.0"?>
<doc>
  <assembly>
    <name>Aspose.Pdf</name>
  </assembly>
  <members>
    <member name="T:Aspose.Pdf.Generator.AlignmentType">
      <summary>
            Enumerates the alignment types.
            </summary>
    </member>
    <member name="F:Aspose.Pdf.Generator.AlignmentType.Left">
      <summary>
            Left alignment.
            </summary>
    </member>
    <member name="F:Aspose.Pdf.Generator.AlignmentType.Center">
      <summary>
            Center alignment.
            </summary>
    </member>
    <member name="F:Aspose.Pdf.Generator.AlignmentType.Right">
      <summary>
            Right alignment.
            </summary>
    </member>
    <member name="F:Aspose.Pdf.Generator.AlignmentType.Justify">
      <summary>
            Justify alignment. Text will be aligned on both left and right margins.
            </summary>
    </member>
    <member name="F:Aspose.Pdf.Generator.AlignmentType.FullJustify">
      <summary>
            Similar to 'Justify' alignment, except that the very last line will only be 
            left-aligned in 'Justify' mode, while in 'FullJustify' mode all lines will be
            left- and right-aligned.
            </summary>
    </member>
    <member name="T:Aspose.Pdf.Generator.Annotation">
      <summary>
            Represents an annotation <see cref="T:Aspose.Pdf.Generator.Paragraph" /> in a Pdf document. Annotation may have type like Circle, Line, Square, TextMarkup, FreeText
            </summary>
      <example>
        <code>
            [C#]
            Pdf pdf = new Pdf();
            Aspose.Pdf.Generator.Section sec1 = pdf.Sections.Add();
            Attachment PageNoteAttachment;
            
            Free Text annotation 
            
            Annotation PageNoteAttachment = new Annotation();
            sec1.Paragraphs.Add(PageNoteAttachment);
            PageNoteAttachment.AnnotationType = AnnotationType.FreeText;
            PageNoteAttachment.NoteContent = "This is free text annotation This is free text annotation This is free text annotation This is free text annotation ";
            PageNoteAttachment.Left = 150;
            PageNoteAttachment.TextInfo.FontSize = 8;
            PageNoteAttachment.TextInfo.Color = new Aspose.Pdf.Generator.Color(0, 255, 0);
            PageNoteAttachment.TextInfo.BackgroundColor = new Aspose.Pdf.Generator.Color(0, 0, 200);
            PageNoteAttachment.TextInfo.TextBorder = new BorderInfo((int)BorderSide.All, 2.0F, new Aspose.Pdf.Generator.Color(250, 0, 0));
            
            Line annotation 
            
            LineAnnot lineAnnotation = new LineAnnot();
            sec1.Paragraphs.Add(lineAnnotation);
            lineAnnotation.NoteContent = "This is line text annotation ";
            lineAnnotation.NoteHeading = "This is line text annotation caption";
            lineAnnotation.IsNoteOpen = true;
            lineAnnotation.PosLeftX = 100;
            lineAnnotation.PosLeftY = 600;
            lineAnnotation.PosRightX = 200;
            lineAnnotation.PosRightY = 600;
            GraphInfo graphInfo = new GraphInfo();
            graphInfo.LineWidth = 2;
            graphInfo.Color = new Aspose.Pdf.Generator.Color(180, 10, 50);
            lineAnnotation.LineStyle = graphInfo;
            lineAnnotation.LineStartStyle = LineSideStyle.ReversedClosedArrow;
            lineAnnotation.LineEndStyle = LineSideStyle.Diamond;
            lineAnnotation.ShowCaption = true;
            lineAnnotation.IsCaptionTop = true;
            lineAnnotation.IsCaptionInLine = true;
            lineAnnotation.CaptionOffsetX = 10;
            lineAnnotation.CaptionOffsetY = 20;
            lineAnnotation.TextInfo.FontSize = 8;
            lineAnnotation.TextInfo.Color = new Aspose.Pdf.Generator.Color(0, 255, 0);
            
            Circle annotation 
            
            CircleNote circleAnnotation = new CircleNote();
            sec1.Paragraphs.Add(circleAnnotation);
            circleAnnotation.NoteContent = "This is circle annotation text";
            circleAnnotation.NoteHeading = "This is circle annotation caption";
            circleAnnotation.IsNoteOpen = true;
            graphInfo = new GraphInfo();
            graphInfo.LineWidth = 2;
            graphInfo.Color = new Aspose.Pdf.Generator.Color(255, 0, 0);
            circleAnnotation.BorderStyle = graphInfo;
            circleAnnotation.TextInfo.FontSize = 8;
            circleAnnotation.TextInfo.Color = new Aspose.Pdf.Generator.Color(0, 255, 0);
            circleAnnotation.FillColor = new Aspose.Pdf.Generator.Color(0, 255, 0);
            
            Square annotation 
            
            SquareNote attachment = new SquareNote();
            sec1.Paragraphs.Add(attachment);
            attachment.NoteContent = "This is square annotation text";
            attachment.NoteHeading = "This is square annotation caption";
            attachment.IsNoteOpen = true;
            graphInfo = new GraphInfo();
            graphInfo.LineWidth = 4;
            graphInfo.Color = new Aspose.Pdf.Generator.Color(255, 0, 0);
            attachment.BorderStyle = graphInfo;
            attachment.TextInfo.FontSize = 8;
            attachment.FillColor = new Aspose.Pdf.Generator.Color(0, 255, 0);
            
            Text Markup annotation 
            
            TextMarkupNote textMarkupNote = new TextMarkupNote();
            for (int line = 0; line &lt; 25; line++) sec1.Paragraphs.Add(new Text("paragraph text paragraph text paragraph text paragraph text paragraph text paragraph text paragraph text "));
            sec1.Paragraphs.Add(textMarkupNote);
            textMarkupNote.NoteContent = "This is TextMarkupNote annotation text";
            textMarkupNote.NoteHeading = "This is TextMarkupNote annotation caption";
            textMarkupNote.IsNoteOpen = true;
            textMarkupNote.MarkupArea = new System.Drawing.Rectangle(120, 400, 100, 20);
            textMarkupNote.MarkupStyle = MarkupStyle.Underline;
            textMarkupNote.FillColor = new Aspose.Pdf.Generator.Color(0, 255, 0);
            
            pdf1.Save("test.pdf")
            
            [XML]
            &lt;?xml version="1.0" encoding="utf-8" ?&gt;
            &lt;Pdf xmlns="Aspose.Pdf" Author="aaa" Creator="aaa" Keywords="aaaa"
            Subject="DOC Statement" Title="DOC Statement"&gt;
            &lt;Section ID="PDFDOC" PageMarginLeft="10"&gt;
            
                &lt;Annotation AnnotationType="Circle" NoteContent="This is circle annotation text" NoteHeading="This is circle annotation caption"
            IsNoteOpen="true" LineWidth="2" ColorName="Red" FontSize="8" FontColorName="Green" FillColorName="Blue"/&gt;
            
                &lt;Annotation AnnotationType="FreeText" NoteContent="This is free text annotation"
                 Left="150" ColorName="Red" FontSize="8" BackgroundColorName="Blue" /&gt;
            
                &lt;Annotation AnnotationType="Line" NoteContent="This is line text annotation" NoteHeading="This is line text annotation caption"
            IsNoteOpen="true" PosLeftX="100" PosLeftY="600" PosRightX="200" PosRightY="600" LineWidth="2"
                ColorName="Red"  LineStartStyle="Square" LineEndStyle="Diamond" ShowCaption="true" IsCaptionTop="true"
                IsCaptionInLine="true" CaptionOffsetX="10" CaptionOffsetY="20" FontSize="8" TextColorName="Green"/&gt;
            
                &lt;Annotation AnnotationType="Square" NoteContent="This is square annotation text" NoteHeading="This is square annotation caption"
                IsNoteOpen="true" LineWidth="4" ColorName="Red" FontSize="8" TextColorName="Green" FillColorName="Red"/&gt;
            
                &lt;Annotation AnnotationType="TextMarkup" NoteContent="This is TextMarkupNote annotation text" NoteHeading="This is TextMarkupNote annotation caption"
                 IsNoteOpen="true" MarkupArea="120,400,100,20" MarkupStyle="Underline" FillColorName="Green"/&gt;
             
              &lt;/Section&gt;
            &lt;/Pdf&gt;	
            </code>
      </example>
    </member>
    <member name="T:Aspose.Pdf.Generator.Attachment">
      <summary>
             Represents an attachment <see cref="T:Aspose.Pdf.Generator.Paragraph" /> in a Pdf document. Attachment can be file attachment.
             stream attachment or note annotation.
             </summary>
      <example>
        <code>
             [C#]
            	Pdf pdf1 = new Pdf();
            
            	Section sec1 = pdf1.Sections.Add();
            
            	Attachment fileAttachment = new Attachment();
            	sec1.Paragraphs.Add(fileAttachment);
            	fileAttachment.AttachmentType = AttachmentType.File;
            	fileAttachment.AttachedFileName = "c:/images/ccitt.tif";
            	fileAttachment.AttachedFileType = "tif";	
            	fileAttachment.FileIconType = FileIconType.Graph;
            	fileAttachment.IconColor = new Aspose.Pdf.Generator.Color("Brown");
            	
            	Attachment noteAttachment = new Attachment();
            	sec1.Paragraphs.Add(noteAttachment);
            	noteAttachment.AttachmentType = AttachmentType.Note;
            	noteAttachment.NoteContent = "This is a note.";
            	noteAttachment.NoteHeading = "this is a heading";
            	noteAttachment.IsNoteOpen = true;	
            
            	pdf1.Save("test.pdf");
            
             [Visual Basic] 
            	Dim pdf1 As Pdf = New Pdf()
            
            	Dim sec1 As Section = pdf1.Sections.Add()
            
            	Dim fileAttachment As Attachment = New Attachment()
            	sec1.Paragraphs.Add(fileAttachment)
            	fileAttachment.AttachmentType = AttachmentType.File
            	fileAttachment.AttachedFileName = "c:/images/ccitt.tif"
            	fileAttachment.AttachedFileType = "tif"
            	fileAttachment.FileIconType = FileIconType.Graph
            	fileAttachment.IconColor = New Aspose.Pdf.Generator.Color("Brown")
            
            	Dim noteAttachment As Attachment = New Attachment()
            	sec1.Paragraphs.Add(noteAttachment)
            	noteAttachment.AttachmentType = AttachmentType.Note
            	noteAttachment.NoteContent = "This is a note."
            	noteAttachment.NoteHeading = "this is a heading"
            	noteAttachment.IsNoteOpen = True
            
            	pdf1.Save("test.pdf")
             
             [XML]
             &lt;?xml version="1.0" encoding="utf-8" ?&gt;
             &lt;Pdf xmlns="Aspose.Pdf"&gt;
            		&lt;Section&gt;
            			&lt;Attachment AttachmentType="File" AttachedFileName="c:/images/flower.jpg"
            				AttachedFileType="jpeg" FileIconType="Graph" IconColor="Brown"&gt;
            			&lt;/Attachment&gt;
            			&lt;Attachment AttachmentType="Note" IsNoteOpen="true" 
            				NoteContent="This is a note."&gt;
            			&lt;/Attachment&gt;
            		&lt;/Section&gt;
             &lt;/Pdf&gt;
             </code>
      </example>
    </member>
    <member name="T:Aspose.Pdf.Generator.Paragraph">
      <summary>
            Represents a paragraph object.
            </summary>
      <example>
        <code>
            [C#]
            // Create an object of Pdf class
            Pdf pdf = new Pdf();
            // Create a section object
            Aspose.Pdf.Generator.Section section = new Aspose.Pdf.Generator.Section(pdf);
            // add the section to Pdf object
            pdf.Sections.Add(section);
            // create a simple text object
            Text text1 = new Text(section);
            // specify the top margin information for text object
            text1.Margin.Top = 30;
            // add the text paragraph to paragraphs collection of section object
            section.Paragraphs.Add(text1);
            // create a new segment object
            Segment segment1 = new Segment(text1);
            // add the newly created segment to segments collection of text object
            text1.Segments.Add(segment1);
            // specify the contents of segment
            segment1.Content = "this is text content";
            // Add a text paragraph to paragraphs collection of section object
            section.Paragraphs.Add(new Text("This Paragraph should be on second page"));
            // specify that the paragraph is the first paragraph and will be displayed over new page
            section.Paragraphs[1].IsFirstParagraph = true;
            // save the PDF document
            pdf.Save("d:/pdftest/ListSectionTestTocXml.pdf");
            
            [Visual Basic]
            ' Create an object of Pdf class
            Dim pdf As Pdf = New Pdf()
            ' Create a section object
            Dim Section As Aspose.Pdf.Generator.Section = New Aspose.Pdf.Generator.Section(pdf)
            ' add the section to Pdf object
            pdf.Sections.Add(Section)
            ' create a simple text object
            Dim text1 As Text = New Text(Section)
            ' specify the top margin information for text object
            text1.Margin.Top = 30
            ' add the text paragraph to paragraphs collection of section object
            Section.Paragraphs.Add(text1)
            ' create a new segment object
            Dim segment1 As Segment = New Segment(text1)
            ' add the newly created segment to segments collection of text object
            text1.Segments.Add(segment1)
            ' specify the contents of segment
            segment1.Content = "this is text content"
            ' Add a text paragraph to paragraphs collection of section object
            Section.Paragraphs.Add(New Text("This Paragraph should be on second page"))
            ' specify that the paragraph is the first paragraph and will be displayed over new page
            Section.Paragraphs(1).IsFirstParagraph = True
            ' save the PDF document
            pdf.Save("d:/pdftest/ListSectionTestTocXml.pdf")
            
            [XML]
            &lt;?xml version="1.0" encoding="utf-8" ?&gt;
            &lt;Pdf xmlns="Aspose.Pdf" IsCopyingAllowed="false"&gt;
                   &lt;Section PageHeight="1684"&gt;
                       &lt;Text MarginTop="30"&gt;
                           &lt;Segment&gt;this is text content&lt;/Segment&gt;
                       &lt;/Text&gt;
                       &lt;Text IsFirstParagraph="True"&gt;
                           &lt;Segment&gt;This Paragraph should be on second page&lt;/Segment&gt;
                       &lt;/Text&gt;
                   &lt;/Section&gt;
            &lt;/Pdf&gt;
            </code>
      </example>
    </member>
    <member name="M:Aspose.Pdf.Generator.Paragraph.#ctor">
      <summary>
            Initializes a new instance of the <see cref="T:Aspose.Pdf.Generator.Paragraph" /> class.
            </summary>
    </member>
    <member name="P:Aspose.Pdf.Generator.Paragraph.Margin">
      <summary>
            Gets or sets <see cref="T:Aspose.Pdf.Generator.MarginInfo" /> object that indicates the margin info of the paragraph.
            </summary>
    </member>
    <member name="P:Aspose.Pdf.Generator.Paragraph.ID">
      <summary>
            Gets or sets a string that indicates the ID of the paragraph.
            </summary>
    </member>
    <member name="P:Aspose.Pdf.Generator.Paragraph.IsFirstParagraph">
      <summary>
            Gets or sets a bool value that indicates whether the paragraph is the first paragraph of a page.
            If this property is set to true,Aspose.Pdf.Generator will start a new page for this paragraph.
            </summary>
    </member>
    <member name="P:Aspose.Pdf.Generator.Paragraph.IsFirstParagraphInColumn">
      <summary>
            Gets or sets a bool value that indicates whether the paragraph be the first paragraph of a column.
            </summary>
    </member>
    <member name="P:Aspose.Pdf.Generator.Paragraph.IsKeptTogether">
      <summary>
            Gets or sets a bool value that indicates whether all lines 
            in the paragraph are to remain on the same page. Default is false. This property only affects 
            paragraphs in section (but not in table).
            </summary>
    </member>
    <member name="P:Aspose.Pdf.Generator.Paragraph.IsKeptWithNext">
      <summary>
            Gets or sets a bool value that indicates whether current paragraph remains in the same page along with next paragraph.
            Default is false. This property only affects paragraphs in section (but ont in table) except FloatingBox, which position 
            is set by manual.
            </summary>
    </member>
    <member name="P:Aspose.Pdf.Generator.Paragraph.IsDisabled">
      <summary>
            Gets or sets a bool value that indicates whether this paragraph is disabled. The default value is false. 
            If this property is set to true, this paragraph will not be rendered.
            </summary>
    </member>
    <member name="P:Aspose.Pdf.Generator.Paragraph.IsInList">
      <summary>
            Get or set a bool value that indicates whether this paragraph is used as a list item. The default value is false.
            If this property is set to true, this paragraph will appear in the list when the list is constructed.
            </summary>
    </member>
    <member name="P:Aspose.Pdf.Generator.Paragraph.Bookmarked">
      <summary>
            Get or set a bool value that indicates whether this paragraph is used as a bookmark item. 
            </summary>
    </member>
    <member name="P:Aspose.Pdf.Generator.Paragraph.IsOnOddPage">
      <summary>
            Gets or sets a bool value that indicates whether this paragraph be shown in odd page only. This property 
            used for duplex Printing. If you want to print a paragraph in a new odd page in duplex Printing,you 
            can set "IsFirstParagraph = true" and "IsOnOddPage = true".
            </summary>
    </member>
    <member name="P:Aspose.Pdf.Generator.Paragraph.Left">
      <summary>
            Gets or sets a float value that indicates the left position of the paragraph. 
            The unit is point.
            <seealso cref="P:Aspose.Pdf.Generator.Paragraph.PositioningType" /></summary>
      <remarks>The property is used for custom positioning. You need not use this property if you 
            want the paragraph be auto aligned.</remarks>
    </member>
    <member name="P:Aspose.Pdf.Generator.Paragraph.Top">
      <summary>
            Gets or sets a float value that indicates the top position of the paragraph. 
            The unit is point.
            <seealso cref="P:Aspose.Pdf.Generator.Paragraph.PositioningType" /></summary>
      <remarks>The property is used for custom positioning. You need not use this property if you 
            want the paragraph be auto aligned.</remarks>
    </member>
    <member name="P:Aspose.Pdf.Generator.Paragraph.PositioningType">
      <summary>
            The positioning type for custom positioning. Default value is Auto 
            (don not use custom positioning).
            </summary>
    </member>
    <member name="P:Aspose.Pdf.Generator.Paragraph.ReferenceParagraphID">
      <summary>
            Gets or sets a string that indicates the reference paragraph when using paragraph relative customer 
            positioning.
            </summary>
      <remarks>The reference paragraph must be ahead of the current paragraph in the document object 
            model. </remarks>
    </member>
    <member name="M:Aspose.Pdf.Generator.Attachment.#ctor">
      <summary>
            Initializes a new instance of the <see cref="T:Aspose.Pdf.Generator.Attachment" /> class.
            </summary>
    </member>
    <member name="M:Aspose.Pdf.Generator.Attachment.CompleteClone">
      <summary>
            Clones a new <see cref="T:Aspose.Pdf.Generator.Attachment" /> object.
            </summary>
      <returns>
      </returns>
    </member>
    <member name="P:Aspose.Pdf.Generator.Attachment.TextInfo">
      <summary>
            Gets or sets a <see cref="P:Aspose.Pdf.Generator.Attachment.TextInfo" /> that indicates the attachment text info.
            </summary>
    </member>
    <member name="P:Aspose.Pdf.Generator.Attachment.AttachmentType">
      <summary>
            Gets or sets a <see cref="P:Aspose.Pdf.Generator.Attachment.AttachmentType" /> that indicates the attachment type.
            </summary>
    </member>
    <member name="P:Aspose.Pdf.Generator.Attachment.AttachedFileName">
      <summary>
            Gets or sets a string that indicates the attach file name.
            </summary>
    </member>
    <member name="P:Aspose.Pdf.Generator.Attachment.AttachedStream">
      <summary>
            Gets or sets a stream attaches to the file.
            </summary>
    </member>
    <member name="P:Aspose.Pdf.Generator.Attachment.AttachedFileType">
      <summary>
            Gets or sets a string that indicates the MIME type of the attached file.
            </summary>
    </member>
    <member name="P:Aspose.Pdf.Generator.Attachment.FileIconType">
      <summary>
            Gets or sets a <see cref="P:Aspose.Pdf.Generator.Attachment.FileIconType" /> that indicates the file attachment icon type.
            </summary>
    </member>
    <member name="P:Aspose.Pdf.Generator.Attachment.NoteWindowPositioningType">
      <summary>
            Gets or sets a <see cref="P:Aspose.Pdf.Generator.Attachment.NoteWindowPositioningType" /> object that indicates the note window's 
            positioning type. Default is Auto.
            </summary>
    </member>
    <member name="P:Aspose.Pdf.Generator.Attachment.NoteWindowPosition">
      <summary>
            Gets or sets a <see cref="T:Aspose.Pdf.Generator.RectangleArea" /> object that indicates the position of the note's 
            popup window.
            </summary>
    </member>
    <member name="P:Aspose.Pdf.Generator.Attachment.NoteContent">
      <summary>
            Gets or sets a string that indicates the content of the attached note.
            </summary>
    </member>
    <member name="P:Aspose.Pdf.Generator.Attachment.NoteHeading">
      <summary>
            Gets or sets a string that indicates the heading (title) of the attached note.
            </summary>
    </member>
    <member name="P:Aspose.Pdf.Generator.Attachment.NoteIconType">
      <summary>
            Gets or sets a <see cref="P:Aspose.Pdf.Generator.Attachment.NoteIconType" /> that indicates the note icon type.
            </summary>
    </member>
    <member name="P:Aspose.Pdf.Generator.Attachment.IsNoteOpen">
      <summary>
            Gets or sets a bool value that indicates whether the note is open or not when the Pdf document is opened.
            </summary>
    </member>
    <member name="P:Aspose.Pdf.Generator.Attachment.IconColor">
      <summary>
            Represents a <see cref="T:Aspose.Pdf.Generator.Color" /> object that indicates the color of the icon.
            </summary>
    </member>
    <member name="M:Aspose.Pdf.Generator.Annotation.#ctor">
      <summary>
            Initializes a new instance of the <see cref="T:Aspose.Pdf.Generator.Attachment" /> class.
            </summary>
    </member>
    <member name="P:Aspose.Pdf.Generator.Annotation.AnnotationType">
      <summary>
            Gets or sets a <see cref="T:Aspose.Pdf.Generator.AttachmentType" /> that indicates the attachment type.
            </summary>
    </member>
    <member name="M:Aspose.Pdf.Generator.CircleNote.#ctor">
      <summary>
            Initializes a new instance of the <see cref="T:Aspose.Pdf.Generator.CircleNote" /> class.
            </summary>
    </member>
    <member name="P:Aspose.Pdf.Generator.CircleNote.BorderStyle">
      <summary>
            Gets or sets a value that indicates border style.
            </summary>
    </member>
    <member name="P:Aspose.Pdf.Generator.CircleNote.FillColor">
      <summary>
            Gets or sets a value that indicates fill color.
            </summary>
    </member>
    <member name="M:Aspose.Pdf.Generator.LineAnnot.#ctor">
      <summary>
            Initializes a new instance of the <see cref="T:Aspose.Pdf.Generator.LineAnnot" /> class.
            </summary>
    </member>
    <member name="P:Aspose.Pdf.Generator.LineAnnot.PosLeftX">
      <summary>
            Gets or sets a float value that indicates line start left position.
            </summary>
    </member>
    <member name="P:Aspose.Pdf.Generator.LineAnnot.PosLeftY">
      <summary>
            Gets or sets a float value that indicates line start vertical position.
            </summary>
    </member>
    <member name="P:Aspose.Pdf.Generator.LineAnnot.PosRightX">
      <summary>
            Gets or sets a float value that indicates line end right position.
            </summary>
    </member>
    <member name="P:Aspose.Pdf.Generator.LineAnnot.PosRightY">
      <summary>
            Gets or sets a float value that indicates line end vertical position.
            </summary>
    </member>
    <member name="P:Aspose.Pdf.Generator.LineAnnot.LineStyle">
      <summary>
            Gets or sets a value that indicates line style.
            </summary>
    </member>
    <member name="P:Aspose.Pdf.Generator.LineAnnot.LineStartStyle">
      <summary>
            Gets or sets a value that indicates start style.
            </summary>
    </member>
    <member name="P:Aspose.Pdf.Generator.LineAnnot.LineEndStyle">
      <summary>
            Gets or sets a value that indicates end style.
            </summary>
    </member>
    <member name="P:Aspose.Pdf.Generator.LineAnnot.ShowCaption">
      <summary>
            Gets or sets a value that indicates show caption option.
            </summary>
    </member>
    <member name="P:Aspose.Pdf.Generator.LineAnnot.IsCaptionTop">
      <summary>
            Gets or sets a value that indicates show caption on top of line.
            </summary>
    </member>
    <member name="P:Aspose.Pdf.Generator.LineAnnot.IsCaptionInLine">
      <summary>
            Gets or sets a value that indicates show caption inline.
            </summary>
    </member>
    <member name="P:Aspose.Pdf.Generator.LineAnnot.CaptionOffsetX">
      <summary>
            Gets or sets a float value that indicates the line caption left position.
            </summary>
    </member>
    <member name="P:Aspose.Pdf.Generator.LineAnnot.CaptionOffsetY">
      <summary>
            Gets or sets a float value that indicates the line caption top position.
            </summary>
    </member>
    <member name="T:Aspose.Pdf.Generator.LineSideStyle">
      <summary>
            Enumerates the line side tyles.
            </summary>
    </member>
    <member name="T:Aspose.Pdf.Generator.MarkupStyle">
      <summary>
            Enumerates the text markup style
            </summary>
    </member>
    <member name="M:Aspose.Pdf.Generator.SquareNote.#ctor">
      <summary>
            Initializes a new instance of the <see cref="T:Aspose.Pdf.Generator.SquareNote" /> class.
            </summary>
    </member>
    <member name="P:Aspose.Pdf.Generator.SquareNote.BorderStyle">
      <summary>
            Gets or sets a value that indicates border style.
            </summary>
    </member>
    <member name="P:Aspose.Pdf.Generator.SquareNote.FillColor">
      <summary>
            Gets or sets a value that indicates fill color.
            </summary>
    </member>
    <member name="M:Aspose.Pdf.Generator.TextMarkupNote.#ctor">
      <summary>
            Initializes a new instance of the <see cref="T:Aspose.Pdf.Generator.SquareNote" /> class.
            </summary>
    </member>
    <member name="P:Aspose.Pdf.Generator.TextMarkupNote.MarkupArea">
      <summary>
            Gets or sets a rectangle value that indicates text markup area.
            </summary>
    </member>
    <member name="P:Aspose.Pdf.Generator.TextMarkupNote.MarkupStyle">
      <summary>
            Gets or sets a rectangle value that indicates text markup style.
            </summary>
    </member>
    <member name="P:Aspose.Pdf.Generator.TextMarkupNote.FillColor">
      <summary>
            Gets or sets a value that indicates fill color.
            </summary>
    </member>
    <member name="T:Aspose.Pdf.Generator.Arc">
      <summary>
             Represents an arc <see cref="T:Aspose.Pdf.Generator.Shape" /> in a Graph.
             </summary>
      <example>
        <code>
             [C#]
            	Pdf pdf1 = new Pdf();
            	Section sec1 = pdf1.Sections.Add();
            			
            	Graph graph1 = new Graph(sec1,100,400);
            	sec1.Paragraphs.Add(graph1);
            	Arc arc1 = new Arc(graph1,200,50,30,30,90);
            	graph1.Shapes.Add(arc1);
            	
            	arc1.GraphInfo.Color = new Aspose.Pdf.Generator.Color("Red");
            
             pdf1.Save(...);
             
             [Visual Basic]
            	Dim pdf1 As Pdf = New Pdf()
            	Dim sec1 As Section = pdf1.Sections.Add()
            
            	Dim graph1 As Graph = New Graph(sec1, 100, 400)
            	sec1.Paragraphs.Add(graph1)
            	Dim arc1 As Arc = New Arc(graph1, 200, 50, 30, 30, 90)
            	graph1.Shapes.Add(arc1)
            
            	arc1.GraphInfo.Color = New Aspose.Pdf.Generator.Color("Red")
             
             pdf1.Save(...)
            	
            	[XML]
            	&lt;?xml version="1.0" encoding="utf-8" ?&gt;
            	&lt;Pdf xmlns="Aspose.Pdf"&gt;
            		&lt;Section&gt;
            			&lt;Graph Height="100" Width="400"&gt;
            				&lt;Arc CenterPosition="200 50" Radius="30" Alpha="30" 
            				Beta="90" Color="Red"&gt;
            				&lt;/Arc&gt;
            			&lt;/Graph&gt;
            		&lt;/Section&gt;
            	&lt;/Pdf&gt;
            	</code>
      </example>
    </member>
    <member name="T:Aspose.Pdf.Generator.NonClosedShape">
      <summary>
            Defines a <see cref="T:Aspose.Pdf.Generator.Shape" /> that can be unclosed. For example, Arc, Curve, Line.
            </summary>
    </member>
    <member name="T:Aspose.Pdf.Generator.Shape">
      <summary>
            Represents a generic shape.
            </summary>
      <example>
        <code>
            [C#]
            // Create a PDf object
            Pdf pdf1 = new Pdf();
            // create a section object and add it to Pdf object                  
            Aspose.Pdf.Generator.Section sec1 = pdf1.Sections.Add();
            
            //Create a graph object in the section with Width=100 and Height=400
            Graph graph1 = new Graph(sec1, 100, 400);
            //Add the graph object to the paragraphs collection of the section
            sec1.Paragraphs.Add(graph1);
            //Create an array containing the (X,Y) values of 4 control points
            //required to position a curve
            float[] posArr = new float[] { 0, 0, 200, 80, 300, 40, 350, 90 };
            //Create a curve in the graph with the coordinates given as an array to
            //the constructor of curve class
            Curve curve1 = new Curve(graph1, posArr);
            //Add the curve shape into the shapes collection of the graph
            graph1.Shapes.Add(curve1);
            // Create GraphInfo object
            GraphInfo GraphInfo1 = new GraphInfo();
            // set the color property for GraphInfo object
            GraphInfo1.Color = new Aspose.Pdf.Generator.Color("Navy");
            // assign the GraphInfo object to shape
            graph1.Shapes[0].GraphInfo = GraphInfo1;
                        
            //Save the Pdf
            pdf1.Save(@"d:/pdftest/PositionArrayTest.pdf");
            
            [Visual Basic]
            'Instantiate a Pdf document object
            Dim pdf1 As Pdf = New Pdf()
            'Add a section to the Pdf document
            Dim sec1 As Section = pdf1.Sections.Add()
             
            'Create a graph object in the section with Width=100 and Height=400
            Dim graph1 As Graph = New Graph(sec1, 100, 400)
            'Add the graph object to the paragraphs collection of the section
            sec1.Paragraphs.Add(graph1)
            'Create an array containing the (X,Y) values of 4 control points
            'required to position a curve
            Dim posArr() As Single = New Single() {0, 0, 200, 80, 300, 40, 350, 90}
            'Create a curve in the graph with the coordinates given as an array to
            'the constructor of curve class
            Dim curve1 As Curve = New Curve(graph1, posArr)
            'Add the curve shape into the shapes collection of the graph
            graph1.Shapes.Add(curve1)
            ' Create GraphInfo object
            Dim GraphInfo1 As GraphInfo = New GraphInfo()
            ' set the color property for GraphInfo object
            GraphInfo1.Color = New Aspose.Pdf.Generator.Color("Navy")
            ' assign the GraphInfo object to shape
            graph1.Shapes(0).GraphInfo = GraphInfo1 
            
            'Save the Pdf
            pdf1.Save(...)
            
            [XML]
            &lt;?xml version="1.0" encoding="utf-8" ?&gt;
            &lt;Pdf xmlns="Aspose.Pdf"&gt;
             &lt;Section&gt;
                  &lt;Graph Height="100" Width="400"&gt;
                          &lt;Curve Color='blue' Position="0 0 200 80 300 40 350 90"/&gt;
                  &lt;/Graph&gt;
             &lt;/Section&gt;
            &lt;/Pdf&gt;
            </code>
      </example>
    </member>
    <member name="M:Aspose.Pdf.Generator.Shape.#ctor">
      <summary>
            Initializes a new instance of the <see cref="T:Aspose.Pdf.Generator.Shape" /> class.
            </summary>
    </member>
    <member name="P:Aspose.Pdf.Generator.Shape.GraphInfo">
      <summary>
            Gets or sets a <see cref="P:Aspose.Pdf.Generator.Shape.GraphInfo" /> object that indicates the graph info,such as color,
            line width,etc.
            </summary>
    </member>
    <member name="P:Aspose.Pdf.Generator.Shape.ID">
      <summary>
            Gets or sets a string that indicates the ID of the shape.
            </summary>
    </member>
    <member name="P:Aspose.Pdf.Generator.Shape.StrokeOpacity">
      <summary>
            Gets or sets a float value between 0.0 and 1.0 that indicates the stroke opacity of the shape. The default value is 1.0.
            </summary>
    </member>
    <member name="P:Aspose.Pdf.Generator.Shape.Opacity">
      <summary>
            Gets or sets a float value between 0.0 and 1.0 that indicates the opacity of the shape. The default value is 1.0.
            </summary>
    </member>
    <member name="M:Aspose.Pdf.Generator.Arc.#ctor">
      <summary>
            Initializes a new instance of the <see cref="T:Aspose.Pdf.Generator.Arc" /> class.
            </summary>
    </member>
    <member name="M:Aspose.Pdf.Generator.Arc.#ctor(System.Single,System.Single,System.Single,System.Single,System.Single)">
      <summary>
            Initializes a new instance of the <see cref="T:Aspose.Pdf.Generator.Arc" /> class.
            </summary>
      <param name="xPosition">The x-coordinate of the center point of the arc.</param>
      <param name="yPosition">The y-coordinate of the center point of the arc.</param>
      <param name="radius">The radius value of the arc.</param>
      <param name="alpha">The beginning angle value of the arc.</param>
      <param name="beta">The end angle value of the arc.</param>
    </member>
    <member name="M:Aspose.Pdf.Generator.Arc.#ctor(Aspose.Pdf.Generator.Graph)">
      <summary>
            Initializes a new instance of the <see cref="T:Aspose.Pdf.Generator.Arc" /> class.		
            </summary>
      <param name="graph">The specified <see cref="T:Aspose.Pdf.Generator.Graph" /> object.</param>
      <remarks>
            This constructor can inherit common property values from the specified 
            <see cref="T:Aspose.Pdf.Generator.Graph" /> object.
            </remarks>
    </member>
    <member name="M:Aspose.Pdf.Generator.Arc.#ctor(Aspose.Pdf.Generator.Graph,System.Single,System.Single,System.Single,System.Single,System.Single)">
      <summary>
            Initializes a new instance of the <see cref="T:Aspose.Pdf.Generator.Arc" /> class.		
            </summary>
      <param name="graph">The specified <see cref="T:Aspose.Pdf.Generator.Graph" /> object.</param>
      <remarks>
            This constructor can inherit common property values from the specified 
            <see cref="T:Aspose.Pdf.Generator.Graph" /> object.
            </remarks>
      <param name="xPosition">The x-coordinate of the center point of the arc.</param>
      <param name="yPosition">The y-coordinate of the center point of the arc.</param>
      <param name="radius">The radius value of the arc.</param>
      <param name="alpha">The beginning angle value of the arc.</param>
      <param name="beta">The end angle value of the arc.</param>
    </member>
    <member name="P:Aspose.Pdf.Generator.Arc.PosX">
      <summary>
            Gets or sets a float value that indicates the x-coordinate of the center of the arc.
            </summary>
    </member>
    <member name="P:Aspose.Pdf.Generator.Arc.PosY">
      <summary>
            Gets or sets a float value that indicates the y-coordinate of the center of the arc.
            </summary>
    </member>
    <member name="P:Aspose.Pdf.Generator.Arc.Radius">
      <summary>
            Gets or sets a float value that indicates the radius of the arc.
            </summary>
    </member>
    <member name="P:Aspose.Pdf.Generator.Arc.Alpha">
      <summary>
            Gets or sets a float value that indicates the beginning angle degree of the arc.
            </summary>
    </member>
    <member name="P:Aspose.Pdf.Generator.Arc.Beta">
      <summary>
            Gets or sets a float value that indicates the ending angle degree of the arc.
            </summary>
    </member>
    <member name="T:Aspose.Pdf.Generator.AttachmentType">
      <summary>
            Enumerates the attachment types.
            </summary>
    </member>
    <member name="F:Aspose.Pdf.Generator.AttachmentType.File">
      <summary>
            The attachment is a file.
            </summary>
    </member>
    <member name="F:Aspose.Pdf.Generator.AttachmentType.Note">
      <summary>
            The attachment is a note.
            </summary>
    </member>
    <member name="F:Aspose.Pdf.Generator.AttachmentType.None">
      <summary>
            No attachment.
            </summary>
    </member>
    <member name="T:Aspose.Pdf.Generator.Bookmark">
      <summary>
            Represents a bookmark item in the PDF.
            </summary>
      <example>
        <code>
            [C#]	
            Pdf pdf1 = new Pdf();
            
            pdf1.IsBookmarked = true;
            pdf1.BookMarkLevel = 1;?
            
            Section sec1 = pdf1.Sections.Add();
            Heading heading1 = new Heading(pdf1,sec1,1); 
            Segment segment1 = new Segment(heading1); 
            heading1.Segments.Add(segment1); 
            heading1.IsAutoSequence = true; 
            segment1.Content = "this is heading of level 1"; 
            sec1.Paragraphs.Add(heading1);
            Heading heading2 = new Heading(pdf1,sec1,2);
            Segment segment2 = new Segment(heading2);
            heading2.Segments.Add(segment2);
            heading2.IsAutoSequence = true;
            segment2.Content = "this is heading of level 2";
            sec1.Paragraphs.Add(heading2);
            Heading heading3 = new Heading(pdf1,sec1,1);
            Segment segment3 = new Segment(heading3);
            heading3.Segments.Add(segment3);
            heading3.IsAutoSequence = false;
            heading3.LabelWidth = 60;
            heading3.UserLabel = "bullet1";
            segment3.Content = "this is bullet style 1";
            sec1.Paragraphs.Add(heading3);
            
            pdf1.Save("testHeading.pdf");
            
            [Visual Basic]
            Dim pdf1 As Pdf = New Pdf()
            
            pdf1.IsBookmarked = True
            pdf1.BookMarkLevel = 1
            
            Dim sec1 As Section = pdf1.Sections.Add()
            Dim heading1 As Heading = New Heading(pdf1, sec1, 1)
            Dim segment1 As Segment = New Segment(heading1)
            heading1.Segments.Add(segment1)
            heading1.IsAutoSequence = True
            segment1.Content = "this is heading of level 1"
            sec1.Paragraphs.Add(heading1)
            
            Dim heading2 As Heading = New Heading(pdf1, sec1, 2)
            Dim segment2 As Segment = New Segment(heading2)
            heading2.Segments.Add(segment2)
            heading2.IsAutoSequence = True
            segment2.Content = "this is heading of level 2"
            sec1.Paragraphs.Add(heading2)
            
            Dim heading3 As Heading = New Heading(pdf1, sec1, 1)
            Dim segment3 As Segment = New Segment(heading3)
            heading3.Segments.Add(segment3)
            heading3.IsAutoSequence = False
            heading3.LabelWidth = 60
            heading3.UserLabel = "bullet1"
            segment3.Content = "this is bullet style 1"
            sec1.Paragraphs.Add(heading3)
            
            pdf1.Save("testHeading.pdf")
            
            [XML]
            &lt;?xml version="1.0" encoding="utf-8" ?&gt;
            &lt;Pdf xmlns="Aspose.Pdf" IsBookmarked="true" BookMarkLevel="1"&gt;
                &lt;Section&gt;
                    &lt;Heading Level="1" IsAutoSequence="true"&gt;
                        &lt;Segment&gt;this is heading of level 1&lt;/Segment&gt;
                    &lt;/Heading&gt;
                    &lt;Heading Level="2" IsAutoSequence="true"&gt;
                        &lt;Segment&gt;this is heading of level 2&lt;/Segment&gt;
                    &lt;/Heading&gt;
                    &lt;Heading Level="1" IsAutoSequence="false" LabelWidth="60" UserLabel="bullet1"&gt;
                        &lt;Segment&gt;this is bullet style 1&lt;/Segment&gt;
                    &lt;/Heading&gt;
                 &lt;/Section&gt;
            &lt;/Pdf&gt;
            </code>
      </example>
    </member>
    <member name="P:Aspose.Pdf.Generator.Bookmark.LinkParagraphID">
      <summary>
            Gets or sets a string that indicates the ID of the paragraph that the bookmark item links to. 
            If this property is set, the <see cref="P:Aspose.Pdf.Generator.Bookmark.PageNumber" /> and <see cref="P:Aspose.Pdf.Generator.Bookmark.YPosition" /> properties 
            are not needed. If the link paragraph is <see cref="T:Aspose.Pdf.Generator.Text" /> or <see cref="T:Aspose.Pdf.Generator.Heading" /> and the 
            <see cref="P:Aspose.Pdf.Generator.Bookmark.Title" /> is not set, the content of the <see cref="T:Aspose.Pdf.Generator.Text" /> or <see cref="T:Aspose.Pdf.Generator.Heading" /> 
            will be used as the title of the bookmark item.
            </summary>
    </member>
    <member name="P:Aspose.Pdf.Generator.Bookmark.ChildBookmarks">
      <summary>
            Gets or sets a <see cref="P:Aspose.Pdf.Generator.Bookmark.ChildBookmarks" /> object that indicates the child bookmarks.
            </summary>
    </member>
    <member name="P:Aspose.Pdf.Generator.Bookmark.Title">
      <summary>
            Gets or sets a string that indicates the title of the bookmark. If the 
            <see cref="P:Aspose.Pdf.Generator.Bookmark.LinkParagraphID" /> is set and the linked paragraph is <see cref="T:Aspose.Pdf.Generator.Text" /> or 
            <see cref="T:Aspose.Pdf.Generator.Heading" /> and this property is not set, the content of the <see cref="T:Aspose.Pdf.Generator.Text" /> or 
            <see cref="T:Aspose.Pdf.Generator.Heading" /> will be used as the title of the bookmark item.
            </summary>
    </member>
    <member name="P:Aspose.Pdf.Generator.Bookmark.PageNumber">
      <summary>
            Gets or sets a int number that indicates the page number of the bookmark link. If the <see cref="P:Aspose.Pdf.Generator.Bookmark.LinkParagraphID" /> is set, 
            this property is not needed.
            </summary>
    </member>
    <member name="P:Aspose.Pdf.Generator.Bookmark.YPosition">
      <summary>
            Gets or sets a float number that indicates the Y coordination of the bookmark link. The origin of 
            the coordination is the lower-left corner of the page. If the <see cref="P:Aspose.Pdf.Generator.Bookmark.LinkParagraphID" /> is set, 
            this property is not needed.
            </summary>
    </member>
    <member name="P:Aspose.Pdf.Generator.Bookmark.IsExpanded">
      <summary>
            Gets or sets a bool value that indicates whether the bookmark item is expanded if it has child bookmarks.
            </summary>
    </member>
    <member name="T:Aspose.Pdf.Generator.BookmarkIncludeType">
      <summary>
            Enumerates the types of textual area bookmark link section presence
            </summary>
      <remarks>Please refer to the programmer's guide for detailed info.
            </remarks>
    </member>
    <member name="T:Aspose.Pdf.Generator.Bookmarks">
      <summary>
            Represents a collection of bookmarks.
            </summary>
    </member>
    <member name="M:Aspose.Pdf.Generator.Bookmarks.Add(Aspose.Pdf.Generator.Bookmark)">
      <summary>
            Adds a new <see cref="T:Aspose.Pdf.Generator.Bookmark" /> object into the collection.
            </summary>
      <param name="bookmark">The <see cref="T:Aspose.Pdf.Generator.Bookmark" /> object to be added.</param>
    </member>
    <member name="P:Aspose.Pdf.Generator.Bookmarks.Item(System.Int32)">
      <summary>
            Gets or sets a <see cref="T:Aspose.Pdf.Generator.Bookmarks" /> object from the collection according to object index.
            </summary>
    </member>
    <member name="T:Aspose.Pdf.Generator.BorderCornerStyle">
      <summary>
            Enumerates the border corner styles for page border,text border and table border. Note that dash style is 
            not included in this enum. Dash can be set in <see cref="T:Aspose.Pdf.Generator.GraphInfo" />.
            </summary>
    </member>
    <member name="F:Aspose.Pdf.Generator.BorderCornerStyle.None">
      <summary>
            None border style.
            </summary>
    </member>
    <member name="F:Aspose.Pdf.Generator.BorderCornerStyle.Round">
      <summary>
            Round border style.
            </summary>
    </member>
    <member name="T:Aspose.Pdf.Generator.BorderInfo">
      <summary>
             Encapsulates the border info for the <see cref="T:Aspose.Pdf.Generator.Table" />, <see cref="T:Aspose.Pdf.Generator.Row" /> and <see cref="T:Aspose.Pdf.Generator.Cell" />.
             </summary>
      <example>
        <code>
             [C#]
            	Pdf pdf1 = new Pdf();
            
            	Section sec1 = pdf1.Sections.Add();
            
            	Aspose.Pdf.Generator.Table table1 = new Aspose.Pdf.Generator.Table();
            	sec1.Paragraphs.Add(table1);
            	table1.ColumnWidths = "70 2cm";
            
            	Row row1 = table1.Rows.Add();
            
            	Cell cell1Row1 = row1.Cells.Add("ColumnsSpan = 2");
            	cell1Row1.ColumnsSpan = 2;
            	cell1Row1.Border = new BorderInfo((int)BorderSide.All,0.5F);
            
            	Row row2 = table1.Rows.Add();
            
            	Cell cell1Row2 = row2.Cells.Add("cell1");
            	cell1Row2.Border = new BorderInfo((int)BorderSide.All,0.5F);
            
            	Cell cell2Row2 = row2.Cells.Add("cell2");
            	cell2Row2.Border = new BorderInfo((int)BorderSide.All,0.5F,new Aspose.Pdf.Generator.Color("Red"));
            
             pdf1.Save(...);
             
             [Visual Basic]
            	Dim pdf1 As Pdf = New Pdf()
            
            	Dim sec1 As Section = pdf1.Sections.Add()
            
            	Dim table1 As Aspose.Pdf.Generator.Table = New Aspose.Pdf.Generator.Table()
            	sec1.Paragraphs.Add(table1)
            	table1.ColumnWidths = "70 2cm"
            
            	Dim row1 As Row = table1.Rows.Add()
            
            	Dim cell1Row1 As Cell = row1.Cells.Add("ColumnsSpan = 2")
            	cell1Row1.ColumnsSpan = 2
            	cell1Row1.Border = New BorderInfo(CType(BorderSide.All, Integer), 0.5)
            
            	Dim row2 As Row = table1.Rows.Add()
            
            	Dim cell1Row2 As Cell = row2.Cells.Add("cell1")
            	cell1Row2.Border = New BorderInfo(CType(BorderSide.All, Integer), 0.5)
            
            	Dim cell2Row2 As Cell = row2.Cells.Add("cell2")
            	cell2Row2.Border = New BorderInfo(CType(BorderSide.All, Integer), 0.5, New Aspose.Pdf.Generator.Color("Red"))
             
             pdf1.Save(...)
             
             [XML]
            	&lt;Pdf xmlns="Aspose.Pdf"&gt;
            		&lt;Section&gt;
            			&lt;Table ColumnWidths="70 2cm"&gt;
            				&lt;Row&gt;
            					&lt;Cell ColumnsSpan="2"&gt;
            						&lt;Border&gt;
            							&lt;All LineWidth="0.5"&gt;&lt;/All&gt;
            						&lt;/Border&gt;
            						&lt;Text&gt;
            							&lt;Segment&gt;ColumnsSpan = 2&lt;/Segment&gt;
            						&lt;/Text&gt;
            					&lt;/Cell&gt;
            				&lt;/Row&gt;
            				&lt;Row&gt;
            					&lt;Cell&gt;
            						&lt;Border&gt;
            							&lt;All LineWidth="0.5"&gt;&lt;/All&gt;
            						&lt;/Border&gt;
            						&lt;Text&gt;
            							&lt;Segment&gt;cell1&lt;/Segment&gt;
            						&lt;/Text&gt;
            					&lt;/Cell&gt;
            					&lt;Cell&gt;
            						&lt;Border&gt;
            							&lt;All LineWidth="0.5" Color="Red"&gt;&lt;/All&gt;
            						&lt;/Border&gt;
            						&lt;Text&gt;
            							&lt;Segment&gt;cell2&lt;/Segment&gt;
            						&lt;/Text&gt;
            					&lt;/Cell&gt;
            				&lt;/Row&gt;
            			&lt;/Table&gt;
            		&lt;/Section&gt;
            	&lt;/Pdf&gt;
             </code>
      </example>
    </member>
    <member name="M:Aspose.Pdf.Generator.BorderInfo.#ctor">
      <summary>
            Initializes a new instance of the <see cref="T:Aspose.Pdf.Generator.BorderInfo" /> class.
            </summary>
    </member>
    <member name="M:Aspose.Pdf.Generator.BorderInfo.#ctor(System.Int32)">
      <summary>
            Initializes a new instance of the <see cref="T:Aspose.Pdf.Generator.BorderInfo" /> class.
            </summary>
      <param name="borderSide">Indicates the border sides info. For example: (int)(BorderSide.Left | BorderSide.Top).</param>
    </member>
    <member name="M:Aspose.Pdf.Generator.BorderInfo.#ctor(System.Int32,System.Single)">
      <summary>
            Initializes a new instance of the <see cref="T:Aspose.Pdf.Generator.BorderInfo" /> class.
            </summary>
      <param name="borderSide">Indicates the border sides info. For example: (int)(BorderSide.Left | BorderSide.Top).</param>
      <param name="borderWidth">The width of the border.</param>
    </member>
    <member name="M:Aspose.Pdf.Generator.BorderInfo.#ctor(System.Int32,System.Single,Aspose.Pdf.Generator.Color)">
      <summary>
            Initializes a new instance of the <see cref="T:Aspose.Pdf.Generator.BorderInfo" /> class.
            </summary>
      <param name="borderSide">Indicates the border sides info. For example: (int)(BorderSide.Left | BorderSide.Top).</param>
      <param name="borderWidth">The width of the border.</param>
      <param name="borderColor">The border color.</param>
    </member>
    <member name="M:Aspose.Pdf.Generator.BorderInfo.#ctor(System.Int32,Aspose.Pdf.Generator.GraphInfo)">
      <summary>
            Initializes a new instance of the <see cref="T:Aspose.Pdf.Generator.BorderInfo" /> class.
            </summary>
      <param name="borderSide">Indicates the border sides info. For example: (int)(BorderSide.Left | BorderSide.Top).</param>
      <param name="borderFormat">The border format info.</param>
    </member>
    <member name="M:Aspose.Pdf.Generator.BorderInfo.#ctor(System.Int32,Aspose.Pdf.Generator.Color)">
      <summary>
            Initializes a new instance of the <see cref="T:Aspose.Pdf.Generator.BorderInfo" /> class.
            </summary>
      <param name="borderSide">Indicates the border sides info. For example: (int)(BorderSide.Left | BorderSide.Top).</param>
      <param name="borderColor">The border color.</param>
    </member>
    <member name="M:Aspose.Pdf.Generator.BorderInfo.Clone">
      <summary>
            Clones a new BorderInfo object.
            </summary>
      <returns>The new BorderInfo object.</returns>
    </member>
    <member name="M:Aspose.Pdf.Generator.BorderInfo.SetBorderStyle(System.Int32,Aspose.Pdf.Generator.BorderStyle)">
      <summary>
            Sets the style of borders.
            </summary>
      <param name="borderSide">The border sides to be set. For example, 
            (int)(BorderSide.Top | BorderSide.Right).</param>
      <param name="style">The style of the borders.</param>
      <example>
        <code>
            [XML]
            &lt;Text&gt;
            	&lt;TextBorder&gt;
            		&lt;All LineWidth="0.5" BorderStyle="Double" /&gt;
            	&lt;/TextBorder&gt;
            	&lt;Segment&gt;hello world&lt;/Segment&gt;
            &lt;/Text&gt;
            
            [C#]
            Text t = new Text("hello world");
            t.TextInfo.TextBorder = new BorderInfo((int)BorderSide.All,0.5F);
            t.TextInfo.TextBorder.SetBorderStyle((int)BorderSide.All,BorderStyle.Double);
            
            [VB.NET]
            Dim t As Text =  New Text("hello world") 
            t.TextInfo.TextBorder = New BorderInfo(CType(BorderSide.All, Integer),0.5F)
            t.TextInfo.TextBorder.SetBorderStyle(CType(BorderSide.All, Integer),BorderStyle.Double)
            </code>
      </example>
    </member>
    <member name="P:Aspose.Pdf.Generator.BorderInfo.Left">
      <summary>
            Gets or sets a <see cref="T:Aspose.Pdf.Generator.GraphInfo" /> object that indicates left of the border.
            </summary>
    </member>
    <member name="P:Aspose.Pdf.Generator.BorderInfo.Right">
      <summary>
            Gets or sets a <see cref="T:Aspose.Pdf.Generator.GraphInfo" /> object that indicates right of the border.
            </summary>
    </member>
    <member name="P:Aspose.Pdf.Generator.BorderInfo.Top">
      <summary>
            Gets or sets a <see cref="T:Aspose.Pdf.Generator.GraphInfo" /> object that indicates the top border.
            </summary>
    </member>
    <member name="P:Aspose.Pdf.Generator.BorderInfo.Round">
      <summary>
            Gets or sets a <see cref="T:Aspose.Pdf.Generator.GraphInfo" /> object that indicates the round border.
            </summary>
    </member>
    <member name="P:Aspose.Pdf.Generator.BorderInfo.Bottom">
      <summary>
            Gets or sets a <see cref="T:Aspose.Pdf.Generator.GraphInfo" /> object that indicates bottom of the border.
            </summary>
    </member>
    <member name="T:Aspose.Pdf.Generator.BorderSide">
      <summary>
            Enumerates the border sides.
            </summary>
    </member>
    <member name="F:Aspose.Pdf.Generator.BorderSide.None">
      <summary>
            No border.
            </summary>
    </member>
    <member name="F:Aspose.Pdf.Generator.BorderSide.Left">
      <summary>
            Left border.
            </summary>
    </member>
    <member name="F:Aspose.Pdf.Generator.BorderSide.Top">
      <summary>
            Top border.
            </summary>
    </member>
    <member name="F:Aspose.Pdf.Generator.BorderSide.Right">
      <summary>
            Right border.
            </summary>
    </member>
    <member name="F:Aspose.Pdf.Generator.BorderSide.Bottom">
      <summary>
            Bottom border.
            </summary>
    </member>
    <member name="F:Aspose.Pdf.Generator.BorderSide.All">
      <summary>
            All sides borders.It has the same meaning when useing "Box" and will be replaced by "Box" one year later. So, please use "Box" if possible. 
            </summary>
    </member>
    <member name="F:Aspose.Pdf.Generator.BorderSide.Box">
      <summary>
            Four sides borders.
            </summary>
    </member>
    <member name="T:Aspose.Pdf.Generator.BorderStyle">
      <summary>
            Enumerates the border styles for page border,text border and table border. Note that dash style is 
            not included in this enum. Dash can be set in <see cref="T:Aspose.Pdf.Generator.GraphInfo" />.
            </summary>
      <remarks>More border styles will be supported later.</remarks>
    </member>
    <member name="F:Aspose.Pdf.Generator.BorderStyle.None">
      <summary>
            None border style.
            </summary>
    </member>
    <member name="F:Aspose.Pdf.Generator.BorderStyle.Normal">
      <summary>
            Normal border style.
            </summary>
    </member>
    <member name="F:Aspose.Pdf.Generator.BorderStyle.Double">
      <summary>
            Double border style.
            </summary>
    </member>
    <member name="T:Aspose.Pdf.Generator.BoxHorizontalAlignmentType">
      <summary>
            Enumerates the rules for horizontal alignment of floating box.
            </summary>
    </member>
    <member name="F:Aspose.Pdf.Generator.BoxHorizontalAlignmentType.None">
      <summary>
            No alignment type is used. This means the box is positioned using coordinates.
            </summary>
    </member>
    <member name="F:Aspose.Pdf.Generator.BoxHorizontalAlignmentType.Left">
      <summary>
            Left alignment.
            </summary>
    </member>
    <member name="F:Aspose.Pdf.Generator.BoxHorizontalAlignmentType.Center">
      <summary>
            Center alignment.
            </summary>
    </member>
    <member name="F:Aspose.Pdf.Generator.BoxHorizontalAlignmentType.Right">
      <summary>
            Right alignment.
            </summary>
    </member>
    <member name="T:Aspose.Pdf.Generator.BoxHorizontalPositioningType">
      <summary>
            Enumerates the horizontal positioning types for floating box. 
            </summary>
    </member>
    <member name="F:Aspose.Pdf.Generator.BoxHorizontalPositioningType.Margin">
      <summary>
            The distance is measured from the top page margin.
            </summary>
    </member>
    <member name="F:Aspose.Pdf.Generator.BoxHorizontalPositioningType.Page">
      <summary>
            The distance is measured from the top edge of the page.
            </summary>
    </member>
    <member name="F:Aspose.Pdf.Generator.BoxHorizontalPositioningType.Column">
      <summary>
            The distance is measured from the left side of the column.
            </summary>
    </member>
    <member name="T:Aspose.Pdf.Generator.BoxVerticalAlignmentType">
      <summary>
            Enumerates the rules for vertical alignment of floating box.
            </summary>
    </member>
    <member name="F:Aspose.Pdf.Generator.BoxVerticalAlignmentType.None">
      <summary>
            No alignment type is used. This means the box is positioned using coordinates.
            </summary>
    </member>
    <member name="F:Aspose.Pdf.Generator.BoxVerticalAlignmentType.Top">
      <summary>
            Top alignment
            </summary>
    </member>
    <member name="F:Aspose.Pdf.Generator.BoxVerticalAlignmentType.Center">
      <summary>
            Center alignment.
            </summary>
    </member>
    <member name="F:Aspose.Pdf.Generator.BoxVerticalAlignmentType.Bottom">
      <summary>
            Bottom alignment.
            </summary>
    </member>
    <member name="T:Aspose.Pdf.Generator.BoxVerticalPositioningType">
      <summary>
            Enumerates the vertical positioning types for floating box.
            </summary>
    </member>
    <member name="F:Aspose.Pdf.Generator.BoxVerticalPositioningType.Margin">
      <summary>
            The distance is measured from the left page margin.
            </summary>
    </member>
    <member name="F:Aspose.Pdf.Generator.BoxVerticalPositioningType.Page">
      <summary>
            The distance is measured from the left edge of the page.
            </summary>
    </member>
    <member name="F:Aspose.Pdf.Generator.BoxVerticalPositioningType.Paragraph">
      <summary>
            The distance is measured from the top of the paragraph that contains the anchor.
            </summary>
    </member>
    <member name="T:Aspose.Pdf.Generator.Canvas">
      <summary>
            Represents a Canvs <see cref="T:Aspose.Pdf.Generator.Paragraph" /> in a Pdf document.
            </summary>
      <example>
        <code>
            [C#]	
            Aspose.Pdf.Generator.Pdf pdf = new Aspose.Pdf.Generator.Pdf(0;
            Aspose.Pdf.Generator.Section sec = new Aspose.Pdf.Generator.Section();
            pdf.Sections.Add(sec);
            Aspose.Pdf.Generator.Canvas canvas = new Aspose.Pdf.Generator.Canvas();
            canvas.FillColor = new Aspose.Pdf.Generator.Color(0, 128, 128);
            sec.Paragraphs.Add(canvas);
            Aspose.Pdf.Generator.FloatingBox fb1 = new Aspose.Pdf.Generator.FloatingBox();
            fb1.Left = 250F;
            fb1.Top = 150F;
            fb1.Paragraphs.Add(new Aspose.Pdf.Generator.Text("This is a text in floating box."));
            canvas.Paragraphs.Add(fb1);
            Aspose.Pdf.Generator.FloatingBox fb2 = new Aspose.Pdf.Generator.FloatingBox();
            fb2.Left = 50F;
            fb2.Top = 100F;
            Aspose.Pdf.Generator.Image image2 = new Aspose.Pdf.Generator.Image();
            image2.ImageInfo.File = "temp.jpeg";
            image2.ImageInfo.ImageFileType = Aspose.Pdf.Generator.ImageFileType.Jpeg;
            fb2.Paragraphs.Add(image2);
            canvas.Paragraphs.Add(fb2);
            pdf.Save(...);
            
            [Visual Basic]
            Dim pdf1 As Pdf = New Pdf()
            Dim sec1 As Section = pdf1.Sections.Add()
            pdf1.Sections.Add(sec1)
            Dim canvas As Canvas = New Canvas()
            canvas.FillColor = new Aspose.Pdf.Generator.Color(0, 128, 128)
            sec1.Paragraphs.Add(canvas)
            Dim fb1 As FloatingBox = New FloatingBox()
            fb1.Left = 250F
            fb1.Top = 150F
            fb1.Paragraphs.Add(new Aspose.Pdf.Generator.Text("This is a text in floating box."))
            canvas.Paragraphs.Add(fb1)
            Dim fb2 As FloatingBox = New FloatingBox()
            fb2.Left = 50F
            fb2.Top = 100F
            Dim image2 = New Image()
            image2.ImageInfo.File = "temp.jpeg"
            image2.ImageInfo.ImageFileType = Aspose.Pdf.Generator.ImageFileType.Jpeg;
            fb2.Paragraphs.Add(image2)
            canvas.Paragraphs.Add(fb2)
            pdf1.Save(...)
            
            [XML]
            &lt;Pdf xmlns="Aspose.Pdf"&gt;
            	&lt;Section&gt;
            		&lt;Canvas  Width="450" Height="440"&gt;
            			&lt;Border&gt;
            				&lt;Box LineWidth="0.5"&gt;
            				&lt;/Box&gt;
            			&lt;/Border&gt;
            			&lt;FloatingBox Left="250" Top="150"&gt;
            				&lt;Text&gt;
            					&lt;Segment&gt;This is a text in floating box.
            					&lt;/Segment&gt;
            				&lt;/Text&gt;
            			&lt;/FloatingBox&gt;
            			&lt;FloatingBox Left="50" Top="100"&gt;
            				&lt;Image File="F:/temp/temp.002.jpeg" Type="Jpeg"&gt;
            				&lt;/Image&gt;
            			&lt;/FloatingBox&gt;
            		&lt;/Canvas&gt;
            		&lt;Text&gt;
            			&lt;Segment&gt;ADFASFDASDF
            			&lt;/Segment&gt;
            		&lt;/Text&gt;
            	&lt;/Section&gt;
            &lt;/Pdf&gt;
            </code>
      </example>
    </member>
    <member name="M:Aspose.Pdf.Generator.Canvas.#ctor(System.Single,System.Single)">
      <summary>
            Initializes a new instance of the <see cref="T:Aspose.Pdf.Generator.Canvas" /> class with specified width and height.
            </summary>
      <param name="width">The width of the Canvas.</param>
      <param name="height">The height of the Canvas.</param>
    </member>
    <member name="M:Aspose.Pdf.Generator.Canvas.#ctor">
      <summary>
            Initializes a new instance of the <see cref="T:Aspose.Pdf.Generator.Canvas" /> class with default width(available page width) and height(279F).
            </summary>
    </member>
    <member name="M:Aspose.Pdf.Generator.Canvas.Clone">
      <summary>
            Clones a new <see cref="T:Aspose.Pdf.Generator.Canvas" /> object. Paragraphs in the canvas are not cloned.
            </summary>
      <returns>The new <see cref="T:Aspose.Pdf.Generator.Canvas" /> object.</returns>
    </member>
    <member name="P:Aspose.Pdf.Generator.Canvas.BoxWidth">
      <summary>
            Gets or sets a float value that indicates the width of the canvas.
            </summary>
    </member>
    <member name="P:Aspose.Pdf.Generator.Canvas.BoxHeight">
      <summary>
            Gets or sets a float value that indicates the height of the canvas.
            </summary>
    </member>
    <member name="P:Aspose.Pdf.Generator.Canvas.Border">
      <summary>
            Gets or sets a <see cref="T:Aspose.Pdf.Generator.BorderInfo" /> object that indicates the border info of the canvas.
            </summary>
    </member>
    <member name="P:Aspose.Pdf.Generator.Canvas.FillColor">
      <summary>
            Gets or sets a <see cref="T:Aspose.Pdf.Generator.Color" /> object that indicates the background color of the 
            canvas.
            </summary>
    </member>
    <member name="P:Aspose.Pdf.Generator.Canvas.Paragraphs">
      <summary>
            Gets or sets a <see cref="T:Aspose.Pdf.Generator.GraphInfo" /> collection that indicates all paragraphs in the section.
            </summary>
    </member>
    <member name="T:Aspose.Pdf.Generator.CcittSubFormat">
      <summary>
            Summary description for CcittSubFormat.
            </summary>
    </member>
    <member name="F:Aspose.Pdf.Generator.CcittSubFormat.Group31D">
      <summary>
            CCITT group3 1D format
            </summary>
    </member>
    <member name="F:Aspose.Pdf.Generator.CcittSubFormat.Group32D">
      <summary>
            CCITT group3 2D format
            </summary>
    </member>
    <member name="F:Aspose.Pdf.Generator.CcittSubFormat.Group4">
      <summary>
            CCITT group4 format
            </summary>
    </member>
    <member name="F:Aspose.Pdf.Generator.CcittSubFormat.UnKnown">
      <summary>
      </summary>
    </member>
    <member name="T:Aspose.Pdf.Generator.Cell">
      <summary>
             Represents a cell in a <see cref="T:Aspose.Pdf.Generator.Table" />.
             </summary>
      <example>
        <code>
             [C#]
            	Pdf pdf1 = new Pdf();
            
            	Section sec1 = pdf1.Sections.Add();
            
            	Aspose.Pdf.Generator.Table table1 = new Aspose.Pdf.Generator.Table();
            	sec1.Paragraphs.Add(table1);
            	table1.ColumnWidths = "70 2cm";
            
            	Row row1 = table1.Rows.Add();
            
            	Cell cell1Row1 = row1.Cells.Add("ColumnsSpan = 2");
            	cell1Row1.ColumnsSpan = 2;
            	cell1Row1.Border = new BorderInfo((int)BorderSide.All,0.5F);
            
            	Row row2 = table1.Rows.Add();
            
            	Cell cell1Row2 = row2.Cells.Add("cell1");
            	cell1Row2.Border = new BorderInfo((int)BorderSide.All,0.5F);
            
            	Cell cell2Row2 = row2.Cells.Add("cell2");
            	cell2Row2.Border = new BorderInfo((int)BorderSide.All,0.5F,new Aspose.Pdf.Generator.Color("Red"));
            
             pdf1.Save(...);
             
             [Visual Basic]
            	Dim pdf1 As Pdf = New Pdf()
            
            	Dim sec1 As Section = pdf1.Sections.Add()
            
            	Dim table1 As Aspose.Pdf.Generator.Table = New Aspose.Pdf.Generator.Table()
            	sec1.Paragraphs.Add(table1)
            	table1.ColumnWidths = "70 2cm"
            
            	Dim row1 As Row = table1.Rows.Add()
            
            	Dim cell1Row1 As Cell = row1.Cells.Add("ColumnsSpan = 2")
            	cell1Row1.ColumnsSpan = 2
            	cell1Row1.Border = New BorderInfo(CType(BorderSide.All, Integer), 0.5)
            
            	Dim row2 As Row = table1.Rows.Add()
            
            	Dim cell1Row2 As Cell = row2.Cells.Add("cell1")
            	cell1Row2.Border = New BorderInfo(CType(BorderSide.All, Integer), 0.5)
            
            	Dim cell2Row2 As Cell = row2.Cells.Add("cell2")
            	cell2Row2.Border = New BorderInfo(CType(BorderSide.All, Integer), 0.5, New Aspose.Pdf.Generator.Color("Red"))
             
             pdf1.Save(...)
             
             [XML]
            	&lt;Pdf xmlns="Aspose.Pdf"&gt;
            		&lt;Section&gt;
            			&lt;Table ColumnWidths="70 2cm"&gt;
            				&lt;Row&gt;
            					&lt;Cell ColumnsSpan="2"&gt;
            						&lt;Border&gt;
            							&lt;All LineWidth="0.5"&gt;&lt;/All&gt;
            						&lt;/Border&gt;
            						&lt;Text&gt;
            							&lt;Segment&gt;ColumnsSpan = 2&lt;/Segment&gt;
            						&lt;/Text&gt;
            					&lt;/Cell&gt;
            				&lt;/Row&gt;
            				&lt;Row&gt;
            					&lt;Cell&gt;
            						&lt;Border&gt;
            							&lt;All LineWidth="0.5"&gt;&lt;/All&gt;
            						&lt;/Border&gt;
            						&lt;Text&gt;
            							&lt;Segment&gt;cell1&lt;/Segment&gt;
            						&lt;/Text&gt;
            					&lt;/Cell&gt;
            					&lt;Cell&gt;
            						&lt;Border&gt;
            							&lt;All LineWidth="0.5" Color="Red"&gt;&lt;/All&gt;
            						&lt;/Border&gt;
            						&lt;Text&gt;
            							&lt;Segment&gt;cell2&lt;/Segment&gt;
            						&lt;/Text&gt;
            					&lt;/Cell&gt;
            				&lt;/Row&gt;
            			&lt;/Table&gt;
            		&lt;/Section&gt;
            	&lt;/Pdf&gt;
             </code>
      </example>
    </member>
    <member name="M:Aspose.Pdf.Generator.Cell.#ctor">
      <summary>
            Initializes a new instance of the <see cref="T:Aspose.Pdf.Generator.Cell" /> class.
            </summary>
    </member>
    <member name="M:Aspose.Pdf.Generator.Cell.#ctor(Aspose.Pdf.Generator.Table)">
      <summary>
            Initializes a new instance of the <see cref="T:Aspose.Pdf.Generator.Cell" /> class in a table.
            </summary>
      <param name="table">The <see cref="P:Aspose.Pdf.Generator.Cell.Table" /> object where the cell is in.</param>
      <remarks>Please use Cell(Row row) instead.</remarks>
    </member>
    <member name="M:Aspose.Pdf.Generator.Cell.#ctor(Aspose.Pdf.Generator.Row)">
      <summary>
            Initializes a new instance of the <see cref="T:Aspose.Pdf.Generator.Cell" /> class in a table.
            </summary>
      <param name="row">The <see cref="P:Aspose.Pdf.Generator.Cell.Row" /> object where the cell is in.</param>
    </member>
    <member name="M:Aspose.Pdf.Generator.Cell.Clone">
      <summary>
            Clones a new <see cref="T:Aspose.Pdf.Generator.Cell" /> object. This method clones only the format but not contents of the cell.
            </summary>
      <returns>The new cloned <see cref="T:Aspose.Pdf.Generator.Cell" /> object.</returns>
    </member>
    <member name="M:Aspose.Pdf.Generator.Cell.CompleteClone">
      <summary>
            Clones a new <see cref="T:Aspose.Pdf.Generator.Cell" /> object. This method clones both format and contents of the cell.
            </summary>
      <returns>The new cloned <see cref="T:Aspose.Pdf.Generator.Cell" /> object.</returns>
    </member>
    <member name="P:Aspose.Pdf.Generator.Cell.Border">
      <summary>
            Gets or sets a <see cref="T:Aspose.Pdf.Generator.BorderInfo" /> object that indicates the cell's border info.
            </summary>
    </member>
    <member name="P:Aspose.Pdf.Generator.Cell.IsNoBorder">
      <summary>
            Gets or sets a bool value that indicates whether the cell have borders.
            </summary>
    </member>
    <member name="P:Aspose.Pdf.Generator.Cell.BackgroundColor">
      <summary>
            Gets or sets a <see cref="T:Aspose.Pdf.Generator.Color" /> object that indicates the background color of the 
            cell.
            </summary>
    </member>
    <member name="P:Aspose.Pdf.Generator.Cell.BackgroundImageFile">
      <summary>
            Gets or sets a string that indicates the background image file name.
            </summary>
    </member>
    <member name="P:Aspose.Pdf.Generator.Cell.BackgroundImageType">
      <summary>
            Gets or sets a <see cref="T:Aspose.Pdf.Generator.ImageFileType" /> enum that indicates the type of the background image.
            </summary>
    </member>
    <member name="P:Aspose.Pdf.Generator.Cell.BackgroundAlignment">
      <summary>
            Gets or sets a <see cref="T:Aspose.Pdf.Generator.CellBackgroundAlignment" /> enum that indicates the alignment of the background image.
            </summary>
    </member>
    <member name="P:Aspose.Pdf.Generator.Cell.Padding">
      <summary>
            Gets or sets a <see cref="T:Aspose.Pdf.Generator.MarginInfo" /> object that indicates the cell's padding.
            </summary>
    </member>
    <member name="P:Aspose.Pdf.Generator.Cell.FitWidth">
      <summary>
            Obsolete.Please use Table.ColumnWidths instead. 
            Gets or sets a float value that indicates the fit width of the cell.
            The unit is point. In XML,the default unit is point,but cm and inch are also 
            supported. For example,FitWidth="2cm" or FitWidth="2inch".
            </summary>
    </member>
    <member name="P:Aspose.Pdf.Generator.Cell.Paragraphs">
      <summary>
            Gets or sets a <see cref="P:Aspose.Pdf.Generator.Cell.Paragraphs" /> collection that indicates all paragraphs in the cell.
            </summary>
    </member>
    <member name="P:Aspose.Pdf.Generator.Cell.ID">
      <summary>
            Gets or sets a string that indicates the ID of the cell.
            </summary>
    </member>
    <member name="P:Aspose.Pdf.Generator.Cell.ColumnsSpan">
      <summary>
            Gets or sets an int value that indicates how many columns the cell spans.
            </summary>
    </member>
    <member name="P:Aspose.Pdf.Generator.Cell.DefaultCellTextInfo">
      <summary>
            Gets or sets a <see cref="T:Aspose.Pdf.Generator.TextInfo" /> object that indicates the default cell text format info.
            </summary>
    </member>
    <member name="P:Aspose.Pdf.Generator.Cell.VerticalTextRotationAngle">
      <summary>
            Gets or sets a <see cref="T:Aspose.Pdf.Generator.VerticalTextRotationType" /> object that indicates the text rotation 
            angle in floating box or cells.
            </summary>
    </member>
    <member name="P:Aspose.Pdf.Generator.Cell.VerticalAlignment">
      <summary>
            Gets or sets a <see cref="T:Aspose.Pdf.Generator.VerticalAlignmentType" /> object that indicates the vertical alignment type.
            </summary>
    </member>
    <member name="P:Aspose.Pdf.Generator.Cell.RowSpan">
      <summary>
            Gets or sets a int value that indicates how many rows the cell spans.
            </summary>
    </member>
    <member name="P:Aspose.Pdf.Generator.Cell.Alignment">
      <summary>
            Gets or sets a <see cref="T:Aspose.Pdf.Generator.AlignmentType" /> object that indicates the alignment type of the cell.
            </summary>
    </member>
    <member name="P:Aspose.Pdf.Generator.Cell.IsWordWrapped">
      <summary>
            Gets or sets a boolean value that indicates the alignment type of the cell.
            </summary>
    </member>
    <member name="T:Aspose.Pdf.Generator.Cells">
      <summary>
             Represents a collection of <see cref="T:Aspose.Pdf.Generator.Cell" /> objects.
             </summary>
      <example>
        <code>
             [C#]
            	Pdf pdf1 = new Pdf();
            			
            	Section sec1 = pdf1.Sections.Add();
            			 
            	Aspose.Pdf.Generator.Table table1 = new Aspose.Pdf.Generator.Table();
            	sec1.Paragraphs.Add(table1);
            	table1.ColumnWidths = "70 2cm";
            			
            	Row row1 = table1.Rows.Add();
            			
            	Cell cell1Row1 = row1.Cells.Add("ColumnsSpan = 2");
            	cell1Row1.ColumnsSpan = 2;
            	cell1Row1.Border = new BorderInfo((int)BorderSide.All,0.5F);
            
            	Row row2 = table1.Rows.Add();
            			
            	Cell cell1Row2 = row2.Cells.Add("cell1");
            	cell1Row2.Border = new BorderInfo((int)BorderSide.All,0.5F);
            		
            	Cell cell2Row2 = row2.Cells.Add("cell2");
            	cell2Row2.Border = new BorderInfo((int)BorderSide.All,0.5F,new Aspose.Pdf.Generator.Color("Red"));
             		
             pdf1.Save(...);
             
             [Visual Basic]
            	Dim pdf1 As Pdf = New Pdf()
            
            	Dim sec1 As Section = pdf1.Sections.Add()
            
            	Dim table1 As Aspose.Pdf.Generator.Table = New Aspose.Pdf.Generator.Table()
            	sec1.Paragraphs.Add(table1)
            	table1.ColumnWidths = "70 2cm"
            
            	Dim row1 As Row = table1.Rows.Add()
            
            	Dim cell1Row1 As Cell = row1.Cells.Add("ColumnsSpan = 2")
            	cell1Row1.ColumnsSpan = 2
            	cell1Row1.Border = New BorderInfo(CType(BorderSide.All, Integer), 0.5)
            
            	Dim row2 As Row = table1.Rows.Add()
            
            	Dim cell1Row2 As Cell = row2.Cells.Add("cell1")
            	cell1Row2.Border = New BorderInfo(CType(BorderSide.All, Integer), 0.5)
            
            	Dim cell2Row2 As Cell = row2.Cells.Add("cell2")
            	cell2Row2.Border = New BorderInfo(CType(BorderSide.All, Integer), 0.5, New Aspose.Pdf.Generator.Color("Red"))
             
             pdf1.Save(...)
             
             [XML]
            	&lt;Pdf xmlns="Aspose.Pdf"&gt;
            		&lt;Section&gt;
            			&lt;Table ColumnWidths="70 2cm"&gt;
            				&lt;Row&gt;
            					&lt;Cell ColumnsSpan="2"&gt;
            						&lt;Border&gt;
            							&lt;All LineWidth="0.5"&gt;&lt;/All&gt;
            						&lt;/Border&gt;
            						&lt;Text&gt;
            							&lt;Segment&gt;ColumnsSpan = 2&lt;/Segment&gt;
            						&lt;/Text&gt;
            					&lt;/Cell&gt;
            				&lt;/Row&gt;
            				&lt;Row&gt;
            					&lt;Cell&gt;
            						&lt;Border&gt;
            							&lt;All LineWidth="0.5"&gt;&lt;/All&gt;
            						&lt;/Border&gt;
            						&lt;Text&gt;
            							&lt;Segment&gt;cell1&lt;/Segment&gt;
            						&lt;/Text&gt;
            					&lt;/Cell&gt;
            					&lt;Cell&gt;
            						&lt;Border&gt;
            							&lt;All LineWidth="0.5" Color="Red"&gt;&lt;/All&gt;
            						&lt;/Border&gt;
            						&lt;Text&gt;
            							&lt;Segment&gt;cell2&lt;/Segment&gt;
            						&lt;/Text&gt;
            					&lt;/Cell&gt;
            				&lt;/Row&gt;
            			&lt;/Table&gt;
            		&lt;/Section&gt;
            	&lt;/Pdf&gt;
             </code>
      </example>
    </member>
    <member name="M:Aspose.Pdf.Generator.Cells.#ctor">
      <summary>
            Initializes a new instance of the <see cref="T:Aspose.Pdf.Generator.Cells" /> class.
            </summary>
    </member>
    <member name="M:Aspose.Pdf.Generator.Cells.Add(Aspose.Pdf.Generator.Cell)">
      <summary>
            Adds a new <see cref="T:Aspose.Pdf.Generator.Cell" /> object into the collection.
            </summary>
      <param name="cell">The <see cref="T:Aspose.Pdf.Generator.Cell" /> object to be added.</param>
    </member>
    <member name="M:Aspose.Pdf.Generator.Cells.Add">
      <summary>
            Initializes a new instance of the <see cref="T:Aspose.Pdf.Generator.Cell" /> class and add it to the Cells collection.
            </summary>
      <returns>The new <see cref="T:Aspose.Pdf.Generator.Cell" /> object</returns>
    </member>
    <member name="M:Aspose.Pdf.Generator.Cells.Add(System.String)">
      <summary>
            Initializes a new instance of the <see cref="T:Aspose.Pdf.Generator.Cell" /> class,adds a string to the new cell object 
            and then add the Cell object to the Cells collection. 
            </summary>
      <param name="cellString">The string to be added to the cell.</param>
      <returns>The new <see cref="T:Aspose.Pdf.Generator.Cell" /> object.</returns>
    </member>
    <member name="M:Aspose.Pdf.Generator.Cells.Add(System.String,Aspose.Pdf.Generator.TextInfo)">
      <summary>
            Initializes a new instance of the <see cref="T:Aspose.Pdf.Generator.Cell" /> class and add it to the Cells collection. 
            Adds a string with specified text format to the new cell.
            </summary>
      <param name="cellString">The string to be added to the cell.</param>
      <param name="textInfo">The TextInfo object that contains text format information</param>
      <returns>The new <see cref="T:Aspose.Pdf.Generator.Cell" /> object.</returns>
    </member>
    <member name="M:Aspose.Pdf.Generator.Cells.Insert(System.Int32,Aspose.Pdf.Generator.Cell)">
      <summary>
            Inserts a new <see cref="T:Aspose.Pdf.Generator.Cell" /> object into the collection at specified position.
            </summary>
      <param name="index">The zero-based index at which <see cref="T:Aspose.Pdf.Generator.Cell" /> object should be inserted.</param>
      <param name="cell">The <see cref="T:Aspose.Pdf.Generator.Cell" /> object to be inserted.</param>
    </member>
    <member name="M:Aspose.Pdf.Generator.Cells.Insert(Aspose.Pdf.Generator.Cell,Aspose.Pdf.Generator.Cell)">
      <summary>
            Inserts a new <see cref="T:Aspose.Pdf.Generator.Cell" /> object into the collection after specified Cell object.
            </summary>
      <param name="cellToInsertAfter">The <see cref="T:Aspose.Pdf.Generator.Cell" /> object to insert after.</param>
      <param name="newCell">The <see cref="T:Aspose.Pdf.Generator.Cell" /> object to be inserted.</param>
    </member>
    <member name="M:Aspose.Pdf.Generator.Cells.Remove(Aspose.Pdf.Generator.Cell)">
      <summary>
            Removes a <see cref="T:Aspose.Pdf.Generator.Cell" /> object from the collection.
            </summary>
      <param name="cellToRemove">The <see cref="T:Aspose.Pdf.Generator.Cell" /> object to be romoved.</param>
    </member>
    <member name="M:Aspose.Pdf.Generator.Cells.CopyTo(Aspose.Pdf.Generator.Cell[],System.Int32)">
      <summary>
            Copies the elements to a cells array, starting at a specified array index.
            </summary>
      <param name="cellArray">The cells array.</param>
      <param name="index">The start index.</param>
    </member>
    <member name="M:Aspose.Pdf.Generator.Cells.IndexOf(Aspose.Pdf.Generator.Cell)">
      <summary>
            Gets the index of a specified cell in the collection.
            </summary>
      <param name="cell">The specified <see cref="T:Aspose.Pdf.Generator.Cell" /> object.</param>
      <returns>The index value.</returns>
    </member>
    <member name="P:Aspose.Pdf.Generator.Cells.Item(System.Int32)">
      <summary>
            Gets or sets a <see cref="T:Aspose.Pdf.Generator.Cell" /> object from the collection according to cell index.
            </summary>
    </member>
    <member name="P:Aspose.Pdf.Generator.Cells.Item(System.String)">
      <summary>
            Gets or sets a <see cref="T:Aspose.Pdf.Generator.Cell" /> object from the collection according to cell ID.
            </summary>
    </member>
    <member name="T:Aspose.Pdf.Generator.Circle">
      <summary>
             Represents a circle <see cref="T:Aspose.Pdf.Generator.Shape" /> in a Graph.
             </summary>
      <example>
        <code>
             [C#]
            	Pdf pdf1 = new Pdf();
            
            	Section sec1 = pdf1.Sections.Add();
            
            	Graph graph1 = new Graph(sec1,100,400);
            	sec1.Paragraphs.Add(graph1);
            
            	Circle circle1 = new Circle(graph1,200,50,30);
            	graph1.Shapes.Add(circle1);
            	
            	circle1.GraphInfo.Color = new Aspose.Pdf.Generator.Color("Red");
             
             pdf1.Save(...);
             
             [Visual Basic]
            	Dim pdf1 As Pdf = New Pdf()
            
            	Dim sec1 As Section = pdf1.Sections.Add()
            
            	Dim graph1 As Graph = New Graph(sec1, 100, 400)
            	sec1.Paragraphs.Add(graph1)
            
            	Dim circle1 As Circle = New Circle(graph1, 200, 50, 30)
            	graph1.Shapes.Add(circle1)
            
            	circle1.GraphInfo.Color = New Aspose.Pdf.Generator.Color("Red")
             
             pdf1.Save(...)
             
             [XML]
             &lt;?xml version="1.0" encoding="utf-8" ?&gt;
             &lt;Pdf xmlns="Aspose.Pdf"&gt;
            		&lt;Section&gt;
            			&lt;Graph Height="100" Width="400"&gt;
            				&lt;Circle CenterPosition="200 50" Radius="30" Color="Red"&gt;&lt;/Circle&gt;
            			&lt;/Graph&gt;
            		&lt;/Section&gt;
             &lt;/Pdf&gt;
             
             </code>
      </example>
    </member>
    <member name="T:Aspose.Pdf.Generator.ClosedShape">
      <summary>
             Defines shapes that are always closed (contours). For example, Circle, Ellipse, Rectangle, Path.
             </summary>
    </member>
    <member name="M:Aspose.Pdf.Generator.Circle.#ctor">
      <summary>
            Initializes a new instance of the <see cref="T:Aspose.Pdf.Generator.Circle" /> class.
            </summary>
    </member>
    <member name="M:Aspose.Pdf.Generator.Circle.#ctor(System.Single,System.Single,System.Single)">
      <summary>
            Initializes a new instance of the <see cref="T:Aspose.Pdf.Generator.Circle" /> class.
            </summary>
      <param name="xPosition">The x-coordinate of the center of the circle.</param>
      <param name="yPosition">The y-coordinate of the center of the circle.</param>
      <param name="radius">The radius of the circle.</param>
    </member>
    <member name="M:Aspose.Pdf.Generator.Circle.#ctor(Aspose.Pdf.Generator.Graph)">
      <summary>
            Initializes a new instance of the <see cref="T:Aspose.Pdf.Generator.Circle" /> class.
            </summary>
      <param name="graph">The specified <see cref="T:Aspose.Pdf.Generator.Graph" /> object.</param>
      <remarks>
            This constructor can inherit common property values from the specified 
            <see cref="T:Aspose.Pdf.Generator.Graph" /> object.
            </remarks>
    </member>
    <member name="M:Aspose.Pdf.Generator.Circle.#ctor(Aspose.Pdf.Generator.Graph,System.Single,System.Single,System.Single)">
      <summary>
            Initializes a new instance of the <see cref="T:Aspose.Pdf.Generator.Circle" /> class.
            </summary>
      <param name="graph">The specified <see cref="T:Aspose.Pdf.Generator.Graph" /> object.</param>
      <param name="xPosition">The x-coordinate of the center of the circle.</param>
      <param name="yPosition">The y-coordinate of the center of the circle.</param>
      <param name="radius">The radius of the circle.</param>
      <remarks>
            This constructor can inherit common property values from the specified 
            <see cref="T:Aspose.Pdf.Generator.Graph" /> object.
            </remarks>
    </member>
    <member name="P:Aspose.Pdf.Generator.Circle.PosX">
      <summary>
            Gets or sets a float value that indicates the x-coordinate of the center of the circle.
            </summary>
    </member>
    <member name="P:Aspose.Pdf.Generator.Circle.PosY">
      <summary>
            Gets or sets a float value that indicates the y-coordinate of the center of the circle.
            </summary>
    </member>
    <member name="P:Aspose.Pdf.Generator.Circle.Radius">
      <summary>
            Gets or sets a float value that indicates the radius of the circle.
            </summary>
    </member>
    <member name="T:Aspose.Pdf.Generator.CmykColorSpace">
      <summary>
             Represents the CMYK colorspace.
             </summary>
      <remarks>
             Note that you can use the <see cref="M:Aspose.Pdf.Generator.Color.#ctor(System.Byte,System.Byte,System.Byte,System.Byte)" /> constructor to create 
             a color object with CMYK colorspace and need not use this class directly.
             </remarks>
      <example>
        <code>
             [C#]
            	Pdf pdf1 = new Pdf();
            
            	Section sec1 = pdf1.Sections.Add();
            
            	Graph graph1 = new Graph(sec1,200,400);
            	sec1.Paragraphs.Add(graph1);
            
            	float[] posArr = new float[]{100,0,300,0};
            	Line l1 = new Line(graph1,posArr);
            	l1.GraphInfo.Color = new Aspose.Pdf.Generator.Color("Red");
            	graph1.Shapes.Add(l1);
            	
            	posArr = new float[]{100,50,300,50};
            	Line l2 = new Line(graph1,posArr);
            	l2.GraphInfo.Color = new Aspose.Pdf.Generator.Color(0,128,128);
            	graph1.Shapes.Add(l2);
            	
            	posArr = new float[]{100,100,300,100};
            	Line l3 = new Line(graph1,posArr);
            	l3.GraphInfo.Color = new Aspose.Pdf.Generator.Color(0,128,64,0);
            	graph1.Shapes.Add(l3);
            
            	posArr = new float[]{100,150,300,150};
            	Line l4 = new Line(graph1,posArr);
            	l4.GraphInfo.Color = new Aspose.Pdf.Generator.Color((byte)140);
            	graph1.Shapes.Add(l4);
             
             pdf1.Save(...);
             
             [Visual Basic]
            	Dim pdf1 As Pdf = New Pdf()
            
            	Dim sec1 As Section = pdf1.Sections.Add()
            
            	Dim graph1 As Graph = New Graph(sec1, 200, 400)
            	sec1.Paragraphs.Add(graph1)
            
            	Dim posArr As Single() = New Single() {100, 0, 300, 0}
            
            	Dim l1 As Line = New Line(graph1, posArr)
            	l1.GraphInfo.Color = New Aspose.Pdf.Generator.Color("Red")
            	graph1.Shapes.Add(l1)
            
            	posArr = New Single() {100, 50, 300, 50}
            
            	Dim l2 As Line = New Line(graph1, posArr)
            	l2.GraphInfo.Color = New Aspose.Pdf.Generator.Color(0, 128, 128)
            	graph1.Shapes.Add(l2)
            
            	posArr = New Single() {100, 100, 300, 100}
            
            	Dim l3 As Line = New Line(graph1, posArr)
            	l3.GraphInfo.Color = New Aspose.Pdf.Generator.Color(0, 128, 64, 0)
            	graph1.Shapes.Add(l3)
            
            	posArr = New Single() {100, 150, 300, 150}
            
            	Dim l4 As Line = New Line(graph1, posArr)
            	l4.GraphInfo.Color = New Aspose.Pdf.Generator.Color(CType(140,Byte))
            	graph1.Shapes.Add(l4)
             
             pdf1.Save(...)
             
             [XML]
             &lt;?xml version="1.0" encoding="utf-8" ?&gt;
             &lt;Pdf xmlns="Aspose.Pdf"&gt;
            		&lt;Section&gt;
            			&lt;Graph Height="200" Width="400"&gt;
            				&lt;Line Color="Red" Position="100 0 300 0" /&gt;
            				&lt;Line Color="rgb 0 128 128" Position="100 50 300 50" /&gt;
            				&lt;Line Color="cmyk 0 128 64 0" Position="100 100 300 100" /&gt;
            				&lt;Line Color="gray 140" Position="100 150 300 150" /&gt;
            			&lt;/Graph&gt;
            		&lt;/Section&gt;
             &lt;/Pdf&gt;
             
             </code>
      </example>
    </member>
    <member name="M:Aspose.Pdf.Generator.CmykColorSpace.#ctor">
      <summary>
      </summary>
    </member>
    <member name="P:Aspose.Pdf.Generator.CmykColorSpace.C">
      <summary>
            Represents a <see cref="T:System.Byte" /> value (0-255) that indicates the cyan component of the CMYK colorspace. 
            </summary>
    </member>
    <member name="P:Aspose.Pdf.Generator.CmykColorSpace.M">
      <summary>
            Represents a <see cref="T:System.Byte" /> value (0-255) that indicates the magenta component of the CMYK colorspace. 
            </summary>
    </member>
    <member name="P:Aspose.Pdf.Generator.CmykColorSpace.Y">
      <summary>
            Represents a <see cref="T:System.Byte" /> value (0-255) that indicates the yellow component of the CMYK colorspace. 
            </summary>
    </member>
    <member name="P:Aspose.Pdf.Generator.CmykColorSpace.K">
      <summary>
            Represents a <see cref="T:System.Byte" /> value (0-255) that indicates the black component of the CMYK colorspace. 
            </summary>
    </member>
    <member name="T:Aspose.Pdf.Generator.Color">
      <summary>
             Represents the colorspaces used in Aspose.Pdf.Generator including <see cref="P:Aspose.Pdf.Generator.Color.RgbColorSpace" />, <see cref="P:Aspose.Pdf.Generator.Color.CmykColorSpace" /> and <see cref="P:Aspose.Pdf.Generator.Color.GrayColorSpace" />.
             </summary>
      <example>
        <code>
             [C#]
            	Pdf pdf1 = new Pdf();
            
            	Section sec1 = pdf1.Sections.Add();
            
            	Graph graph1 = new Graph(sec1,200,400);
            	sec1.Paragraphs.Add(graph1);
            
            	float[] posArr = new float[]{100,0,300,0};
            	Line l1 = new Line(graph1,posArr);
            	l1.GraphInfo.Color = new Aspose.Pdf.Generator.Color("Red");
            	graph1.Shapes.Add(l1);
            	
            	posArr = new float[]{100,50,300,50};
            	Line l2 = new Line(graph1,posArr);
            	l2.GraphInfo.Color = new Aspose.Pdf.Generator.Color(0,128,128);
            	graph1.Shapes.Add(l2);
            	
            	posArr = new float[]{100,100,300,100};
            	Line l3 = new Line(graph1,posArr);
            	l3.GraphInfo.Color = new Aspose.Pdf.Generator.Color(0,128,64,0);
            	graph1.Shapes.Add(l3);
            
            	posArr = new float[]{100,150,300,150};
            	Line l4 = new Line(graph1,posArr);
            	l4.GraphInfo.Color = new Aspose.Pdf.Generator.Color((byte)140);
            	graph1.Shapes.Add(l4);
             
             pdf1.Save(...);
             
             [Visual Basic]
            	Dim pdf1 As Pdf = New Pdf()
            
            	Dim sec1 As Section = pdf1.Sections.Add()
            
            	Dim graph1 As Graph = New Graph(sec1, 200, 400)
            	sec1.Paragraphs.Add(graph1)
            
            	Dim posArr As Single() = New Single() {100, 0, 300, 0}
            
            	Dim l1 As Line = New Line(graph1, posArr)
            	l1.GraphInfo.Color = New Aspose.Pdf.Generator.Color("Red")
            	graph1.Shapes.Add(l1)
            
            	posArr = New Single() {100, 50, 300, 50}
            
            	Dim l2 As Line = New Line(graph1, posArr)
            	l2.GraphInfo.Color = New Aspose.Pdf.Generator.Color(0, 128, 128)
            	graph1.Shapes.Add(l2)
            
            	posArr = New Single() {100, 100, 300, 100}
            
            	Dim l3 As Line = New Line(graph1, posArr)
            	l3.GraphInfo.Color = New Aspose.Pdf.Generator.Color(0, 128, 64, 0)
            	graph1.Shapes.Add(l3)
            
            	posArr = New Single() {100, 150, 300, 150}
            
            	Dim l4 As Line = New Line(graph1, posArr)
            	l4.GraphInfo.Color = New Aspose.Pdf.Generator.Color(CType(140,Byte))
            	graph1.Shapes.Add(l4)
             
             pdf1.Save(...)
             
             [XML]
             &lt;?xml version="1.0" encoding="utf-8" ?&gt;
             &lt;Pdf xmlns="Aspose.Pdf"&gt;
            		&lt;Section&gt;
            			&lt;Graph Height="200" Width="400"&gt;
            				&lt;Line Color="Red" Position="100 0 300 0" /&gt;
            				&lt;Line Color="rgb 0 128 128" Position="100 50 300 50" /&gt;
            				&lt;Line Color="cmyk 0 128 64 0" Position="100 100 300 100" /&gt;
            				&lt;Line Color="gray 140" Position="100 150 300 150" /&gt;
            			&lt;/Graph&gt;
            		&lt;/Section&gt;
             &lt;/Pdf&gt;
             
             </code>
      </example>
    </member>
    <member name="M:Aspose.Pdf.Generator.Color.#ctor">
      <summary>
            Initializes a new instance of the <see cref="T:Aspose.Pdf.Generator.Color" /> class.
            </summary>
    </member>
    <member name="M:Aspose.Pdf.Generator.Color.#ctor(System.Byte)">
      <summary>
            Initializes a new instance of the <see cref="T:Aspose.Pdf.Generator.Color" /> class with <see cref="P:Aspose.Pdf.Generator.Color.GrayColorSpace" />.
            </summary>
      <param name="grayValue">The gray value of the gray colorspace.</param>
    </member>
    <member name="M:Aspose.Pdf.Generator.Color.#ctor(System.Byte,System.Byte,System.Byte)">
      <summary>
            Initializes a new instance of the <see cref="T:Aspose.Pdf.Generator.Color" /> class with RgbColorSpace.
            </summary>
      <param name="r">The red color value.</param>
      <param name="g">The green color value.</param>
      <param name="b">The blue color value.</param>
    </member>
    <member name="M:Aspose.Pdf.Generator.Color.#ctor(System.Byte,System.Byte,System.Byte,System.Byte)">
      <summary>
            Initializes a new instance of the <see cref="T:Aspose.Pdf.Generator.Color" /> class with <see cref="P:Aspose.Pdf.Generator.Color.CmykColorSpace" />.
            </summary>
      <param name="c">The cyan value.</param>
      <param name="m">The magenta value.</param>
      <param name="y">The yellow value.</param>
      <param name="k">The black value.</param>
    </member>
    <member name="M:Aspose.Pdf.Generator.Color.#ctor(System.String)">
      <summary>
            Initializes a new instance of the <see cref="T:Aspose.Pdf.Generator.Color" /> class with RgbColorSpace from specified color name.
            </summary>
      <param name="colorName">The color name. It can be any name in System.Drawing.Color or format like '#0000ff'.</param>
    </member>
    <member name="P:Aspose.Pdf.Generator.Color.ColorSpaceType">
      <summary>
            Represents a <see cref="P:Aspose.Pdf.Generator.Color.ColorSpaceType" /> object that indicates the colorspace type.
            </summary>
    </member>
    <member name="P:Aspose.Pdf.Generator.Color.RgbColorSpace">
      <summary>
            Represents a <see cref="T:System.Drawing.Color" /> object that indicates the RGB colorspace. The alpha component of the ARGB will be ignored.
            Note that you can use the <see cref="M:Aspose.Pdf.Generator.Color.#ctor(System.Byte,System.Byte,System.Byte)" /> constructor to create 
            a color object with RGB colorspace and need not use this class directly.
            </summary>
    </member>
    <member name="P:Aspose.Pdf.Generator.Color.CmykColorSpace">
      <summary>
            Represents a <see cref="P:Aspose.Pdf.Generator.Color.CmykColorSpace" /> object that indicates the CMYK colorspace.
            Note that you can use the <see cref="M:Aspose.Pdf.Generator.Color.#ctor(System.Byte,System.Byte,System.Byte,System.Byte)" /> constructor to create 
            a color object with CMYK colorspace and need not use this class directly.
            </summary>
    </member>
    <member name="P:Aspose.Pdf.Generator.Color.GrayColorSpace">
      <summary>
            Represents a <see cref="P:Aspose.Pdf.Generator.Color.GrayColorSpace" /> object that indicates the gray colorspace.
            Note that you can use the <see cref="M:Aspose.Pdf.Generator.Color.#ctor(System.Byte)" /> constructor to create 
            a color object with gray colorspace and need not use this class directly.
            </summary>
    </member>
    <member name="P:Aspose.Pdf.Generator.Color.PatternColorSpace">
      <summary>
            Represents a <see cref="P:Aspose.Pdf.Generator.Color.GrayColorSpace" /> object that indicates the pattern colorspace.        
            </summary>
    </member>
    <member name="T:Aspose.Pdf.Generator.ColorSpaceType">
      <summary>
            Enumerates the colorspace types.
            </summary>
    </member>
    <member name="F:Aspose.Pdf.Generator.ColorSpaceType.Cmyk">
      <summary>
            CMYK colorspace.
            </summary>
    </member>
    <member name="F:Aspose.Pdf.Generator.ColorSpaceType.Gray">
      <summary>
            Gray colorspace.
            </summary>
    </member>
    <member name="F:Aspose.Pdf.Generator.ColorSpaceType.Rgb">
      <summary>
            RGB colorspace.
            </summary>
    </member>
    <member name="F:Aspose.Pdf.Generator.ColorSpaceType.Unknown">
      <summary>
            Unkown colorspace.
            </summary>
    </member>
    <member name="F:Aspose.Pdf.Generator.ColorSpaceType.Pattern">
      <summary>
            Pattern colorspace.
            </summary>
    </member>
    <member name="T:Aspose.Pdf.Generator.ColouredTilingPattern">
      <summary>
        <p>Realizes coloured tiling pattern that is tiling pattern contains multicoloured shapes or text or image.</p>
        <p>Typical usages are the following:</p>
        <xmp>
             [C#]
             Pdf pdf = new Pdf();
             Section sec = pdf.Sections.Add();
             Graph graph = new Graph(sec, 100, 700);
             sec.Paragraphs.Add(graph);
             Rectangle rect = new Rectangle(0, 600, 200, 100);
             graph.getShapes().add(rect);
             int xStep = 8;
             int yStep = 8;
             Graph tile1 = new Graph(xStep, yStep);
             tile1.PosX = 0;
             tile1.PosY = 0;
             Line line = new Line(new float [] {xStep/2, yStep, xStep/2, 0});
             line.GraphInfo.Color = new Color((short)255, (short)0, (short)0);
             line.GraphInfo.LineWidth = 0.1f;
             tile1.Shapes.Add(line);
             line = new Line(new float [] {xStep, yStep/2, 0, yStep/2});
             line.GraphInfo.Color = new Color(short)0, (short)122, (short)123);
             line.GraphInfo.LineWidth = 0.1f;
             tile1.Shapes.Add(line);
             pdf.save(....);
             </xmp>
      </summary>
    </member>
    <member name="T:Aspose.Pdf.Generator.TilingPattern">
      <summary>
             Abstract class for all tiling patterns.
             </summary>
    </member>
    <member name="T:Aspose.Pdf.Generator.PatternColorSpace">
      <summary>
             Abstract class for all pattern fills.
             </summary>
    </member>
    <member name="M:Aspose.Pdf.Generator.PatternColorSpace.#ctor(Aspose.Pdf.Generator.PatternType)">
      <summary>
             Initializes a new instance of the <see cref="T:Aspose.Pdf.PatternColorSpace" /> class with <see cref="T:Aspose.Pdf.PatternType" />.
             </summary>
    </member>
    <member name="M:Aspose.Pdf.Generator.PatternColorSpace.GetPatternType">
      <summary>
             Returns a pattern type: tiling or shading.
             </summary>
    </member>
    <member name="M:Aspose.Pdf.Generator.PatternColorSpace.SetPatternType(Aspose.Pdf.Generator.PatternType)">
      <summary>
             Sets a pattern type: tiling or shading.
             </summary>
    </member>
    <member name="M:Aspose.Pdf.Generator.PatternColorSpace.GetxPos">
      <summary>
             Returns translation in x axis of the tile content relative to tile box
             </summary>
    </member>
    <member name="M:Aspose.Pdf.Generator.PatternColorSpace.SetxPos(System.Single)">
      <summary>
             Sets translation in x axis of the tile content relative to tile box
             </summary>
    </member>
    <member name="M:Aspose.Pdf.Generator.PatternColorSpace.GetyPos">
      <summary>
             Returns translation in y axis of the tile content relative to tile box
             </summary>
    </member>
    <member name="M:Aspose.Pdf.Generator.PatternColorSpace.SetyPos(System.Single)">
      <summary>
             Sets translation in y axis of the tile content relative to tile box
             </summary>
    </member>
    <member name="M:Aspose.Pdf.Generator.PatternColorSpace.GetxScale">
      <summary>
             Returns scale in x axis of the tile content relative to tile box
             </summary>
    </member>
    <member name="M:Aspose.Pdf.Generator.PatternColorSpace.SetxScale(System.Single)">
      <summary>
             Sets scale in x axis of the tile content relative to tile box
             </summary>
    </member>
    <member name="M:Aspose.Pdf.Generator.PatternColorSpace.GetyScale">
      <summary>
             Returns scale in y axis of the tile content relative to tile box
             </summary>
    </member>
    <member name="M:Aspose.Pdf.Generator.PatternColorSpace.SetyScale(System.Single)">
      <summary>
             Sets scale in y axis of the tile content relative to tile box
             </summary>
    </member>
    <member name="M:Aspose.Pdf.Generator.PatternColorSpace.GetRotationAngle">
      <summary>
             Returns rotation angle of the tile content relative to tile box
             </summary>
    </member>
    <member name="M:Aspose.Pdf.Generator.PatternColorSpace.SetRotationAngle(System.Single)">
      <summary>
             Sets rotation angle of the tile content relative to tile box
             </summary>
    </member>
    <member name="M:Aspose.Pdf.Generator.PatternColorSpace.GetSkewX">
      <summary>
             Returns skew of x axis of the tile content relative to tile box
             </summary>
    </member>
    <member name="M:Aspose.Pdf.Generator.PatternColorSpace.SetSkewX(System.Single)">
      <summary>
             Sets skew of x axis of the tile content relative to tile box
             </summary>
    </member>
    <member name="M:Aspose.Pdf.Generator.PatternColorSpace.GetSkewY">
      <summary>
             Returns skew of y axis of the tile content relative to tile box
             </summary>
    </member>
    <member name="M:Aspose.Pdf.Generator.PatternColorSpace.SetSkewY(System.Single)">
      <summary>
             Sets skew of y axis of the tile content relative to tile box
             </summary>
    </member>
    <member name="M:Aspose.Pdf.Generator.TilingPattern.#ctor(Aspose.Pdf.Generator.PaintType)">
      <summary>
             Initializes a new instance of the <see cref="T:Aspose.Pdf.TilingPattern" /> class with <see cref="T:Aspose.Pdf.PaintType" />.
             </summary>
    </member>
    <member name="M:Aspose.Pdf.Generator.TilingPattern.GetPaintType">
      <summary>
             Returns a paint type.
             </summary>
    </member>
    <member name="M:Aspose.Pdf.Generator.TilingPattern.GetTilingType">
      <summary>
             Returns a type of tiling: coloured or uncoloured.
             </summary>
    </member>
    <member name="M:Aspose.Pdf.Generator.TilingPattern.GetWidth">
      <summary>
             Returns a width of the tile.
             </summary>
    </member>
    <member name="M:Aspose.Pdf.Generator.TilingPattern.GetHeight">
      <summary>
             Returns a height of the tile.
             </summary>
    </member>
    <member name="M:Aspose.Pdf.Generator.TilingPattern.SetHeight(System.Single)">
      <summary>
             Sets a height of the tile.
             </summary>
    </member>
    <member name="M:Aspose.Pdf.Generator.TilingPattern.SetWidth(System.Single)">
      <summary>
             Sets a width of the tile.
             </summary>
    </member>
    <member name="M:Aspose.Pdf.Generator.TilingPattern.GetxStep">
      <summary>
             Returns a step between tiles in x axis.
             </summary>
    </member>
    <member name="M:Aspose.Pdf.Generator.TilingPattern.SetxStep(System.Single)">
      <summary>
             Sets a step between tiles in x axis.
             </summary>
    </member>
    <member name="M:Aspose.Pdf.Generator.TilingPattern.GetyStep">
      <summary>
             Returns step between tiles in y axis.
             </summary>
    </member>
    <member name="M:Aspose.Pdf.Generator.TilingPattern.SetyStep(System.Single)">
      <summary>
             Sets a step between tiles in y axis.
             </summary>
    </member>
    <member name="M:Aspose.Pdf.Generator.TilingPattern.GetTile">
      <summary>
             Returns a list of <see cref="T:Aspose.Pdf.Paragraph" />s represented tile content.
             </summary>
    </member>
    <member name="M:Aspose.Pdf.Generator.TilingPattern.SetTile(Aspose.Pdf.Generator.Paragraphs)">
      <summary>
             Sets a list of <see cref="T:Aspose.Pdf.Paragraph" />s represented tile content.
             </summary>
    </member>
    <member name="M:Aspose.Pdf.Generator.ColouredTilingPattern.#ctor">
      <summary>
             Initializes a new instance of the <see cref="T:Aspose.Pdf.ColouredTilingPattern" /></summary>
    </member>
    <member name="M:Aspose.Pdf.Generator.ColouredTilingPattern.CompleteClone">
      <summary>
             Copies all fields. Tile is copied by value.
             </summary>
    </member>
    <member name="M:Aspose.Pdf.Generator.ColouredTilingPattern.Clone">
      <summary>
             Copies all fields. Tile is copied by reference.
             Shell be used for patterns that use one tile but different colors or matrix or steps or width, height.
             </summary>
    </member>
    <member name="T:Aspose.Pdf.Generator.ColumnAdjustmentType">
      <summary>
            Enumerates adjustment types for determining the column widths of table.
            </summary>
    </member>
    <member name="F:Aspose.Pdf.Generator.ColumnAdjustmentType.AutoFitToContent">
      <summary>
            AutoFit to content of cell.
            </summary>
    </member>
    <member name="F:Aspose.Pdf.Generator.ColumnAdjustmentType.AutoFitToWindow">
      <summary>
            AutoFit to page width.
            </summary>
    </member>
    <member name="F:Aspose.Pdf.Generator.ColumnAdjustmentType.Customized">
      <summary>
            Specified  by <see cref="P:Aspose.Pdf.Generator.Table.ColumnWidths" /> manually.
            </summary>
    </member>
    <member name="T:Aspose.Pdf.Generator.ColumnInfo">
      <summary>
            Encapsulates info for page columns.
            </summary>
      <example>
        <code>
            [C#]
            //Instantiate a Pdf object
            Pdf pdf1 = new Pdf(); 
            
            //Add a section to the Pdf
            Section sec1 = pdf1.Sections.Add();
            
            //Add two columns in the section
            sec1.ColumnInfo.ColumnCount = 2;
            
            //Set the spacing between the columns
            sec1.ColumnInfo.ColumnSpacing = "15";
            
            //Set the widths of the columns
            sec1.ColumnInfo.ColumnWidths = "250 150";
            ... 
            
            //Save the Pdf
            pdf1.Save(...);
            
            [Visual Basic]
            'Instantiate a Pdf object
            Dim pdf1 As Pdf = New Pdf
            
            'Add a section to the Pdf
            Dim sec1 As Section = pdf1.Sections.Add()
            
            'Add two columns in the section
            sec1.ColumnInfo.ColumnCount = 2
            
            'Set the spacing between the columns
            sec1.ColumnInfo.ColumnSpacing = "15"
            
            'Set the widths of the columns
            sec1.ColumnInfo.ColumnWidths = "250 150"
            ...
            
            'Save the Pdf
            pdf1.Save(...)
            
            [XML]
            &lt;?xml version="1.0" encoding="utf-8" ?&gt; 
            &lt;Pdf xmlns="Aspose.Pdf"&gt; 
                 &lt;Section ColumnCount="2" ColumnSpacing="15" ColumnWidths="250 150"&gt; 
                     ...
                 &lt;/Section&gt; 
            &lt;/Pdf&gt;
            </code>
      </example>
    </member>
    <member name="M:Aspose.Pdf.Generator.ColumnInfo.#ctor">
      <summary>
            Initializes a new instance of the <see cref="T:Aspose.Pdf.Generator.ColumnInfo" /> class.
            </summary>
    </member>
    <member name="P:Aspose.Pdf.Generator.ColumnInfo.ColumnCount">
      <summary>
            Gets or sets a int value that indicates the number of columns in each page in the section.
            </summary>
    </member>
    <member name="P:Aspose.Pdf.Generator.ColumnInfo.ColumnWidths">
      <summary>
            Gets or sets a string that contains the width of columns in each page in the section. 
            The value of each column should be separated by blank.The default unit is point,
            but cm, inch and percentage of available width are also supported.For example,"120 2.5cm 1.5inch",or "60% 40%". The max column number 
            is 16.
            </summary>
      <remarks>
            If this property is not set, column width will be calculated automatically according to <see cref="P:Aspose.Pdf.Generator.ColumnInfo.ColumnCount" /> 
            and <see cref="P:Aspose.Pdf.Generator.ColumnInfo.ColumnSpacing" />.
            </remarks>
    </member>
    <member name="P:Aspose.Pdf.Generator.ColumnInfo.ColumnSpacing">
      <summary>
            Gets or sets a string that contains the spacing between columns in each page in the section. 
            The value of each spacing should be separated by blank. The default unit is point,
            but cm and inch are also supported.For example,"120 2.5cm 1.5inch".
            </summary>
      <remarks>
            If this property is not set, default value 1.25cm will be used for each spacing.
            </remarks>
    </member>
    <member name="T:Aspose.Pdf.Generator.CompareValidator">
      <summary>
             Compares the value entered by the user in an input control with the value entered in another input control, or with a constant value.
             </summary>
      <example>
        <code>
             [C#]
            	Pdf pdf1 = new Pdf();
            
             Aspose.Pdf.Generator.Section Section1 = pdf1.Sections.Add();
             FormField textBox = new FormField();
             textBox.FormFieldType = FormFieldType.Text;
             textBox.FieldName = "AText";
             textBox.FormWidth = 80;
             textBox.FormHeight = 20;
            
             CompareValidator validator = new CompareValidator();
             validator.ValueToCompare = "100";
             validator.Operator = ValidationCompareOperator.LessThan;
             validator.ErrorMessage = "Incorrect Value";
             textBox.Validators.Add(validator);
            
             Section1.Paragraphs.Add(textBox);
             
             pdf1.Save(...);
             </code>
      </example>
    </member>
    <member name="T:Aspose.Pdf.Generator.BaseValidator">
      <summary>
            Base class for validators
            </summary>
    </member>
    <member name="P:Aspose.Pdf.Generator.BaseValidator.ErrorMessage">
      <summary>
            Gets or sets the text for the error message displayed in a pop-up window when validation fails.
            </summary>
    </member>
    <member name="M:Aspose.Pdf.Generator.CompareValidator.Clone">
      <summary>
            Clones a new <see cref="T:Aspose.Pdf.Generator.CompareValidator" /> object. This method clones only the format but not contents of the cell.
            </summary>
      <returns>The new cloned <see cref="T:Aspose.Pdf.Generator.CompareValidator" /> object.</returns>
    </member>
    <member name="P:Aspose.Pdf.Generator.CompareValidator.ControlToCompare">
      <summary>
            Gets or sets the input control FieldName to compare with the input control being validated.
            </summary>
    </member>
    <member name="P:Aspose.Pdf.Generator.CompareValidator.Operator">
      <summary>
            Gets or sets the comparison operation to perform.
            </summary>
    </member>
    <member name="T:Aspose.Pdf.Generator.Curve">
      <summary>
             Represents a curve <see cref="T:Aspose.Pdf.Generator.Shape" /> in a Graph.
             </summary>
      <example>
        <code>
             [C#]
            	Pdf pdf1 = new Pdf();
            
            	Section sec1 = pdf1.Sections.Add();
            
            	Graph graph1 = new Graph(sec1,100,400);
            	sec1.Paragraphs.Add(graph1);
            
            	float[] posArr = new float[]{0,0,200,80,300,40,350,90};
            	Curve curve1 = new Curve(graph1,posArr);
            	graph1.Shapes.Add(curve1);
            
            	pdf1.Save(...);
            	
            	[Visual Basic]
            	Dim pdf1 As Pdf = New Pdf()
            
            	Dim sec1 As Section = pdf1.Sections.Add()
            
            	Dim graph1 As Graph = New Graph(sec1, 100, 400)
            	sec1.Paragraphs.Add(graph1)
            
            	Dim posArr() As Single = New Single() {0, 0, 200, 80, 300, 40, 350, 90}
            
            	Dim curve1 As Curve = New Curve(graph1, posArr)
            	graph1.Shapes.Add(curve1)
            	
            	pdf1.Save(...)
            	
            	[XML]
            	&lt;?xml version="1.0" encoding="utf-8" ?&gt;
            	&lt;Pdf xmlns="Aspose.Pdf"&gt;
            		&lt;Section&gt;
            			&lt;Graph Height="100" Width="400"&gt;
            				&lt;Curve Position="0 0 200 80 300 40 350 90" /&gt;
            			&lt;/Graph&gt;
            		&lt;/Section&gt;
            	&lt;/Pdf&gt;
             </code>
      </example>
    </member>
    <member name="M:Aspose.Pdf.Generator.Curve.#ctor">
      <summary>
            Initializes a new instance of the <see cref="T:Aspose.Pdf.Generator.Curve" /> class.
            </summary>
    </member>
    <member name="M:Aspose.Pdf.Generator.Curve.#ctor(System.Single[])">
      <summary>
            Initializes a new instance of the <see cref="T:Aspose.Pdf.Generator.Curve" /> class.
            </summary>
      <param name="positionArr">The position array of the control points of the curve.There should be four 
            control points,so the length of the array should be eight.</param>
    </member>
    <member name="M:Aspose.Pdf.Generator.Curve.#ctor(Aspose.Pdf.Generator.Graph)">
      <summary>
            Initializes a new instance of the <see cref="T:Aspose.Pdf.Generator.Curve" /> class.
            </summary>
      <param name="graph">The graph object.</param>
      <remarks>
            This constructor can inherit common property values from the specified 
            <see cref="T:Aspose.Pdf.Generator.Graph" /> object.
            </remarks>
    </member>
    <member name="M:Aspose.Pdf.Generator.Curve.#ctor(Aspose.Pdf.Generator.Graph,System.Single[])">
      <summary>
            Initializes a new instance of the <see cref="T:Aspose.Pdf.Generator.Curve" /> class.
            </summary>
      <param name="graph">The graph object.</param>
      <param name="positionArr">The position array of the control points of the curve.There should be four 
            control points,so the length of the array should be eight.</param>
      <remarks>
            This constructor can inherit common property values from the specified 
            <see cref="T:Aspose.Pdf.Generator.Graph" /> object.
            </remarks>
    </member>
    <member name="P:Aspose.Pdf.Generator.Curve.Position1X">
      <summary>
            Gets or sets a float value that indicates the x-coordinate of the control point 1 of the curve.
            </summary>
    </member>
    <member name="P:Aspose.Pdf.Generator.Curve.Position1Y">
      <summary>
            Gets or sets a float value that indicates the y-coordinate of the control point 1 of the curve.
            </summary>
    </member>
    <member name="P:Aspose.Pdf.Generator.Curve.Position2X">
      <summary>
            Gets or sets a float value that indicates the x-coordinate of the control point 2 of the curve.
            </summary>
    </member>
    <member name="P:Aspose.Pdf.Generator.Curve.Position2Y">
      <summary>
            Gets or sets a float value that indicates the y-coordinate of the control point 2 of the curve.
            </summary>
    </member>
    <member name="P:Aspose.Pdf.Generator.Curve.Position3X">
      <summary>
            Gets or sets a float value that indicates the x-coordinate of the control point 3 of the curve.
            </summary>
    </member>
    <member name="P:Aspose.Pdf.Generator.Curve.Position3Y">
      <summary>
            Gets or sets a float value that indicates the y-coordinate of the control point 3 of the curve.
            </summary>
    </member>
    <member name="P:Aspose.Pdf.Generator.Curve.Position4X">
      <summary>
            Gets or sets a float value that indicates the x-coordinate of the control point 4 of the curve.
            </summary>
    </member>
    <member name="P:Aspose.Pdf.Generator.Curve.Position4Y">
      <summary>
            Gets or sets a float value that indicates the y-coordinate of the control point 4 of the curve.
            </summary>
    </member>
    <member name="T:Aspose.Pdf.Generator.CustomValidator">
      <summary>
             Performs user-defined validation on an input control.
             </summary>
      <example>
        <code>
             [C#]
            	Pdf pdf1 = new Pdf();
             
             Aspose.Pdf.Generator.Section Section1 = pdf1.Sections.Add();
             FormField textBox = new FormField();
             textBox.FormFieldType = FormFieldType.Text;
             textBox.FieldName = "AText";
             textBox.FormWidth = 80;
             textBox.FormHeight = 20;
            
             CustomValidator validator = new CustomValidator();
             // Check if string is in lower case
             validator.ValidationFunction = "var field = this.getField('AText'); if (field.value != field.value.toLowerCase()) app.alert('string must be in lower case');";
             textBox.Validators.Add(validator);
            
             Section1.Paragraphs.Add(textBox);
             
             pdf1.Save(...);
             </code>
      </example>
    </member>
    <member name="M:Aspose.Pdf.Generator.CustomValidator.Clone">
      <summary>
            Clones a new <see cref="T:Aspose.Pdf.Generator.CustomValidator" /> object. This method clones only the format but not contents of the cell.
            </summary>
      <returns>The new cloned <see cref="T:Aspose.Pdf.Generator.CustomValidator" /> object.</returns>
    </member>
    <member name="P:Aspose.Pdf.Generator.CustomValidator.ValidationFunction">
      <summary>
            Gets or sets script function used for validation.
            </summary>
    </member>
    <member name="T:Aspose.Pdf.Generator.DestinationType">
      <summary>
            Enumerates the destination types for internal and external links.
            </summary>
    </member>
    <member name="F:Aspose.Pdf.Generator.DestinationType.Retain">
      <summary>
            Retains the original type.
            </summary>
    </member>
    <member name="F:Aspose.Pdf.Generator.DestinationType.FitPage">
      <summary>
            Fits the page.
            </summary>
    </member>
    <member name="F:Aspose.Pdf.Generator.DestinationType.FitWidth">
      <summary>
            Fits the width.
            </summary>
    </member>
    <member name="F:Aspose.Pdf.Generator.DestinationType.FitHeight">
      <summary>
            Fits the height
            </summary>
    </member>
    <member name="F:Aspose.Pdf.Generator.DestinationType.FitBox">
      <summary>
            Fits the box
            </summary>
    </member>
    <member name="T:Aspose.Pdf.Generator.DirectModeItemType">
      <summary>
            Gets or sets a enum value that indicates the direct mode item measure, the default value is Page.
            </summary>
    </member>
    <member name="F:Aspose.Pdf.Generator.DirectModeItemType.Page">
      <summary>
             Page.
            </summary>
    </member>
    <member name="F:Aspose.Pdf.Generator.DirectModeItemType.Byte">
      <summary>
             Byte.
            </summary>
    </member>
    <member name="T:Aspose.Pdf.Generator.DocumentAttachment">
      <summary>
             Represents a set of document level attachment <see cref="T:Aspose.Pdf.Generator.Paragraph" /> in a Pdf document. Attachment can be file attachment,
             stream attachment or note annotation.
             </summary>
      <example>
        <code>
             [C#]
             Pdf pdf1 = new Pdf();
             Section sec1 = pdf1.Sections.Add();
             
             FileStream fstream;
             fstream = new FileStream("c:/word.doc", FileMode.Open);
             
             DocumentAttachment DocStreamAttachment = new DocumentAttachment();
             pdf1.DocumentAttachments.Add(DocStreamAttachment);
             DocStreamAttachment.DocumentAttachmentStream = fstream;
             DocStreamAttachment.DocumentAttachmentCotentType = "doc";
             
             DocumentAttachment DocFileAttachment = new DocumentAttachment();
             pdf1.DocumentAttachments.Add(DocFileAttachment);
             DocFileAttachment.DocumentAttachmentFile = @"c:/image.jpg";
             DocFileAttachment.DocumentAttachmentCotentType = "jpeg"; 
             
             Attachment PageFileAttachment = new Attachment();
             sec1.Paragraphs.Add(PageFileAttachment);
             PageFileAttachment.AttachmentType = AttachmentType.File;
             PageFileAttachment.AttachedFileName = "c:/text.txt";
             PageFileAttachment.AttachedFileType = "txt";	
             PageFileAttachment.FileIconType = FileIconType.Graph;
             PageFileAttachment.IconColor = new Aspose.Pdf.Generator.Color("Brown");
             
             fstream = new FileStream("c:/readme.txt", FileMode.Open);
             Attachment PageStreamAttachment = new Attachment();
             sec1.Paragraphs.Add(PageStreamAttachment);
             PageStreamAttachment.AttachedStream = fstream;
             PageStreamAttachment.AttachedFileType = "txt";
             PageStreamAttachment.AttachmentType = AttachmentType.File;
             PageStreamAttachment.FileIconType = FileIconType.PaperClip;
             
             Attachment PageNoteAttachment = new Attachment();
             sec1.Paragraphs.Add(PageNoteAttachment);
             PageNoteAttachment.AttachmentType = AttachmentType.Note;
             PageNoteAttachment.NoteContent = "This is a note.";
             PageNoteAttachment.IsNoteOpen = true;	
            
            	pdf1.Save("test.pdf");
            
             
             [Visual Basic] 
             Dim pdf1 As Pdf = New Pdf()
             Dim sec1 As Section = pdf1.Sections.Add()
             
             Dim fstream As FileStream = new FileStream("c:/word.doc", FileMode.Open)
             
             Dim DocStreamAttachment As DocumentAttachment = New DocumentAttachment()
             pdf1.DocumentAttachments.Add(DocStreamAttachment)
             DocStreamAttachment.DocumentAttachmentStream = fstream
             DocStreamAttachment.DocumentAttachmentCotentType = "doc"
             
             Dim DocFileAttachment As DocumentAttachment = New DocumentAttachment()
             pdf1.DocumentAttachments.Add(DocFileAttachment)
             DocFileAttachment.DocumentAttachmentFile = @"c:/image.jpg"
             DocFileAttachment.DocumentAttachmentCotentType = "jpeg"
             
             Dim PageFileAttachment As Attachment = New Attachment()
             sec1.Paragraphs.Add(PageFileAttachment)
             PageFileAttachment.AttachmentType = AttachmentType.File
             PageFileAttachment.AttachedFileName = "c:/text.txt"
             PageFileAttachment.AttachedFileType = "txt"	
             PageFileAttachment.FileIconType = FileIconType.Graph
             PageFileAttachment.IconColor = new Aspose.Pdf.Generator.Color("Brown")
             
             fstream = new FileStream("c:/readme.txt", FileMode.Open)
             Dim PageStreamAttachment As Attachment = New Attachment()
             sec1.Paragraphs.Add(PageStreamAttachment)
             PageStreamAttachment.AttachedStream = fstream
             PageStreamAttachment.AttachedFileType = "txt"      
             PageStreamAttachment.AttachmentType = AttachmentType.File
             PageStreamAttachment.FileIconType = FileIconType.PaperClip
             
             Dim PageNoteAttachment As Attachment = New Attachment()
             sec1.Paragraphs.Add(PageNoteAttachment)
             PageNoteAttachment.AttachmentType = AttachmentType.Note
             PageNoteAttachment.NoteContent = "This is a note."
             PageNoteAttachment.IsNoteOpen = true
             pdf1.Save("test.pdf")
             
             
             [XML]
            &lt;?xml version="1.0" encoding="utf-8" ?&gt; 
             &lt;Pdf xmlns="Aspose.Pdf"&gt;
               &lt;DocumentAttachment DocumentAttachmentFileName="c:/word.doc" 
                   DocumentAttachmentFileType="doc"&gt;
               &lt;/DocumentAttachment&gt;
               &lt;DocumentAttachment DocumentAttachmentFileName="c:/image.jpg" 
                   DocumentAttachmentFileType="jpeg"&gt;
               &lt;/DocumentAttachment&gt;  
               &lt;Section&gt;
                 &lt;Attachment AttachmentType="File" AttachedFileName="c:/text.txt" AttachedFileType="txt" 
                 		FileIconType="Graph" IconColor="Brown"&gt;
                 &lt;/Attachment&gt;
                 &lt;Attachment AttachmentType="File" AttachedFileName="c:/readme.txt" AttachedFileType="txt" 
                 		FileIconType="PaperClip"&gt;
                 &lt;/Attachment&gt;
                 &lt;Attachment AttachmentType="Note" IsNoteOpen="true" 
                 		NoteContent="This is a note."&gt;
                 &lt;/Attachment&gt;
               &lt;/Section&gt;
             &lt;/Pdf&gt;
             </code>
      </example>
    </member>
    <member name="M:Aspose.Pdf.Generator.DocumentAttachment.#ctor">
      <summary>
            Initializes a new instance of the <see cref="T:Aspose.Pdf.Generator.DocumentAttachment" /> class.
            </summary>
    </member>
    <member name="P:Aspose.Pdf.Generator.DocumentAttachment.DocumentAttachmentFile">
      <summary>
            Gets or sets a string that indicates the DocumentAttachment file name.
            </summary>
    </member>
    <member name="P:Aspose.Pdf.Generator.DocumentAttachment.DocumentAttachmentStream">
      <summary>
            Gets or sets a stream attaches to the document.
            </summary>
    </member>
    <member name="P:Aspose.Pdf.Generator.DocumentAttachment.DocumentAttachmentContentType">
      <summary>
            Gets or sets a string that indicates the MIME type of the attached file. When 
            </summary>
    </member>
    <member name="T:Aspose.Pdf.Generator.DocumentAttachments">
      <summary>
             Represents a set of document level attachment <see cref="T:Aspose.Pdf.Generator.Paragraph" /> in a Pdf document. Attachment can be file attachment,
             stream attachment or note annotation.
             </summary>
      <example>
        <code>
             [C#]
             Pdf pdf1 = new Pdf();
             Section sec1 = pdf1.Sections.Add();
             
             FileStream fstream;
             fstream = new FileStream("c:/word.doc", FileMode.Open);
             
             DocumentAttachment DocStreamAttachment = new DocumentAttachment();
             pdf1.DocumentAttachments.Add(DocStreamAttachment);
             DocStreamAttachment.DocumentAttachmentStream = fstream;
             DocStreamAttachment.DocumentAttachmentCotentType = "doc";
             
             DocumentAttachment DocFileAttachment = new DocumentAttachment();
             pdf1.DocumentAttachments.Add(DocFileAttachment);
             DocFileAttachment.DocumentAttachmentFile = @"c:/image.jpg";
             DocFileAttachment.DocumentAttachmentCotentType = "jpeg"; 
             
             Attachment PageFileAttachment = new Attachment();
             sec1.Paragraphs.Add(PageFileAttachment);
             PageFileAttachment.AttachmentType = AttachmentType.File;
             PageFileAttachment.AttachedFileName = "c:/text.txt";
             PageFileAttachment.AttachedFileType = "txt";	
             PageFileAttachment.FileIconType = FileIconType.Graph;
             PageFileAttachment.IconColor = new Aspose.Pdf.Generator.Color("Brown");
             
             fstream = new FileStream("c:/readme.txt", FileMode.Open);
             Attachment PageStreamAttachment = new Attachment();
             sec1.Paragraphs.Add(PageStreamAttachment);
             PageStreamAttachment.AttachedStream = fstream;
             PageStreamAttachment.AttachedFileType = "txt";            
             PageStreamAttachment.AttachmentType = AttachmentType.File;
             PageStreamAttachment.FileIconType = FileIconType.PaperClip;                
             
             Attachment PageNoteAttachment = new Attachment();
             sec1.Paragraphs.Add(PageNoteAttachment);
             PageNoteAttachment.AttachmentType = AttachmentType.Note;
             PageNoteAttachment.NoteContent = "This is a note.";
             PageNoteAttachment.IsNoteOpen = true;	
            
            	pdf1.Save("test.pdf");
            
             
             [Visual Basic] 
             Dim pdf1 As Pdf = New Pdf()
             Dim sec1 As Section = pdf1.Sections.Add()
             
             Dim fstream As FileStream = new FileStream("c:/word.doc", FileMode.Open)
             
             Dim DocStreamAttachment As DocumentAttachment = New DocumentAttachment()
             pdf1.DocumentAttachments.Add(DocStreamAttachment)
             DocStreamAttachment.DocumentAttachmentStream = fstream
             DocStreamAttachment.DocumentAttachmentCotentType = "doc"
             
             Dim DocFileAttachment As DocumentAttachment = New DocumentAttachment()
             pdf1.DocumentAttachments.Add(DocFileAttachment)
             DocFileAttachment.DocumentAttachmentFile = @"c:/image.jpg"
             DocFileAttachment.DocumentAttachmentCotentType = "jpeg"
             
             Dim PageFileAttachment As Attachment = New Attachment()
             sec1.Paragraphs.Add(PageFileAttachment)
             PageFileAttachment.AttachmentType = AttachmentType.File
             PageFileAttachment.AttachedFileName = "c:/text.txt"
             PageFileAttachment.AttachedFileType = "txt"	
             PageFileAttachment.FileIconType = FileIconType.Graph
             PageFileAttachment.IconColor = new Aspose.Pdf.Generator.Color("Brown")
             
             fstream = new FileStream("c:/readme.txt", FileMode.Open)
             Dim PageStreamAttachment As Attachment = New Attachment()
             sec1.Paragraphs.Add(PageStreamAttachment)
             PageStreamAttachment.AttachedStream = fstream
             PageStreamAttachment.AttachedFileType = "txt"      
             PageStreamAttachment.AttachmentType = AttachmentType.File
             PageStreamAttachment.FileIconType = FileIconType.PaperClip                
             
             Dim PageNoteAttachment As Attachment = New Attachment()
             sec1.Paragraphs.Add(PageNoteAttachment)
             PageNoteAttachment.AttachmentType = AttachmentType.Note
             PageNoteAttachment.NoteContent = "This is a note."
             PageNoteAttachment.IsNoteOpen = true
             pdf1.Save("test.pdf")
             
             
             [XML]
            &lt;?xml version="1.0" encoding="utf-8" ?&gt; 
             &lt;Pdf xmlns="Aspose.Pdf"&gt;
               &lt;DocumentAttachment DocumentAttachmentFileName="c:/word.doc" 
                   DocumentAttachmentFileType="doc"&gt;
               &lt;/DocumentAttachment&gt;
               &lt;DocumentAttachment DocumentAttachmentFileName="c:/image.jpg" 
                   DocumentAttachmentFileType="jpeg"&gt;
               &lt;/DocumentAttachment&gt;  
               &lt;Section&gt;
                 &lt;Attachment AttachmentType="File" AttachedFileName="c:/text.txt" AttachedFileType="txt" 
                 		FileIconType="Graph" IconColor="Brown"&gt;
                 &lt;/Attachment&gt;
                 &lt;Attachment AttachmentType="File" AttachedFileName="c:/readme.txt" AttachedFileType="txt" 
                 		FileIconType="PaperClip"&gt;
                 &lt;/Attachment&gt;
                 &lt;Attachment AttachmentType="Note" IsNoteOpen="true" 
                 		NoteContent="This is a note."&gt;
                 &lt;/Attachment&gt;
               &lt;/Section&gt;
             &lt;/Pdf&gt;
             </code>
      </example>
    </member>
    <member name="M:Aspose.Pdf.Generator.DocumentAttachments.Add(Aspose.Pdf.Generator.DocumentAttachment)">
      <summary>
            Adds a new <see cref="T:Aspose.Pdf.Generator.DocumentAttachment" /> object into the collection.
            </summary>
      <param name="docattachment">The <see cref="T:Aspose.Pdf.Generator.DocumentAttachment" /> object to be added.</param>
    </member>
    <member name="M:Aspose.Pdf.Generator.DocumentAttachments.Insert(Aspose.Pdf.Generator.DocumentAttachment,Aspose.Pdf.Generator.DocumentAttachment)">
      <summary>
            Inserts a new <see cref="T:Aspose.Pdf.Generator.DocumentAttachment" /> object into the collection after specified <see cref="T:Aspose.Pdf.Generator.DocumentAttachment" /> object.
            </summary>
      <param name="attachmentToInsertAfter">The <see cref="T:Aspose.Pdf.Generator.DocumentAttachment" /> object to insert after. 
            If this object is null, the new object will be inserted as the first member.</param>
      <param name="newAttachment">The <see cref="T:Aspose.Pdf.Generator.DocumentAttachment" /> object to be inserted.</param>
    </member>
    <member name="M:Aspose.Pdf.Generator.DocumentAttachments.Insert(System.Int32,Aspose.Pdf.Generator.DocumentAttachment)">
      <summary>
            Inserts a new <see cref="T:Aspose.Pdf.Generator.DocumentAttachment" /> object into the collection after specified <see cref="T:Aspose.Pdf.Generator.DocumentAttachment" /> object.
            </summary>
      <param name="index">The zero-based index at which <see cref="T:Aspose.Pdf.Generator.DocumentAttachment" /> object should be inserted.</param>
      <param name="attachment">The <see cref="T:Aspose.Pdf.Generator.DocumentAttachment" /> object to be inserted.</param>
    </member>
    <member name="M:Aspose.Pdf.Generator.DocumentAttachments.Remove(Aspose.Pdf.Generator.DocumentAttachment)">
      <summary>
            Removes a <see cref="T:Aspose.Pdf.Generator.DocumentAttachment" /> object from the collection.
            </summary>
      <param name="attachmentToRemove">The <see cref="T:Aspose.Pdf.Generator.DocumentAttachment" /> object to be romoved.</param>
    </member>
    <member name="M:Aspose.Pdf.Generator.DocumentAttachments.Remove(System.Int32)">
      <summary>
            Removes a <see cref="T:Aspose.Pdf.Generator.DocumentAttachment" /> object from the collection.
            </summary>
      <param name="index">The index of the <see cref="T:Aspose.Pdf.Generator.DocumentAttachment" /> object to be romoved.</param>
    </member>
    <member name="P:Aspose.Pdf.Generator.DocumentAttachments.Item(System.Int32)">
      <summary>
            Gets or sets a <see cref="T:Aspose.Pdf.Generator.DocumentAttachment" /> object from the collection according to DocumentAttachment index.
            </summary>
    </member>
    <member name="T:Aspose.Pdf.Generator.Ellipse">
      <summary>
             Represents a Ellipse <see cref="T:Aspose.Pdf.Generator.Shape" /> in a Pdf document.
             </summary>
      <example>
        <code>
             [C#]
             Pdf pdf1 = new Pdf();
             
            	Section sec1 = pdf1.Sections.Add();
                
            	Graph graph1 = new Graph(sec1,400,100);
            	sec1.Paragraphs.Add(graph1);
                
            	Aspose.Pdf.Generator.Ellipse ellipse1 = new Aspose.Pdf.Generator.Ellipse(graph1,50,10,100,50);
            	graph1.Shapes.Add(ellipse1);
                
            	pdf1.Save("d:/test/test.pdf");
            
             [Visual Basic]
             Dim pdf1 As Pdf =  New Pdf() 
            
            	Dim sec1 As Section =  pdf1.Sections.Add() 
            
            	Dim graph1 As Graph =  New Graph(sec1,400,100) 
            	sec1.Paragraphs.Add(graph1)
            
            	Dim ellipse1 As Aspose.Pdf.Generator.Ellipse =  New Aspose.Pdf.Generator.Ellipse(graph1,50,10,100,50) 
            	graph1.Shapes.Add(ellipse1)
            
            	pdf1.Save("d:/test/test.pdf")
            
             [XML]
             &lt;Pdf xmlns="Aspose.Pdf"&gt;
            		&lt;Section&gt;
            			&lt;Graph Width="400" Height="100"&gt;
            				&lt;Ellipse Position="50 10 100 50" /&gt;
            			&lt;/Graph&gt;
            		&lt;/Section&gt;
            	&lt;/Pdf&gt;
             </code>
      </example>
    </member>
    <member name="M:Aspose.Pdf.Generator.Ellipse.#ctor">
      <summary>
            Initializes a new instance of the <see cref="T:Aspose.Pdf.Generator.Ellipse" /> class.
            </summary>
    </member>
    <member name="M:Aspose.Pdf.Generator.Ellipse.#ctor(System.Single,System.Single,System.Single,System.Single)">
      <summary>
            Initializes a new instance of the <see cref="T:Aspose.Pdf.Generator.Ellipse" /> class.
            </summary>
      <param name="left">The left position of the ellipse.</param>
      <param name="bottom">The bottom position of the ellipse.</param>
      <param name="height">The height of the ellipse.</param>
      <param name="width">The width of the ellipse.</param>
    </member>
    <member name="M:Aspose.Pdf.Generator.Ellipse.#ctor(Aspose.Pdf.Generator.Graph)">
      <summary>
            Initializes a new instance of the <see cref="T:Aspose.Pdf.Generator.Ellipse" /> class.
            </summary>
      <param name="graph">The specified <see cref="T:Aspose.Pdf.Generator.Graph" /> object.</param>
      <remarks>
            This constructor can inherit common property values from the specified 
            <see cref="T:Aspose.Pdf.Generator.Graph" /> object.
            </remarks>
    </member>
    <member name="M:Aspose.Pdf.Generator.Ellipse.#ctor(Aspose.Pdf.Generator.Graph,System.Single,System.Single,System.Single,System.Single)">
      <summary>
            Initializes a new instance of the <see cref="T:Aspose.Pdf.Generator.Ellipse" /> class.
            </summary>
      <param name="graph">The specified <see cref="T:Aspose.Pdf.Generator.Graph" /> object.</param>
      <param name="left">The left position of the ellipse.</param>
      <param name="bottom">The bottom position of the ellipse.</param>
      <param name="height">The height of the ellipse.</param>
      <param name="width">The width of the ellipse.</param>
      <remarks>
            This constructor can inherit common property values from the specified 
            <see cref="T:Aspose.Pdf.Generator.Graph" /> object.
            </remarks>
    </member>
    <member name="P:Aspose.Pdf.Generator.Ellipse.Left">
      <summary>
            Gets or sets a float value that indicates the left position of the ellipse.
            </summary>
    </member>
    <member name="P:Aspose.Pdf.Generator.Ellipse.Bottom">
      <summary>
            Gets or sets a float value that indicates the bottom position of the ellipse.
            </summary>
    </member>
    <member name="P:Aspose.Pdf.Generator.Ellipse.Width">
      <summary>
            Gets or sets a float value that indicates the width of the ellipse.
            </summary>
    </member>
    <member name="P:Aspose.Pdf.Generator.Ellipse.Height">
      <summary>
            Gets or sets a float value that indicates the height of the ellipse.
            </summary>
    </member>
    <member name="T:Aspose.Pdf.Generator.GutterPlacementType">
      <summary>
            Gets or sets a enum value that indicates the placement type of page gutter, the default value is None.
            </summary>
    </member>
    <member name="F:Aspose.Pdf.Generator.GutterPlacementType.None">
      <summary>
             No Gutter.
            </summary>
    </member>
    <member name="F:Aspose.Pdf.Generator.GutterPlacementType.Left">
      <summary>
             Place Left.
            </summary>
    </member>
    <member name="F:Aspose.Pdf.Generator.GutterPlacementType.Top">
      <summary>
             Place Top.
            </summary>
    </member>
    <member name="F:Aspose.Pdf.Generator.GutterPlacementType.Right">
      <summary>
             Place Right.
            </summary>
    </member>
    <member name="F:Aspose.Pdf.Generator.GutterPlacementType.Inner">
      <summary>
             Place Inner.
            </summary>
    </member>
    <member name="F:Aspose.Pdf.Generator.GutterPlacementType.Outer">
      <summary>
             Place Outer.
            </summary>
    </member>
    <member name="T:Aspose.Pdf.Generator.PathArea">
      <summary>
        <p>Path is a <see cref="T:Aspose.Pdf.Generator.ClosedShape" /> (contour) that consists of several non-closed shapes (<see cref="T:Aspose.Pdf.Generator.NonClosedShape" />) such as Lines, Bezier curves, Arc.
             Other shapes are ignored for writing.</p>
        <p>Typical usages are the following:</p>
        <xmp>
             [C#]
             Pdf pdf1 = new Pdf();
             Section sec = pdf1.Sections.Add();
             Color color = new Aspose.Pdf.Generator.Color("Red");
             Graph graph = new Graph(100,400);
             sec.Paragraphs.Add(graph);
             PathArea path = new PathArea();
             graph.Shapes.Add(path); 
             path.GraphInfo.FillColor = color;
             path.GraphInfo.IsFilled = true;    
             Line line = new Line(new float [] {200, 80, 200, 100});
             path.Shapes.Add(line);
             Arc arc = new Arc(200, 50, 50, 90, 270);
             path.Shapes.add(arc);
             float [] curPos = arc.getEndPosition();
             line = new Line(new float [] {curPos[0], curPos[1], 200, 20});
             path.Shapes.Add(line);
             arc = new Arc(200, 50, 30, 270, 90);
             path.Shapes.Add(arc);
             pdf1.save(....);
             </xmp>
      </summary>
      <summary>
             Represents a path <see cref="T:Aspose.Pdf.Generator.Shape" /> in a Graph.
             </summary>
    </member>
    <member name="M:Aspose.Pdf.Generator.PathArea.#ctor">
      <summary>
            Initializes a new instance of the <see cref="T:Aspose.Pdf.Generator.PathArea" /> class.
            </summary>
    </member>
    <member name="M:Aspose.Pdf.Generator.PathArea.#ctor(Aspose.Pdf.Generator.Shape[])">
      <summary>
            Initializes a new instance of the <see cref="T:Aspose.Pdf.Generator.PathArea" /> class.
            </summary>
      <param name="shapeArr">The shape array contains path segments set.</param>
    </member>
    <member name="M:Aspose.Pdf.Generator.PathArea.#ctor(Aspose.Pdf.Generator.Graph)">
      <summary>
            Initializes a new instance of the <see cref="T:Aspose.Pdf.Generator.PathArea" /> class.
            </summary>
      <param name="graph">The graph object.</param>
      <remarks>
            This constructor can inherit common property values from the specified 
            <see cref="T:Aspose.Pdf.Generator.Graph" /> object.
            </remarks>
    </member>
    <member name="M:Aspose.Pdf.Generator.PathArea.#ctor(Aspose.Pdf.Generator.Graph,Aspose.Pdf.Generator.Shape[])">
      <summary>
            Initializes a new instance of the <see cref="T:Aspose.Pdf.Generator.PathArea" /> class.
            </summary>
      <param name="graph">The graph object.</param>
      <param name="shapeArr">The shape array contains path segments set.</param>
      <remarks>
            This constructor can inherit common property values from the specified 
            <see cref="T:Aspose.Pdf.Generator.Graph" /> object.
            </remarks>
    </member>
    <member name="T:Aspose.Pdf.Generator.RangeValidator">
      <summary>
             Checks whether the value of an input control is within a specified range of values.
             </summary>
      <example>
        <code>
             [C#]
            	Pdf pdf1 = new Pdf();
             
             Aspose.Pdf.Generator.Section Section1 = pdf1.Sections.Add();
             FormField textBox = new FormField();
             textBox.FormFieldType = FormFieldType.Text;
             textBox.FieldName = "AText";
             textBox.FormWidth = 80;
             textBox.FormHeight = 20;
            
             RangeValidator validator = new RangeValidator();
             validator.MinimumValue = "a";
             validator.MaximumValue = "db";
             validator.ErrorMessage = "Value must be between 'a' and 'db'";
             textBox.Validators.Add(validator);
            
             Section1.Paragraphs.Add(textBox);
             
             pdf1.Save(...);
             </code>
      </example>
    </member>
    <member name="M:Aspose.Pdf.Generator.RangeValidator.Clone">
      <summary>
            Clones a new <see cref="T:Aspose.Pdf.Generator.RangeValidator" /> object. This method clones only the format but not contents of the cell.
            </summary>
      <returns>The new cloned <see cref="T:Aspose.Pdf.Generator.RangeValidator" /> object.</returns>
    </member>
    <member name="P:Aspose.Pdf.Generator.RangeValidator.MinimumValue">
      <summary>
            Gets or sets the minimum value of the validation range.
            </summary>
    </member>
    <member name="P:Aspose.Pdf.Generator.RangeValidator.MaximumValue">
      <summary>
            Gets or sets the maximum value of the validation range.
            </summary>
    </member>
    <member name="T:Aspose.Pdf.Generator.RegularExpressionValidator">
      <summary>
             Makes the associated input control a required field.
             </summary>
      <example>
        <code>
             [C#]
            	Pdf pdf1 = new Pdf();
             
             Aspose.Pdf.Generator.Section Section1 = pdf1.Sections.Add();
             FormField textBox = new FormField();
             textBox.FormFieldType = FormFieldType.Text;
             textBox.FieldName = "AText";
             textBox.FormWidth = 80;
             textBox.FormHeight = 20;
            
             RegularExpressionValidator validator = new RegularExpressionValidator();
             validator.ValidationExpression = "^[0-9]+$";
             validator.ErrorMessage = "Value does not match validation expression";
             textBox.Validators.Add(validator);
            
             Section1.Paragraphs.Add(textBox);
             
             pdf1.Save(...);
             </code>
      </example>
    </member>
    <member name="M:Aspose.Pdf.Generator.RegularExpressionValidator.Clone">
      <summary>
            Clones a new <see cref="T:Aspose.Pdf.Generator.RegularExpressionValidator" /> object. This method clones only the format but not contents of the cell.
            </summary>
      <returns>The new cloned <see cref="T:Aspose.Pdf.Generator.RegularExpressionValidator" /> object.</returns>
    </member>
    <member name="P:Aspose.Pdf.Generator.RegularExpressionValidator.ValidationExpression">
      <summary>
            Gets or sets the regular expression that determines the pattern used to validate a field.
            </summary>
    </member>
    <member name="T:Aspose.Pdf.Generator.RequiredFieldValidator">
      <summary>
             Makes the associated input control a required field.
             </summary>
      <example>
        <code>
             [C#]
            	Pdf pdf1 = new Pdf();
             
             Aspose.Pdf.Generator.Section Section1 = pdf1.Sections.Add();
             FormField textBox = new FormField();
             textBox.FormFieldType = FormFieldType.Text;
             textBox.FieldName = "AText";
             textBox.FormWidth = 80;
             textBox.FormHeight = 20;
            
             RequiredFieldValidator validator = new RequiredFieldValidator();
             validator.ErrorMessage = "Textbox cannot be empty";
             textBox.Validators.Add(validator);
            
             Section1.Paragraphs.Add(textBox);
             
             pdf1.Save(...);
             </code>
      </example>
    </member>
    <member name="M:Aspose.Pdf.Generator.RequiredFieldValidator.Clone">
      <summary>
            Clones a new <see cref="T:Aspose.Pdf.Generator.RequiredFieldValidator" /> object. This method clones only the format but not contents of the cell.
            </summary>
      <returns>The new cloned <see cref="T:Aspose.Pdf.Generator.RequiredFieldValidator" /> object.</returns>
    </member>
    <member name="T:Aspose.Pdf.Generator.EndNote">
      <summary>
            Represents the EndNote of Segment<see cref="T:Aspose.Pdf.Generator.Segment" />.
            </summary>
      <example>
        <code>
            [C#]
            //Create pdf document
            Pdf pdf1 = new Pdf();
            //Add a section into the pdf document
            Aspose.Pdf.Generator.Section sec1 = pdf1.Sections.Add();
            //Create a new text paragraph 
            Text text1 = new Text();
            // Create a segment object and pass string as argument
            Segment seg1 = new Segment("dog");
            // Create an EndNote object and pass string as argument to its constructor
            EndNote endnote1 = new EndNote("dog is an animal");
            // add EndNote to segment object
            seg1.EndNote = endnote1;
            // Add segment to segments collection of Text paragraph
            text1.Segments.Add(seg1);
            //Add text paragraph to the Paragraphs collection of section object
            sec1.Paragraphs.Add(text1);
            
            //Save the pdf document
            pdf1.Save(@"D:\pdftest\EndNoteTest_code.pdf");
            
            [Visual Basic]
            ‘Create pdf document
            Dim pdf1 As Pdf = New Pdf()
            ‘Add a section into the pdf document
            Dim sec1 As Section = pdf1.Sections.Add()
            ‘Create a new text paragraph
            Dim text1 AsText = new Text();
            ’Create a segment object and pass string as argument
            Dim seg1 As Segment  = new Segment("dog");
            ‘ Create an EndNote object and pass string as argument to its constructor
            Dim endnote1 As EndNote  = new EndNote("dog is an animal");
            ‘ add EndNote to segment object 
            seg1.EndNote = endnote1;
            ‘ Add segment to segments collection of Text paragraph   
            text1.Segments.Add(seg1);
            ‘ Add text paragraph to the Paragraphs collection of section object   
            sec1.Paragraphs.Add(text1)
            ‘ Save the pdf document
            pdf1.Save(...)
            
            [XML]
            &lt;?xml version="1.0" encoding="utf-8" ?&gt; 
            &lt;Pdf xmlns="Aspose.Pdf"&gt;
                &lt;Section PageHeight="1684"&gt;
                    &lt;Text MarginTop="0"&gt;
                        &lt;Segment&gt;dog&lt;/Segment&gt;
                        &lt;Segment&gt;
                            &lt;EndNote fontsize="7"&gt;
                                &lt;Segment&gt; dog is an animal&lt;/Segment&gt;
                            &lt;/EndNote&gt;
                        &lt;/Segment&gt;        
                    &lt;/Text&gt;
                &lt;/Section&gt;
            &lt;/Pdf&gt;
            
            </code>
      </example>
    </member>
    <member name="T:Aspose.Pdf.Generator.FootNote">
      <summary>
             Represents the FootNote of Segment<see cref="T:Aspose.Pdf.Generator.Segment" />.
             </summary>
      <example>
        <code>
             [C#]
             Pdf pdf1 = new Pdf();
            
             //Create pdf document
             Pdf pdf1 = new Pdf();
             //Add a section into the pdf document
             Aspose.Pdf.Generator.Section Section1 = pdf1.Sections.Add();
             //Create a new text paragraph 
             Text text1 = new Text();
             // Create a segment object and pass string as argument
             Segment Segment1 = new Segment("dog");
             // Create an FootNote object and pass string as argument to its constructor
             FootNote FootNote1 = new FootNote("dog is an animal");
             // add FootNote to segment object
             Segment1.FootNote = FootNote1;
             // Add segment to segments collection of Text paragraph
             text1.Segments.Add(Segment1);
             //Add text paragraph to the Paragraphs collection of section object
             Section1.Paragraphs.Add(text1);
                         
             //Save the pdf document
             pdf1.Save(@"D:\pdftest\FootNoteTest_code.pdf");
             
             [Visual Basic]
             ‘Create pdf document
             Dim pdf1 As Pdf = New Pdf()
             ‘Add a section into the pdf document
             Dim Section1 As Section = pdf1.Sections.Add()
             ‘Create a new text paragraph
             Dim text1 AsText = new Text();
             ’Create a segment object and pass string as argument
             Dim Segment1 As Segment  = new Segment("dog");
             ‘ Create an EndNote object and pass string as argument to its constructor
             Dim FootNote1 As FootNote  = new FootNote("dog is an animal");
             ‘ add EndNote to segment object 
             Segment1.FootNote = FootNote1;
             ‘ Add segment to segments collection of Text paragraph   
             text1.Segments.Add(Segment1);
             ‘ Add text paragraph to the Paragraphs collection of section object   
             Section1.Paragraphs.Add(text1)
             
             ‘ Save the pdf document
             pdf1.Save(...)
             
             [XML]
             &lt;Section PageWidth="595.3" PageHeight="841.9" PageMarginTop="72" PageMarginBottom="72" PageMarginLeft="90" PageMarginRight="90" IsNewPage="true"&gt;
                 &lt;Text IsSpaced="true" Alignment="Justify" LineSpacing="1.58" ID="paraId_1"&gt;
                   &lt;Segment FontName="Times New Roman"&gt;dog&lt;/Segment&gt;
                   &lt;Segment&gt;
                           &lt;FootNote&gt;
                                   &lt;Segment&gt;dog is an animal&lt;/Segment&gt;
                           &lt;/FootNote&gt;
                   &lt;/Segment&gt;
                 &lt;/Text&gt;
             &lt;/Section&gt;
             
             </code>
      </example>
    </member>
    <member name="M:Aspose.Pdf.Generator.FootNote.#ctor">
      <summary>
            constructor with no arguments for FootNote class .
            </summary>
    </member>
    <member name="M:Aspose.Pdf.Generator.FootNote.#ctor(System.String)">
      <summary>
            constructor with footnote content for FootNote class.The argument note is used for the content of footnote.
            </summary>
    </member>
    <member name="P:Aspose.Pdf.Generator.FootNote.Paragraphs">
      <summary>
            Gets or sets a <see cref="T:Aspose.Pdf.Generator.Paragraph" /> collection that indicates all paragraphs in the FootNote.
            </summary>
    </member>
    <member name="P:Aspose.Pdf.Generator.FootNote.NumberingFormat">
      <summary>
            Gets or sets a <see cref="T:Aspose.Pdf.Generator.NumberingFormatType" /> enumeration value that indicates footnote number format in the Pdf document.
            </summary>
    </member>
    <member name="P:Aspose.Pdf.Generator.FootNote.NumberingContinuation">
      <summary>
            Gets or sets a <see cref="T:Aspose.Pdf.Generator.NumberingContinuationType" /> enumeration value that indicates footnote numbering continuation style£¬such as continuation in pdf or section.
            </summary>
    </member>
    <member name="P:Aspose.Pdf.Generator.FootNote.Segments">
      <summary>
            This attribute will be replaced by FootNote.Paragraphs and become invalid one year later.<see cref="T:Aspose.Pdf.Generator.Segment" /> object will not be directely supported in footnotes and endnotes then.
            Gets or sets a <see cref="T:Aspose.Pdf.Generator.Segment" /> object that indicates the content of footnote.
            </summary>
    </member>
    <member name="P:Aspose.Pdf.Generator.FootNote.TextInfo">
      <summary>
            Gets or sets a <see cref="P:Aspose.Pdf.Generator.FootNote.TextInfo" /> object that indicates the text information of footnote.
            </summary>
    </member>
    <member name="M:Aspose.Pdf.Generator.EndNote.#ctor">
      <summary>
            Constructor without content for EndNote object
            </summary>
    </member>
    <member name="M:Aspose.Pdf.Generator.EndNote.#ctor(System.String)">
      <summary>
            constructor with content for EndNote object
            </summary>
    </member>
    <member name="P:Aspose.Pdf.Generator.EndNote.NumberingContinuation">
      <summary>
            Get or set a NumberingContinuationType value that indicates the continuation type of end note's number.
            </summary>
    </member>
    <member name="P:Aspose.Pdf.Generator.EndNote.EndNotePositioning">
      <summary>
            Get or set a NEndNotePositioningType value that indicates the position of the end note.
            </summary>
    </member>
    <member name="T:Aspose.Pdf.Generator.EndNotePositioningType">
      <summary>
            Enumerates the positioning types for endnote.
            </summary>
    </member>
    <member name="F:Aspose.Pdf.Generator.EndNotePositioningType.EndOfSection">
      <summary>
            The end note will be placed at end of the current section.
            </summary>
    </member>
    <member name="F:Aspose.Pdf.Generator.EndNotePositioningType.EndOfDoc">
      <summary>
            The end note will be placed at end of the current Pdf document.
            </summary>
    </member>
    <member name="T:Aspose.Pdf.Generator.FileIconType">
      <summary>
            Enumerates file icon types.
            </summary>
    </member>
    <member name="F:Aspose.Pdf.Generator.FileIconType.Graph">
      <summary>
            Graph type.
            </summary>
    </member>
    <member name="F:Aspose.Pdf.Generator.FileIconType.PaperClip">
      <summary>
            PaperClip type.
            </summary>
    </member>
    <member name="F:Aspose.Pdf.Generator.FileIconType.PushPin">
      <summary>
            PushPin type.
            </summary>
    </member>
    <member name="F:Aspose.Pdf.Generator.FileIconType.Tag">
      <summary>
            Tag type.
            </summary>
    </member>
    <member name="T:Aspose.Pdf.Generator.FloatingBox">
      <summary>
             Represents a FloatingBox <see cref="T:Aspose.Pdf.Generator.Paragraph" /> in a Pdf document. FloatingBox is custom positioned.
             </summary>
      <example>
        <code>
             [C#]
             //Create pdf document
             Pdf pdf1 = new Pdf();
             //Add a section into the pdf document
             Aspose.Pdf.Generator.Section section1 = pdf1.Sections.Add();
             //Create a FloatingBox object
             FloatingBox FloatingBox1 = new FloatingBox(108, 80);
             //Add FloatingBox to Paragraphs collection of section object
             section1.Paragraphs.Add(FloatingBox1);
             // Specify the box horizontal positioning type to measured distance from the top page margin
             FloatingBox1.BoxHorizontalPositioning = BoxHorizontalPositioningType.Margin;
             // Set the box Horizonatl positioning alignment as Right aligned
             FloatingBox1.BoxHorizontalAlignment = BoxHorizontalAlignmentType.Right;
             // Specify the box Vertical positioning type to measured distance from the top edge of the page
             FloatingBox1.BoxVerticalPositioning = BoxVerticalPositioningType.Page;
             // Set the box Vertical positioning alignment as Centered aligned
             FloatingBox1.BoxVerticalAlignment = BoxVerticalAlignmentType.Center;
             // add a new text paragraph to paragraphs collection of FloatingBox object
             FloatingBox1.Paragraphs.Add(new Text("This is a test for floating text box."));
                                    
             //Save the pdf document
             pdf1.Save(@"D:\pdftest\FloatingBoxTest_code.pdf");
            
             [Visual Basic]
             ‘ Create pdf document
             Dim pdf1 As Pdf =  New Pdf() 
             ‘ Add a section into the pdf document
             Dim section1 As Section =  pdf1.Sections.Add()
             ‘ Create a FloatingBox object
             Dim FloatingBox1 As FloatingBox =  New FloatingBox(108,80) 
             ‘ Add FloatingBox to Paragraphs collection of section object
             section1.Paragraphs.Add(FloatingBox1)
             ‘ Specify the box horizontal positioning type to measured distance from the top page margin
             FloatingBox1.BoxHorizontalPositioning = BoxHorizontalPositioningType.Margin
             ‘ Set the box Horizonatl positioning alignment as Right aligned
             FloatingBox1.BoxHorizontalAlignment = BoxHorizontalAlignmentType.Right
             ‘ Specify the box Vertical positioning type to measured distance from the top edge of the page
             FloatingBox1.BoxVerticalPositioning = BoxVerticalPositioningType.Page
             ‘ Set the box Vertical positioning alignment as Centered aligned
             FloatingBox1.BoxVerticalAlignment = BoxVerticalAlignmentType.Center
             ‘ add a new text paragraph to paragraphs collection of FloatingBox object
             FloatingBox1.Paragraphs.Add(New Text("This is a test for floating text box."))
             ‘ Save the pdf document
             pdf1.Save("d:/test/test.pdf")
            
            [XML]
             &lt;?xml version="1.0" encoding="utf-8" ?&gt; 
             &lt;Pdf xmlns="Aspose.Pdf"&gt;
                 &lt;Section&gt;
                     &lt;FloatingBox Width="1.5inch" Height="80" BoxHorizontalPositioning="Margin" 
                         BoxHorizontalAlignment="Right" BoxVerticalPositioning="Page" 
                         BoxVerticalAlignment="Center"&gt;
                         &lt;Text&gt;&lt;Segment&gt;This is a test floating text box.&lt;/Segment&gt;&lt;/Text&gt;
                     &lt;/FloatingBox&gt;
                 &lt;/Section&gt;
             &lt;/Pdf&gt;
            	
             </code>
      </example>
    </member>
    <member name="M:Aspose.Pdf.Generator.FloatingBox.#ctor(System.Single,System.Single)">
      <summary>
            Initializes a new instance of the <see cref="T:Aspose.Pdf.Generator.FloatingBox" /> class with specified width and height.
            </summary>
      <param name="width">The width of the box.</param>
      <param name="height">The height of the box.</param>
    </member>
    <member name="M:Aspose.Pdf.Generator.FloatingBox.Clone">
      <summary>
            Clones a new <see cref="T:Aspose.Pdf.Generator.FloatingBox" /> object. Paragraphs in the floating box are not cloned.
            </summary>
      <returns>The new <see cref="T:Aspose.Pdf.Generator.FloatingBox" /> object.</returns>
    </member>
    <member name="M:Aspose.Pdf.Generator.FloatingBox.CompleteClone">
      <summary>
            Clones a new <see cref="T:Aspose.Pdf.Generator.FloatingBox" /> object. All members in the FloatingBox are cloned.
            </summary>
      <returns>The new <see cref="T:Aspose.Pdf.Generator.FloatingBox" /> object.</returns>
    </member>
    <member name="P:Aspose.Pdf.Generator.FloatingBox.BoxWidth">
      <summary>
            Gets or sets a float value that indicates the width of the floating box.
            </summary>
    </member>
    <member name="P:Aspose.Pdf.Generator.FloatingBox.BoxHeight">
      <summary>
            Gets or sets a float value that indicates the height of the floating box.
            </summary>
    </member>
    <member name="P:Aspose.Pdf.Generator.FloatingBox.IsNeedRepeating">
      <summary>
            Gets or sets a bool value that indicates whether the paragraph need to be repeated on next page.
            Default value is false.The attribute is only valid when the paragraph itself and the object its ReferenceParagraphID referred to both are included in RepeatingRows.
            </summary>
    </member>
    <member name="P:Aspose.Pdf.Generator.FloatingBox.Paragraphs">
      <summary>
            Gets or sets a <see cref="P:Aspose.Pdf.Generator.FloatingBox.Paragraphs" /> collection that indicates all paragraphs in the cell.
            </summary>
    </member>
    <member name="P:Aspose.Pdf.Generator.FloatingBox.BoxHorizontalPositioning">
      <summary>
            Gets or sets a <see cref="T:Aspose.Pdf.Generator.BoxHorizontalPositioningType" /> object that indicates the horizontal 
            positioning type of the floating box.
            </summary>
    </member>
    <member name="P:Aspose.Pdf.Generator.FloatingBox.BoxVerticalPositioning">
      <summary>
            Gets or sets a <see cref="T:Aspose.Pdf.Generator.BoxVerticalPositioningType" /> object that indicates the vertical 
            positioning type of the floating box.
            </summary>
    </member>
    <member name="P:Aspose.Pdf.Generator.FloatingBox.BoxHorizontalAlignment">
      <summary>
            Gets or sets a <see cref="T:Aspose.Pdf.Generator.BoxHorizontalAlignmentType" /> object that indicates the horizontal 
            alignment type of the floating box.
            </summary>
    </member>
    <member name="P:Aspose.Pdf.Generator.FloatingBox.BoxVerticalAlignment">
      <summary>
            Gets or sets a <see cref="T:Aspose.Pdf.Generator.BoxVerticalAlignmentType" /> object that indicates the vertical 
            alignment type of the floating box.
            </summary>
    </member>
    <member name="P:Aspose.Pdf.Generator.FloatingBox.TextVerticalAlignment">
      <summary>
            Gets or sets a <see cref="T:Aspose.Pdf.Generator.VerticalAlignmentType" /> enum that indicates the vertical alignment 
            type of all paragraphs in the floating box.
            </summary>
    </member>
    <member name="P:Aspose.Pdf.Generator.FloatingBox.IsExtraContentClip">
      <summary>
            Gets or sets a value that indicates in case with fixed row height, do content will be truncated if it go out of margin
            </summary>
    </member>
    <member name="P:Aspose.Pdf.Generator.FloatingBox.Border">
      <summary>
            Gets or sets a <see cref="T:Aspose.Pdf.Generator.BorderInfo" /> object that indicates the border info of the floating box.
            </summary>
    </member>
    <member name="P:Aspose.Pdf.Generator.FloatingBox.BackgroundColor">
      <summary>
            Gets or sets a <see cref="T:Aspose.Pdf.Generator.Color" /> object that indicates the background color of the 
            floating box.
            </summary>
    </member>
    <member name="P:Aspose.Pdf.Generator.FloatingBox.Padding">
      <summary>
            Gets or sets a <see cref="T:Aspose.Pdf.Generator.MarginInfo" /> object that indicates the padding of the floating box.
            </summary>
    </member>
    <member name="P:Aspose.Pdf.Generator.FloatingBox.VerticalTextRotationAngle">
      <summary>
            Gets or sets a <see cref="T:Aspose.Pdf.Generator.VerticalTextRotationType" /> object that indicates the text rotation 
            angle in floating box or cells.
            </summary>
    </member>
    <member name="P:Aspose.Pdf.Generator.FloatingBox.ZIndex">
      <summary>
            Gets or sets a int value that indicates the Z-order of the floating box. A floating box with larger ZIndex 
            will be placed over the floating box with smaller ZIndex. ZIndex can be negative. Floating box with negative 
            ZIndex will be placed behind the text in the page.
            </summary>
    </member>
    <member name="P:Aspose.Pdf.Generator.FormatArray.Length">
      <summary>
            Represents an int value that indicates the length of the <see cref="T:Aspose.Pdf.Generator.ListLevelFormat" /> array. It should be equal to or greater than 1.
            </summary>
    </member>
    <member name="P:Aspose.Pdf.Generator.FormatArray.Item(System.Int32)">
      <summary>
            Gets or sets the specified value in terms of index.
            </summary>
    </member>
    <member name="T:Aspose.Pdf.Generator.FormField">
      <summary>
            Represents a formfield <see cref="T:Aspose.Pdf.Generator.Paragraph" /> in the Pdf document.
            </summary>
      <example>
        <code>
            [C#]
            //Create pdf document
            Pdf pdf1 = new Pdf();
            //Add a section into the pdf document
            Aspose.Pdf.Generator.Section Section1 = pdf1.Sections.Add();
            //Create a new FormField object
            FormField ComboBox1 = new FormField();
            // Set the formfield type to Combo box
            ComboBox1.FormFieldType = FormFieldType.Combo;
            // set field name
            ComboBox1.FieldName = "ACombo"; 
            // Specify combo box option values
            ComboBox1.ChoiceOptions = new string[] { "Red", "Green", "Blue" };
            // specify the combo field value to be selected as default
            ComboBox1.FieldValue = "Green";
            // set the form fielf widht
            ComboBox1.FormWidth = 80; 
            // set form field height
            ComboBox1.FormHeight = 20; 
            //Add ComboBox to Paragraphs collection of section object
            Section1.Paragraphs.Add(ComboBox1);
                        
            //Save the pdf document
            pdf1.Save(@"D:\pdftest\FormFieldTest_code.pdf");
            
            [VisualBasic]
            ‘ Create pdf document
            Dim pdf1 As Pdf = New Pdf 
            ‘ Add a section into the pdf document
            Dim Section1 As Section = pdf1.Sections.Add() 
            ‘ Create a new FormField object
            Dim ComboBox1 As FormField = New FormField 
            ‘ Set the formfield type to Combo box
            ComboBox1.FormFieldType = FormFieldType.Combo 
            ‘ set field name
            ComboBox1.FieldName = "ACombo" 
            ‘ Specify combo box option values
            ComboBox1.ChoiceOptions = New String() {"Red", "Green", "Blue"} 
            ‘ specify the combo field value to be selected as default
            ComboBox1.FieldValue = "Green" 
            ‘ set the form fielf widht
            ComboBox1.FormWidth = 80 
            ‘ set form field height
            ComboBox1.FormHeight = 20 
            ‘ Add ComboBox to Paragraphs collection of section object
            Section1.Paragraphs.Add(ComboBox1) 
            ‘ Save the pdf document
            pdf1.Save(...) 
            
            [XML]
            &lt;?xml version="1.0" encoding="utf-8" ?&gt; 
            &lt;Pdf xmlns="Aspose.Pdf"&gt; 
                 &lt;Section&gt; 
                     &lt;FormField FormFieldType="Combo" FieldName="ACombo"
                       FieldValue="Red" ChoiceOptions="Red Green Blue"
                       FormWidth="80" FormHeight="20" /&gt;
                 &lt;/Section&gt; 
            &lt;/Pdf&gt;
            </code>
      </example>
    </member>
    <member name="M:Aspose.Pdf.Generator.FormField.#ctor">
      <summary>
            Initializes a new instance of the <see cref="T:Aspose.Pdf.Generator.FormField" /> class.
            </summary>
    </member>
    <member name="P:Aspose.Pdf.Generator.FormField.FormFieldType">
      <summary>
            Gets or sets a <see cref="P:Aspose.Pdf.Generator.FormField.FormFieldType" /> enumeration that indicates the formfield type.
            </summary>
    </member>
    <member name="P:Aspose.Pdf.Generator.FormField.ComboIsEditable">
      <summary>
            Gets or sets a bool value that indicates whether the combo is editable. Default value is true.
            </summary>
    </member>
    <member name="P:Aspose.Pdf.Generator.FormField.ChoiceOptions">
      <summary>
            Gets or sets a string array that indicates the options of combo or list field.
            </summary>
    </member>
    <member name="P:Aspose.Pdf.Generator.FormField.ChoiceSelections">
      <summary>
            Gets or sets a int array that indicates the choice selection indexes.
            </summary>
    </member>
    <member name="P:Aspose.Pdf.Generator.FormField.TopIndex">
      <summary>
            Gets or sets a int value that indicates the top index (in the options array) of combo or list field. Default is 0.
            </summary>
    </member>
    <member name="P:Aspose.Pdf.Generator.FormField.FieldName">
      <summary>
            Gets or sets a string that indicates the name of the field. Note that each field MUST have a 
            unique name.
            </summary>
    </member>
    <member name="P:Aspose.Pdf.Generator.FormField.FieldValue">
      <summary>
            Gets or sets a string that indicates the value of the field.
            </summary>
    </member>
    <member name="P:Aspose.Pdf.Generator.FormField.FormWidth">
      <summary>
            Gets or sets a float value that indicates the width of the formfield. Default value is 100 points.
            </summary>
    </member>
    <member name="P:Aspose.Pdf.Generator.FormField.FormHeight">
      <summary>
            Gets or sets a float value that indicates the height of the formfield. Default value is 30 points.
            </summary>
    </member>
    <member name="P:Aspose.Pdf.Generator.FormField.CheckBoxIsChecked">
      <summary>
            Gets or sets a bool value that indicates whether the checkbox is checked. Default is false.
            </summary>
    </member>
    <member name="P:Aspose.Pdf.Generator.FormField.TextFontName">
      <summary>
            Gets or sets a string that indicates the font name of the text field. The core fonts 
            (Courier,Courier-Bold,Courier-BoldOblique,Courier-Oblique,Helvetica,Helvetica-Bold,
            Helvetica-BoldOblique, Helvetica-Oblique,Symbol,Times-Bold,Times-BoldItalic,Times-Italic,
            Times-Roman and ZapfDingbats) and Truetype fonts are supported. When using Truetype font, you 
            should use the font family name. If you want the font be bold or italic, set the font name like 
            "Arial,Bold","Arial,Italic" or "Arial,BoldItalic".
            </summary>
    </member>
    <member name="P:Aspose.Pdf.Generator.FormField.TextColor">
      <summary>
            Gets or sets a <see cref="T:System.Drawing.Color" /> object that indicates the color of the text field.
            </summary>
    </member>
    <member name="P:Aspose.Pdf.Generator.FormField.BackgroundColor">
      <summary>
            Gets or sets a <see cref="T:System.Drawing.Color" /> object that indicates the color of the background.
            </summary>
    </member>
    <member name="P:Aspose.Pdf.Generator.FormField.BorderColor">
      <summary>
            Gets or sets a <see cref="T:System.Drawing.Color" /> object that indicates the color of the border.
            </summary>
    </member>
    <member name="P:Aspose.Pdf.Generator.FormField.ButtonColor">
      <summary>
            Gets or sets a <see cref="T:System.Drawing.Color" /> object that indicates the color of the button.
            </summary>
    </member>
    <member name="P:Aspose.Pdf.Generator.FormField.TextFontSize">
      <summary>
            Gets or sets a float value that indicates the font size of the text field. Default is 14 points.
            </summary>
    </member>
    <member name="P:Aspose.Pdf.Generator.FormField.TextIsMultiLine">
      <summary>
            Gets or sets a bool value that indicate whether the text field can be multiline. Default is 
            false.
            </summary>
    </member>
    <member name="P:Aspose.Pdf.Generator.FormField.TextIsPassword">
      <summary>
            Gets or sets a bool value that indicates whether the text field is password. If set to true, 
            the field is intended for entering a secure password that should not be echoed visibly to 
            the screen. Default value is false.
            </summary>
    </member>
    <member name="P:Aspose.Pdf.Generator.FormField.TextMaxLength">
      <summary>
            Gets or sets a int value that indicates the max length of the text can be entered in this field.
            </summary>
    </member>
    <member name="P:Aspose.Pdf.Generator.FormField.IsBordered">
      <summary>
            Gets or sets a bool value that indicates whether the text field is bordered. Default is false.
            </summary>
    </member>
    <member name="P:Aspose.Pdf.Generator.FormField.RadioButtons">
      <summary>
            Gets or sets a <see cref="P:Aspose.Pdf.Generator.FormField.RadioButtons" /> collection that indicates the radiobuttons in this field.
            </summary>
    </member>
    <member name="P:Aspose.Pdf.Generator.FormField.RadioButtonCheckedIndex">
      <summary>
            Gets or sets a int value that indicates the index of the radiobutton that has been checked.
            </summary>
    </member>
    <member name="P:Aspose.Pdf.Generator.FormField.IsReadOnly">
      <summary>
            Gets or sets a bool value that indicates if the field is readonly.
            </summary>
    </member>
    <member name="P:Aspose.Pdf.Generator.FormField.IsMultiSelect">
      <summary>
            Gets or sets a bool value that indicates if multi-selecting is allowed.
            </summary>
    </member>
    <member name="T:Aspose.Pdf.Generator.FormFieldType">
      <summary>
            Enumerates the formfield types.
            </summary>
    </member>
    <member name="F:Aspose.Pdf.Generator.FormFieldType.PushButton">
      <summary>
            Button formfield type.
            </summary>
    </member>
    <member name="F:Aspose.Pdf.Generator.FormFieldType.RadioButton">
      <summary>
            RadioButton formfield type.
            </summary>
    </member>
    <member name="F:Aspose.Pdf.Generator.FormFieldType.List">
      <summary>
            List formfield type.
            </summary>
    </member>
    <member name="F:Aspose.Pdf.Generator.FormFieldType.CheckBox">
      <summary>
            CheckBox formfield type.
            </summary>
    </member>
    <member name="F:Aspose.Pdf.Generator.FormFieldType.Combo">
      <summary>
            Combo formfield type
            </summary>
    </member>
    <member name="F:Aspose.Pdf.Generator.FormFieldType.Text">
      <summary>
            Text formfield type.
            </summary>
    </member>
    <member name="T:Aspose.Pdf.Generator.Graph">
      <summary>
             Represents a graph <see cref="T:Aspose.Pdf.Generator.Paragraph" />.
             </summary>
      <example>
        <code>
             [C#]
            	Pdf pdf1 = new Pdf();
            
            	Section sec1 = pdf1.Sections.Add();
            
            	Graph graph1 = new Graph(sec1,100,400);
            	sec1.Paragraphs.Add(graph1);
            
            	float[] posArr = new float[]{0,0,200,80,300,40,350,90};
            	Curve curve1 = new Curve(graph1,posArr);
            	graph1.Shapes.Add(curve1);
            
            	pdf1.Save(...);
            	
            	[Visual Basic]
            	Dim pdf1 As Pdf = New Pdf()
            
            	Dim sec1 As Section = pdf1.Sections.Add()
            
            	Dim graph1 As Graph = New Graph(sec1, 100, 400)
            	sec1.Paragraphs.Add(graph1)
            
            	Dim posArr() As Single = New Single() {0, 0, 200, 80, 300, 40, 350, 90}
            
            	Dim curve1 As Curve = New Curve(graph1, posArr)
            	graph1.Shapes.Add(curve1)
            	
            	pdf1.Save(...)
            	
            	[XML]
            	&lt;?xml version="1.0" encoding="utf-8" ?&gt;
            	&lt;Pdf xmlns="Aspose.Pdf"&gt;
            		&lt;Section&gt;
            			&lt;Graph Height="100" Width="400"&gt;
            				&lt;Curve Position="0 0 200 80 300 40 350 90" /&gt;
            			&lt;/Graph&gt;
            		&lt;/Section&gt;
            	&lt;/Pdf&gt;
             </code>
      </example>
    </member>
    <member name="M:Aspose.Pdf.Generator.Graph.#ctor">
      <summary>
            Initializes a new instance of the <see cref="T:Aspose.Pdf.Generator.Graph" /> class.
            </summary>
    </member>
    <member name="M:Aspose.Pdf.Generator.Graph.#ctor(System.Single,System.Single)">
      <summary>
            Initializes a new instance of the <see cref="T:Aspose.Pdf.Generator.Graph" /> class.
            </summary>
      <param name="width">The width of the graph.</param>
      <param name="height">The height of the graph.</param>
    </member>
    <member name="M:Aspose.Pdf.Generator.Graph.#ctor(Aspose.Pdf.Generator.Section)">
      <summary>
            Initializes a new instance of the <see cref="T:Aspose.Pdf.Generator.Graph" /> class.
            </summary>
      <param name="section">The specified <see cref="T:Aspose.Pdf.Generator.Section" /> object.</param>
      <remarks>
            This constructor can inherit common property values from the specified 
            <see cref="T:Aspose.Pdf.Generator.Section" /> object.
            </remarks>
    </member>
    <member name="M:Aspose.Pdf.Generator.Graph.#ctor(Aspose.Pdf.Generator.Section,System.Single,System.Single)">
      <summary>
            Initializes a new instance of the <see cref="T:Aspose.Pdf.Generator.Graph" /> class.
            </summary>
      <param name="section">The specified <see cref="T:Aspose.Pdf.Generator.Section" /> object.</param>
      <param name="width">The width of the graph.</param>
      <param name="height">The height of the graph.</param>
      <remarks>
            This constructor can inherit common property values from the specified 
            <see cref="T:Aspose.Pdf.Generator.Section" /> object.
            </remarks>
    </member>
    <member name="M:Aspose.Pdf.Generator.Graph.#ctor(Aspose.Pdf.Generator.HeaderFooter)">
      <summary>
            Initializes a new instance of the <see cref="T:Aspose.Pdf.Generator.Graph" /> class.
            </summary>
      <param name="hf">The specified <see cref="T:Aspose.Pdf.Generator.HeaderFooter" /> object.</param>
      <remarks>
            This constructor can inherit common property values from the specified 
            <see cref="T:Aspose.Pdf.Generator.HeaderFooter" /> object.
            </remarks>
    </member>
    <member name="M:Aspose.Pdf.Generator.Graph.#ctor(Aspose.Pdf.Generator.HeaderFooter,System.Single,System.Single)">
      <summary>
            Initializes a new instance of the <see cref="T:Aspose.Pdf.Generator.Graph" /> class.
            </summary>
      <param name="hf">The specified <see cref="T:Aspose.Pdf.Generator.HeaderFooter" /> object.</param>
      <param name="width">The width of the graph.</param>
      <param name="height">The height of the graph.</param>
      <remarks>
            This constructor can inherit common property values from the specified 
            <see cref="T:Aspose.Pdf.Generator.HeaderFooter" /> object.
            </remarks>
    </member>
    <member name="F:Aspose.Pdf.Generator.Graph.UseTOCasTargetList">
      <summary>
            Get or set a bool value that indicates whether the graph will be referenced in TOC instead of special TableList
            </summary>
    </member>
    <member name="M:Aspose.Pdf.Generator.Graph.CompleteClone">
      <summary>
            Clones a new <see cref="T:Aspose.Pdf.Generator.Graph" /> object. Both format and shapes are cloned.
            </summary>
      <returns>The new Cloned <see cref="T:Aspose.Pdf.Generator.Graph" /> object.</returns>
    </member>
    <member name="P:Aspose.Pdf.Generator.Graph.GraphInfo">
      <summary>
            Gets or sets a <see cref="P:Aspose.Pdf.Generator.Graph.GraphInfo" /> object that indicates the graph info.
            </summary>
    </member>
    <member name="P:Aspose.Pdf.Generator.Graph.IsNeedRepeating">
      <summary>
            Gets or sets a bool value that indicates whether the paragraph need to be repeated on next page.
            Default value is false.The attribute is only valid when the paragraph itself and the object its ReferenceParagraphID referred to both are included in RepeatingRows.
            </summary>
    </member>
    <member name="P:Aspose.Pdf.Generator.Graph.Hyperlink">
      <summary>
            Gets or sets a <see cref="P:Aspose.Pdf.Generator.Graph.Hyperlink" /> object that indicates the hyper link info of the graph.
            </summary>
    </member>
    <member name="P:Aspose.Pdf.Generator.Graph.Shapes">
      <summary>
            Gets or sets a <see cref="P:Aspose.Pdf.Generator.Graph.Shapes" /> collection that indicates all shapes in the graph.
            </summary>
    </member>
    <member name="P:Aspose.Pdf.Generator.Graph.Alignment">
      <summary>
            Gets or sets a <see cref="T:Aspose.Pdf.Generator.AlignmentType" /> that indicates the paragraph alignment type.
            </summary>
    </member>
    <member name="P:Aspose.Pdf.Generator.Graph.Title">
      <summary>
            Gets or sets a string value that indicates the title of the graph.
            </summary>
    </member>
    <member name="P:Aspose.Pdf.Generator.Graph.TextInfo">
      <summary>
            Gets or sets a <see cref="P:Aspose.Pdf.Generator.Graph.TextInfo" /> object that indicates the text info of the graph title.
            </summary>
    </member>
    <member name="P:Aspose.Pdf.Generator.Graph.GraphNotes">
      <summary>
            Gets or sets a <see cref="P:Aspose.Pdf.Generator.Graph.GraphNotes" /> collection that indicates all notes in the graph.
            </summary>
    </member>
    <member name="P:Aspose.Pdf.Generator.Graph.GraphWidth">
      <summary>
            Gets or sets a float value that indicates the graph width.
            The unit is point. In XML,the default unit is point,but cm and inch are also 
            supported. For example,GraphWidth="10cm" or GraphWidth="5inch".
            </summary>
    </member>
    <member name="P:Aspose.Pdf.Generator.Graph.GraphHeight">
      <summary>
            Gets or sets a float value that indicates the graph height.
            The unit is point. In XML,the default unit is point,but cm and inch are also 
            supported. For example,GraphHeight="10cm" or GraphHeight="5inch".
            </summary>
    </member>
    <member name="P:Aspose.Pdf.Generator.Graph.ZIndex">
      <summary>
            Gets or sets a int value that indicates the Z-order of the graph. A graph with larger ZIndex 
            will be placed over the graph with smaller ZIndex. ZIndex can be negative. Graph with negative 
            ZIndex will be placed behind the text in the page.
            </summary>
    </member>
    <member name="P:Aspose.Pdf.Generator.Graph.RotatingAngle">
      <summary>
            Gets or sets a float value that indicates the rotation angle of the coordinate system 
            when transforming a coordinate system.
            </summary>
    </member>
    <member name="P:Aspose.Pdf.Generator.Graph.AutoNumber">
      <summary>
            Gets or sets a automated seqence number for Graph objects. The default first value is 1. 
            If set to be n,the value of the next Graph will be (n+1).
            </summary>
    </member>
    <member name="T:Aspose.Pdf.Generator.GraphInfo">
      <summary>
             Encapsulates info for a <see cref="T:Aspose.Pdf.Generator.Graph" /> paragraph.
             </summary>
      <example>
        <code>
             [C#]
            	Pdf pdf1 = new Pdf();
            	
            	Section sec1 = pdf1.Sections.Add();
            	
            	Graph graph1 = new Graph(sec1,100,400);
            	sec1.Paragraphs.Add(graph1);
            	
            	float[] posArr = new float[]{100,0,300,0};
            	Line l1 = new Line(graph1,posArr);
            	l1.GraphInfo.Color = new Aspose.Pdf.Generator.Color("Red");
            	l1.GraphInfo.LineWidth = 3;
            	l1.GraphInfo.LineCapMode = 1;
            	graph1.Shapes.Add(l1);
            	
            	posArr = new float[]{100,50,300,50};
            	Line l2 = new Line(graph1,posArr);
            	l2.GraphInfo.Color = new Aspose.Pdf.Generator.Color(0,128,128);
            	l2.GraphInfo.DashLengthInBlack = 2;
            	l2.GraphInfo.DashLengthInWhite = 1;
            	graph1.Shapes.Add(l2);
            
            	Circle circle1 = new Circle(graph1,200,50,30);
            	graph1.Shapes.Add(circle1);
            	circle1.GraphInfo.FillColor = new Aspose.Pdf.Generator.Color("Green");
            	circle1.GraphInfo.IsFilled = true;
             
             pdf1.Save(...);
             
             [Visual Basic]
            	Dim pdf1 As Pdf = New Pdf()
            
            	Dim sec1 As Section = pdf1.Sections.Add()
            
            	Dim graph1 As Graph = New Graph(sec1, 100, 400)
            	sec1.Paragraphs.Add(graph1)
            
            	Dim posArr() As Single = New Single() {100, 0, 300, 0}
            
            	Dim l1 As Line = New Line(graph1, posArr)
            	l1.GraphInfo.Color = New Aspose.Pdf.Generator.Color("Red")
            	l1.GraphInfo.LineWidth = 3
            	l1.GraphInfo.LineCapMode = 1
            	graph1.Shapes.Add(l1)
            
            	posArr = New Single() {100, 50, 300, 50}
            
            	Dim l2 As Line = New Line(graph1, posArr)
            	l2.GraphInfo.Color = New Aspose.Pdf.Generator.Color(0, 128, 128)
            	l2.GraphInfo.DashLengthInBlack = 2
            	l2.GraphInfo.DashLengthInWhite = 1
            	graph1.Shapes.Add(l2)
            
            	Dim circle1 As Circle = New Circle(graph1, 200, 50, 30)
            	graph1.Shapes.Add(circle1)
            	circle1.GraphInfo.FillColor = New Aspose.Pdf.Generator.Color("Green")
            	circle1.GraphInfo.IsFilled = True
             
             pdf1.Save(...)
             
             [XML]
             &lt;?xml version="1.0" encoding="utf-8" ?&gt;
             &lt;Pdf xmlns="Aspose.Pdf"&gt;
            		&lt;Section&gt;
            			&lt;Graph Height="100" Width="400"&gt;
            				&lt;Line Color="Red" LineWidth="3" LineCapMode="1" Position="100 0 300 0" /&gt;
            				&lt;Line Color="rgb 0 128 128" Dash="2 1" Position="100 50 300 50" /&gt;
            				&lt;Circle CenterPosition="200 50" Radius="30" FillColor="Green" IsFilled="true" /&gt;
            			&lt;/Graph&gt;
            		&lt;/Section&gt;
             &lt;/Pdf&gt;
             
             </code>
      </example>
    </member>
    <member name="M:Aspose.Pdf.Generator.GraphInfo.#ctor">
      <summary>
            Initializes a new instance of the <see cref="T:Aspose.Pdf.Generator.GraphInfo" /> class.
            </summary>
    </member>
    <member name="M:Aspose.Pdf.Generator.GraphInfo.Clone">
      <summary>
            Clones a new GraphInfo object.
            </summary>
      <returns>The new object.</returns>
    </member>
    <member name="M:Aspose.Pdf.Generator.GraphInfo.SetPolyDash(System.String)">
      <summary>
            Sets poly dash.
            </summary>
      <param name="dash">The string contains dash data array, the length of data array shoule be less than 8, separated by blank. </param>
    </member>
    <member name="P:Aspose.Pdf.Generator.GraphInfo.LineWidth">
      <summary>
            Gets or sets a float value that indicates the line width of the graph.
            </summary>
    </member>
    <member name="P:Aspose.Pdf.Generator.GraphInfo.GraphBorder">
      <summary>
            Gets or sets a borderinfo value that indicates the border information of the graph.
            </summary>
    </member>
    <member name="P:Aspose.Pdf.Generator.GraphInfo.Color">
      <summary>
            Gets or sets a <see cref="P:Aspose.Pdf.Generator.GraphInfo.Color" /> object that indicates the color of the graph.
            </summary>
    </member>
    <member name="P:Aspose.Pdf.Generator.GraphInfo.FillColor">
      <summary>
            Gets or sets a <see cref="P:Aspose.Pdf.Generator.GraphInfo.Color" /> object that indicates the fill color of the graph.
            </summary>
    </member>
    <member name="P:Aspose.Pdf.Generator.GraphInfo.DashLengthInBlack">
      <summary>
            Gets or sets a float value that indicates the dash length in black.The unit is point.
            Refer to the programmer's guide for more info.
            </summary>
    </member>
    <member name="P:Aspose.Pdf.Generator.GraphInfo.DashLengthInWhite">
      <summary>
            Gets or sets a float value that indicates the dash length in white.The unit is point.
            Refer to the programmer's guide for more info.
            </summary>
    </member>
    <member name="P:Aspose.Pdf.Generator.GraphInfo.CornerRadius">
      <summary>
            Gets or sets Round corner radius.
            </summary>
    </member>
    <member name="P:Aspose.Pdf.Generator.GraphInfo.IsFilled">
      <summary>
            Gets or sets a bool value that indicates whether this shape is filled.
            </summary>
    </member>
    <member name="P:Aspose.Pdf.Generator.GraphInfo.IsStroked">
      <summary>
            Gets or sets a bool value that indicates whether this shape is stroked.
            </summary>
    </member>
    <member name="P:Aspose.Pdf.Generator.GraphInfo.IsAddedArrowAtStart">
      <summary>
            Gets or sets a bool value that indicates whether add arrow at the start of line.
            </summary>
    </member>
    <member name="P:Aspose.Pdf.Generator.GraphInfo.IsAddedArrowAtEnd">
      <summary>
            Gets or sets a bool value that indicates whether add arrow at the end of line.
            </summary>
    </member>
    <member name="P:Aspose.Pdf.Generator.GraphInfo.LineJoinMode">
      <summary>
            Gets or sets an int value between 0 and 2 that indicates the line join mode.
            Refer to the programmer's guide for more info.
            </summary>
    </member>
    <member name="P:Aspose.Pdf.Generator.GraphInfo.LineCapMode">
      <summary>
            Gets or sets an int value between 0 and 2 that indicates the line cap mode.
            Refer to the programmer's guide for more info.
            </summary>
    </member>
    <member name="P:Aspose.Pdf.Generator.GraphInfo.Flatness">
      <summary>
            Gets or sets an positive int value that indicates the flatness.
            Refer to the programmer's guide for more info.
            </summary>
    </member>
    <member name="P:Aspose.Pdf.Generator.GraphInfo.MiterLimit">
      <summary>
            Gets or sets an int value greater than or equal to 1 that indicates the miter limit.
            Refer to the programmer's guide for more info.
            </summary>
    </member>
    <member name="P:Aspose.Pdf.Generator.GraphInfo.NewOriginX">
      <summary>
            Gets or sets a float value that indicates the x-coordinate of the new origin when transforming a coordinate system.
            </summary>
    </member>
    <member name="P:Aspose.Pdf.Generator.GraphInfo.NewOriginY">
      <summary>
            Gets or sets a float value that indicates the y-coordinate of the new origin when transforming a coordinate system.
            </summary>
    </member>
    <member name="P:Aspose.Pdf.Generator.GraphInfo.RotationAngle">
      <summary>
            Gets or sets a float value that indicates the rotation angle of the coordinate system 
            when transforming a coordinate system.
            </summary>
    </member>
    <member name="P:Aspose.Pdf.Generator.GraphInfo.ScalingRateX">
      <summary>
            Gets or sets a float value that indicates the scaling rate of the x-coordinate when transforming a coordinate system.
            </summary>
    </member>
    <member name="P:Aspose.Pdf.Generator.GraphInfo.ScalingRateY">
      <summary>
            Gets or sets a float value that indicates the scaling rate of the y-coordinate when transforming a coordinate system.
            </summary>
    </member>
    <member name="P:Aspose.Pdf.Generator.GraphInfo.SkewAngleX">
      <summary>
            Gets or sets a float value that indicates the skew angle of the x-coordinate when transforming a coordinate system.
            </summary>
    </member>
    <member name="P:Aspose.Pdf.Generator.GraphInfo.SkewAngleY">
      <summary>
            Gets or sets a float value that indicates the skew angle of the y-coordinate when transforming a coordinate system.
            </summary>
    </member>
    <member name="P:Aspose.Pdf.Generator.GraphInfo.FillRule">
      <summary>
            Gets or sets a string that indicates the graph fill rule.It can be "winding" or "evenodd".
            Refer to the programmer's guide for more info.
            </summary>
    </member>
    <member name="T:Aspose.Pdf.Generator.GraphNote">
      <summary>
             Represents a note in a <see cref="T:Aspose.Pdf.Generator.Graph" />.
             </summary>
      <example>
        <code>
             [C#]
            	Pdf pdf1 = new Pdf();
            
            	Section sec1 = pdf1.Sections.Add();
            
            	Graph graph1 = new Graph(sec1,100,400);
            	sec1.Paragraphs.Add(graph1);
            
            	Circle circle1 = new Circle(graph1,200,50,30);
            	graph1.Shapes.Add(circle1);
            	
            	GraphNote note1 = new GraphNote(sec1);
            	note1.Content = "This is a circle.";
            	note1.PositionX = 160;
            	note1.PositionY = 10;
            	graph1.GraphNotes.Add(note1);
             
             pdf1.Save(...);
             
             [Visual Basic]
            	Dim pdf1 As Pdf = New Pdf()
            
            	Dim sec1 As Section = pdf1.Sections.Add()
            
            	Dim graph1 As Graph = New Graph(sec1, 100, 400)
            	sec1.Paragraphs.Add(graph1)
            
            	Dim circle1 As Circle = New Circle(graph1, 200, 50, 30)
            	graph1.Shapes.Add(circle1)
            
            	Dim note1 As GraphNote = New GraphNote(sec1)
            	note1.Content = "This is a circle."
            	note1.PositionX = 160
            	note1.PositionY = 10
            	graph1.GraphNotes.Add(note1)
             
             pdf1.Save(...)
             
             [XML]
             &lt;?xml version="1.0" encoding="utf-8" ?&gt;
             &lt;Pdf xmlns="Aspose.Pdf"&gt;
            		&lt;Section&gt;
            			&lt;Graph Height="100" Width="400"&gt;
            				&lt;Circle CenterPosition="200 50" Radius="30" /&gt;
            				&lt;Note Position="160 10"&gt;This is a circle.&lt;/Note&gt;
            			&lt;/Graph&gt;
            		&lt;/Section&gt;
             &lt;/Pdf&gt;
             
             </code>
      </example>
    </member>
    <member name="M:Aspose.Pdf.Generator.GraphNote.#ctor">
      <summary>
            Initializes a new instance of the <see cref="T:Aspose.Pdf.Generator.GraphNote" /> class.
            </summary>
    </member>
    <member name="M:Aspose.Pdf.Generator.GraphNote.#ctor(Aspose.Pdf.Generator.Section)">
      <summary>
            Initializes a new instance of the <see cref="T:Aspose.Pdf.Generator.GraphNote" /> class.
            </summary>
      <param name="section">The section object.</param>
    </member>
    <member name="M:Aspose.Pdf.Generator.GraphNote.#ctor(Aspose.Pdf.Generator.Section,System.String)">
      <summary>
            Initializes a new instance of the <see cref="T:Aspose.Pdf.Generator.GraphNote" /> class.
            </summary>
      <param name="section">The section object.</param>
    </member>
    <member name="P:Aspose.Pdf.Generator.GraphNote.VerticalTextRotationAngle">
      <summary>
            Gets or sets a <see cref="T:Aspose.Pdf.Generator.VerticalTextRotationType" /> object that indicates the text rotation angle
            </summary>
    </member>
    <member name="P:Aspose.Pdf.Generator.GraphNote.Content">
      <summary>
            Gets or sets a string that indicates the content of the note.
            </summary>
    </member>
    <member name="P:Aspose.Pdf.Generator.GraphNote.TextInfo">
      <summary>
            Gets or sets a <see cref="P:Aspose.Pdf.Generator.GraphNote.TextInfo" /> object that indicates the text info of the note.
            </summary>
    </member>
    <member name="P:Aspose.Pdf.Generator.GraphNote.PositionX">
      <summary>
            Gets or sets a float value that indicates the x-coordinate of the beginning position of the note.
            </summary>
    </member>
    <member name="P:Aspose.Pdf.Generator.GraphNote.PositionY">
      <summary>
            Gets or sets a float value that indicates the y-coordinate of the beginning position of the note.
            </summary>
    </member>
    <member name="P:Aspose.Pdf.Generator.GraphNote.LongSideAlignment">
      <summary>
            Gets or sets an alignment of text relatively to long side of text.
            </summary>
    </member>
    <member name="P:Aspose.Pdf.Generator.GraphNote.Direction">
      <summary>
            Gets or sets a direction of a text from it's origin.
            </summary>
    </member>
    <member name="P:Aspose.Pdf.Generator.GraphNote.HorizontalScaling">
      <summary>
            Gets or sets horizontal scale of a text.
            </summary>
    </member>
    <member name="P:Aspose.Pdf.Generator.GraphNote.RotationAngle">
      <summary>
            Gets or sets a rotate angle of the GraphNote.
            </summary>
    </member>
    <member name="T:Aspose.Pdf.Generator.GraphNotes">
      <summary>
             Represents a collection of <see cref="T:Aspose.Pdf.Generator.GraphNote" /> objects.
             </summary>
      <example>
        <code>
             [C#]
            	Pdf pdf1 = new Pdf();
            
            	Section sec1 = pdf1.Sections.Add();
            
            	Graph graph1 = new Graph(sec1,100,400);
            	sec1.Paragraphs.Add(graph1);
            
            	Circle circle1 = new Circle(graph1,200,50,30);
            	graph1.Shapes.Add(circle1);
            	
            	GraphNote note1 = new GraphNote(sec1);
            	note1.Content = "This is a circle.";
            	note1.PositionX = 160;
            	note1.PositionY = 10;
            	graph1.GraphNotes.Add(note1);
             
             pdf1.Save(...);
             
             [Visual Basic]
            	Dim pdf1 As Pdf = New Pdf()
            
            	Dim sec1 As Section = pdf1.Sections.Add()
            
            	Dim graph1 As Graph = New Graph(sec1, 100, 400)
            	sec1.Paragraphs.Add(graph1)
            
            	Dim circle1 As Circle = New Circle(graph1, 200, 50, 30)
            	graph1.Shapes.Add(circle1)
            
            	Dim note1 As GraphNote = New GraphNote(sec1)
            	note1.Content = "This is a circle."
            	note1.PositionX = 160
            	note1.PositionY = 10
            	graph1.GraphNotes.Add(note1)
             
             pdf1.Save(...)
             
             [XML]
             &lt;?xml version="1.0" encoding="utf-8" ?&gt;
             &lt;Pdf xmlns="Aspose.Pdf"&gt;
            		&lt;Section&gt;
            			&lt;Graph Height="100" Width="400"&gt;
            				&lt;Circle CenterPosition="200 50" Radius="30" /&gt;
            				&lt;Note Position="160 10"&gt;This is a circle.&lt;/Note&gt;
            			&lt;/Graph&gt;
            		&lt;/Section&gt;
             &lt;/Pdf&gt;
             
             </code>
      </example>
    </member>
    <member name="M:Aspose.Pdf.Generator.GraphNotes.#ctor">
      <summary>
            Initializes a new instance of the <see cref="T:Aspose.Pdf.Generator.GraphNotes" /> class.
            </summary>
    </member>
    <member name="M:Aspose.Pdf.Generator.GraphNotes.Add(Aspose.Pdf.Generator.GraphNote)">
      <summary>
            Adds a new <see cref="T:Aspose.Pdf.Generator.GraphNote" /> object into the collection.
            </summary>
      <param name="graphNote">The <see cref="T:Aspose.Pdf.Generator.GraphNote" /> object to be added.</param>
    </member>
    <member name="M:Aspose.Pdf.Generator.GraphNotes.Remove(Aspose.Pdf.Generator.GraphNote)">
      <summary>
            Removes a <see cref="T:Aspose.Pdf.Generator.GraphNote" /> object from the collection.
            </summary>
      <param name="noteToRemove">The <see cref="T:Aspose.Pdf.Generator.GraphNote" /> object to be romoved.</param>
    </member>
    <member name="M:Aspose.Pdf.Generator.GraphNotes.Insert(System.Int32,Aspose.Pdf.Generator.GraphNote)">
      <summary>
            Inserts a new <see cref="T:Aspose.Pdf.Generator.GraphNote" /> object into the collection at specified position.
            </summary>
      <param name="index">The zero-based index at which new <see cref="T:Aspose.Pdf.Generator.GraphNote" /> object should be inserted.</param>
      <param name="graphNote">The <see cref="T:Aspose.Pdf.Generator.GraphNote" /> object to be inserted.</param>
    </member>
    <member name="M:Aspose.Pdf.Generator.GraphNotes.Insert(Aspose.Pdf.Generator.GraphNote,Aspose.Pdf.Generator.GraphNote)">
      <summary>
            Inserts a new <see cref="T:Aspose.Pdf.Generator.GraphNote" /> object into the collection after specified GraphNote object.
            </summary>
      <param name="noteToInsertAfter">The <see cref="T:Aspose.Pdf.Generator.GraphNote" /> object to insert after.</param>
      <param name="newNote">The <see cref="T:Aspose.Pdf.Generator.GraphNote" /> object to be inserted.</param>
    </member>
    <member name="M:Aspose.Pdf.Generator.GraphNotes.CopyTo(Aspose.Pdf.Generator.GraphNote[],System.Int32)">
      <summary>
            Copies the elements to a <see cref="T:Aspose.Pdf.Generator.GraphNote" /> object array, starting at a specified array index.
            </summary>
      <param name="graphNoteArray">The <see cref="T:Aspose.Pdf.Generator.GraphNote" /> object array.</param>
      <param name="index">The start index.</param>
    </member>
    <member name="P:Aspose.Pdf.Generator.GraphNotes.Item(System.Int32)">
      <summary>
            Gets or sets a <see cref="T:Aspose.Pdf.Generator.GraphNote" /> object from the collection according to GraphNote index.
            </summary>
    </member>
    <member name="T:Aspose.Pdf.Generator.GrayColorSpace">
      <summary>
             Encapsulates the Gray colorspace.
             </summary>
      <remarks>
             Note that you can use the <see cref="M:Aspose.Pdf.Generator.Color.#ctor(System.Byte)" /> constructor to create 
             a color object with gray colorspace and need not use this class directly.
             </remarks>
      <example>
        <code>
             [C#]
            	Pdf pdf1 = new Pdf();
            
            	Section sec1 = pdf1.Sections.Add();
            
            	Graph graph1 = new Graph(sec1,200,400);
            	sec1.Paragraphs.Add(graph1);
            
            	float[] posArr = new float[]{100,0,300,0};
            	Line l1 = new Line(graph1,posArr);
            	l1.GraphInfo.Color = new Aspose.Pdf.Generator.Color("Red");
            	graph1.Shapes.Add(l1);
            	
            	posArr = new float[]{100,50,300,50};
            	Line l2 = new Line(graph1,posArr);
            	l2.GraphInfo.Color = new Aspose.Pdf.Generator.Color(0,128,128);
            	graph1.Shapes.Add(l2);
            	
            	posArr = new float[]{100,100,300,100};
            	Line l3 = new Line(graph1,posArr);
            	l3.GraphInfo.Color = new Aspose.Pdf.Generator.Color(0,128,64,0);
            	graph1.Shapes.Add(l3);
            
            	posArr = new float[]{100,150,300,150};
            	Line l4 = new Line(graph1,posArr);
            	l4.GraphInfo.Color = new Aspose.Pdf.Generator.Color((byte)140);
            	graph1.Shapes.Add(l4);
             
             pdf1.Save(...);
             
             [Visual Basic]
            	Dim pdf1 As Pdf = New Pdf()
            
            	Dim sec1 As Section = pdf1.Sections.Add()
            
            	Dim graph1 As Graph = New Graph(sec1, 200, 400)
            	sec1.Paragraphs.Add(graph1)
            
            	Dim posArr As Single() = New Single() {100, 0, 300, 0}
            
            	Dim l1 As Line = New Line(graph1, posArr)
            	l1.GraphInfo.Color = New Aspose.Pdf.Generator.Color("Red")
            	graph1.Shapes.Add(l1)
            
            	posArr = New Single() {100, 50, 300, 50}
            
            	Dim l2 As Line = New Line(graph1, posArr)
            	l2.GraphInfo.Color = New Aspose.Pdf.Generator.Color(0, 128, 128)
            	graph1.Shapes.Add(l2)
            
            	posArr = New Single() {100, 100, 300, 100}
            
            	Dim l3 As Line = New Line(graph1, posArr)
            	l3.GraphInfo.Color = New Aspose.Pdf.Generator.Color(0, 128, 64, 0)
            	graph1.Shapes.Add(l3)
            
            	posArr = New Single() {100, 150, 300, 150}
            
            	Dim l4 As Line = New Line(graph1, posArr)
            	l4.GraphInfo.Color = New Aspose.Pdf.Generator.Color(CType(140,Byte))
            	graph1.Shapes.Add(l4)
             
             pdf1.Save(...)
             
             [XML]
             &lt;?xml version="1.0" encoding="utf-8" ?&gt;
             &lt;Pdf xmlns="Aspose.Pdf"&gt;
            		&lt;Section&gt;
            			&lt;Graph Height="200" Width="400"&gt;
            				&lt;Line Color="Red" Position="100 0 300 0" /&gt;
            				&lt;Line Color="rgb 0 128 128" Position="100 50 300 50" /&gt;
            				&lt;Line Color="cmyk 0 128 64 0" Position="100 100 300 100" /&gt;
            				&lt;Line Color="gray 140" Position="100 150 300 150" /&gt;
            			&lt;/Graph&gt;
            		&lt;/Section&gt;
             &lt;/Pdf&gt;
             
             </code>
      </example>
    </member>
    <member name="P:Aspose.Pdf.Generator.GrayColorSpace.GrayValue">
      <summary>
            Represents a <see cref="T:System.Byte" /> value(0-255) that indicates the gray scale.
            </summary>
    </member>
    <member name="T:Aspose.Pdf.Generator.HeaderFooter">
      <summary>
             Represents a header or footer of a page in a Pdf document.
             </summary>
      <example>
        <code>
             [C#]
            	Pdf pdf = new Pdf();
            
            	Section section = new Section(pdf);
            	pdf.Sections.Add(section);
            
            	HeaderFooter hf1 = new HeaderFooter(section);
            	section.OddHeader = section.EvenHeader = hf1;
            	hf1.IsFirstPageOnly = true;
            
            	Text text = new Text(hf1);
            	hf1.Paragraphs.Add(text);
            	Segment segment = new Segment(text);
            	text.Segments.Add(segment);
            	segment.Content = "header for first page";
            
            	HeaderFooter hf2 = new HeaderFooter(section);
            	section.AdditionalOddHeader = hf2;
            	hf2.IsSubsequentPagesOnly = true;
            			
            	text = new Text(hf2);
            	hf2.Paragraphs.Add(text);
            	segment = new Segment(text);
            	text.Segments.Add(segment);
            	segment.Content = "odd header for subsequent pages";
            
            	HeaderFooter hf3 = new HeaderFooter(section);
            	section.AdditionalEvenHeader = hf3;
            	hf3.IsSubsequentPagesOnly = true;
            
            	text = new Text(hf3);
            	hf3.Paragraphs.Add(text);
            	segment = new Segment(text);
            	text.Segments.Add(segment);
            	segment.Content = "even header for subsequent pages";
            
            	for(int i = 1; i &lt;= 6; i++)
            	{
            		Text text1 = new Text(section);
            		text1.IsFirstParagraph = true;
            		section.Paragraphs.Add(text1);
            		Segment segment1 = new Segment(text1);
            		text1.Segments.Add(segment1);
            		segment1.Content = "page " + i.ToString();
            	}
            
            	pdf.Save(...);
             
             [Visual Basic]
            	Dim pdf As Pdf = New Pdf()
            
            	Dim section As Section = New Section(pdf)
            	pdf.Sections.Add(section)
            
            	Dim hf1 As HeaderFooter = New HeaderFooter(section)
            	section.OddHeader = hf1
            	section.EvenHeader = hf1
            	hf1.IsFirstPageOnly = True
            
            	Dim text As Text = New Text(hf1)
            	hf1.Paragraphs.Add(text)
            	Dim segment As Segment = New Segment(text)
            	text.Segments.Add(segment)
            	segment.Content = "header for first page"
            
            	Dim hf2 As HeaderFooter = New HeaderFooter(section)
            	section.AdditionalOddHeader = hf2
            	hf2.IsSubsequentPagesOnly = True
            
            	text = New Text(hf2)
            	hf2.Paragraphs.Add(text)
            	segment = New Segment(text)
            	text.Segments.Add(segment)
            	segment.Content = "odd header for subsequent pages"
            
            	Dim hf3 As HeaderFooter = New HeaderFooter(section)
            	section.AdditionalEvenHeader = hf3
            	hf3.IsSubsequentPagesOnly = True
            
            	text = New Text(hf3)
            	hf3.Paragraphs.Add(text)
            	segment = New Segment(text)
            	text.Segments.Add(segment)
            	segment.Content = "even header for subsequent pages"
            
            	Dim i As Integer
            	For i = 1 To 6 Step i + 1
            	Dim text1 As Text = New Text(section)
            	text1.IsFirstParagraph = True
            	section.Paragraphs.Add(text1)
            	Dim segment1 As Segment = New Segment(text1)
            	text1.Segments.Add(segment1)
            	segment1.Content = "page " + i.ToString()
            	Next
            
            	pdf.Save(...)
             
             [XML]
            	&lt;?xml version="1.0" encoding="utf-8" ?&gt; 
            	&lt;Pdf xmlns="Aspose.Pdf"&gt;
            	&lt;Section &gt;
            	&lt;Header IsFirstPageOnly="true"&gt;
            	&lt;Text&gt;
            	&lt;Segment&gt;header for first page&lt;/Segment&gt;
            	&lt;/Text&gt;
            	&lt;/Header&gt;
            	&lt;Header Type="odd" IsSubsequentPagesOnly="true"&gt;
            	&lt;Text&gt;
            	&lt;Segment&gt;odd header for subsequent pages&lt;/Segment&gt;
            	&lt;/Text&gt;
            	&lt;/Header&gt;
            	&lt;Header Type="even" IsSubsequentPagesOnly="true"&gt;
            	&lt;Text&gt;
            	&lt;Segment&gt;even header for subsequent pages&lt;/Segment&gt;
            	&lt;/Text&gt;
            	&lt;/Header&gt;
            	&lt;Text IsFirstParagraph="true"&gt; 
            	&lt;Segment&gt;page1&lt;/Segment&gt; 
            	&lt;/Text&gt;	
            	&lt;Text IsFirstParagraph="true"&gt; 
            	&lt;Segment&gt;page2&lt;/Segment&gt; 
            	&lt;/Text&gt;	
            	&lt;Text IsFirstParagraph="true"&gt; 
            	&lt;Segment&gt;page3&lt;/Segment&gt; 
            	&lt;/Text&gt;	
            	&lt;Text IsFirstParagraph="true"&gt; 
            	&lt;Segment&gt;page4&lt;/Segment&gt; 
            	&lt;/Text&gt;	
            	&lt;Text IsFirstParagraph="true"&gt; 
            	&lt;Segment&gt;page5&lt;/Segment&gt; 
            	&lt;/Text&gt;	
            	&lt;Text IsFirstParagraph="true"&gt; 
            	&lt;Segment&gt;page6&lt;/Segment&gt; 
            	&lt;/Text&gt;	
            	&lt;/Section&gt;
            	&lt;/Pdf&gt;
             
             </code>
      </example>
    </member>
    <member name="M:Aspose.Pdf.Generator.HeaderFooter.#ctor">
      <summary>
            Initializes a new instance of the <see cref="T:Aspose.Pdf.Generator.HeaderFooter" /> class.
            </summary>
    </member>
    <member name="M:Aspose.Pdf.Generator.HeaderFooter.#ctor(Aspose.Pdf.Generator.Section)">
      <summary>
            Initializes a new instance of the <see cref="T:Aspose.Pdf.Generator.HeaderFooter" /> class.
            </summary>
      <param name="section">The section object.</param>
      <remarks>
            This constructor can inherit common property values from the specified 
            <see cref="T:Aspose.Pdf.Generator.Section" /> object.
            </remarks>
    </member>
    <member name="M:Aspose.Pdf.Generator.HeaderFooter.CompleteClone">
      <summary>
            Clones a new <see cref="T:Aspose.Pdf.Generator.HeaderFooter" /> object. Both format and conent is cloned. 
            </summary>
      <returns>The new cloned <see cref="T:Aspose.Pdf.Generator.HeaderFooter" /> object.</returns>
    </member>
    <member name="M:Aspose.Pdf.Generator.HeaderFooter.CompleteCloneAll">
      <summary>
            Clones a new <see cref="T:Aspose.Pdf.Generator.HeaderFooter" /> object. all format and conent is cloned. 
            </summary>
      <returns>The new cloned <see cref="T:Aspose.Pdf.Generator.HeaderFooter" /> object.</returns>
    </member>
    <member name="P:Aspose.Pdf.Generator.HeaderFooter.TextInfo">
      <summary>
            Gets or sets a <see cref="P:Aspose.Pdf.Generator.HeaderFooter.TextInfo" /> object that indicates the text info of 
            the header or footer.
            </summary>
    </member>
    <member name="P:Aspose.Pdf.Generator.HeaderFooter.GraphInfo">
      <summary>
            Gets or sets a <see cref="P:Aspose.Pdf.Generator.HeaderFooter.GraphInfo" /> object that indicates the graph info 
            of the header or footer.
            </summary>
    </member>
    <member name="P:Aspose.Pdf.Generator.HeaderFooter.Paragraphs">
      <summary>
            Gets or sets a <see cref="P:Aspose.Pdf.Generator.HeaderFooter.Paragraphs" /> collection that indicates all paragraphs in 
            the header or footer. 
            </summary>
    </member>
    <member name="P:Aspose.Pdf.Generator.HeaderFooter.Margin">
      <summary>
            Gets or sets a <see cref="T:Aspose.Pdf.Generator.MarginInfo" /> object that indicates the margin info of the 
            header or footer.
            </summary>
    </member>
    <member name="P:Aspose.Pdf.Generator.HeaderFooter.DistanceFromEdge">
      <summary>
            Gets or sets a float value that indicates the Header or Footer's distance from 
            the edge of the page.The unit is point. In XML,the default unit is point,but cm 
            and inch are also supported. For example,"10cm" or "5inch".
            </summary>
    </member>
    <member name="P:Aspose.Pdf.Generator.HeaderFooter.IsFirstPageOnly">
      <summary>
            Gets or sets a bool value that indicates whether the header or footer be printed on first page only. 
            The default value is false.If this property is set to true, the <see cref="P:Aspose.Pdf.Generator.HeaderFooter.IsSubsequentPagesOnly" /> should be false.
            </summary>
    </member>
    <member name="P:Aspose.Pdf.Generator.HeaderFooter.IsLastPageOnly">
      <summary>
            Gets or sets a bool value that indicates whether the header or footer be printed on last page only. 
            The default value is false.
            </summary>
    </member>
    <member name="P:Aspose.Pdf.Generator.HeaderFooter.IsSubsequentPagesOnly">
      <summary>
            Gets or sets a bool value that indicates whether the header or footer be printed not on first page but 
            on subsequent pages only. The default value is false. If this property is set to true, the <see cref="P:Aspose.Pdf.Generator.HeaderFooter.IsFirstPageOnly" /> should be false.
            </summary>
    </member>
    <member name="T:Aspose.Pdf.Generator.HeaderFooterType">
      <summary>
            Enumerates all header or footer types.
            </summary>
    </member>
    <member name="F:Aspose.Pdf.Generator.HeaderFooterType.Both">
      <summary>
            Displays header or footer in both odd and even pages.
            </summary>
    </member>
    <member name="F:Aspose.Pdf.Generator.HeaderFooterType.Even">
      <summary>
            Displays header or footer in even pages.
            </summary>
    </member>
    <member name="F:Aspose.Pdf.Generator.HeaderFooterType.Odd">
      <summary>
            Displays header or footer in odd pages. 
            </summary>
    </member>
    <member name="T:Aspose.Pdf.Generator.Heading">
      <summary>
             Represents a heading in Pdf document.
             </summary>
      <example>
        <code>
             [C#]
            	Pdf pdf1 = new Pdf();
            
            	Section sec1 = pdf1.Sections.Add();
            
            	Heading heading1 = new Heading(pdf1,sec1,1);
            
            	Segment segment1 = new Segment(heading1);
            	heading1.Segments.Add(segment1);
            	heading1.IsAutoSequence = true;
            	segment1.Content = "this is heading of level 1";
            	sec1.Paragraphs.Add(heading1); //please make sure all properties are set before Add
            
            	Heading heading2 = new Heading(pdf1,sec1,2);
            
            	Segment segment2 = new Segment(heading2);
            	heading2.Segments.Add(segment2);
            	heading2.IsAutoSequence = true;
            	segment2.Content = "this is heading of level 2";
            	sec1.Paragraphs.Add(heading2); //please make sure all properties are set before Add
            
            	Heading heading3 = new Heading(pdf1,sec1,1);
            
            	Segment segment3 = new Segment(heading3);
            	heading3.Segments.Add(segment3);
            	heading3.IsAutoSequence = false;
            	heading3.LabelWidth = 60;
            	heading3.UserLabel = "bullet1";
            	segment3.Content = "this is bullet style 1";
            	sec1.Paragraphs.Add(heading3); //please make sure all properties are set before Add
            
             pdf1.Save(...);
             
             [Visual Basic]
            	Dim pdf1 As Pdf = New Pdf()
            
            	Dim sec1 As Section = pdf1.Sections.Add()
            
            	Dim heading1 As Heading = New Heading(pdf1, sec1, 1)
            
            	Dim segment1 As Segment = New Segment(heading1)
            	heading1.Segments.Add(segment1)
            	heading1.IsAutoSequence = True
            	segment1.Content = "this is heading of level 1"
            	sec1.Paragraphs.Add(heading1) 'please make sure all properties are set before Add
            
            	Dim heading2 As Heading = New Heading(pdf1, sec1, 2)
            
            	Dim segment2 As Segment = New Segment(heading2)
            	heading2.Segments.Add(segment2)
            	heading2.IsAutoSequence = True
            	segment2.Content = "this is heading of level 2"
            	sec1.Paragraphs.Add(heading2) 'please make sure all properties are set before Add
            
            	Dim heading3 As Heading = New Heading(pdf1, sec1, 1)
            
            	Dim segment3 As Segment = New Segment(heading3)
            	heading3.Segments.Add(segment3)
            	heading3.IsAutoSequence = False
            	heading3.LabelWidth = 60
            	heading3.UserLabel = "bullet1"
            	segment3.Content = "this is bullet style 1"
            	sec1.Paragraphs.Add(heading3) 'please make sure all properties are set before Add
             
             pdf1.Save(...)
             
             [XML]
             &lt;?xml version="1.0" encoding="utf-8" ?&gt;
             &lt;Pdf xmlns="Aspose.Pdf"&gt;
            		&lt;Section&gt;
            			&lt;Heading Level="1" IsAutoSequence="true"&gt;
            				&lt;Segment&gt;this is heading of level 1&lt;/Segment&gt;
            			&lt;/Heading&gt;
            			&lt;Heading Level="2" IsAutoSequence="true"&gt;
            				&lt;Segment&gt;this is heading of level 2&lt;/Segment&gt;
            			&lt;/Heading&gt;
            			&lt;Heading Level="1" IsAutoSequence="false" LabelWidth="60" UserLabel="bullet1"&gt;
            				&lt;Segment&gt;this is bullet style 1&lt;/Segment&gt;
            			&lt;/Heading&gt;
            		&lt;/Section&gt;
             &lt;/Pdf&gt;
             
             </code>
      </example>
    </member>
    <member name="T:Aspose.Pdf.Generator.Text">
      <summary>
             Represents a text <see cref="T:Aspose.Pdf.Generator.Paragraph" /> in a Pdf document.
             </summary>
      <example>
        <code>
             [C#]
            	Pdf pdf1 = new Pdf();
            
            	pdf1.PageSetup.PageHeight = PageSize.A2Height;
            
            	Section sec1 = pdf1.Sections.Add();
            
            	Text text1 = new Text(sec1,"this is text content");
            	text1.Margin.Top = 30;
            	sec1.Paragraphs.Add(text1);
            
             pdf1.Save(...);
             
             [Visual Basic]
            	Dim pdf1 As Pdf = New Pdf()
            
            	pdf1.PageSetup.PageHeight = PageSize.A2Height
            
            	Dim sec1 As Section = pdf1.Sections.Add()
            
            	Dim text1 As Text = New Text(sec1, "this is text content")
            	text1.Margin.Top = 30
            	sec1.Paragraphs.Add(text1)
             
             pdf1.Save(...)
             
             [XML]
             &lt;?xml version="1.0" encoding="utf-8" ?&gt;
             &lt;Pdf xmlns="Aspose.Pdf"&gt;
            		&lt;Section PageHeight="1684"&gt;
            			&lt;Text MarginTop="30"&gt;
            				&lt;Segment&gt;this is text content&lt;/Segment&gt;
            			&lt;/Text&gt;
            		&lt;/Section&gt;
             &lt;/Pdf&gt;
             
             </code>
      </example>
    </member>
    <member name="M:Aspose.Pdf.Generator.Text.#ctor">
      <summary>
            Initializes a new instance of the <see cref="T:Aspose.Pdf.Generator.Text" /> class.
            </summary>
    </member>
    <member name="M:Aspose.Pdf.Generator.Text.#ctor(System.String)">
      <summary>
            Initializes a new instance of the <see cref="T:Aspose.Pdf.Generator.Text" /> class.
            </summary>
      <param name="content">The content of the first segment of the text.</param>
    </member>
    <member name="M:Aspose.Pdf.Generator.Text.#ctor(System.String,Aspose.Pdf.Generator.TextInfo)">
      <summary>
            Initializes a new instance of the <see cref="T:Aspose.Pdf.Generator.Text" /> class.
            </summary>
      <param name="content">The content of the first segment of the text.</param>
      <param name="info">The text format info of the first segment of the text.</param>
    </member>
    <member name="M:Aspose.Pdf.Generator.Text.#ctor(Aspose.Pdf.Generator.Section)">
      <summary>
            Initializes a new instance of the <see cref="T:Aspose.Pdf.Generator.Text" /> class.
            </summary>
      <param name="section">The specified <see cref="T:Aspose.Pdf.Generator.Section" /> object.</param>
      <remarks>
            This constructor can inherit common property values from the specified 
            <see cref="T:Aspose.Pdf.Generator.Section" /> object.
            </remarks>
    </member>
    <member name="M:Aspose.Pdf.Generator.Text.#ctor(Aspose.Pdf.Generator.Section,System.String)">
      <summary>
            Initializes a new instance of the <see cref="T:Aspose.Pdf.Generator.Text" /> class.
            </summary>
      <param name="section">The specified <see cref="T:Aspose.Pdf.Generator.Section" /> object.</param>
      <param name="content">The content of the first segment of the text.</param>
      <remarks>
            This constructor can inherit common property values from the specified 
            <see cref="T:Aspose.Pdf.Generator.Section" /> object.
            </remarks>
    </member>
    <member name="M:Aspose.Pdf.Generator.Text.#ctor(Aspose.Pdf.Generator.HeaderFooter)">
      <summary>
            Initializes a new instance of the <see cref="T:Aspose.Pdf.Generator.Text" /> class.
            </summary>
      <param name="hf">The specified <see cref="T:Aspose.Pdf.Generator.HeaderFooter" /> object.</param>
      <remarks>
            This constructor can inherit common property values from the specified 
            <see cref="T:Aspose.Pdf.Generator.HeaderFooter" /> object.
            </remarks>
    </member>
    <member name="M:Aspose.Pdf.Generator.Text.#ctor(Aspose.Pdf.Generator.HeaderFooter,System.String)">
      <summary>
            Initializes a new instance of the <see cref="T:Aspose.Pdf.Generator.Text" /> class.
            </summary>
      <param name="hf">The specified <see cref="T:Aspose.Pdf.Generator.HeaderFooter" /> object.</param>
      <param name="content">The content of the first segment of the text.</param>
      <remarks>
            This constructor can inherit common property values from the specified 
            <see cref="T:Aspose.Pdf.Generator.HeaderFooter" /> object.
            </remarks>
    </member>
    <member name="M:Aspose.Pdf.Generator.Text.CompleteClone">
      <summary>
            Clones a new <see cref="T:Aspose.Pdf.Generator.Text" /> object. both format info and content of the text is cloned.
            </summary>
      <returns>The new cloned <see cref="T:Aspose.Pdf.Generator.Text" /> object</returns>
    </member>
    <member name="M:Aspose.Pdf.Generator.Text.Clone">
      <summary>
            Clones a new <see cref="T:Aspose.Pdf.Generator.Text" /> object. Only format info of the text is cloned.
            </summary>
      <returns>The new cloned <see cref="T:Aspose.Pdf.Generator.Text" /> object</returns>
    </member>
    <member name="M:Aspose.Pdf.Generator.Text.GetTextHeight(Aspose.Pdf.Generator.Pdf,System.Single)">
      <summary>
            Get the height of a text paragraph.
            </summary>
      <param name="doc">The <see cref="T:Aspose.Pdf.Generator.Pdf" /> object.</param>
      <param name="width">The width of the text paragraph.</param>
      <returns>The height of the text.</returns>
      <remarks>If encryption is used, Pdf.Security should be set before this method.</remarks>
    </member>
    <member name="P:Aspose.Pdf.Generator.Text.IfHtmlTagSupportedCssWinsOnFirstLevelChildren">
      <summary>
            For historical reasons in HTML to PDF conversion
            children of first level that created during HTML to PDF conversion inherites main font properties from parent textbox, 
            this parameters allows to set it to TRUE and take values from CSS even for first level children 
            </summary>
    </member>
    <member name="P:Aspose.Pdf.Generator.Text.Opacity">
      <summary>
            Gets or sets a float value between 0.0 and 1.0 that indicates the opacity of the text. The default value is 1.0.
            </summary>
    </member>
    <member name="P:Aspose.Pdf.Generator.Text.IsAutoHyphenated">
      <summary>
            Gets or sets a bool value that indicates whehter the text is hyphenated automatically.
            </summary>
    </member>
    <member name="P:Aspose.Pdf.Generator.Text.TextInfo">
      <summary>
            Gets or sets a <see cref="P:Aspose.Pdf.Generator.Text.TextInfo" /> object that indicates the text info of the text paragraph.
            </summary>
    </member>
    <member name="P:Aspose.Pdf.Generator.Text.TabStops">
      <summary>
            Gets or sets a <see cref="P:Aspose.Pdf.Generator.Text.TabStops" /> that indicates the tab stop positions in the 
            text paragraph.
            </summary>
    </member>
    <member name="P:Aspose.Pdf.Generator.Text.Segments">
      <summary>
            Gets or sets a <see cref="P:Aspose.Pdf.Generator.Text.Segments" /> collection that indicates all segments in the text paragraph.
            </summary>
    </member>
    <member name="P:Aspose.Pdf.Generator.Text.FirstLineIndent">
      <summary>
            Gets or sets an float value that indicates the indent of the first line in a text paragraph.The unit 
            is point.
            </summary>
    </member>
    <member name="P:Aspose.Pdf.Generator.Text.IsSpaced">
      <summary>
            Gets or sets a bool value that indicates whether the spaces at the begin of the text and returns in 
            the text be shown. For the following XML:
            <code>
            &lt;Text&gt;
            	&lt;Segment&gt;The first line,
            	The second line.&lt;/Segment&gt;
            &lt;/Text&gt;
            </code>
            If IsSpaced is false, the result will be:
            <code>
            The first line,The second line.
            </code>
            If IsSpaced is true, the result will be:
            <code>
            The first line,
            	The second line.
            </code></summary>
    </member>
    <member name="P:Aspose.Pdf.Generator.Text.IsSvgEmbedded">
      <summary>
            Gets or sets a bool value that indicates whether SVG areas supported. 
            </summary>
    </member>
    <member name="P:Aspose.Pdf.Generator.Text.IsWidowOrphanControlEnabled">
      <summary>
            Gets or sets a bool value that indicates whether the Widow/Orphan control is enabled. Default is true.
            If it is true, Widow/Orphan control is enabled and Widows/orphans themselves are eliminated (disabled).
            </summary>
    </member>
    <member name="P:Aspose.Pdf.Generator.Text.IsAlignedByWord">
      <summary>
            Gets or sets a bool value that indicates whether the text is aligned by word. 
            This property should be set to false when using Asian language such as chinese.
            </summary>
    </member>
    <member name="P:Aspose.Pdf.Generator.Text.TextWidth">
      <summary>
            Gets or sets a float value that indicates the width paragraph.The unit is point.    //zyqw:ÊéÐ´ÓÐÎó
            </summary>
      <remarks>The property is used for custom positioning. You need not use this property if you 
            want the paragraph be auto aligned.</remarks>
    </member>
    <member name="P:Aspose.Pdf.Generator.Text.RotatingAngle">
      <summary>
             Gets or sets a float value that indicates the number of degrees by which the text should be 
             rotated anticlockwise when displayed or printed. Default value is 0.
             </summary>
      <example>
        <code>
             [C#]
             Pdf pdf1 = new Pdf();
            			
            	Section sec1 = pdf1.Sections.Add();
            
            	Text t1 = new Text("Hello world");
            	t1.PositioningType = PositioningType.PageRelative;
            	t1.Top = 200;
            	t1.Left = 100;
            	t1.RotatingAngle = 30;
            
            	sec1.Paragraphs.Add(t1);
            
            	pdf1.Save("e:/temp/test.pdf");
            
             [VisualBasic]
            	Dim pdf1 As Pdf =  New Pdf() 
             
            	Dim sec1 As Section =  pdf1.Sections.Add() 
            
             Dim t1 As Text =  New Text("Hello world") 
            	t1.PositioningType = PositioningType.PageRelative
            	t1.Top = 200
            	t1.Left = 100
            	t1.RotatingAngle = 30
            
            	sec1.Paragraphs.Add(t1)
            
            	pdf1.Save("e:/temp/test.pdf")
             
             [XML]
             &lt;?xml version="1.0" encoding="utf-8" ?&gt; 
            	&lt;Pdf xmlns="Aspose.Pdf" CompressionLevel="0"&gt; 
            		&lt;Section&gt; 
            			&lt;Text RotatingAngle="30" Left="100" Top="200" PositioningType="PageRelative"&gt;
            				&lt;Segment&gt;Hello world&lt;/Segment&gt;
            			&lt;/Text&gt;
            		&lt;/Section&gt; 
            	&lt;/Pdf&gt; 
             </code>
      </example>
    </member>
    <member name="P:Aspose.Pdf.Generator.Text.WrapLines">
      <summary>
            Gets or sets a maximum count of wrapped lines in text. All lines over this value will be cutted.
            Default value is 0 (text is uncutted).
            </summary>
    </member>
    <member name="P:Aspose.Pdf.Generator.Text.IsFitToPage">
      <summary>
            Gets or sets a bool value that indicates whether the paragraph need to be placed on single page.
            Default value is false.The attribute is only valid when the paragraph is the first paragraph on a page;
            </summary>
    </member>
    <member name="P:Aspose.Pdf.Generator.Text.IsNeedRepeating">
      <summary>
            Gets or sets a bool value that indicates whether the paragraph need to be repeated on next page.
            Default value is false.The attribute is only valid when the paragraph itself and the object its ReferenceParagraphID referred to both are included in RepeatingRows.
            </summary>
    </member>
    <member name="P:Aspose.Pdf.Generator.Text.IsHtmlTagSupported">
      <summary>
            Gets or sets a bool value that indicates whether the HTML tags in text is supported. Default is 
            false.
            </summary>
    </member>
    <member name="P:Aspose.Pdf.Generator.Text.UseTextInfoStyle">
      <summary>
            Gets or sets a bool value that indicates whether to use style from TextInfo 
            </summary>
    </member>
    <member name="P:Aspose.Pdf.Generator.Text.IsHtml5Supported">
      <summary>
            Gets or sets a bool value that indicates whether the HTML 5 tags in text is supported. Default is 
            false.
            </summary>
    </member>
    <member name="P:Aspose.Pdf.Generator.Text.InlineRadioButtonFieldName">
      <summary>
            Gets or sets a string that indicates the name of inlineRadioButton's the field. Note that each field 
            MUST have a unique name.
            </summary>
    </member>
    <member name="P:Aspose.Pdf.Generator.Text.InlineRadioButtonCheckedIndex">
      <summary>
            Gets or sets a int value that indicates the index of the inlineRadioButton that has been checked.
            </summary>
    </member>
    <member name="P:Aspose.Pdf.Generator.Text.InlineRadioButtonBackgroundColor">
      <summary>
            Gets or sets a <see cref="T:System.Drawing.Color" /> object that indicates the color of the inlineRadiobutton's background.
            </summary>
    </member>
    <member name="P:Aspose.Pdf.Generator.Text.InlineRadioButtonColor">
      <summary>
            Gets or sets a <see cref="T:System.Drawing.Color" /> object that indicates the color of the inline radio button.
            </summary>
    </member>
    <member name="P:Aspose.Pdf.Generator.Text.ZIndex">
      <summary>
            Gets or sets a int value that indicates the Z-order of the text. A text with larger ZIndex 
            will be placed over the paragraphs with smaller ZIndex. ZIndex can be negative. Text with negative 
            ZIndex will be placed behind the text in the page.
            </summary>
    </member>
    <member name="M:Aspose.Pdf.Generator.Heading.#ctor">
      <summary>
            Initializes a new instance of the <see cref="T:Aspose.Pdf.Generator.Heading" /> class.
            </summary>
    </member>
    <member name="M:Aspose.Pdf.Generator.Heading.#ctor(Aspose.Pdf.Generator.Pdf,Aspose.Pdf.Generator.Section,System.Int32)">
      <summary>
            Initializes a new instance of the <see cref="T:Aspose.Pdf.Generator.Heading" /> class.
            </summary>
      <param name="pdf">The specified <see cref="P:Aspose.Pdf.Generator.Heading.Pdf" /> object.</param>
      <param name="section">The specified <see cref="T:Aspose.Pdf.Generator.Section" /> object.</param>
      <param name="level">The heading level.</param>
      <remarks>
            This constructor can inherit common property values from the specified 
            <see cref="T:Aspose.Pdf.Generator.Section" /> object.
            </remarks>
    </member>
    <member name="M:Aspose.Pdf.Generator.Heading.Clone">
      <summary>
            Clones a new <see cref="T:Aspose.Pdf.Generator.Heading" /> object. Only format info of the Heading is cloned.
            </summary>
      <returns>The new cloned <see cref="T:Aspose.Pdf.Generator.Heading" /> object</returns>
    </member>
    <member name="M:Aspose.Pdf.Generator.Heading.CompleteClone">
      <summary>
            Clones a new <see cref="T:Aspose.Pdf.Generator.Heading" /> object. both format info and content of the Heading is cloned.
            </summary>
      <returns>The new cloned <see cref="T:Aspose.Pdf.Generator.Heading" /> object</returns>
    </member>
    <member name="P:Aspose.Pdf.Generator.Heading.IsAutoHyphenated">
      <summary>
            Gets or sets a bool value that indicates whehter the text is hyphenated automatically.
            </summary>
    </member>
    <member name="P:Aspose.Pdf.Generator.Heading.Level">
      <summary>
            Gets or sets an int value that indicates the level of the heading.
            </summary>
    </member>
    <member name="P:Aspose.Pdf.Generator.Heading.Label">
      <summary>
            Gets or sets an string value that indicates the user-defined heading label.
            If you want to use the charactor in the charactor set, please use #$UNICODE() .
            Set this property to 'bullet1','bullet2'...'bullet7' to use system-defined bullet. 
            Example 1:
            Label = #$UNICODE(9633);     //It will print ¡õ
            
            Example 2:
            Label = 9633 ;                //It will print 9633
            
            Example 3:
            Label = bullet1;             //It will print ¡ñ
            
            </summary>
    </member>
    <member name="P:Aspose.Pdf.Generator.Heading.LabelWidth">
      <summary>
            Gets or sets a float value that indicates the width of the label of the heading. 
            Default value is 30 points.
            </summary>
    </member>
    <member name="P:Aspose.Pdf.Generator.Heading.BulletOffset">
      <summary>
            Gets or sets a float value that indicates the offset of the bullet.
            </summary>
    </member>
    <member name="P:Aspose.Pdf.Generator.Heading.LabelColor">
      <summary>
            Gets or sets a <see cref="T:Aspose.Pdf.Generator.Color" />value that indicates the color of the bullet/label.
            </summary>
    </member>
    <member name="P:Aspose.Pdf.Generator.Heading.LabelAlignment">
      <summary>
            Gets or sets a <see cref="T:Aspose.Pdf.Generator.AlignmentType" /> value that indicates the alignment type of Bullet/Label.
            </summary>
    </member>
    <member name="P:Aspose.Pdf.Generator.Heading.BulletAlignment">
      <summary>
             Gets or sets a <see cref="T:Aspose.Pdf.Generator.AlignmentType" /> value that indicates the alignment type of Bullet/Label.
             <BLOCKQUOTE class="dtBlock"><Font color="red">NOTE: This property is now obsolete.</Font></BLOCKQUOTE><BLOCKQUOTE class="dtBlock"> 
             You should use LabelAlignment to set the alignment type of Bullet/Label. 
             It will be removed 12 months later since release 3.6.2.0 in February 2008. 
             Aspose apologizes for any inconvenience you may have experienced. 
             </BLOCKQUOTE></summary>
    </member>
    <member name="P:Aspose.Pdf.Generator.Heading.BulletColor">
      <summary>.
             Gets or sets a <see cref="T:Aspose.Pdf.Generator.Color" />value that indicates the color of the bullet/label.
             <BLOCKQUOTE class="dtBlock"><Font color="red">NOTE: This property is now obsolete.</Font></BLOCKQUOTE><BLOCKQUOTE class="dtBlock"> 
             You should use LabelColor to set the color of bullet/label.. 
             It will be removed 12 months later since release 3.6.2.0 in February 2008. 
             Aspose apologizes for any inconvenience you may have experienced. 
             </BLOCKQUOTE></summary>
    </member>
    <member name="P:Aspose.Pdf.Generator.Heading.IsLabelBold">
      <summary>
            Gets or sets a bool value that indicates whether the number of the heading is bold.
            </summary>
    </member>
    <member name="P:Aspose.Pdf.Generator.Heading.IsLabelItalic">
      <summary>
            Gets or sets a bool value that indicates whether the number of the heading is italic.
            </summary>
    </member>
    <member name="P:Aspose.Pdf.Generator.Heading.IsLabelUnderline">
      <summary>
            Gets or sets a bool value that indicates whether the number of the heading is underline.
            </summary>
    </member>
    <member name="P:Aspose.Pdf.Generator.Heading.LabelFontName">
      <summary>
            Gets or sets a string value that indicates the font name of label.
            </summary>
    </member>
    <member name="P:Aspose.Pdf.Generator.Heading.LabelFontSize">
      <summary>
            Gets or sets a float value that indicates the font size of label.
            </summary>
    </member>
    <member name="P:Aspose.Pdf.Generator.Heading.IsAutoSequence">
      <summary>
            Gets or sets a bool value that indicates whether the number of the heading is in an automatical sequence.
            </summary>
    </member>
    <member name="P:Aspose.Pdf.Generator.Heading.HeadingType">
      <summary>
            Gets or sets the <see cref="T:Aspose.Pdf.Generator.HeadingType" /> of this heading.		
            </summary>
    </member>
    <member name="P:Aspose.Pdf.Generator.Heading.UserLabel">
      <summary>
             Gets or sets a string that indicates the caption label. For example, UserLabel="1.3.5". 
             Set this property to 'bullet1','bullet2'...'bullet7' to use system-defined bullet. To use user defined lebel, 
             Set the <see cref="P:Aspose.Pdf.Generator.Heading.BulletFontName" /> to "Symbol" and "ZapfDingbats" and set this property to the 
             char value of the bullt symbol. For example,Userlabel="44" and  BulletFontName="ZapfDingbats".
            <BLOCKQUOTE class="dtBlock"><Font color="red">NOTE: This property is now obsolete.</Font></BLOCKQUOTE><BLOCKQUOTE class="dtBlock"> 
              You should use Label to set the user label. 
             It will be removed 12 months later since release 3.8.0.0 in February 2008. 
             Aspose apologizes for any inconvenience you may have experienced. 
             </BLOCKQUOTE></summary>
    </member>
    <member name="P:Aspose.Pdf.Generator.Heading.ImageLabel">
      <summary>
            Gets or sets the an Image that is used as label.If ImageLabel is not null, the ImageLabel substitutes for number heading.
            The size of the ImageLabel will be adjusted following the Segment.TextInfo.FontSize.
            </summary>
    </member>
    <member name="P:Aspose.Pdf.Generator.Heading.LabelPattern">
      <summary>
            Gets or sets the heading pattern in the "ch(s)%ch(s)" form, ch(s) can be none ,an ASCII or a combination of ASCIIs, % stands for
            the heading number.  For example, "(%)" means "(1.1)" if here % equals 1.1.
            </summary>
    </member>
    <member name="P:Aspose.Pdf.Generator.Heading.BulletFontName">
      <summary>
             Gets or sets a string that indicates the font name for bullet. "Symbol" and "ZapfDingbats" 
             are supported.
            <BLOCKQUOTE class="dtBlock"><Font color="red">NOTE: This property is now obsolete.</Font></BLOCKQUOTE><BLOCKQUOTE class="dtBlock"> 
              You should use LabelFontName to set the font name for bullet. 
             It will be removed 12 months later since release 3.6.2.0 in February 2008. 
             Aspose apologizes for any inconvenience you may have experienced. 
             </BLOCKQUOTE></summary>
    </member>
    <member name="P:Aspose.Pdf.Generator.Heading.IsBulletUnicode">
      <summary>
             Gets or sets a bool value that indicates whether the bullet/Label uses a unicode character.
             <BLOCKQUOTE class="dtBlock"><Font color="red">NOTE: This property is now obsolete.</Font></BLOCKQUOTE><BLOCKQUOTE class="dtBlock"> 
             You should use isLabelUnicode to set whether the bullet/Label uses a unicode character. 
             It will be removed 12 months later since release 3.6.2.0 in February 2008. 
             Aspose apologizes for any inconvenience you may have experienced. 
             </BLOCKQUOTE></summary>
    </member>
    <member name="P:Aspose.Pdf.Generator.Heading.IsLabelUnicode">
      <summary>
            Gets or sets a bool value that indicates whether the bullet/Label uses a unicode character.
            </summary>
    </member>
    <member name="P:Aspose.Pdf.Generator.Heading.BulletTTFFile">
      <summary>
            Gets or sets a string that indicates the truetype font file name for the bullet. This property is only 
            needed when using truetype font with unicode. If your truetype font has been installed in your 
            system, you can use truetype font with unicode without this property. But using this property will 
            greatly improve the performance.
            </summary>
    </member>
    <member name="P:Aspose.Pdf.Generator.Heading.StartNumber">
      <summary>
            Gets or sets a int number that indicates the start number of this heading when using auto numbering.
            </summary>
    </member>
    <member name="P:Aspose.Pdf.Generator.Heading.IsPrefixed">
      <summary>
            Gets or sets a bool value that indicates if the prefix of the number is shown when using 
            auto sequence. For example,for a label "1.2.5", if this property is set to false, the label will be 
            "5".
            </summary>
    </member>
    <member name="P:Aspose.Pdf.Generator.Heading.BackColorInTOC">
      <summary>
            Gets or sets a Color of the corresponding line in Table of Contents.
            </summary>
    </member>
    <member name="P:Aspose.Pdf.Generator.Heading.TOC">
      <summary>
            Gets or sets a corresponding Table of Contents.
            </summary>
    </member>
    <member name="T:Aspose.Pdf.Generator.HeadingType">
      <summary>
            Enumerates the heading types.
            </summary>
    </member>
    <member name="F:Aspose.Pdf.Generator.HeadingType.Arab">
      <summary>
            Arab type,for example, 1,1.1,...
            </summary>
    </member>
    <member name="F:Aspose.Pdf.Generator.HeadingType.RomanUpper">
      <summary>
            Roman upper type, for example, I,I.II, ...
            </summary>
    </member>
    <member name="F:Aspose.Pdf.Generator.HeadingType.RomanLower">
      <summary>
            Roman lower type, for example, i,i.ii, ...
            </summary>
    </member>
    <member name="F:Aspose.Pdf.Generator.HeadingType.EnglishUpper">
      <summary>
            English upper type, for example, A,A.B, ...
            </summary>
    </member>
    <member name="F:Aspose.Pdf.Generator.HeadingType.EnglishLower">
      <summary>
            English lower type, for example, a,a.b, ...
            </summary>
    </member>
    <member name="T:Aspose.Pdf.Generator.Hyperlink">
      <summary>
             Represents a link in a Pdf document.
             </summary>
      <example>
        <code>
             [C#]
            	Pdf pdf1 = new Pdf();
            
            	Section sec1 = pdf1.Sections.Add();
            
            	Text text1 = new Text(sec1);
            	sec1.Paragraphs.Add(text1);
            
            	Segment segment1 = text1.Segments.Add("this is a local file link");
            	segment1.Hyperlink = new Hyperlink();
            	segment1.Hyperlink.LinkFile = "c:/images/apple.jpg";
            	segment1.Hyperlink.LinkType = HyperlinkType.File;
            	
            	Text text2 = new Text(sec1);
            	sec1.Paragraphs.Add(text2);
            
            	Segment segment2 = text2.Segments.Add("this is a web link");
            	segment2.Hyperlink = new Hyperlink();
            	segment2.Hyperlink.Url = "http://localhost/popup.htm";
            	segment2.Hyperlink.LinkType = HyperlinkType.Web;
            
            	text1 = new Text(sec1);
            	sec1.Paragraphs.Add(text1);
            
            	segment1 = text1.Segments.Add("this is a local link");
            	segment1.TextInfo.IsUnderline = true;
            	segment1.Hyperlink.LinkType = HyperlinkType.Local;
            	segment1.Hyperlink.TargetID = "product1";
            
            	Text text3 = new Text(sec1,"product 1 info ...");
            	sec1.Paragraphs.Add(text3);
            	text3.IsFirstParagraph = true;
            	text3.ID = "product1";
            
             pdf1.Save(...);
             
             [Visual Basic]
            	Dim pdf1 As Pdf = New Pdf()
            
            	Dim sec1 As Section = pdf1.Sections.Add()
            
            	Dim text1 As Text = New Text(sec1)
            	sec1.Paragraphs.Add(text1)
            
            	Dim segment1 As Segment = text1.Segments.Add("this is a local file link")
            	segment1.Hyperlink = New Hyperlink()
            	segment1.Hyperlink.LinkFile = "c:/images/apple.jpg"
            	segment1.Hyperlink.LinkType = HyperlinkType.File
            
            	Dim text2 As Text = New Text(sec1)
            	sec1.Paragraphs.Add(text2)
            
            	Dim segment2 As Segment = text2.Segments.Add("this is a web link")
            	segment2.Hyperlink = New Hyperlink()
            	segment2.Hyperlink.Url = "http://localhost/popup.htm"
            	segment2.Hyperlink.LinkType = HyperlinkType.Web
            
            	text1 = New Text(sec1)
            	sec1.Paragraphs.Add(text1)
            
            	segment1 = text1.Segments.Add("this is a local link")
            	segment1.TextInfo.IsUnderline = True
            	segment1.Hyperlink.LinkType = HyperlinkType.Local
            	segment1.Hyperlink.TargetID = "product1"
            
            	Dim text3 As Text = New Text(sec1, "product 1 info ...")
            	sec1.Paragraphs.Add(text3)
            	text3.IsFirstParagraph = True
            	text3.ID = "product1"
            
             pdf1.Save(...)
             
             [XML]
             &lt;?xml version="1.0" encoding="utf-8" ?&gt;
             &lt;Pdf xmlns="Aspose.Pdf"&gt;
            		&lt;Section&gt;
            			&lt;Text&gt;
            				&lt;Segment LinkFile="c:/Images/apple.jpg" LinkType="File"&gt;
            					this is a local file link
            				&lt;/Segment&gt;
            			&lt;/Text&gt;
            			&lt;Text&gt;
            				&lt;Segment Url="http://localhost/popup.htm" LinkType="Web"&gt;
            					this is a web link
            				&lt;/Segment&gt;
            			&lt;/Text&gt;
            			&lt;Text&gt;
            				&lt;Segment TargetID="product1" LinkType="Local" IsUnderline="true"&gt;
            					this is a local link
            				&lt;/Segment&gt;
            			&lt;/Text&gt;
            			&lt;Text IsFirstParagraph="true" ID="product1"&gt;
            				&lt;Segment&gt;
            					product 1 info ...
            				&lt;/Segment&gt;
            			&lt;/Text&gt;
            		&lt;/Section&gt;
             &lt;/Pdf&gt;
             
             </code>
      </example>
    </member>
    <member name="M:Aspose.Pdf.Generator.Hyperlink.#ctor">
      <summary>
            Initializes a new instance of the <see cref="T:Aspose.Pdf.Generator.Hyperlink" /> class.
            </summary>
    </member>
    <member name="M:Aspose.Pdf.Generator.Hyperlink.CompleteClone">
      <summary>
            Clones a new <see cref="T:Aspose.Pdf.Generator.Hyperlink" /> object.
            </summary>
      <returns>The new created <see cref="T:Aspose.Pdf.Generator.Hyperlink" /> object.</returns>
    </member>
    <member name="P:Aspose.Pdf.Generator.Hyperlink.LinkType">
      <summary>
            Gets or sets a <see cref="T:Aspose.Pdf.Generator.HyperlinkType" /> object that indicates the link type.
            </summary>
    </member>
    <member name="P:Aspose.Pdf.Generator.Hyperlink.TargetID">
      <summary>
            Gets or sets a string that indicates the link target ID.
            </summary>
    </member>
    <member name="P:Aspose.Pdf.Generator.Hyperlink.DestinationType">
      <summary>
            Gets or sets a <see cref="P:Aspose.Pdf.Generator.Hyperlink.DestinationType" /> that indicates the destination type.
            </summary>
    </member>
    <member name="P:Aspose.Pdf.Generator.Hyperlink.LinkFile">
      <summary>
            Gets or sets a string that indicates the link file name.
            </summary>
    </member>
    <member name="P:Aspose.Pdf.Generator.Hyperlink.LinkPageNumber">
      <summary>
            Gets or sets an int value that indicates the page number of the link page.
            </summary>
    </member>
    <member name="P:Aspose.Pdf.Generator.Hyperlink.Url">
      <summary>
            Gets or sets a string that indicates the link url.
            </summary>
    </member>
    <member name="P:Aspose.Pdf.Generator.Hyperlink.IsLinkToNewWindow">
      <summary>
            Gets or sets a boolean value that indicates whether to open file in a new window.
            </summary>
    </member>
    <member name="T:Aspose.Pdf.Generator.HyperlinkType">
      <summary>
            Enumerates the link types.
            </summary>
    </member>
    <member name="F:Aspose.Pdf.Generator.HyperlinkType.File">
      <summary>
            Links to another file.
            </summary>
    </member>
    <member name="F:Aspose.Pdf.Generator.HyperlinkType.Local">
      <summary>
            Links to a page in local Pdf document.
            </summary>
    </member>
    <member name="F:Aspose.Pdf.Generator.HyperlinkType.Pdf">
      <summary>
            Links to a page in another Pdf document.
            </summary>
    </member>
    <member name="F:Aspose.Pdf.Generator.HyperlinkType.Web">
      <summary>
            Links to a web page.
            </summary>
    </member>
    <member name="F:Aspose.Pdf.Generator.HyperlinkType.None">
      <summary>
            No links.
            </summary>
    </member>
    <member name="T:Aspose.Pdf.Generator.Image">
      <summary>
             Represents an image <see cref="T:Aspose.Pdf.Generator.Paragraph" /> in a Pdf document.
             </summary>
      <example>
        <code>
             [C#]
             Pdf pdf1 = new Pdf();
            
             Section sec1 = pdf1.Sections.Add();
            
             Aspose.Pdf.Generator.Image image1 = new Aspose.Pdf.Generator.Image(sec1);
             sec1.Paragraphs.Add(image1);
            
             image1.ImageInfo.File = "C:/Images/Apple.jpg";
             image1.ImageInfo.ImageFileType = ImageFileType.Jpeg;
             GraphNote note1 = new GraphNote(sec1);
             note1.Content = "this is note1";
             note1.PositionX = 50;
             note1.PositionY = 100;
             image1.ImageNotes.Add(note1);
            
             Aspose.Pdf.Generator.Image image2 = new Aspose.Pdf.Generator.Image(sec1);
             sec1.Paragraphs.Add(image2);
            
             image2.ImageInfo.File = "C:/Images/Flower.fax";
             image2.ImageInfo.ImageFileType = ImageFileType.Ccitt;
             image2.ImageInfo.CcittSubFormat = CcittSubFormat.Group31D;
             image2.ImageInfo.CcittImageWidth = 350;
             image2.ImageInfo.CcittImageHeight = 400;
             
             pdf1.Save(...);
             
             [Visual Basic]
             Dim pdf1 As Pdf = New Pdf()
            
             Dim sec1 As Section = pdf1.Sections.Add()
            
             Dim image1 As Aspose.Pdf.Generator.Image = New Aspose.Pdf.Generator.Image(sec1)
             sec1.Paragraphs.Add(image1)
            
             image1.ImageInfo.File = "C:/Images/Apple.jpg"
             image1.ImageInfo.ImageFileType = ImageFileType.Jpeg
             Dim note1 As GraphNote = New GraphNote(sec1)
             note1.Content = "this is note1"
             note1.PositionX = 50;
             note1.PositionY = 100;
             image1.ImageNotes.Add(note1)
            
             Dim image2 As Aspose.Pdf.Generator.Image = New Aspose.Pdf.Generator.Image(sec1)
             sec1.Paragraphs.Add(image2)
            
             image2.ImageInfo.File = "C:/Images/Flower.fax"
             image2.ImageInfo.ImageFileType = ImageFileType.Ccitt
             image2.ImageInfo.CcittSubFormat = CcittSubFormat.Group31D
             image2.ImageInfo.CcittImageWidth = 350
             image2.ImageInfo.CcittImageHeight = 400
             
             pdf1.Save(...)
             
             [XML]
             &lt;?xml version="1.0" encoding="utf-8" ?&gt;
             &lt;Pdf xmlns="Aspose.Pdf"&gt;
            		&lt;Section&gt;
            			&lt;Image File="C:/Images/Flower.jpg" Type="jpeg"&gt;
            				&lt;Note Position="50 100"&gt;this is note1&lt;/Note&gt;
            			&lt;/Image&gt;
            			&lt;Image File="C:/Images/Flower.fax" Type="ccitt" CcittImageWidth="350" 
            			CcittImageHeight="400" CcittSubFormat="Group31D"&gt;
            			&lt;/Image&gt;
            		&lt;/Section&gt;
             &lt;/Pdf&gt;
             
             </code>
      </example>
    </member>
    <member name="M:Aspose.Pdf.Generator.Image.#ctor">
      <summary>
            Initializes a new instance of the <see cref="T:Aspose.Pdf.Generator.Image" /> class.
            </summary>
    </member>
    <member name="M:Aspose.Pdf.Generator.Image.#ctor(Aspose.Pdf.Generator.Section)">
      <summary>
            Initializes a new instance of the <see cref="T:Aspose.Pdf.Generator.Image" /> class.
            </summary>
      <param name="section">The section object.</param>
      <remarks>
            This constructor can inherit common property values from the specified 
            <see cref="T:Aspose.Pdf.Generator.Section" /> object.
            </remarks>
    </member>
    <member name="M:Aspose.Pdf.Generator.Image.#ctor(Aspose.Pdf.Generator.HeaderFooter)">
      <summary>
            Initializes a new instance of the <see cref="T:Aspose.Pdf.Generator.Image" /> class.
            </summary>
      <param name="hf">The HeaderFooter object.</param>
      <remarks>
            This constructor can inherit common property values from the specified 
            <see cref="T:Aspose.Pdf.Generator.HeaderFooter" /> object.
            </remarks>
    </member>
    <member name="M:Aspose.Pdf.Generator.Image.FromSystemImage(System.Drawing.Image)">
      <summary>
            Creates a <see cref="T:Aspose.Pdf.Generator.Image" /> object from a <see cref="T:System.Drawing.Image" /> object.
            </summary>
      <param name="systemImage">The <see cref="T:System.Drawing.Image" /> object.</param>
      <returns>The <see cref="T:Aspose.Pdf.Generator.Image" /> object.</returns>
      <example>
        <code>
            [C#]
            System.Drawing.Image sysimg = System.Drawing.Image.FromFile("test.jpg");
            Pdf pdf1 = new Pdf();
            Section sec1 = pdf1.Sections.Add();
            
            Aspose.Pdf.Generator.Image img1 = Aspose.Pdf.Generator.Image.FromSystemImage(sysimg);
            sec1.Paragraphs.Add(img1);
            pdf1.Save("test.pdf");
            sysimg.Dispose();
            
            [VB.NET]
            Dim sysimg As System.Drawing.Image =  System.Drawing.Image.FromFile("test.jpg") 
            Dim pdf1 As Pdf =  New Pdf() 
            Dim sec1 As Section =  pdf1.Sections.Add() 
            
            Dim img1 As Aspose.Pdf.Generator.Image =  Aspose.Pdf.Generator.Image.FromSystemImage(sysimg) 
            sec1.Paragraphs.Add(img1)
            pdf1.Save("test.pdf")
            sysimg.Dispose()
            </code>
      </example>
    </member>
    <member name="F:Aspose.Pdf.Generator.Image.UseTOCasTargetList">
      <summary>
            Get or set a bool value that indicates whether the image will be referenced in TOC instead of special ImageList
            </summary>
    </member>
    <member name="M:Aspose.Pdf.Generator.Image.CompleteClone">
      <summary>
            Clones a new <see cref="T:Aspose.Pdf.Generator.Image" /> object.
            </summary>
      <returns>
      </returns>
    </member>
    <member name="P:Aspose.Pdf.Generator.Image.ImageInfo">
      <summary>
            Gets or sets a <see cref="P:Aspose.Pdf.Generator.Image.ImageInfo" /> object that indicates the common image info.
            </summary>
    </member>
    <member name="P:Aspose.Pdf.Generator.Image.IsNeedRepeating">
      <summary>
            Gets or sets a bool value that indicates whether the paragraph need to be repeated on next page.
            Default value is false.The attribute is only valid when the paragraph itself and the object its ReferenceParagraphID referred to both are included in RepeatingRows.
            </summary>
    </member>
    <member name="P:Aspose.Pdf.Generator.Image.ImageNotes">
      <summary>
            Gets or sets a <see cref="T:Aspose.Pdf.Generator.GraphNotes" /> collection that indicates all notes in the image.
            </summary>
    </member>
    <member name="P:Aspose.Pdf.Generator.Image.ImageWidth">
      <summary>
             Gets or sets a float value that indicates the image width. This property is not used to control 
             the image width but used to spefity the image width when there is no width info in image,e.g., 
             CCITT fax image or image on the web.
            <BLOCKQUOTE class="dtBlock"><Font color="red">NOTE: This property is now obsolete.</Font></BLOCKQUOTE><BLOCKQUOTE class="dtBlock"> 
             Web image can be supported by setting the URL in Image.ImageInfo.File.You need not set 
             this property any more. For CCITT image, please use ImageInfo.CcittImageWidth instead. 
             It will be removed 12 months later since release 3.0.0.0 in April 2006. Aspose apologizes for 
             any inconvenience you may have experienced.</BLOCKQUOTE></summary>
    </member>
    <member name="P:Aspose.Pdf.Generator.Image.ImageHeight">
      <summary>
             Gets or sets a float value that indicates the image height.This property is not used to control 
             the image height but used to spefity the image width when there is no height info in image,e.g., 
             CCITT fax image or image on the web.
            <BLOCKQUOTE class="dtBlock"><Font color="red">NOTE: This property is now obsolete.</Font></BLOCKQUOTE><BLOCKQUOTE class="dtBlock"> 
             Web image can be supported by setting the URL in Image.ImageInfo.File.You need not set 
             this property any more. For CCITT image, please use ImageInfo.CcittImageHeight instead. 
             It will be removed 12 months later since release 3.0.0.0 in April 2006. Aspose apologizes for 
             any inconvenience you may have experienced.</BLOCKQUOTE></summary>
    </member>
    <member name="P:Aspose.Pdf.Generator.Image.ImageScale">
      <summary>
            Gets or sets a float value that indicates the scale rate of the image when 
            placed into pdf file.
            </summary>
    </member>
    <member name="P:Aspose.Pdf.Generator.Image.IsImageFitToRowHeight">
      <summary>
            Gets or sets a bool value that indicates whether the image fit to the size of cell which has the only image paragraph.
            </summary>
    </member>
    <member name="P:Aspose.Pdf.Generator.Image.VectorGraphicsRenderingDPI">
      <summary>
              Gets or sets a float value that indicates DPI  
            that will be used during rendering of vecotor images 
            to PDF-bitmaps when instance references vector image
            as raw image .
              Valid range is 1-10000, recommended range is 72-288. 
            Increasing of this value enhances quality
            but slows down rendering process and makes it more memory consuming one.
            </summary>
    </member>
    <member name="P:Aspose.Pdf.Generator.Image.Opacity">
      <summary>
            Gets or sets a float value between 0.0 and 1.0 that indicates the opacity of the image. The default value is 1.0.
            </summary>
    </member>
    <member name="P:Aspose.Pdf.Generator.Image.Hyperlink">
      <summary>
            Gets or sets a <see cref="P:Aspose.Pdf.Generator.Image.Hyperlink" /> object that indicates the hyper link info of the image.
            </summary>
    </member>
    <member name="P:Aspose.Pdf.Generator.Image.ZIndex">
      <summary>
            Gets or sets a int value that indicates the Z-order of the image. A image with larger ZIndex 
            will be placed over the image with smaller ZIndex. ZIndex can be negative. Image with negative 
            ZIndex will be placed behind the text in the page.
            </summary>
    </member>
    <member name="P:Aspose.Pdf.Generator.Image.RotatingAngle">
      <summary>
            Gets or sets a float value between -90 and 90 that indicates the number of degrees by which the image should be 
            rotated anticlockwise when displayed or printed. Default value is 0.
            </summary>
    </member>
    <member name="P:Aspose.Pdf.Generator.Image.AutoNumber">
      <summary>
            Gets or sets a automated seqence number for Image objects. The default first value is 1. 
            If set to be n,the value of the next image will be (n+1).
            </summary>
    </member>
    <member name="T:Aspose.Pdf.Generator.ImageFileType">
      <summary>
            Enumerates the image file types.
            </summary>
    </member>
    <member name="F:Aspose.Pdf.Generator.ImageFileType.Ccitt">
      <summary>
            Ccitt type
            </summary>
    </member>
    <member name="F:Aspose.Pdf.Generator.ImageFileType.Gif">
      <summary>
            Gif type
            </summary>
    </member>
    <member name="F:Aspose.Pdf.Generator.ImageFileType.Jpeg">
      <summary>
            Jpeg type
            </summary>
    </member>
    <member name="F:Aspose.Pdf.Generator.ImageFileType.Png">
      <summary>
            Png type
            </summary>
    </member>
    <member name="F:Aspose.Pdf.Generator.ImageFileType.Tiff">
      <summary>
            Tiff type
            </summary>
    </member>
    <member name="F:Aspose.Pdf.Generator.ImageFileType.Bmp">
      <summary>
            Bmp type
            </summary>
    </member>
    <member name="F:Aspose.Pdf.Generator.ImageFileType.Emf">
      <summary>
            Emf type
            </summary>
    </member>
    <member name="F:Aspose.Pdf.Generator.ImageFileType.Exif">
      <summary>
            Exif type
            </summary>
    </member>
    <member name="F:Aspose.Pdf.Generator.ImageFileType.Icon">
      <summary>
            Icon type
            </summary>
    </member>
    <member name="F:Aspose.Pdf.Generator.ImageFileType.Wmf">
      <summary>
            Wmf type
            </summary>
    </member>
    <member name="F:Aspose.Pdf.Generator.ImageFileType.MemoryBmp">
      <summary>
             MemoryBmp type
            <BLOCKQUOTE class="dtBlock"><Font color="red">NOTE: This enum member is now obsolete.</Font></BLOCKQUOTE><BLOCKQUOTE class="dtBlock"> 
             Momory image can be supported by Image.ImageInfo.ImageStream. If BMP is used, just set the type 
             to Bmp.
             It will be removed 12 months later since release 3.0.0.0 in April 2006. Aspose apologizes for 
             any inconvenience you may have experienced.</BLOCKQUOTE></summary>
    </member>
    <member name="F:Aspose.Pdf.Generator.ImageFileType.Unknown">
      <summary>
            Unknown type
            </summary>
    </member>
    <member name="T:Aspose.Pdf.Generator.ImageInfo">
      <summary>
             Encapsulates info for an <see cref="T:Aspose.Pdf.Generator.Image" /> paragraph.
             </summary>
      <example>
        <code>
             [C#]
            	Pdf pdf1 = new Pdf();
            
            	Section sec1 = pdf1.Sections.Add();
            
            	Aspose.Pdf.Generator.Image image1 = new Aspose.Pdf.Generator.Image(sec1);
            	sec1.Paragraphs.Add(image1);
            
            	image1.ImageInfo.File = "C:/Images/Apple.jpg";
            	image1.ImageInfo.ImageFileType = ImageFileType.Jpeg;
            	image1.ImageInfo.Title = "JPEG image";
            
            	Aspose.Pdf.Generator.Image image2 = new Aspose.Pdf.Generator.Image(sec1);
            	sec1.Paragraphs.Add(image2);
            
            	image2.ImageInfo.File = "C:/Images/Flower.fax";
            	image2.ImageInfo.ImageFileType = ImageFileType.Ccitt;
            	image2.ImageInfo.CcittSubFormat = CcittSubFormat.Group31D;
            	image2.ImageInfo.Title = "CCITT fax image";
            	image2.ImageWidth = 350;
            	image2.ImageHeight = 400;
            
            	Aspose.Pdf.Generator.Image image3 = new Aspose.Pdf.Generator.Image(sec1);
            	sec1.Paragraphs.Add(image3);
            
            	image3.ImageInfo.File = "http://localhost/Images/SeaFood.jpg";
            	image3.ImageInfo.ImageFileType = ImageFileType.Jpeg;
            	image3.ImageInfo.OpenType = ImageOpenType.Url;
            	image3.ImageInfo.Title = "jpeg image with url";
            	image3.ImageWidth = 154;
            	image3.ImageHeight = 112;
            	image3.ImageInfo.BitsPerComponent = 8;
            	image3.ImageInfo.ComponentNumber = 3;
             
             pdf1.Save("d:\\temp\\test.pdf");
             
             [Visual Basic]
            	Dim pdf1 As Pdf = New Pdf()
            
            	Dim sec1 As Section = pdf1.Sections.Add()
            
            	Dim image1 As Aspose.Pdf.Generator.Image = New Aspose.Pdf.Generator.Image(sec1)
            	sec1.Paragraphs.Add(image1)
            
            	image1.ImageInfo.File = "C:/Images/Apple.jpg"
            	image1.ImageInfo.ImageFileType = ImageFileType.Jpeg
            	image1.ImageInfo.Title = "JPEG image"
            
            	Dim image2 As Aspose.Pdf.Generator.Image = New Aspose.Pdf.Generator.Image(sec1)
            	sec1.Paragraphs.Add(image2)
            
            	image2.ImageInfo.File = "C:/Images/Flower.fax"
            	image2.ImageInfo.ImageFileType = ImageFileType.Ccitt
            	image2.ImageInfo.CcittSubFormat = CcittSubFormat.Group31D
            	image2.ImageInfo.Title = "CCITT fax image"
            	image2.ImageWidth = 350
            	image2.ImageHeight = 400
            
            	Dim image3 As Aspose.Pdf.Generator.Image = New Aspose.Pdf.Generator.Image(sec1)
            	sec1.Paragraphs.Add(image3)
            
            	image3.ImageInfo.File = "http://localhost/Images/SeaFood.jpg"
            	image3.ImageInfo.ImageFileType = ImageFileType.Jpeg
            	image3.ImageInfo.OpenType = ImageOpenType.Url
            	image3.ImageInfo.Title = "jpeg image with url"
            	image3.ImageWidth = 154
            	image3.ImageHeight = 112
            	image3.ImageInfo.BitsPerComponent = 8
            	image3.ImageInfo.ComponentNumber = 3
             
             pdf1.Save("d:\\temp\\test.pdf")
             
             [XML]
             &lt;?xml version="1.0" encoding="utf-8" ?&gt;
             &lt;Pdf xmlns="Aspose.Pdf"&gt;
            		&lt;Section&gt;
            			&lt;Image File="C:/Images/Apple.jpg" Type="jpeg"&gt;
            				&lt;Title&gt;JPEG image&lt;/Title&gt;
            			&lt;/Image&gt;
            			&lt;Image File="C:/Images/Flower.fax" Type="ccitt" CcittSubFormat="Group31D" Width="350" Height="400"&gt;
            				&lt;Title&gt;CCITT fax image&lt;/Title&gt;
            			&lt;/Image&gt;
            			&lt;Image File="http://localhost/Images/SeaFood.jpg" OpenType="url" Type="jpeg"
            				Width="154" Height="112" BitsPerComponent="8" ComponentNumber="3"&gt;
            			&lt;/Image&gt;
            		&lt;/Section&gt;
             &lt;/Pdf&gt;
             
             </code>
      </example>
    </member>
    <member name="M:Aspose.Pdf.Generator.ImageInfo.#ctor">
      <summary>
            Initializes a new instance of the <see cref="T:Aspose.Pdf.Generator.ImageInfo" /> class.
            </summary>
    </member>
    <member name="P:Aspose.Pdf.Generator.ImageInfo.Alignment">
      <summary>
            Gets or sets a <see cref="T:Aspose.Pdf.Generator.AlignmentType" /> object that indicates the image alignment type.
            </summary>
    </member>
    <member name="P:Aspose.Pdf.Generator.ImageInfo.Title">
      <summary>
            Gets or sets a string value that indicates the title of the image.
            </summary>
    </member>
    <member name="P:Aspose.Pdf.Generator.ImageInfo.TextInfo">
      <summary>
            Gets or sets a <see cref="P:Aspose.Pdf.Generator.ImageInfo.TextInfo" /> object that indicates the text info of the image <see cref="P:Aspose.Pdf.Generator.ImageInfo.Title" />.
            </summary>
    </member>
    <member name="P:Aspose.Pdf.Generator.ImageInfo.OpenType">
      <summary>
             Gets or sets a <see cref="T:Aspose.Pdf.Generator.ImageOpenType" /> that indicates the image open type.
            <BLOCKQUOTE class="dtBlock"><Font color="red">NOTE: This property is now obsolete.</Font></BLOCKQUOTE><BLOCKQUOTE class="dtBlock"> 
             URL is supported in Image.ImageInfo.File. Momory image can is supported by Image.ImageInfo.ImageStream. 
             You need not set OpenType any more.
             It will be removed 12 months later since release 3.0.0.0 in April 2006. Aspose apologizes for 
             any inconvenience you may have experienced.</BLOCKQUOTE></summary>
    </member>
    <member name="P:Aspose.Pdf.Generator.ImageInfo.ImageFileType">
      <summary>
            Gets or sets a <see cref="P:Aspose.Pdf.Generator.ImageInfo.ImageFileType" /> object that indicates the image type. If this property 
            is not set, the image type will be get from the file name.
            </summary>
    </member>
    <member name="P:Aspose.Pdf.Generator.ImageInfo.ImageBorder">
      <summary>
            Gets or sets a borderinfo value that indicates the border information of the image.
            </summary>
    </member>
    <member name="P:Aspose.Pdf.Generator.ImageInfo.File">
      <summary>
            Gets or sets a string that indicates the image file name and its path or url of a web image.
            </summary>
    </member>
    <member name="P:Aspose.Pdf.Generator.ImageInfo.ImageStream">
      <summary>
             Gets or sets a stream that indicates the image stream.
             </summary>
      <example>
        <code>
             [C#]
             System.IO.FileStream fs = new System.IO.FileStream("c:/images/logo.jpg",System.IO.FileMode.Open);
            
            	Pdf pdf = new Pdf();
            
            	Section sec = pdf.Sections.Add();
            	Image img = new Image();
            	img.ImageInfo.ImageFileType = ImageFileType.Jpeg;
            	img.ImageInfo.ImageStream = fs;
            
            	sec.Paragraphs.Add(img);
            
            	pdf.Save("d:/test/test.pdf");
             fs.Close();
             
             [VB.NET]
             Dim fs As System.IO.FileStream =  New System.IO.FileStream("c:/images/logo.jpg",System.IO.FileMode.Open) 
             
            	Dim pdf As Pdf =  New Pdf() 
            
            	Dim sec As Section =  pdf.Sections.Add() 
            
            	Dim img As Image =  New Image() 
            	img.ImageInfo.ImageFileType = ImageFileType.Jpeg
            	img.ImageInfo.ImageStream = fs
             sec.Paragraphs.Add(img)
            
            	pdf.Save("d:/test/test.pdf")
            	fs.Close()
             </code>
      </example>
    </member>
    <member name="P:Aspose.Pdf.Generator.ImageInfo.SystemImage">
      <summary>
            Gets or sets a system <see cref="T:System.Drawing.Image" /> object which is used to create a Aspose <see cref="T:Aspose.Pdf.Generator.Image" /> object.
            </summary>
      <example>
        <code>
            [C#]
            System.Drawing.Image sysimg = System.Drawing.Image.FromFile("test.jpg");
            Pdf pdf1 = new Pdf();
            Section sec1 = pdf1.Sections.Add();
            
            Aspose.Pdf.Generator.Image img1 = new Aspose.Pdf.Generator.Image();
            img1.ImageInfo.SystemImage = sysimg;
            sec1.Paragraphs.Add(img1);
            pdf1.Save("test.pdf");
            sysimg.Dispose();
            
            [VB.NET]
            Dim sysimg As System.Drawing.Image =  System.Drawing.Image.FromFile("test.jpg") 
            Dim pdf1 As Pdf =  New Pdf() 
            Dim sec1 As Section =  pdf1.Sections.Add() 
            
            Dim img1 As Aspose.Pdf.Generator.Image =  New Aspose.Pdf.Generator.Image() 
            img1.ImageInfo.SystemImage = sysimg 
            sec1.Paragraphs.Add(img1)
            pdf1.Save("test.pdf")
            sysimg.Dispose()
            </code>
      </example>
    </member>
    <member name="P:Aspose.Pdf.Generator.ImageInfo.DefaultFile">
      <summary>
            Gets or sets a string that indicates the default image file name. If this name is not null, Aspose.Pdf.Generator will use this image file when the image specified in 
            <see cref="P:Aspose.Pdf.Generator.ImageInfo.File" /> is not found. 
            </summary>
    </member>
    <member name="P:Aspose.Pdf.Generator.ImageInfo.IsImageNotFoundErrorIgnored">
      <summary>
            Gets or sets a bool value that indicates whether the "image not found" error be ignored or not.
            </summary>
    </member>
    <member name="P:Aspose.Pdf.Generator.ImageInfo.MemoryData">
      <summary>
             Gets or sets a byte array that indicates the image data in memory.
            <BLOCKQUOTE class="dtBlock"><Font color="red">NOTE: This property is now obsolete.</Font></BLOCKQUOTE><BLOCKQUOTE class="dtBlock"> 
             Please use <see cref="P:Aspose.Pdf.Generator.ImageInfo.ImageStream" /> instead.
             It will be removed 12 months later since release 3.0.0.0 in April 2006. Aspose apologizes for 
             any inconvenience you may have experienced.</BLOCKQUOTE></summary>
    </member>
    <member name="P:Aspose.Pdf.Generator.ImageInfo.IsBlack1">
      <summary>
            Gets or sets a bool value that indicates whether black is considered as 1 in an image.
            </summary>
    </member>
    <member name="P:Aspose.Pdf.Generator.ImageInfo.ComponentNumber">
      <summary>
             Gets or sets an int value that indicates the color component number of the image.
             This property is need only when using web image.
            <BLOCKQUOTE class="dtBlock"><Font color="red">NOTE: This property is now obsolete.</Font></BLOCKQUOTE><BLOCKQUOTE class="dtBlock"> 
             Web image can be supported by setting the URL in Image.ImageInfo.File.You need not set 
             this property any more.
             It will be removed 12 months later since release 3.0.0.0 in April 2006. Aspose apologizes for 
             any inconvenience you may have experienced.</BLOCKQUOTE></summary>
    </member>
    <member name="P:Aspose.Pdf.Generator.ImageInfo.BitsPerComponent">
      <summary>
             Gets or sets an int value that indicates the color bits per component of the image.
             This property is need only when using web image.
            <BLOCKQUOTE class="dtBlock"><Font color="red">NOTE: This property is now obsolete.</Font></BLOCKQUOTE><BLOCKQUOTE class="dtBlock"> 
             Web image can be supported by setting the URL in Image.ImageInfo.File.You need not set 
             this property any more.
             It will be removed 12 months later since release 3.0.0.0 in April 2006. Aspose apologizes for 
             any inconvenience you may have experienced.</BLOCKQUOTE></summary>
    </member>
    <member name="P:Aspose.Pdf.Generator.ImageInfo.CcittSubFormat">
      <summary>
            Gets or sets the <see cref="P:Aspose.Pdf.Generator.ImageInfo.CcittSubFormat" />. Used for CCITT image type only.
            </summary>
    </member>
    <member name="P:Aspose.Pdf.Generator.ImageInfo.TiffFrame">
      <summary>
            Gets or sets an int value that indicates the valid frame of the TIFF image. The default value is 0.
            Used for TIFF image only. If this property is set to -1, all frames of the tiff images will be added 
            into the PDF document.
            </summary>
    </member>
    <member name="P:Aspose.Pdf.Generator.ImageInfo.FixWidth">
      <summary>
            Gets or sets a float value that indicates the fixed width of the image. If this property is set, 
            the image will be scaled to the fixed width.
            </summary>
    </member>
    <member name="P:Aspose.Pdf.Generator.ImageInfo.IsFixImgWidthSettedInXML">
      <summary>
            Gets or sets a bool value that indicates the fixed width of the image is setted in xml file
            </summary>
    </member>
    <member name="P:Aspose.Pdf.Generator.ImageInfo.FixHeight">
      <summary>
            Gets or sets a float value that indicates the fixed height of the image. If this property is set, 
            the image will be scaled to the fixed height.
            </summary>
    </member>
    <member name="P:Aspose.Pdf.Generator.ImageInfo.IsFixImgHeightSettedInXML">
      <summary>
            Gets or sets a bool value that indicates the fixed height of the image is Setted in xml file.
            </summary>
    </member>
    <member name="P:Aspose.Pdf.Generator.ImageInfo.IsBlackWhite">
      <summary>
            Gets or sets a bool value that indicates whether the image is forced to be black-and-white. If TIFF 
            image of CCITT subformat is used, this property must be set to true.
            </summary>
    </member>
    <member name="P:Aspose.Pdf.Generator.ImageInfo.CcittImageWidth">
      <summary>
            Gets or sets a float value that indicates the CCITT image width. CCITT image does not contain size 
            information so the width and height must be set by user.
            </summary>
    </member>
    <member name="P:Aspose.Pdf.Generator.ImageInfo.CcittImageHeight">
      <summary>
            Gets or sets a float value that indicates the CCITT image height. CCITT image does not contain size 
            information so the width and height must be set by user.
            </summary>
    </member>
    <member name="P:Aspose.Pdf.Generator.ImageInfo.IsAllFramesInNewPage">
      <summary>
            Gets or sets a bool value that indicates if all frames in TIFF images be rendered in new page.
            </summary>
    </member>
    <member name="P:Aspose.Pdf.Generator.ImageInfo.IsStencilMask">
      <summary>
            Indicates whether this image is stencil mask.
            </summary>
    </member>
    <member name="P:Aspose.Pdf.Generator.ImageInfo.BackgroundColor">
      <summary>
            Color that is used as background for stencil mask image.
            </summary>
    </member>
    <member name="P:Aspose.Pdf.Generator.ImageInfo.PatternColor">
      <summary>
            Color that is used for painting of image pattern
            </summary>
    </member>
    <member name="T:Aspose.Pdf.Generator.ImageOpenType">
      <summary>
             Enumerates the image open types.
            <BLOCKQUOTE class="dtBlock"><Font color="red">NOTE: This enum is now obsolete.</Font></BLOCKQUOTE><BLOCKQUOTE class="dtBlock"> 
             URL is supported in Image.ImageInfo.File. Momory image can be supported by Image.ImageInfo.ImageStream. 
             You need not set ImageOpenType any more.
             It will be removed 12 months later since release 3.0.0.0 in April 2006. Aspose apologizes for 
             any inconvenience you may have experienced.</BLOCKQUOTE></summary>
    </member>
    <member name="F:Aspose.Pdf.Generator.ImageOpenType.File">
      <summary>
            Opens the image from a file.
            </summary>
    </member>
    <member name="F:Aspose.Pdf.Generator.ImageOpenType.Memory">
      <summary>
            Opens the image from memory directly. Only JPEG and CCITT image are supported.You can also use 
            ImageFileType.MemoryBmp which supports all image type.
            </summary>
    </member>
    <member name="F:Aspose.Pdf.Generator.ImageOpenType.Url">
      <summary>
            Opens the image from a url directly. Only JPEG and CCITT image are supported. You can also use 
            URL as file name in File open type which supports all image type.
            </summary>
    </member>
    <member name="F:Aspose.Pdf.Generator.ImportOptions.BasePath">
      <summary>
            Indicates source file location, optional
            </summary>
    </member>
    <member name="F:Aspose.Pdf.Generator.ImportOptions.DocumentType">
      <summary>
            Indicates media type, html default
            </summary>
    </member>
    <member name="T:Aspose.Pdf.Generator.MediaType">
      <summary>
            Enumerates the types of import media for unified import method
            </summary>
      <remarks>Please refer to the programmer's guide for detailed info.
            </remarks>
    </member>
    <member name="T:Aspose.Pdf.Generator.JavaScript">
      <summary>
            Represents a JavaScript in Pdf document.
            </summary>
      <example>
        <code>
            [c#]
            //Instantiate a PDF Object 
            Pdf pdf = new Pdf();
             
            //Instantiate a Aspose PDF JavaScript Object
            pdf.JavaScripts = new JavaScripts();
             
            //Call the Add method and pass JavaScript statement as an argument, to show Print Dialog
            pdf.JavaScripts.Add("this.print(true);");
             
            //Call the Add method and JavaScript statement as an argument, to show alert
            pdf.JavaScripts.Add("app.alert(\"hello world\");");
             
            //Save Pdf Document
            pdf.Save(@"d:\test\test.pdf");
            
            [VB.Net]
            'Instantiate a PDF Object 
            Dim pdf As Pdf = New Pdf()
             
            'Instantiate a Aspose PDF JavaScript Object
            pdf.JavaScripts = New JavaScripts()
             
            'Call the Add method and pass JavaScript statement as an argument, to show Print Dialog
            pdf.JavaScripts.Add("this.print(true);")
             
            'Call the Add method and JavaScript statement as an argument, to show alert
            pdf.JavaScripts.Add("app.alert(\"hello world\");")
             
            'Save Pdf Document
            pdf.Save("d:\test\test.pdf")
            
            [XML]
            &lt;Pdf xmlns="Aspose.Pdf"&gt;
            &lt;JavaScript ID="js1"&gt;this.print(true);&lt;/JavaScript&gt;
            &lt;JavaScript&gt;app.alert("hello world");&lt;/JavaScript&gt;
            &lt;/Pdf&gt;
            </code>
      </example>
    </member>
    <member name="M:Aspose.Pdf.Generator.JavaScript.#ctor">
      <summary>
            Initializes a new instance of the <see cref="T:Aspose.Pdf.Generator.JavaScript" /> class.
            </summary>
    </member>
    <member name="M:Aspose.Pdf.Generator.JavaScript.#ctor(System.String)">
      <summary>
            Initializes a new instance of the <see cref="T:Aspose.Pdf.Generator.JavaScript" /> class from a script string.
            </summary>
      <param name="script">The script string.</param>
    </member>
    <member name="P:Aspose.Pdf.Generator.JavaScript.ScriptContent">
      <summary>
            Gets or sets a string that indicates the JavaScript.
            </summary>
    </member>
    <member name="P:Aspose.Pdf.Generator.JavaScript.ID">
      <summary>
            Gets or sets a string that indicates the ID of the JavaScript.
            </summary>
    </member>
    <member name="T:Aspose.Pdf.Generator.JavaScripts">
      <summary>
            Represents a collection of <see cref="T:Aspose.Pdf.Generator.JavaScript" /> objects.
            </summary>
      <example>
        <code>
            [c#]
            //Instantiate a PDF Object 
            Pdf pdf = new Pdf();
             
            //Instantiate a Aspose PDF JavaScript Object
            pdf.JavaScripts = new JavaScripts();
             
            //Call the Add method and pass JavaScript statement as an argument, to show Print Dialog
            pdf.JavaScripts.Add("this.print(true);");
             
            //Call the Add method and JavaScript statement as an argument, to show alert
            pdf.JavaScripts.Add("app.alert(\"hello world\");");
             
            //Save Pdf Document
            pdf.Save(@"d:\test\test.pdf");
            
            [VB.Net]
            'Instantiate a PDF Object 
            Dim pdf As Pdf = New Pdf()
             
            'Instantiate a Aspose PDF JavaScript Object
            pdf.JavaScripts = New JavaScripts()
             
            'Call the Add method and pass JavaScript statement as an argument, to show Print Dialog
            pdf.JavaScripts.Add("this.print(true);")
             
            'Call the Add method and JavaScript statement as an argument, to show alert
            pdf.JavaScripts.Add("app.alert(\"hello world\");")
             
            'Save Pdf Document
            pdf.Save("d:\test\test.pdf")
            
            [XML]
            &lt;Pdf xmlns="Aspose.Pdf"&gt;
            &lt;JavaScript ID="js1"&gt;this.print(true);&lt;/JavaScript&gt;
            &lt;JavaScript&gt;app.alert("hello world");&lt;/JavaScript&gt;
            &lt;/Pdf&gt;
            </code>
      </example>
    </member>
    <member name="M:Aspose.Pdf.Generator.JavaScripts.Add">
      <summary>
            Initializes a new instance of the <see cref="T:Aspose.Pdf.Generator.JavaScript" /> class and add 
            it to the JavaScripts collection.
            </summary>
      <returns>The <see cref="T:Aspose.Pdf.Generator.JavaScript" /> object that is created.</returns>
    </member>
    <member name="M:Aspose.Pdf.Generator.JavaScripts.Add(Aspose.Pdf.Generator.JavaScript)">
      <summary>
            Adds a new <see cref="T:Aspose.Pdf.Generator.JavaScript" /> object into the collection.
            </summary>
      <param name="script">The <see cref="T:Aspose.Pdf.Generator.JavaScript" /> object to be added.</param>
    </member>
    <member name="M:Aspose.Pdf.Generator.JavaScripts.Add(System.String)">
      <summary>
            Initializes a new instance of the <see cref="T:Aspose.Pdf.Generator.JavaScript" /> class and add 
            it to the JavaScripts collection.
            </summary>
      <param name="script">The content of the script.</param>
      <returns>The <see cref="T:Aspose.Pdf.Generator.JavaScript" /> object that is created.</returns>
    </member>
    <member name="M:Aspose.Pdf.Generator.JavaScripts.Insert(System.Int32,Aspose.Pdf.Generator.JavaScript)">
      <summary>
            Inserts a new <see cref="T:Aspose.Pdf.Generator.JavaScript" /> object into the collection at specified position.
            </summary>
      <param name="index">The zero-based index at which <see cref="T:Aspose.Pdf.Generator.JavaScript" /> object should be 
            inserted.</param>
      <param name="js">The <see cref="T:Aspose.Pdf.Generator.JavaScript" /> object to be inserted.</param>
    </member>
    <member name="M:Aspose.Pdf.Generator.JavaScripts.Remove(Aspose.Pdf.Generator.Cell)">
      <summary>
            Removes a <see cref="T:Aspose.Pdf.Generator.JavaScript" /> object from the collection.
            </summary>
      <param name="jsToRemove">The <see cref="T:Aspose.Pdf.Generator.JavaScript" /> object to be romoved.</param>
    </member>
    <member name="M:Aspose.Pdf.Generator.JavaScripts.IndexOf(Aspose.Pdf.Generator.JavaScript)">
      <summary>
            Gets the index of a specified JavaScript in the collection.
            </summary>
      <param name="js">The specified <see cref="T:Aspose.Pdf.Generator.JavaScript" /> object.</param>
      <returns>The index value.</returns>
    </member>
    <member name="P:Aspose.Pdf.Generator.JavaScripts.Item(System.Int32)">
      <summary>
            Gets or sets a <see cref="T:Aspose.Pdf.Generator.JavaScript" /> object from the collection according to JavaScript index.
            </summary>
    </member>
    <member name="P:Aspose.Pdf.Generator.JavaScripts.Item(System.String)">
      <summary>
            Gets or sets a <see cref="T:Aspose.Pdf.Generator.JavaScript" /> object from the collection according to JavaScript ID.
            </summary>
    </member>
    <member name="T:Aspose.Pdf.Generator.Line">
      <summary>
             Represents a line <see cref="T:Aspose.Pdf.Generator.Shape" /> in a Graph.
             </summary>
      <example>
        <code>
             [C#]
            	Pdf pdf1 = new Pdf();
            
            	Section sec1 = pdf1.Sections.Add();
            
            	Graph graph1 = new Graph(sec1,200,400);
            	sec1.Paragraphs.Add(graph1);
            
            	float[] posArr = new float[]{100,0,300,0};
            	Line l1 = new Line(graph1,posArr);
            	l1.GraphInfo.Color = new Aspose.Pdf.Generator.Color("Red");
            	graph1.Shapes.Add(l1);
            	
            	posArr = new float[]{100,50,300,50};
            	Line l2 = new Line(graph1,posArr);
            	l2.GraphInfo.Color = new Aspose.Pdf.Generator.Color(0,128,128);
            	graph1.Shapes.Add(l2);
            	
            	posArr = new float[]{100,100,300,100};
            	Line l3 = new Line(graph1,posArr);
            	l3.GraphInfo.Color = new Aspose.Pdf.Generator.Color(0,128,64,0);
            	graph1.Shapes.Add(l3);
            
            	posArr = new float[]{100,150,300,150};
            	Line l4 = new Line(graph1,posArr);
            	l4.GraphInfo.Color = new Aspose.Pdf.Generator.Color((byte)140);
            	graph1.Shapes.Add(l4);
             
             pdf1.Save(...);
             
             [Visual Basic]
            	Dim pdf1 As Pdf = New Pdf()
            
            	Dim sec1 As Section = pdf1.Sections.Add()
            
            	Dim graph1 As Graph = New Graph(sec1, 200, 400)
            	sec1.Paragraphs.Add(graph1)
            
            	Dim posArr As Single() = New Single() {100, 0, 300, 0}
            
            	Dim l1 As Line = New Line(graph1, posArr)
            	l1.GraphInfo.Color = New Aspose.Pdf.Generator.Color("Red")
            	graph1.Shapes.Add(l1)
            
            	posArr = New Single() {100, 50, 300, 50}
            
            	Dim l2 As Line = New Line(graph1, posArr)
            	l2.GraphInfo.Color = New Aspose.Pdf.Generator.Color(0, 128, 128)
            	graph1.Shapes.Add(l2)
            
            	posArr = New Single() {100, 100, 300, 100}
            
            	Dim l3 As Line = New Line(graph1, posArr)
            	l3.GraphInfo.Color = New Aspose.Pdf.Generator.Color(0, 128, 64, 0)
            	graph1.Shapes.Add(l3)
            
            	posArr = New Single() {100, 150, 300, 150}
            
            	Dim l4 As Line = New Line(graph1, posArr)
            	l4.GraphInfo.Color = New Aspose.Pdf.Generator.Color(CType(140,Byte))
            	graph1.Shapes.Add(l4)
             
             pdf1.Save(...)
             
             [XML]
             &lt;?xml version="1.0" encoding="utf-8" ?&gt;
             &lt;Pdf xmlns="Aspose.Pdf"&gt;
            		&lt;Section&gt;
            			&lt;Graph Height="200" Width="400"&gt;
            				&lt;Line Color="Red" Position="100 0 300 0" /&gt;
            				&lt;Line Color="rgb 0 128 128" Position="100 50 300 50" /&gt;
            				&lt;Line Color="cmyk 0 128 64 0" Position="100 100 300 100" /&gt;
            				&lt;Line Color="gray 140" Position="100 150 300 150" /&gt;
            			&lt;/Graph&gt;
            		&lt;/Section&gt;
             &lt;/Pdf&gt;
             
             </code>
      </example>
    </member>
    <member name="M:Aspose.Pdf.Generator.Line.#ctor">
      <summary>
            Initializes a new instance of the <see cref="T:Aspose.Pdf.Generator.Line" /> class.
            </summary>
    </member>
    <member name="M:Aspose.Pdf.Generator.Line.#ctor(System.Single[])">
      <summary>
            Initializes a new instance of the <see cref="T:Aspose.Pdf.Generator.Line" /> class.
            </summary>
      <param name="positionArray">The line position array.</param>
    </member>
    <member name="M:Aspose.Pdf.Generator.Line.#ctor(Aspose.Pdf.Generator.Graph)">
      <summary>
            Initializes a new instance of the <see cref="T:Aspose.Pdf.Generator.Line" /> class.
            </summary>
      <param name="graph">The specified <see cref="T:Aspose.Pdf.Generator.Graph" /> object.</param>
      <remarks>
            This constructor can inherit common property values from the specified 
            <see cref="T:Aspose.Pdf.Generator.Graph" /> object.
            </remarks>
    </member>
    <member name="M:Aspose.Pdf.Generator.Line.#ctor(Aspose.Pdf.Generator.Graph,System.Single[])">
      <summary>
            Initializes a new instance of the <see cref="T:Aspose.Pdf.Generator.Line" /> class.
            </summary>
      <param name="graph">The specified <see cref="T:Aspose.Pdf.Generator.Graph" /> object.</param>
      <param name="positionArray">The line position array.The array is 
            composed by coordinates of each control point of the line.</param>
      <remarks>
            This constructor can inherit common property values from the specified 
            <see cref="T:Aspose.Pdf.Generator.Graph" /> object.
            </remarks>
    </member>
    <member name="P:Aspose.Pdf.Generator.Line.PositionArray">
      <summary>
            Gets or sets a <see cref="P:Aspose.Pdf.Generator.Line.PositionArray" /> object that indicates the position array.The array is 
            composed by coordinates of each control point of the line.Note that you can use the 
            <see cref="M:Aspose.Pdf.Generator.Line.#ctor(Aspose.Pdf.Generator.Graph,System.Single[])" /> constructor to create a Line object and need not use this class 
            directly.
            </summary>
    </member>
    <member name="T:Aspose.Pdf.Generator.LinkAction">
      <summary>
            Represents a link action.
            </summary>
    </member>
    <member name="P:Aspose.Pdf.Generator.LinkAction.LinkActionType">
      <summary>
            Gets or sets a <see cref="P:Aspose.Pdf.Generator.LinkAction.LinkActionType" /> object that indicates the link action type.
            </summary>
    </member>
    <member name="P:Aspose.Pdf.Generator.LinkAction.MenuItemType">
      <summary>
            Gets or sets a <see cref="P:Aspose.Pdf.Generator.LinkAction.MenuItemType" /> object that indicates the menu item type.
            </summary>
    </member>
    <member name="P:Aspose.Pdf.Generator.LinkAction.FileName">
      <summary>
            Gets or sets a string that indicates the file name for OpenFile link action.
            </summary>
    </member>
    <member name="P:Aspose.Pdf.Generator.LinkAction.WebUrl">
      <summary>
            Gets or sets a string that indicates the web url for OpenWebLink link action.
            </summary>
    </member>
    <member name="P:Aspose.Pdf.Generator.LinkAction.SoundFileName">
      <summary>
            Gets or sets a string that indicates the sound file name for PlaySound link action.
            </summary>
    </member>
    <member name="T:Aspose.Pdf.Generator.LinkActionType">
      <summary>
            Enumerates the link action types.
            </summary>
    </member>
    <member name="F:Aspose.Pdf.Generator.LinkActionType.ExcuteMenuItem">
      <summary>
            Excute a menu item.
            </summary>
    </member>
    <member name="F:Aspose.Pdf.Generator.LinkActionType.OpenFile">
      <summary>
            Open a file.
            </summary>
    </member>
    <member name="F:Aspose.Pdf.Generator.LinkActionType.OpenWebLink">
      <summary>
            Open a web link.
            </summary>
    </member>
    <member name="T:Aspose.Pdf.Generator.ListLevelFormat">
      <summary>
            An object to define the format of the list of some level.
            </summary>
      <example>
        <code>
            [C#]
            // Create a Pdf object
            Pdf pdf = new Pdf();
            //Create a list section
            ListSection tocSection = new ListSection("Table Of Contents");
            //Set its list type as table of of contents
            tocSection.ListType = ListType.TableOfContents;
            
            //Define the format of the four levels list by setting the left margins and
            //text format settings of each level
            tocSection.ListFormatArray.Length = 4;
            // specify the left margin information for list element at level 0
            tocSection.ListFormatArray[0].LeftMargin = 0;
            tocSection.ListFormatArray[0].TextInfo.IsTrueTypeFontBold = true;
            tocSection.ListFormatArray[0].TextInfo.IsTrueTypeFontItalic = true;
            tocSection.ListFormatArray[0].TextInfo.Color = new Aspose.Pdf.Generator.Color("Navy");
            tocSection.ListFormatArray[1].LeftMargin = 10;
            tocSection.ListFormatArray[1].TextInfo.IsUnderline = true;
            tocSection.ListFormatArray[1].TextInfo.FontSize = 10;
            tocSection.ListFormatArray[2].LeftMargin = 20;
            tocSection.ListFormatArray[2].TextInfo.IsTrueTypeFontBold = true;
            tocSection.ListFormatArray[3].LeftMargin = 30;
            tocSection.ListFormatArray[3].TextInfo.IsTrueTypeFontBold = true;
            
            //Add the list section to the sections collection of the Pdf document
            pdf.Sections.Add(tocSection);
            
            //Create a section in the Pdf document
            Aspose.Pdf.Generator.Section sec1 = pdf.Sections.Add();
            
            //Add four headings in the section
            for (int Level = 1; Level != 5; Level++)
            {
                    // create heading object and add set its level
                    Heading heading2 = new Heading(pdf, sec1, Level);
                    // create a segment object and 
                    Segment segment2 = new Segment(heading2);
                    // add the segment object to segments collection of Heading
                    heading2.Segments.Add(segment2);
                    // Set the property so that number of the heading is in an automatical sequence. 
                    heading2.IsAutoSequence = true;
                    // Specify the content of Heading
                    segment2.Content = "this is heading of level ";
                    segment2.Content += Level.ToString();
                    //Add the heading into Table Of Contents. 
                    heading2.IsInList = true;
                    // add the heading to paragraphs collection of PDF section
                    sec1.Paragraphs.Add(heading2);
            
             }
             // save the PDF document
             pdf.Save(@"d:/pdftest/ListLevelFormat_Test.pdf");
            
            [Visual Basic]
            ' Instantiate an object PDF class
            Dim pdf As Pdf = New Pdf()
            'Create a list section
            Dim tocSection As ListSection = New ListSection("Table Of Contents")
            'Set its list type as table of of contents
            tocSection.ListType = ListType.TableOfContents
            'Define the format of the four levels list by setting the left margins and
            'text format settings of each level
            tocSection.ListFormatArray.Length = 4
            tocSection.ListFormatArray(0).LeftMargin = 0
            tocSection.ListFormatArray(0).TextInfo.IsTrueTypeFontBold = True
            tocSection.ListFormatArray(0).TextInfo.IsTrueTypeFontItalic = True
            tocSection.ListFormatArray(0).TextInfo.Color = New Aspose.Pdf.Generator.Color("Navy")
            tocSection.ListFormatArray(1).LeftMargin = 10
            tocSection.ListFormatArray(1).TextInfo.IsUnderline = True
            tocSection.ListFormatArray(1).TextInfo.FontSize = 10
            tocSection.ListFormatArray(2).LeftMargin = 20
            tocSection.ListFormatArray(2).TextInfo.IsTrueTypeFontBold = True
            tocSection.ListFormatArray(3).LeftMargin = 30
            tocSection.ListFormatArray(3).TextInfo.IsTrueTypeFontBold = True
            'Add the list section to the sections collection of the Pdf document
            pdf.Sections.Add(tocSection)
            'Create a section in the Pdf document
            Dim sec1 As Section = pdf.Sections.Add()
            'Add four headings in the section
            Dim Level As Integer
            For Level = 1 To 4
                Dim heading2 As Heading = New Heading(pdf, sec1, Level)
                Dim segment2 As Segment = New Segment(heading2)
                heading2.Segments.Add(segment2)
                heading2.IsAutoSequence = True
                segment2.Content = "this is heading of level "
                segment2.Content += Level.ToString()
                'Add the heading into Table Of Contents. 
                heading2.IsInList = True
                sec1.Paragraphs.Add(heading2)
            Next Level
            ' save the PDF document
            pdf.Save("d:/pdftest/ListLevelFormat_Test.pdf")
            </code>
      </example>
    </member>
    <member name="P:Aspose.Pdf.Generator.ListLevelFormat.TextInfo">
      <summary>
            Get or set the <see cref="P:Aspose.Pdf.Generator.ListLevelFormat.TextInfo" /> object of the list of current level.
            </summary>
    </member>
    <member name="P:Aspose.Pdf.Generator.ListLevelFormat.LeftMargin">
      <summary>
             Gets or sets a float value that indicates the left margin of the list of current level.
             The unit is point. In XML,the default unit is point,but cm and inch are also supported.
             For example,"10cm" or "5inch".   
            <BLOCKQUOTE class="dtBlock"><Font color="red">NOTE: This property is now obsolete.</Font></BLOCKQUOTE><BLOCKQUOTE class="dtBlock"> 
             Please use Margin property instead.
             It will be removed 12 months later since release 3.3.1.0 in January 2007. Aspose apologizes for 
             any inconvenience you may have experienced.</BLOCKQUOTE></summary>
    </member>
    <member name="P:Aspose.Pdf.Generator.ListLevelFormat.Margin">
      <summary>
            Gets or sets a <see cref="T:Aspose.Pdf.Generator.MarginInfo" /> object that indicates the margin of the list item.
            </summary>
    </member>
    <member name="P:Aspose.Pdf.Generator.ListLevelFormat.TabLeaderType">
      <summary>
            Gets or sets a <see cref="P:Aspose.Pdf.Generator.ListLevelFormat.TabLeaderType" /> object that indicates the tab leader type for the 
            list. The default value is "Dot".
            </summary>
    </member>
    <member name="P:Aspose.Pdf.Generator.ListLevelFormat.SubsequentLinesIndent">
      <summary>
            Gets or sets a int value that indicates how many chars are indented for the subsequent lines 
            in the list item. The default value is 6.
            </summary>
    </member>
    <member name="T:Aspose.Pdf.Generator.ListSection">
      <summary>
             An object to display different lists.
             </summary>
      <example>
        <code>
             [C#]
             //The ListSection has set a default FormatArray of three levels.
             //The user can use the default three levels' list without the pain of defining the list's format.
             //But if you want to define your own list format, you should define it before using the list like the example.
             pdf = new Pdf();
             
             //Create the Table Of Contents. Add it to the pdf like a common Section.
             ListSection tocSection = new ListSection("Table Of Contents");
             tocSection.ListType = ListType.TableOfContents;
             pdf.Sections.Add(tocSection);
             
             
            	///create the List of Tables. Add it to the pdf like a common Section.
            	ListSection lotSection = new ListSection("List of Tables");
            	lotSection.ListType = ListType.ListOfTables;
            	pdf.Sections.Add(lotSection);
            
            	///create the List of Figures. Add it to the pdf like a common Section.
            	ListSection lofSection = new ListSection("List of Figures");
            	lofSection.ListType = ListType.ListOfFigures;
            	pdf.Sections.Add(lofSection);
            
            	//Define the format of the four levels' list.
            	tocSection.ListFormatArray.Length = 4;
            	tocSection.ListFormatArray[0].LeftMargin = 0;
            	tocSection.ListFormatArray[0].TextInfo.IsTrueTypeFontBold = true;
            	tocSection.ListFormatArray[0].TextInfo.IsTrueTypeFontItalic = true;
            	tocSection.ListFormatArray[1].LeftMargin = 10;
            	tocSection.ListFormatArray[1].TextInfo.IsUnderline = true;
            	tocSection.ListFormatArray[1].TextInfo.FontSize = 10;
            	tocSection.ListFormatArray[2].LeftMargin = 20;
            	tocSection.ListFormatArray[2].TextInfo.IsTrueTypeFontBold = true;			
            	tocSection.ListFormatArray[3].LeftMargin = 30;
            	tocSection.ListFormatArray[3].TextInfo.IsTrueTypeFontBold = true;			
                      
            	//Add four headings.
            	Section sec1 = pdf.Sections.Add();
            	
             for (int Level = 1;Level != 5; Level++)
             {
            		Heading heading2 = new Heading(pdf,sec1,Level);
            
            		Segment segment2 = new Segment(heading2);
            		heading2.Segments.Add(segment2);
            		heading2.IsAutoSequence = true;
            		segment2.Content = "this is heading of level ";
            		segment2.Content += Level.ToString();
            		//Add the heading into Table Of Contents.
            		heading2.IsInList = true;
            		sec1.Paragraphs.Add(heading2);
             }
            
            
            	//Add one table to the pdf.
            	Table table1 = new Aspose.Pdf.Generator.Table();
            	sec1.Paragraphs.Add(table1);
            	table1.ColumnWidths = "70 2cm";
            	table1.Title = "Table 1";
            
            	Row row1 = table1.Rows.Add();
            
            	Cell cell1Row1 = row1.Cells.Add("ColumnsSpan = 2");
            	cell1Row1.ColumnsSpan = 2;
            	cell1Row1.Border = new BorderInfo((int)BorderSide.All,0.5F);
            
            	Row row2 = table1.Rows.Add();
            
            	Cell cell1Row2 = row2.Cells.Add("cell1");
            	cell1Row2.Border = new BorderInfo((int)BorderSide.All,0.5F);
                        	
            	Cell cell2Row2 = row2.Cells.Add("cell2");
            	cell2Row2.Border = new BorderInfo((int)BorderSide.All,0.5F,new Aspose.Pdf.Generator.Color("Red"));
            
            	//Add the table to the List of Tables.
            	table1.IsInList = true;
            
            	//Add one Image to the pdf.
            	Aspose.Pdf.Generator.Image image1 = new Aspose.Pdf.Generator.Image(sec1);
            	sec1.Paragraphs.Add(image1);
            
            	image1.ImageInfo.File = "C:/118528527.jpg";
            	image1.ImageInfo.ImageFileType = ImageFileType.Jpeg;
            	GraphNote note1 = new GraphNote(sec1);
            	note1.Content = "this is note1";
            	note1.PositionX = 50;
            	note1.PositionY = 100;
            	image1.ImageNotes.Add(note1);
            	//Add the Image to the List of Figures.
            	image1.IsInList = true;
            
            	Graph graph1 = new Graph(sec1,100,400);
            	sec1.Paragraphs.Add(graph1);
            
            	float[] posArr = new float[]{0,0,200,80,300,40,350,90};
             Curve curve1 = new Curve(graph1,posArr);
             graph1.Shapes.Add(curve1);
            	//Add the Graph to the List of Figures.
             graph1.IsInList = true;	
            
             pdf.Save("TestTocXml.pdf");
             
             
             [Visual Basic]
             'The ListSection has set a default FormatArray of three levels.
             'The user can use the default three levels' list without the pain of defining the list's format.
             'But if you want to define your own list format, you should define it before using the list like the example.
             Dim pdf As Pdf  = new Pdf()
             
             'Create the Table Of Contents. Add it to the pdf like a common Section.
             Dim tocSection As ListSection = new ListSection("Table Of Contents")
             tocSection.ListType = ListType.TableOfContents
             pdf.Sections.Add(tocSection)
             
             
            	'create the List of Tables. Add it to the pdf like a common Section.
            	Dim lotSection As ListSection  = new ListSection("List of Tables")
            	lotSection.ListType = ListType.ListOfTables
            	pdf.Sections.Add(lotSection)
            
            	'create the List of Tables. Add it to the pdf like a common Section.
            	Dim lotSection As ListSection  = new ListSection("List of Tables")
            	lotSection.ListType = ListType.ListOfTables
            	pdf.Sections.Add(lotSection)
            
            	'create the List of Figures. Add it to the pdf like a common Section.
            	Dim lofSection As ListSection = new ListSection("List of Figures")
            	lofSection.ListType = ListType.ListOfFigures
            	pdf.Sections.Add(lofSection)
            
            	
            	///Define the format of the four levels' list.
            	tocSection.ListFormatArray.Length = 4
            	tocSection.ListFormatArray(0).LeftMargin = 0
            	tocSection.ListFormatArray(0).TextInfo.IsTrueTypeFontBold = true
            	tocSection.ListFormatArray(0).TextInfo.IsTrueTypeFontItalic = true
            	tocSection.ListFormatArray(1).LeftMargin = 10
            	tocSection.ListFormatArray(1).TextInfo.IsUnderline = true
            	tocSection.ListFormatArray(1).TextInfo.FontSize = 10
            	tocSection.ListFormatArray(2).LeftMargin = 20
            	tocSection.ListFormatArray(2).TextInfo.IsTrueTypeFontBold = true
            	tocSection.ListFormatArray(3).LeftMargin = 30
            	tocSection.ListFormatArray(3).TextInfo.IsTrueTypeFontBold = true
            
            	///Add four headings.
            	
            	Dim sec1 As Section  = pdf.Sections.Add()
            	Dim Level As Int;
             for Level=1 To 4 
             	Dim heading2 As Heading= new Heading(pdf,sec1,Level)
            
            		Dim segment2 As Segment  = new Segment(heading2)
            		heading2.Segments.Add(segment2)
            		heading2.IsAutoSequence = true
            		segment2.Content = "this is heading of level "
            		segment2.Content += Level.ToString()
            		//Add the heading into Table Of Contents.
            		heading2.IsInList = true
            		sec1.Paragraphs.Add(heading2)
            	Next Level 
            			
            			
            	///Add one table to the pdf.
            	Dim table1 As Table  = new Aspose.Pdf.Generator.Table()
            	sec1.Paragraphs.Add(table1)
            	table1.ColumnWidths = "70 2cm"
            	table1.Title = "Table 1"
            
            	Dim row1 As Row  = table1.Rows.Add()
            
            	Dim cell1Row1 As Cell  = row1.Cells.Add("ColumnsSpan = 2")
            	cell1Row1.ColumnsSpan = 2
            	cell1Row1.Border = new BorderInfo((int)BorderSide.All,0.5F)
            
            	Dim row2 As Row  = table1.Rows.Add()
            
            	Dim cell1Row2 As Cell  = row2.Cells.Add("cell1")
            	cell1Row2.Border = new BorderInfo((int)BorderSide.All,0.5F)
            
            	Dim cell2Row2 As Cell  = row2.Cells.Add("cell2")
            	cell2Row2.Border = new BorderInfo((int)BorderSide.All,0.5F,new Aspose.Pdf.Generator.Color("Red"))
            
            	'Add the table to the List of Tables.
            	table1.IsInList = true
            
            	'Add one Image to the pdf.
            	Dim image1 As Image  = new Aspose.Pdf.Generator.Image(sec1)
            	sec1.Paragraphs.Add(image1)
            
            	image1.ImageInfo.File = "C:/118528527.jpg"
            	image1.ImageInfo.ImageFileType = ImageFileType.Jpeg
            	Dim note1 As GraphNote  = new GraphNote(sec1)
            	note1.Content = "this is note1"
            	note1.PositionX = 50
            	note1.PositionY = 100
            	image1.ImageNotes.Add(note1)
            	'Add the Image to the List of Figures.
            	image1.IsInList = true
            
            	Dim graph1 As Graph  = new Graph(sec1,100,400)
            	sec1.Paragraphs.Add(graph1)
            
            	Dim posArr() As Single = New Single() {0, 0, 200, 80, 300, 40, 350, 90}
             Dim curve1 As Curve = New Curve(graph1, posArr)
             graph1.Shapes.Add(curve1)
            	'Add the Graph to the List of Figures.
             graph1.IsInList = true
            
            
             pdf.Save("TestTocXml.pdf")
             
             
             [XML]
             
            &lt;?xml version="1.0" encoding="utf-8"?&gt;
            &lt;Pdf&gt;
            	&lt;ListSection ListType="TableOfContents"&gt;
            		&lt;Title Alignment="Center"&gt;
            			&lt;Segment IsTrueTypeFontBold="true" FontSize="30"&gt; TableOfContents
            			&lt;/Segment&gt;
            		&lt;/Title&gt;
            		&lt;ListLevelFormat Level="1" LeftMargin="0"&gt;
            			&lt;TextInfo IsTrueTypeFontBold="true" IsTrueTypeFontItalic="true"&gt;
            			&lt;/TextInfo&gt;
            		&lt;/ListLevelFormat&gt;
            		&lt;ListLevelFormat Level="2" LeftMargin="10"&gt;
            			&lt;TextInfo IsUnderline="true" FontSize="10"&gt;
            			&lt;/TextInfo&gt;
            		&lt;/ListLevelFormat&gt;
            		&lt;ListLevelFormat Level="3" LeftMargin="20"&gt;
            			&lt;TextInfo IsTrueTypeFontBold="true"&gt;
            			&lt;/TextInfo&gt;
            		&lt;/ListLevelFormat&gt;
            		&lt;ListLevelFormat Level="4" LeftMargin="30"&gt;
            			&lt;TextInfo IsTrueTypeFontBold="true"&gt;
            			&lt;/TextInfo&gt;
            		&lt;/ListLevelFormat&gt;
            	&lt;/ListSection&gt;
            	&lt;ListSection ListType="ListOfTables"&gt;
            		&lt;Title&gt;
            			&lt;Segment IsTrueTypeFontBold="true" FontSize="30"&gt;ListOfTables&lt;/Segment&gt;
            		&lt;/Title&gt;
            	&lt;/ListSection&gt;
            	&lt;ListSection ListType="ListOfFigures"&gt;
            		&lt;Title&gt;
            			&lt;Segment IsTrueTypeFontBold="true" FontSize="30"&gt;ListOfFigures&lt;/Segment&gt;
            		&lt;/Title&gt;
            	&lt;/ListSection&gt;
            	&lt;Section&gt;
            		&lt;Heading level="1" IsAutoSequence="true" IsInList="true"&gt;
            			&lt;Segment&gt;this is heading of level 1&lt;/Segment&gt;
            		&lt;/Heading&gt;
            		&lt;Heading level="2" IsAutoSequence="true" IsInList="true"&gt;
            			&lt;Segment&gt;this is heading of level 2&lt;/Segment&gt;
            		&lt;/Heading&gt;
            		&lt;Heading level="3" IsAutoSequence="true" IsInList="true"&gt;
            			&lt;Segment&gt;this is heading of level 3&lt;/Segment&gt;
            		&lt;/Heading&gt;
            		&lt;Heading level="4" IsAutoSequence="true" IsInList="true"&gt;
            			&lt;Segment&gt;this is heading of level 4&lt;/Segment&gt;
            		&lt;/Heading&gt;
            		&lt;Table ColumnWidths="70 2cm" IsInList="true"&gt;
            			&lt;Row&gt;
            				&lt;Cell ColumnsSpan="2"&gt;
            					&lt;Border&gt;
            						&lt;All LineWidth="0.5"/&gt;
            					&lt;/Border&gt;
            					&lt;Text&gt;
            						&lt;Segment&gt;ColumnsSpan = 2&lt;/Segment&gt;
            					&lt;/Text&gt;
            				&lt;/Cell&gt;
            			&lt;/Row&gt;
            			&lt;Row&gt;
            				&lt;Cell&gt;
            					&lt;Border&gt;
            						&lt;All LineWidth="0.5"/&gt;
            					&lt;/Border&gt;
            					&lt;Text&gt;
            						&lt;Segment&gt;cell1&lt;/Segment&gt;
            					&lt;/Text&gt;
            				&lt;/Cell&gt;
            				&lt;Cell&gt;
            					&lt;Border&gt;
            						&lt;All LineWidth="0.5" Color="Red"/&gt;
            					&lt;/Border&gt;
            					&lt;Text&gt;
            						&lt;Segment&gt;cell2&lt;/Segment&gt;
            					&lt;/Text&gt;
            				&lt;/Cell&gt;
            			&lt;/Row&gt;
            		&lt;/Table&gt;
            		&lt;Image File="C:/118528527.jpg" Type="jpeg" IsInList="true"&gt;
            			&lt;Note Position="50 100"&gt;this is note1&lt;/Note&gt;
            			&lt;Title&gt;mm picture&lt;/Title&gt;
            		&lt;/Image&gt;
            		&lt;Graph Height="100" Width="400" IsInList="true"&gt;
            			&lt;Curve Position="0 0 200 80 300 40 350 90"/&gt;
            			&lt;Title&gt;one curve&lt;/Title&gt;
            		&lt;/Graph&gt;
            	&lt;/Section&gt;
            &lt;/Pdf&gt;
             </code>
      </example>
    </member>
    <member name="T:Aspose.Pdf.Generator.Section">
      <summary>
             Represents a section in a Pdf document.
             </summary>
      <example>
        <code>
             [C#]
            	Pdf pdf1 = new Pdf();
            
            	Section section1 = pdf1.Sections.Add();
            
            	Text text1 = new Text(section1,"This is text in section1.");
            	text1.Margin.Top = 30;
            	section1.Paragraphs.Add(text1);
            
            	Section section2 = pdf1.Sections.Add();
            	section2.IsLandscape = true;
            
            	Text text2 = new Text(section2,"This is text in section2.");
            	text2.Margin.Top = 30;
            	section2.Paragraphs.Add(text2);
             
             pdf1.Save(...);
             
             [Visual Basic]
            	Dim pdf1 As Pdf = New Pdf()
            
            	Dim section1 As Section = pdf1.Sections.Add()
            
            	Dim text1 As Text = New Text(section1, "This is text in section1.")
            	text1.Margin.Top = 30
            	section1.Paragraphs.Add(text1)
            
            	Dim section2 As Section = pdf1.Sections.Add()
            	section2.IsLandscape = True
            
            	Dim text2 As Text = New Text(section2, "This is text in section2.")
            	text2.Margin.Top = 30
            	section2.Paragraphs.Add(text2)
             
             pdf1.Save(...)
             
             [XML]
             &lt;?xml version="1.0" encoding="utf-8" ?&gt;
             &lt;Pdf xmlns="Aspose.Pdf"&gt;
            		&lt;Section&gt;
            			&lt;Text MarginTop="30"&gt;
            				&lt;Segment&gt;
            				This is text in section1.
            				&lt;/Segment&gt;
            			&lt;/Text&gt;
            		&lt;/Section&gt;
            		&lt;Section IsLandscape="true"&gt;
            			&lt;Text MarginTop="30"&gt;
            				&lt;Segment&gt;
            				This is text in section2..
            				&lt;/Segment&gt;
            			&lt;/Text&gt;
            		&lt;/Section&gt;
             &lt;/Pdf&gt;
             
             </code>
      </example>
    </member>
    <member name="M:Aspose.Pdf.Generator.Section.#ctor">
      <summary>
            Initializes a new instance of the <see cref="T:Aspose.Pdf.Generator.Section" /> class.
            </summary>
    </member>
    <member name="M:Aspose.Pdf.Generator.Section.#ctor(Aspose.Pdf.Generator.Pdf)">
      <summary>
            Initializes a new instance of the <see cref="T:Aspose.Pdf.Generator.Section" /> class.
            </summary>
      <param name="pdf">The pdf document object.</param>
      <remarks>
            This constructor can inherit common property values from the specified 
            <see cref="P:Aspose.Pdf.Generator.Section.Pdf" /> object.
            </remarks>
    </member>
    <member name="M:Aspose.Pdf.Generator.Section.AddParagraph(Aspose.Pdf.Generator.Paragraph)">
      <summary>
            Add a paragraph into the section. This method is used in direct-to-file mode.That means all paragraphs will be rendered into pdf file 
            without being saved in the document object model. Less memory will be consumed in this mode,but you 
            can't access the paragraphs that be added into the document any more, so some of the advanced 
            features such as combination of XML and API,hyperlink to specified paragraph,total page number in 
            footer,etc.,is not available.
            </summary>
      <param name="para">The paragraph to be added.</param>
    </member>
    <member name="M:Aspose.Pdf.Generator.Section.InsertHeader(Aspose.Pdf.Generator.HeaderFooterType)">
      <summary>
            Insert Header of the section.
            </summary>
      <param name="type">The type of the header.
            </param>
      <returns>The newly inserted header.</returns>
    </member>
    <member name="M:Aspose.Pdf.Generator.Section.InsertFooter(Aspose.Pdf.Generator.HeaderFooterType)">
      <summary>
            Insert footer of the section.
            </summary>
      <param name="type">The type of the header.
            </param>
      <returns>The newly inserted footer.</returns>
    </member>
    <member name="M:Aspose.Pdf.Generator.Section.GetObjectByID(System.String)">
      <summary>
            Gets a object with specified ID in the section.
            </summary>
      <param name="ID">The object ID.</param>
      <returns>The object with specified ID. Null if the ID is not found.</returns>
    </member>
    <member name="M:Aspose.Pdf.Generator.Section.Clone">
      <summary>
            Clones a new <see cref="T:Aspose.Pdf.Generator.Section" /> object. Section format info is cloned but paragraphs are not cloned. 
            </summary>
      <returns>The new cloned <see cref="T:Aspose.Pdf.Generator.Section" /> object.</returns>
    </member>
    <member name="M:Aspose.Pdf.Generator.Section.CompleteClone">
      <summary>
            Clones a new <see cref="T:Aspose.Pdf.Generator.Section" /> object. Both format and paragraphs are cloned. 
            </summary>
      <returns>The new cloned <see cref="T:Aspose.Pdf.Generator.Section" /> object.</returns>
    </member>
    <member name="P:Aspose.Pdf.Generator.Section.IsAutoHyphenated">
      <summary>
            Gets or sets a bool value that indicates whehter the text is hyphenated automatically.
            </summary>
    </member>
    <member name="P:Aspose.Pdf.Generator.Section.PageInfo">
      <summary>
            Gets or sets a <see cref="P:Aspose.Pdf.Generator.Section.PageInfo" /> that indicates page info of the section.
            </summary>
    </member>
    <member name="P:Aspose.Pdf.Generator.Section.BreakParaText">
      <summary>
      </summary>
    </member>
    <member name="P:Aspose.Pdf.Generator.Section.FirstPageInfo">
      <summary>
            Gets or sets a <see cref="P:Aspose.Pdf.Generator.Section.PageInfo" /> that indicates page info of the section.
            </summary>
    </member>
    <member name="P:Aspose.Pdf.Generator.Section.TextInfo">
      <summary>
            Gets or sets a <see cref="P:Aspose.Pdf.Generator.Section.TextInfo" /> that indicates text info of the section.
            </summary>
    </member>
    <member name="P:Aspose.Pdf.Generator.Section.GraphInfo">
      <summary>
            Gets or sets a <see cref="P:Aspose.Pdf.Generator.Section.GraphInfo" /> that indicates graph info of the section.
            </summary>
    </member>
    <member name="P:Aspose.Pdf.Generator.Section.Paragraphs">
      <summary>
            Gets or sets a <see cref="P:Aspose.Pdf.Generator.Section.GraphInfo" /> collection that indicates all paragraphs in the section.
            </summary>
    </member>
    <member name="P:Aspose.Pdf.Generator.Section.OddHeader">
      <summary>
            Gets or sets a <see cref="T:Aspose.Pdf.Generator.HeaderFooter" /> object that indicates the odd header of the section.
            </summary>
    </member>
    <member name="P:Aspose.Pdf.Generator.Section.EvenHeader">
      <summary>
            Gets or sets a <see cref="T:Aspose.Pdf.Generator.HeaderFooter" /> object that indicates the even header of the section.
            </summary>
    </member>
    <member name="P:Aspose.Pdf.Generator.Section.OddFooter">
      <summary>
            Gets or sets a <see cref="T:Aspose.Pdf.Generator.HeaderFooter" /> object that indicates the odd footer of the section.
            </summary>
    </member>
    <member name="P:Aspose.Pdf.Generator.Section.EvenFooter">
      <summary>
            Gets or sets a <see cref="T:Aspose.Pdf.Generator.HeaderFooter" /> object that indicates the even footer of the section.
            </summary>
    </member>
    <member name="P:Aspose.Pdf.Generator.Section.FirstLineIndent">
      <summary>
            Gets or sets an int value that indicates the blank space at the beginning of the section.
            </summary>
    </member>
    <member name="P:Aspose.Pdf.Generator.Section.IsSpaced">
      <summary>
            Gets or sets a bool value that indicates whether the spaces at the begin of the text and returns in 
            the text be shown. For the following XML:
            <code>
            &lt;Text&gt;
            	&lt;Segment&gt;The first line,
            	The second line.&lt;/Segment&gt;
            &lt;/Text&gt;
            </code>
            If IsSpaced is false, the result will be:
            <code>
            The first line,The second line.
            </code>
            If IsSpaced is true, the result will be:
            <code>
            The first line,
            	The second line.
            </code></summary>
    </member>
    <member name="P:Aspose.Pdf.Generator.Section.ID">
      <summary>
            Gets or sets a string that indicates the ID of the section.
            </summary>
    </member>
    <member name="P:Aspose.Pdf.Generator.Section.IsDisabled">
      <summary>
            Gets or sets a bool value that indicates whether this section is disabled. The default value is false. 
            If this property is set to true, this section will not be rendered.
            </summary>
    </member>
    <member name="P:Aspose.Pdf.Generator.Section.IsWidowOrphanControlEnabled">
      <summary>
            Gets or sets a bool value that indicates whether the Widow/Orphan control is enabled. Default is true.
            If it is true, Widow/Orphan control is enabled and Widows/orphans themselves are eliminated (disabled).
            </summary>
    </member>
    <member name="P:Aspose.Pdf.Generator.Section.BackgroundImageFile">
      <summary>
            Gets or sets a string that indicates the background image file name.
            </summary>
    </member>
    <member name="P:Aspose.Pdf.Generator.Section.BackgroundColor">
      <summary>
            Gets or sets a <see cref="T:Aspose.Pdf.Generator.Color" /> object that indicates the background color of the 
            section.
            </summary>
    </member>
    <member name="P:Aspose.Pdf.Generator.Section.BackgroundImageType">
      <summary>
            Gets or sets a <see cref="T:Aspose.Pdf.Generator.ImageFileType" /> enum that indicates the type of the background image.
            </summary>
    </member>
    <member name="P:Aspose.Pdf.Generator.Section.IsLandscape">
      <summary>
            Gets or sets a bool value that indicates whether the page orientation is landscape.
            The default is false, portrait.
            </summary>
    </member>
    <member name="P:Aspose.Pdf.Generator.Section.AdditionalOddFooter">
      <summary>
            Gets or sets a <see cref="T:Aspose.Pdf.Generator.HeaderFooter" /> object that indicates the additional odd footer of the section.
            If the first page needs one footer style, the subsequent pages need another footer style, the additional 
            footer is needed.
            </summary>
    </member>
    <member name="P:Aspose.Pdf.Generator.Section.AdditionalEvenFooter">
      <summary>
            Gets or sets a <see cref="T:Aspose.Pdf.Generator.HeaderFooter" /> object that indicates the additional even footer of the section.
            If the first page needs one footer style, the subsequent pages need another footer style, the additional 
            footer is needed.
            </summary>
    </member>
    <member name="P:Aspose.Pdf.Generator.Section.AdditionalOddHeader">
      <summary>
            Gets or sets a <see cref="T:Aspose.Pdf.Generator.HeaderFooter" /> object that indicates the additional odd header of the section.
            If the first page needs one header style, the subsequent pages need another header style, the additional 
            header is needed.
            </summary>
    </member>
    <member name="P:Aspose.Pdf.Generator.Section.AdditionalEvenHeader">
      <summary>
            Gets or sets a <see cref="T:Aspose.Pdf.Generator.HeaderFooter" /> object that indicates the additional even header of the section.
            If the first page needs one header style, the subsequent pages need another header style, the additional 
            header is needed.
            </summary>
    </member>
    <member name="P:Aspose.Pdf.Generator.Section.BackgroundImageFixedWidth">
      <summary>
            Gets or sets a float value that indicates the fixed width of the background image. If this property is not set, the real 
            image size will be used as page size.
            </summary>
    </member>
    <member name="P:Aspose.Pdf.Generator.Section.IsBackgroundImageBlackWhite">
      <summary>
            Gets or sets a bool value that indicates whether the image is forced to be black-and-white. If black-and-white TIFF 
            image of CCITT subformat is used, this property must be set to true.
            </summary>
    </member>
    <member name="P:Aspose.Pdf.Generator.Section.IsNewPage">
      <summary>
            Gets or sets a bool value that indicates whether the section starts a new page.
            The default value is true.
            </summary>
    </member>
    <member name="P:Aspose.Pdf.Generator.Section.PageRotatingAngle">
      <summary>
            Gets or sets the number of degrees by which the page should be rotated clockwise when displayed 
            or printed. The value must be a multiple of 90. Default value is 0.
            </summary>
    </member>
    <member name="P:Aspose.Pdf.Generator.Section.HasColumnLine">
      <summary>
            Gets or sets a bool value that indicates the vertical line between columns need to been added
            </summary>
    </member>
    <member name="P:Aspose.Pdf.Generator.Section.ColumnInfo">
      <summary>
            Gets or sets a <see cref="P:Aspose.Pdf.Generator.Section.ColumnInfo" /> object that indicates the columns info.
            </summary>
    </member>
    <member name="P:Aspose.Pdf.Generator.Section.IsPageNumberRestarted">
      <summary>
            Gets or sets a bool value that indicates whether the page number is restarted at this section.  //zyqw:
            </summary>
    </member>
    <member name="P:Aspose.Pdf.Generator.Section.IsNewColumn">
      <summary>
            Gets or sets a bool value that indicates whether the section starts at new column.Default is true. 
            If this property is set to false, please make sure the section has the same column setting as the 
            former section.
            </summary>
    </member>
    <member name="P:Aspose.Pdf.Generator.Section.StartingPageNumber">
      <summary>
            Gets or sets a int value that indicates the starting page number of the section. Default is 1.
            </summary>
    </member>
    <member name="P:Aspose.Pdf.Generator.ListSection.Title">
      <summary>
            Get or set the <see cref="T:Aspose.Pdf.Generator.Text" /> value of the title of <see cref="T:Aspose.Pdf.Generator.ListSection" />.
            </summary>
    </member>
    <member name="P:Aspose.Pdf.Generator.ListSection.IsCaptionLabelNeeded">
      <summary>
            Gets or sets a bool value that indicates whether caption label is needed in TOC.
            </summary>
    </member>
    <member name="P:Aspose.Pdf.Generator.ListSection.ListFormatArray">
      <summary>
            Get or set the format of the lists of all levels using the <see cref="T:Aspose.Pdf.Generator.FormatArray" />.
            </summary>
    </member>
    <member name="P:Aspose.Pdf.Generator.ListSection.ListType">
      <summary>
            Get or set the <see cref="P:Aspose.Pdf.Generator.ListSection.ListType" /> of the <see cref="T:Aspose.Pdf.Generator.ListSection" /> object.
            </summary>
    </member>
    <member name="T:Aspose.Pdf.Generator.ListType">
      <summary>
            Enumerates the types of list section.
            </summary>
    </member>
    <member name="F:Aspose.Pdf.Generator.ListType.TableOfContents">
      <summary>
            Table of contents.
            </summary>
    </member>
    <member name="F:Aspose.Pdf.Generator.ListType.ListOfTables">
      <summary>
            List of tables.
            </summary>
    </member>
    <member name="F:Aspose.Pdf.Generator.ListType.ListOfFigures">
      <summary>
            List of figures.
            </summary>
    </member>
    <member name="T:Aspose.Pdf.Generator.MarginInfo">
      <summary>
             Encapsulates margin info.
             </summary>
      <example>
        <code>
             [C#]
            	Pdf pdf1 = new Pdf();
            
            	pdf1.PageSetup.PageHeight = PageSize.A2Height;
            
            	Section sec1 = pdf1.Sections.Add();
            
            	Text text1 = new Text(sec1,"this is text content");
            	text1.Margin.Top = 30;
            	sec1.Paragraphs.Add(text1);
            
             pdf1.Save(...);
             
             [Visual Basic]
            	Dim pdf1 As Pdf = New Pdf()
            
            	pdf1.PageSetup.PageHeight = PageSize.A2Height
            
            	Dim sec1 As Section = pdf1.Sections.Add()
            
            	Dim text1 As Text = New Text(sec1, "this is text content")
            	text1.Margin.Top = 30
            	sec1.Paragraphs.Add(text1)
             
             pdf1.Save(...)
             
             [XML]
             &lt;?xml version="1.0" encoding="utf-8" ?&gt;
             &lt;Pdf xmlns="Aspose.Pdf"&gt;
            		&lt;Section PageHeight="1684"&gt;
            			&lt;Text MarginTop="30"&gt;
            				&lt;Segment&gt;this is text content&lt;/Segment&gt;
            			&lt;/Text&gt;
            		&lt;/Section&gt;
             &lt;/Pdf&gt;
             
             </code>
      </example>
    </member>
    <member name="M:Aspose.Pdf.Generator.MarginInfo.#ctor">
      <summary>
            Initializes a new instance of the <see cref="T:Aspose.Pdf.Generator.MarginInfo" /> class.
            </summary>
    </member>
    <member name="M:Aspose.Pdf.Generator.MarginInfo.#ctor(System.Single)">
      <summary>
            Initializes a new instance of the <see cref="T:Aspose.Pdf.Generator.MarginInfo" /> class with all side's width set in specified value.
            </summary>
    </member>
    <member name="M:Aspose.Pdf.Generator.MarginInfo.Clone">
      <summary>
            Clones a new <see cref="T:Aspose.Pdf.Generator.MarginInfo" /> object.
            </summary>
      <returns>The new object.</returns>
    </member>
    <member name="P:Aspose.Pdf.Generator.MarginInfo.Left">
      <summary>
            Gets or sets a float value that indicates the left margin.
            The unit is point. In XML,the default unit is point,but cm and inch are also 
            supported. For example,"10cm" or "5inch".
            </summary>
    </member>
    <member name="P:Aspose.Pdf.Generator.MarginInfo.Right">
      <summary>
            Gets or sets a float value that indicates the right margin.
            The unit is point. In XML,the default unit is point,but cm and inch are also 
            supported. For example,"10cm" or "5inch".
            </summary>
    </member>
    <member name="P:Aspose.Pdf.Generator.MarginInfo.Top">
      <summary>
            Gets or sets a float value that indicates the top margin.
            The unit is point. In XML,the default unit is point,but cm and inch are also 
            supported. For example,"10cm" or "5inch".
            </summary>
    </member>
    <member name="P:Aspose.Pdf.Generator.MarginInfo.Bottom">
      <summary>
            Gets or sets a float value that indicates the bottom margin.
            The unit is point. In XML,the default unit is point,but cm and inch are also 
            supported. For example,"10cm" or "5inch".
            </summary>
    </member>
    <member name="P:Aspose.Pdf.Generator.MarginInfo.Inner">
      <summary>
            Gets or sets a float value that indicates the inner margin.
            The unit is point. In case of mirror margins we can use Inner and Outer instead of  Left and Right
            In XML,the default unit is point,but cm and inch are also 
            supported. For example,"10cm" or "5inch".
            </summary>
    </member>
    <member name="P:Aspose.Pdf.Generator.MarginInfo.Outer">
      <summary>
            Gets or sets a float value that indicates the outer margin.
            The unit is point. In case of mirror margins we can use Inner and Outer instead of  Left and Right
            In XML,the default unit is point,but cm and inch are also 
            supported. For example,"10cm" or "5inch".
            </summary>
    </member>
    <member name="T:Aspose.Pdf.Generator.MenuItemType">
      <summary>
            Enumerates the menu item types when excuting a menu item in link action.
            </summary>
    </member>
    <member name="F:Aspose.Pdf.Generator.MenuItemType.FileOrganizerOpenOrganizer">
      <summary>
            File-&gt;Organizer-&gt;Open Organizer
            </summary>
    </member>
    <member name="F:Aspose.Pdf.Generator.MenuItemType.FileCreatePDFFromScanner">
      <summary>
            File-&gt;Create PDF-&gt;From Scanner
            </summary>
    </member>
    <member name="F:Aspose.Pdf.Generator.MenuItemType.FileCreatePDFFromWebPage">
      <summary>
            File-&gt;Create PDF-&gt;From Web Page
            </summary>
    </member>
    <member name="F:Aspose.Pdf.Generator.MenuItemType.FileSaveAs">
      <summary>
            File-&gt;Save As
            </summary>
    </member>
    <member name="F:Aspose.Pdf.Generator.MenuItemType.FileSaveCopy">
      <summary>
            File-&gt;Save a Copy
            </summary>
    </member>
    <member name="F:Aspose.Pdf.Generator.MenuItemType.FileAttachToEmail">
      <summary>
            File-&gt;Attach to Email
            </summary>
    </member>
    <member name="F:Aspose.Pdf.Generator.MenuItemType.FileClose">
      <summary>
            File-&gt;Close
            </summary>
    </member>
    <member name="F:Aspose.Pdf.Generator.MenuItemType.FileProperties">
      <summary>
            File-&gt;Properties
            </summary>
    </member>
    <member name="F:Aspose.Pdf.Generator.MenuItemType.FilePrintSetup">
      <summary>
            File-&gt;Print Setup
            </summary>
    </member>
    <member name="F:Aspose.Pdf.Generator.MenuItemType.FilePrint">
      <summary>
            File-&gt;Print
            </summary>
    </member>
    <member name="F:Aspose.Pdf.Generator.MenuItemType.FileExit">
      <summary>
            File-&gt;Exit
            </summary>
    </member>
    <member name="F:Aspose.Pdf.Generator.MenuItemType.EditCheckSpelling">
      <summary>
            Edit-&gt;Check Spelling
            </summary>
    </member>
    <member name="F:Aspose.Pdf.Generator.MenuItemType.EditFind">
      <summary>
            Edit-&gt;Find
            </summary>
    </member>
    <member name="F:Aspose.Pdf.Generator.MenuItemType.EditSearch">
      <summary>
            Edit-&gt;Search
            </summary>
    </member>
    <member name="F:Aspose.Pdf.Generator.MenuItemType.EditPreferences">
      <summary>
            Edit-&gt;Preferences
            </summary>
    </member>
    <member name="F:Aspose.Pdf.Generator.MenuItemType.ViewGoToFirstPage">
      <summary>
            View-&gt;Go To-&gt;First Page
            </summary>
    </member>
    <member name="F:Aspose.Pdf.Generator.MenuItemType.ViewGoToPreviousPage">
      <summary>
            View-&gt;Go To-&gt;Previous Page
            </summary>
    </member>
    <member name="F:Aspose.Pdf.Generator.MenuItemType.ViewGoToNextPage">
      <summary>
            View-&gt;Go To-&gt;Next Page
            </summary>
    </member>
    <member name="F:Aspose.Pdf.Generator.MenuItemType.ViewGoToLastPage">
      <summary>
            View-&gt;Go To-&gt;Last Page
            </summary>
    </member>
    <member name="F:Aspose.Pdf.Generator.MenuItemType.ViewGoToPage">
      <summary>
            View-&gt;Go To-&gt;Page
            </summary>
    </member>
    <member name="F:Aspose.Pdf.Generator.MenuItemType.ViewGoToPreviousView">
      <summary>
            View-&gt;Go To-&gt;Previous View
            </summary>
    </member>
    <member name="F:Aspose.Pdf.Generator.MenuItemType.ViewGoToNextView">
      <summary>
            View-&gt;Go To-&gt;Next View
            </summary>
    </member>
    <member name="F:Aspose.Pdf.Generator.MenuItemType.ViewZoomZoomTo">
      <summary>
            View-&gt;Zoom-&gt;Zoom To
            </summary>
    </member>
    <member name="F:Aspose.Pdf.Generator.MenuItemType.ViewZoomActualSize">
      <summary>
            View-&gt;Zoom-&gt;Actual Size
            </summary>
    </member>
    <member name="F:Aspose.Pdf.Generator.MenuItemType.ViewZoomFitPage">
      <summary>
            View-&gt;Zoom-&gt;Fit Page
            </summary>
    </member>
    <member name="F:Aspose.Pdf.Generator.MenuItemType.ViewZoomFitWidth">
      <summary>
            View-&gt;Zoom-&gt;Fit Width
            </summary>
    </member>
    <member name="F:Aspose.Pdf.Generator.MenuItemType.ViewZoomFitHeight">
      <summary>
            View-&gt;Zoom-&gt;Fit Height
            </summary>
    </member>
    <member name="F:Aspose.Pdf.Generator.MenuItemType.ViewZoomFitVisible">
      <summary>
            View-&gt;Zoom-&gt;Fit Visible
            </summary>
    </member>
    <member name="F:Aspose.Pdf.Generator.MenuItemType.ViewPageDisplaySinglePage">
      <summary>
            View-&gt;Page Display-&gt;Single Page
            </summary>
    </member>
    <member name="F:Aspose.Pdf.Generator.MenuItemType.ViewPageDisplaySinglePageContinuous">
      <summary>
            View-&gt;Page Display-&gt;Single Page Continuous
            </summary>
    </member>
    <member name="F:Aspose.Pdf.Generator.MenuItemType.ViewPageDisplayTwoUp">
      <summary>
            View-&gt;Page Display-&gt;Two-Up
            </summary>
    </member>
    <member name="F:Aspose.Pdf.Generator.MenuItemType.ViewPageDisplayTwoUpContinuous">
      <summary>
            View-&gt;Page Display-&gt;Two-Up Continuous
            </summary>
    </member>
    <member name="F:Aspose.Pdf.Generator.MenuItemType.ViewToolBarsAdvancedEditing">
      <summary>
            View-&gt;ToolBars-&gt;Advanced Editing
            </summary>
    </member>
    <member name="F:Aspose.Pdf.Generator.MenuItemType.ViewToolBarsCommentMarkup">
      <summary>
            View-&gt;ToolBars-&gt;Comment &amp; Markup
            </summary>
    </member>
    <member name="F:Aspose.Pdf.Generator.MenuItemType.ViewToolBarsEdit">
      <summary>
            View-&gt;ToolBars-&gt;Edit
            </summary>
    </member>
    <member name="F:Aspose.Pdf.Generator.MenuItemType.ViewToolBarsFile">
      <summary>
            View-&gt;ToolBars-&gt;File
            </summary>
    </member>
    <member name="F:Aspose.Pdf.Generator.MenuItemType.ViewToolBarsFind">
      <summary>
            View-&gt;ToolBars-&gt;Find
            </summary>
    </member>
    <member name="F:Aspose.Pdf.Generator.MenuItemType.ViewToolBarsForms">
      <summary>
            View-&gt;ToolBars-&gt;Forms
            </summary>
    </member>
    <member name="F:Aspose.Pdf.Generator.MenuItemType.ViewToolBarsMeasuring">
      <summary>
            View-&gt;ToolBars-&gt;Measuring
            </summary>
    </member>
    <member name="F:Aspose.Pdf.Generator.MenuItemType.ViewToolBarsObjectData">
      <summary>
            View-&gt;ToolBars-&gt;Object Data
            </summary>
    </member>
    <member name="F:Aspose.Pdf.Generator.MenuItemType.ViewToolBarsPageDisplay">
      <summary>
            View-&gt;ToolBars-&gt;Page Display
            </summary>
    </member>
    <member name="F:Aspose.Pdf.Generator.MenuItemType.ViewToolBarsPageNavigation">
      <summary>
            View-&gt;ToolBars-&gt;Page Navigation
            </summary>
    </member>
    <member name="F:Aspose.Pdf.Generator.MenuItemType.ViewToolBarsPrintProduction">
      <summary>
            View-&gt;ToolBars-&gt;Print Production
            </summary>
    </member>
    <member name="F:Aspose.Pdf.Generator.MenuItemType.ViewToolBarsRedAction">
      <summary>
            View-&gt;ToolBars-&gt;RedAction
            </summary>
    </member>
    <member name="F:Aspose.Pdf.Generator.MenuItemType.ViewToolBarsSelectZoom">
      <summary>
            View-&gt;ToolBars-&gt;Select &amp; Zoom
            </summary>
    </member>
    <member name="F:Aspose.Pdf.Generator.MenuItemType.ViewToolBarsTasks">
      <summary>
            View-&gt;ToolBars-&gt;Tasks
            </summary>
    </member>
    <member name="F:Aspose.Pdf.Generator.MenuItemType.ViewToolBarsTypewriter">
      <summary>
            View-&gt;ToolBars-&gt;Typewriter
            </summary>
    </member>
    <member name="F:Aspose.Pdf.Generator.MenuItemType.ViewToolBarsPropertiesBar">
      <summary>
            View-&gt;ToolBars-&gt;Properties Bar
            </summary>
    </member>
    <member name="F:Aspose.Pdf.Generator.MenuItemType.ViewNavigationPanelsArticles">
      <summary>
            View-&gt;Navigation Panels-&gt;Articles
            </summary>
    </member>
    <member name="F:Aspose.Pdf.Generator.MenuItemType.ViewNavigationPanelsAttachments">
      <summary>
            View-&gt;Navigation Panels-&gt;Attachments
            </summary>
    </member>
    <member name="F:Aspose.Pdf.Generator.MenuItemType.ViewNavigationPanelsBookmarks">
      <summary>
            View-&gt;Navigation Panels-&gt;Bookmarks
            </summary>
    </member>
    <member name="F:Aspose.Pdf.Generator.MenuItemType.ViewNavigationPanelsComments">
      <summary>
            View-&gt;Navigation Panels-&gt;Comments
            </summary>
    </member>
    <member name="F:Aspose.Pdf.Generator.MenuItemType.ViewNavigationPanelsFields">
      <summary>
            View-&gt;Navigation Panels-&gt;Fields
            </summary>
    </member>
    <member name="F:Aspose.Pdf.Generator.MenuItemType.ViewNavigationPanelsLayers">
      <summary>
            View-&gt;Navigation Panels-&gt;Layers
            </summary>
    </member>
    <member name="F:Aspose.Pdf.Generator.MenuItemType.ViewNavigationPanelsModelTree">
      <summary>
            View-&gt;Navigation Panels-&gt;Model Tree
            </summary>
    </member>
    <member name="F:Aspose.Pdf.Generator.MenuItemType.ViewNavigationPanelsPages">
      <summary>
            View-&gt;Navigation Panels-&gt;Pages
            </summary>
    </member>
    <member name="F:Aspose.Pdf.Generator.MenuItemType.ViewNavigationPanelsSignatures">
      <summary>
            View-&gt;Navigation Panels-&gt;Signatures
            </summary>
    </member>
    <member name="F:Aspose.Pdf.Generator.MenuItemType.DocumentInsertPages">
      <summary>
            Document-&gt;Insert Pages
            </summary>
    </member>
    <member name="F:Aspose.Pdf.Generator.MenuItemType.DocumentExtractPages">
      <summary>
            Document-&gt;Extract Pages
            </summary>
    </member>
    <member name="F:Aspose.Pdf.Generator.MenuItemType.DocumentDeletePages">
      <summary>
            Document-&gt;Delete Pages
            </summary>
    </member>
    <member name="F:Aspose.Pdf.Generator.MenuItemType.DocumentCropPages">
      <summary>
            Document-&gt;Crop Pages
            </summary>
    </member>
    <member name="F:Aspose.Pdf.Generator.MenuItemType.DocumentRotatePages">
      <summary>
            Document-&gt;Rotate Pages
            </summary>
    </member>
    <member name="F:Aspose.Pdf.Generator.MenuItemType.DocumentAttachFile">
      <summary>
            Document-&gt;Attach a File
            </summary>
    </member>
    <member name="F:Aspose.Pdf.Generator.MenuItemType.WindowFullScreenMode">
      <summary>
            Window-&gt;Full Screen Mode
            </summary>
    </member>
    <member name="F:Aspose.Pdf.Generator.MenuItemType.BookmarksExpandCurrentBookmark">
      <summary>
            Bookmarks-&gt;Expand Current Bookmark
            </summary>
    </member>
    <member name="F:Aspose.Pdf.Generator.MenuItemType.BookmarksHighlightCurrentBookmark">
      <summary>
            Bookmarks-&gt;Highlight Current Bookmark
            </summary>
    </member>
    <member name="F:Aspose.Pdf.Generator.MenuItemType.PageImagesPrintPages">
      <summary>
            Page Images-&gt;Print Pages
            </summary>
    </member>
    <member name="F:Aspose.Pdf.Generator.MenuItemType.MiscellaneousZoomIn">
      <summary>
            Miscellaneous-&gt;Zoom In
            </summary>
    </member>
    <member name="F:Aspose.Pdf.Generator.MenuItemType.MiscellaneousZoomOut">
      <summary>
            Miscellaneous-&gt;Zoom Out
            </summary>
    </member>
    <member name="T:Aspose.Pdf.Generator.NoteIconType">
      <summary>
            Enumerates the not icon types.
            </summary>
    </member>
    <member name="F:Aspose.Pdf.Generator.NoteIconType.Comment">
      <summary>
            Comment type.
            </summary>
    </member>
    <member name="F:Aspose.Pdf.Generator.NoteIconType.Insert">
      <summary>
            Insert type.
            </summary>
    </member>
    <member name="F:Aspose.Pdf.Generator.NoteIconType.Paragraph">
      <summary>
            Paragraph type.
            </summary>
    </member>
    <member name="F:Aspose.Pdf.Generator.NoteIconType.Note">
      <summary>
            Note type.
            </summary>
    </member>
    <member name="F:Aspose.Pdf.Generator.NoteIconType.NewParagraph">
      <summary>
            NewParagraph type.
            </summary>
    </member>
    <member name="F:Aspose.Pdf.Generator.NoteIconType.Key">
      <summary>
            Key type.
            </summary>
    </member>
    <member name="F:Aspose.Pdf.Generator.NoteIconType.Help">
      <summary>
            Help type.
            </summary>
    </member>
    <member name="T:Aspose.Pdf.Generator.NoteWindowPositioningType">
      <summary>
            Enumerates the positioning types for note's popup window.
            </summary>
    </member>
    <member name="F:Aspose.Pdf.Generator.NoteWindowPositioningType.Auto">
      <summary>
            The popup window of note be positioned automatically.
            </summary>
    </member>
    <member name="F:Aspose.Pdf.Generator.NoteWindowPositioningType.Absolute">
      <summary>
            The popup window of note be absolute positioned.
            </summary>
    </member>
    <member name="F:Aspose.Pdf.Generator.NoteWindowPositioningType.NoteRelative">
      <summary>
            The popup window of note be positioned relative to the note's position.
            </summary>
    </member>
    <member name="T:Aspose.Pdf.Generator.NumberingContinuationType">
      <summary>
            Enumerates the continuation style of numbering of footnote or endnote
            </summary>
    </member>
    <member name="F:Aspose.Pdf.Generator.NumberingContinuationType.ContinuationInDocument">
      <summary>
            All the foot or end notes'numbers in the same pdf document would be continuerable.
            </summary>
    </member>
    <member name="F:Aspose.Pdf.Generator.NumberingContinuationType.ContinuationInSection">
      <summary>
            All the foot or end notes'numbers in the same section would be continuerable.
            </summary>
    </member>
    <member name="F:Aspose.Pdf.Generator.NumberingContinuationType.ContinuationInPage">
      <summary>
            All the footnote numbers in the same page would be continuerable.This type is not suitable for end notes
            </summary>
    </member>
    <member name="T:Aspose.Pdf.Generator.NumberingFormatType">
      <summary>
            Enumerates the footnote number types.
            </summary>
    </member>
    <member name="F:Aspose.Pdf.Generator.NumberingFormatType.Arab">
      <summary>
            Arab type,for example, 1,1.1,...
            </summary>
    </member>
    <member name="F:Aspose.Pdf.Generator.NumberingFormatType.RomanUpper">
      <summary>
            Roman upper type, for example, I,I.II, ...
            </summary>
    </member>
    <member name="F:Aspose.Pdf.Generator.NumberingFormatType.RomanLower">
      <summary>
            Roman lower type, for example, i,i.ii, ...
            </summary>
    </member>
    <member name="F:Aspose.Pdf.Generator.NumberingFormatType.EnglishUpper">
      <summary>
            English upper type, for example, A,A.B, ...
            </summary>
    </member>
    <member name="F:Aspose.Pdf.Generator.NumberingFormatType.EnglishLower">
      <summary>
            English lower type, for example, a,a.b, ...
            </summary>
    </member>
    <member name="T:Aspose.Pdf.Generator.OpenType">
      <summary>
            Enumerates the document open types.
            </summary>
    </member>
    <member name="F:Aspose.Pdf.Generator.OpenType.Auto">
      <summary>
            Opens automatically.
            </summary>
    </member>
    <member name="F:Aspose.Pdf.Generator.OpenType.Bookmarks">
      <summary>
            Opens in bookmarks.
            </summary>
    </member>
    <member name="F:Aspose.Pdf.Generator.OpenType.Thumbnails">
      <summary>
            Opens in thumbnails.
            </summary>
    </member>
    <member name="F:Aspose.Pdf.Generator.OpenType.FullScreen">
      <summary>
            Opens in full screen.
            </summary>
    </member>
    <member name="F:Aspose.Pdf.Generator.OpenType.None">
      <summary>
            Opens nothing.
            </summary>
    </member>
    <member name="T:Aspose.Pdf.Generator.PageGutter">
      <summary>
             Encapsulates page gutter.
             </summary>
      <example>
        <code>
             [C#]
            	Pdf pdf1 = new Pdf();
            
            	pdf1.PageSetup.PageHeight = PageSize.A2Height;
            			
            	Section sec1 = pdf1.Sections.Add();
             
            	sec1.PageInfo.PageGutter.Placement = GutterPlacementType.Left;
             sec1.PageInfo.PageGutter.Size = 50;
             
            	Text text1 = new Text(sec1,"this is text content");
            	
            	sec1.Paragraphs.Add(text1);
            			
             pdf1.Save(...);
             
             [Visual Basic]
            	Dim pdf1 As Pdf = New Pdf()
            
            	pdf1.PageSetup.PageHeight = PageSize.A2Height
            
            	Dim sec1 As Section = pdf1.Sections.Add()
             
             sec1.PageInfo.PageGutter.Placement = GutterPlacementType.Left
             sec1.PageInfo.PageGutter.Size = 50
             
            	Dim text1 As Text = New Text(sec1, "this is text content")
            	sec1.Paragraphs.Add(text1)
             
             pdf1.Save(...)
             
             [XML]
             &lt;?xml version="1.0" encoding="utf-8" ?&gt;
             &lt;Pdf xmlns="Aspose.Pdf"&gt;
            		&lt;Section PageHeight="1684" PageGutterPlacementType = "left" PageGutterSize = "50"&gt;
            			&lt;Text &gt;
            				&lt;Segment&gt;this is text content&lt;/Segment&gt;
            			&lt;/Text&gt;
            		&lt;/Section&gt;
             &lt;/Pdf&gt;
             
             </code>
      </example>
    </member>
    <member name="P:Aspose.Pdf.Generator.PageGutter.Size">
      <summary>
            Gets or sets a float value that indicates the size of page gutter
            </summary>
    </member>
    <member name="P:Aspose.Pdf.Generator.PageGutter.Placement">
      <summary>
            Gets or sets a GutterPlacementType<see cref="T:Aspose.Pdf.Generator.GutterPlacementType" />. value that indicates the placement of page gutter
            </summary>
    </member>
    <member name="T:Aspose.Pdf.Generator.PageNumberFormatType">
      <summary>
            Enumerates the destination types of the format of the page number .
            </summary>
    </member>
    <member name="F:Aspose.Pdf.Generator.PageNumberFormatType.Arab">
      <summary>
            the format of the page number is Arab
            </summary>
    </member>
    <member name="F:Aspose.Pdf.Generator.PageNumberFormatType.RomanUpper">
      <summary>
            the format of the page number is upper Roman case
            </summary>
    </member>
    <member name="F:Aspose.Pdf.Generator.PageNumberFormatType.RomanLower">
      <summary>
            the format of the page number is lower Roman case
            </summary>
    </member>
    <member name="F:Aspose.Pdf.Generator.PageNumberFormatType.EnglishUpper">
      <summary>
            the format of the page number is upper English case
            </summary>
    </member>
    <member name="F:Aspose.Pdf.Generator.PageNumberFormatType.EnglishLower">
      <summary>
            the format of the page number is lower English case
            </summary>
    </member>
    <member name="T:Aspose.Pdf.Generator.PageSetup">
      <summary>
             Encapsulates info for page setup.
             </summary>
      <example>
        <code>
             [C#]
            	Pdf pdf1 = new Pdf();
            
            	pdf1.PageSetup.PageHeight = PageSize.A2Height;
            			
            	Section sec1 = pdf1.Sections.Add();
            			
            	Text text1 = new Text(sec1,"this is text content");
            	text1.Margin.Top = 30;
            	sec1.Paragraphs.Add(text1);
            			
             pdf1.Save(...);
             
             [Visual Basic]
            	Dim pdf1 As Pdf = New Pdf()
            
            	pdf1.PageSetup.PageHeight = PageSize.A2Height
            
            	Dim sec1 As Section = pdf1.Sections.Add()
            
            	Dim text1 As Text = New Text(sec1, "this is text content")
            	text1.Margin.Top = 30
            	sec1.Paragraphs.Add(text1)
             
             pdf1.Save(...)
             
             [XML]
             &lt;?xml version="1.0" encoding="utf-8" ?&gt;
             &lt;Pdf xmlns="Aspose.Pdf"&gt;
            		&lt;Section PageHeight="1684"&gt;
            			&lt;Text MarginTop="30"&gt;
            				&lt;Segment&gt;this is text content&lt;/Segment&gt;
            			&lt;/Text&gt;
            		&lt;/Section&gt;
             &lt;/Pdf&gt;
             
             </code>
      </example>
    </member>
    <member name="M:Aspose.Pdf.Generator.PageSetup.#ctor">
      <summary>
            Initializes a new instance of the <see cref="T:Aspose.Pdf.Generator.PageSetup" /> class.
            </summary>
    </member>
    <member name="M:Aspose.Pdf.Generator.PageSetup.#ctor(Aspose.Pdf.Generator.Section)">
      <summary>
            Initializes a new instance of the <see cref="T:Aspose.Pdf.Generator.PageSetup" /> class.
            </summary>
      <param name="section">The section in which this PageSetup is used for.</param>
    </member>
    <member name="M:Aspose.Pdf.Generator.PageSetup.Clone">
      <summary>
            Clones a new <see cref="T:Aspose.Pdf.Generator.PageSetup" /> object.
            </summary>
      <returns>The new cloned <see cref="T:Aspose.Pdf.Generator.PageSetup" /> object.</returns>
    </member>
    <member name="P:Aspose.Pdf.Generator.PageSetup.Margin">
      <summary>
            Gets or sets a <see cref="T:Aspose.Pdf.Generator.MarginInfo" /> object that indicates the page margin info.
            </summary>
    </member>
    <member name="P:Aspose.Pdf.Generator.PageSetup.PageWidth">
      <summary>
            Gets or sets a float value that indicates the page width.
            </summary>
    </member>
    <member name="P:Aspose.Pdf.Generator.PageSetup.PageHeight">
      <summary>
            Gets or sets a float value that indicates the page height.
            </summary>
    </member>
    <member name="P:Aspose.Pdf.Generator.PageSetup.CropBox">
      <summary>
            Gets or sets a <see cref="T:Aspose.Pdf.Generator.RectData" /> object that indicates the crop box of the page.
            </summary>
    </member>
    <member name="P:Aspose.Pdf.Generator.PageSetup.BleedBox">
      <summary>
            Gets or sets a <see cref="T:Aspose.Pdf.Generator.RectData" /> object that indicates the bleed box of the page.
            The bleed box (PDF 1.3) defines the region to which the contents of the page 
            should be clipped when output in a production environment. This may include 
            any extra ¡°bleed area¡± needed to accommodate the physical limitations of cutting,
            folding, and trimming equipment. The actual printed page may include 
            printing marks that fall outside the bleed box.
            </summary>
    </member>
    <member name="P:Aspose.Pdf.Generator.PageSetup.ArtBox">
      <summary>
            Gets or sets a <see cref="T:Aspose.Pdf.Generator.RectData" /> object that indicates the art box of the page.
            The art box (PDF 1.3) defines the extent of the page¡¯s meaningful content 
            (including potential white space) as intended by the page¡¯s creator.
            </summary>
    </member>
    <member name="P:Aspose.Pdf.Generator.PageSetup.TrimBox">
      <summary>
            Gets or sets a <see cref="T:Aspose.Pdf.Generator.RectData" /> object that indicates the trim box of the page.
            The trim box (PDF 1.3) defines the intended dimensions of the finished page 
            after trimming. It may be smaller than the media box, to allow for productionrelated 
            content such as printing instructions, cut marks, or color bars.
            </summary>
    </member>
    <member name="P:Aspose.Pdf.Generator.PageSetup.PageBorder">
      <summary>
            Gets or sets a <see cref="P:Aspose.Pdf.Generator.PageSetup.PageBorder" /> object that indicates the page border.
            </summary>
    </member>
    <member name="P:Aspose.Pdf.Generator.PageSetup.PageBorderMargin">
      <summary>
            Gets or sets a <see cref="T:Aspose.Pdf.Generator.MarginInfo" /> object that indicates the margin between the page border and 
            the page edge. The default value is half of the page margin.
            </summary>
    </member>
    <member name="P:Aspose.Pdf.Generator.PageSetup.PageGutter">
      <summary>
            Gets or sets a <see cref="P:Aspose.Pdf.Generator.PageSetup.PageGutter" /> object that indicates the page gutter. 
            </summary>
    </member>
    <member name="T:Aspose.Pdf.Generator.PageSize">
      <summary>
             Encapsulates predefined page sizes, including A0, A1, A2, A3, A4, A5, A6, B5, Letter, Legal, Ledger and P11x17.
             </summary>
      <example>
        <code>
             [C#]
            	Pdf pdf1 = new Pdf();
            
            	pdf1.PageSetup.PageHeight = PageSize.A2Height;
            
            	Section sec1 = pdf1.Sections.Add();
            
            	Text text1 = new Text(sec1,"this is text content");
            	text1.Margin.Top = 30;
            	sec1.Paragraphs.Add(text1);
            
             pdf1.Save(...);
             
             [Visual Basic]
            	Dim pdf1 As Pdf = New Pdf()
            
            	pdf1.PageSetup.PageHeight = PageSize.A2Height
            
            	Dim sec1 As Section = pdf1.Sections.Add()
            
            	Dim text1 As Text = New Text(sec1, "this is text content")
            	text1.Margin.Top = 30
            	sec1.Paragraphs.Add(text1)
             
             pdf1.Save(...)
             
             [XML]
             &lt;?xml version="1.0" encoding="utf-8" ?&gt;
             &lt;Pdf xmlns="Aspose.Pdf"&gt;
            		&lt;Section PageHeight="1684"&gt;
            			&lt;Text MarginTop="30"&gt;
            				&lt;Segment&gt;this is text content&lt;/Segment&gt;
            			&lt;/Text&gt;
            		&lt;/Section&gt;
             &lt;/Pdf&gt;
             
             </code>
      </example>
    </member>
    <member name="M:Aspose.Pdf.Generator.PageSize.#ctor">
      <summary>
            Initializes a new instance of the <see cref="T:Aspose.Pdf.Generator.PageSize" /> class.
            </summary>
    </member>
    <member name="F:Aspose.Pdf.Generator.PageSize.A0Width">
      <summary>
            The width of A0.
            </summary>
    </member>
    <member name="F:Aspose.Pdf.Generator.PageSize.A0Height">
      <summary>
            The height of A0.
            </summary>
    </member>
    <member name="F:Aspose.Pdf.Generator.PageSize.A1Width">
      <summary>
            The width of A1.
            </summary>
    </member>
    <member name="F:Aspose.Pdf.Generator.PageSize.A1Height">
      <summary>
            The height of A1.
            </summary>
    </member>
    <member name="F:Aspose.Pdf.Generator.PageSize.A2Width">
      <summary>
            The width of A2.
            </summary>
    </member>
    <member name="F:Aspose.Pdf.Generator.PageSize.A2Height">
      <summary>
            The height of A2.
            </summary>
    </member>
    <member name="F:Aspose.Pdf.Generator.PageSize.A3Width">
      <summary>
            The width of A3.
            </summary>
    </member>
    <member name="F:Aspose.Pdf.Generator.PageSize.A3Height">
      <summary>
            The height of A3.
            </summary>
    </member>
    <member name="F:Aspose.Pdf.Generator.PageSize.A4Width">
      <summary>
            The width of A4.
            </summary>
    </member>
    <member name="F:Aspose.Pdf.Generator.PageSize.A4Height">
      <summary>
            The height of A4.
            </summary>
    </member>
    <member name="F:Aspose.Pdf.Generator.PageSize.A5Width">
      <summary>
            The width of A5.
            </summary>
    </member>
    <member name="F:Aspose.Pdf.Generator.PageSize.A5Height">
      <summary>
            the height of page A5.
            </summary>
    </member>
    <member name="F:Aspose.Pdf.Generator.PageSize.A6Width">
      <summary>
            The width of A6.
            </summary>
    </member>
    <member name="F:Aspose.Pdf.Generator.PageSize.A6Height">
      <summary>
            The height of A6.
            </summary>
    </member>
    <member name="F:Aspose.Pdf.Generator.PageSize.B5Width">
      <summary>
            The width of B5.
            </summary>
    </member>
    <member name="F:Aspose.Pdf.Generator.PageSize.B5Height">
      <summary>
            The height of B5.
            </summary>
    </member>
    <member name="F:Aspose.Pdf.Generator.PageSize.LetterWidth">
      <summary>
            The width of Letter.
            </summary>
    </member>
    <member name="F:Aspose.Pdf.Generator.PageSize.LetterHeight">
      <summary>
            the height of page Letter.
            </summary>
    </member>
    <member name="F:Aspose.Pdf.Generator.PageSize.LegalWidth">
      <summary>
            The width of Legal.
            </summary>
    </member>
    <member name="F:Aspose.Pdf.Generator.PageSize.LegalHeight">
      <summary>
            The height of Legal.
            </summary>
    </member>
    <member name="F:Aspose.Pdf.Generator.PageSize.LedgerWidth">
      <summary>
            The width of Ledger.
            </summary>
    </member>
    <member name="F:Aspose.Pdf.Generator.PageSize.LedgerHeight">
      <summary>
            The height of Ledger.
            </summary>
    </member>
    <member name="F:Aspose.Pdf.Generator.PageSize.P11x17Width">
      <summary>
            The width of P11x17.
            </summary>
    </member>
    <member name="F:Aspose.Pdf.Generator.PageSize.P11x17Height">
      <summary>
            The height of P11x17.
            </summary>
    </member>
    <member name="T:Aspose.Pdf.Generator.PageTransitionType">
      <summary>
            Enumerates transition types for page transition effects when revealing the new page.
            </summary>
    </member>
    <member name="F:Aspose.Pdf.Generator.PageTransitionType.None">
      <summary>
            No transition.
            </summary>
    </member>
    <member name="F:Aspose.Pdf.Generator.PageTransitionType.Split">
      <summary>
            Two lines sweep across the screen.
            </summary>
    </member>
    <member name="F:Aspose.Pdf.Generator.PageTransitionType.Blinds">
      <summary>
            Multiple lines,evenly spaced across the screen,synchronously sweep in the same direction.
            </summary>
    </member>
    <member name="F:Aspose.Pdf.Generator.PageTransitionType.Box">
      <summary>
            A rectangular box sweeps inward from the edges of the page or outward from the center.
            </summary>
    </member>
    <member name="F:Aspose.Pdf.Generator.PageTransitionType.Wipe">
      <summary>
            A single line sweeps across the screen from one edge to the other.		
            </summary>
    </member>
    <member name="F:Aspose.Pdf.Generator.PageTransitionType.Dissolve">
      <summary>
            The old page dissolves gradually.
            </summary>
    </member>
    <member name="F:Aspose.Pdf.Generator.PageTransitionType.Glitter">
      <summary>
            Similar to Dissolve except that the effect sweeps across the page in a wide band moving from one side of the screen to the other.
            </summary>
    </member>
    <member name="F:Aspose.Pdf.Generator.PageTransitionType.Replace">
      <summary>
            The new page simply replaces the old one with no special transition effect.		
            </summary>
    </member>
    <member name="T:Aspose.Pdf.Generator.Paragraphs">
      <summary>
             Represents a collection of <see cref="T:Aspose.Pdf.Generator.Paragraph" /> objects.
             </summary>
      <example>
        <code>
             [C#]
             Pdf pdf = new Pdf();
            
             pdf.Security = new Security();
             pdf.Security.IsCopyingAllowed = false;
             
             pdf.PageSetup.PageHeight = PageSize.A2Height;
             
             Section section = new Section(pdf);
             pdf.Sections.Add(section);
            
             Text text1 = new Text(section);
             text1.Margin.Top = 30;
             section.Paragraphs.Add(text1);
            
             Segment segment1 = new Segment(text1);
             text1.Segments.Add(segment1);
             segment1.Content = "this is text content";
            
             pdf.Save(Response);
             Response.End();
             
             [Visual Basic]
             Dim pdf As Pdf = New Pdf()
             
             pdf.Security = New Security()
             pdf.Security.IsCopyingAllowed = False
             
             pdf.PageSetup.PageHeight = PageSize.A2Height
             
             Dim section As Section = New Section(pdf)
             pdf.Sections.Add(section)
             
             Dim text1 As Text = New Text(section)
             text1.Margin.Top = 30
             section.Paragraphs.Add(text1)
             
             Dim segment1 As Segment = New Segment(text1)
             text1.Segments.Add(segment1)
             segment1.Content = "this is text content"
             
             pdf.Save(Response)
             Response.End()
             
             [XML]
             &lt;?xml version="1.0" encoding="utf-8" ?&gt;
             &lt;Pdf xmlns="Aspose.Pdf" IsCopyingAllowed="false"&gt;
            		&lt;Section PageHeight="1684"&gt;
            			&lt;Text MarginTop="30"&gt;
            				&lt;Segment&gt;this is text content&lt;/Segment&gt;
            			&lt;/Text&gt;
            		&lt;/Section&gt;
             &lt;/Pdf&gt;
             
             </code>
      </example>
    </member>
    <member name="M:Aspose.Pdf.Generator.Paragraphs.#ctor">
      <summary>
            Initializes a new instance of the <see cref="T:Aspose.Pdf.Generator.Paragraphs" /> class.
            </summary>
    </member>
    <member name="M:Aspose.Pdf.Generator.Paragraphs.Add(Aspose.Pdf.Generator.Paragraph)">
      <summary>
            Adds a new <see cref="T:Aspose.Pdf.Generator.Paragraph" /> object into the collection.
            </summary>
      <param name="paragraph">The <see cref="T:Aspose.Pdf.Generator.Paragraph" /> object to be added.</param>
    </member>
    <member name="M:Aspose.Pdf.Generator.Paragraphs.IndexOf(Aspose.Pdf.Generator.Paragraph)">
      <summary>
            Gets the index of a specified <see cref="T:Aspose.Pdf.Generator.Paragraph" /> object in the collection.
            </summary>
      <param name="paragraph">The specified paragraph.</param>
      <returns>The index value.</returns>
    </member>
    <member name="M:Aspose.Pdf.Generator.Paragraphs.Insert(Aspose.Pdf.Generator.Paragraph,Aspose.Pdf.Generator.Paragraph)">
      <summary>
            Inserts a new <see cref="T:Aspose.Pdf.Generator.Paragraph" /> object into the collection after specified Cell object.
            </summary>
      <param name="paragraphToInsertAfter">The <see cref="T:Aspose.Pdf.Generator.Paragraph" /> object to insert after. 
            If this object is null, the new object will be inserted as the first member.</param>
      <param name="newParagraph">The <see cref="T:Aspose.Pdf.Generator.Paragraph" /> object to be inserted.</param>
    </member>
    <member name="M:Aspose.Pdf.Generator.Paragraphs.Remove(Aspose.Pdf.Generator.Paragraph)">
      <summary>
            Removes a <see cref="T:Aspose.Pdf.Generator.Paragraph" /> object from the collection.
            </summary>
      <param name="paragraphToRemove">The <see cref="T:Aspose.Pdf.Generator.Paragraph" /> object to be romoved.</param>
    </member>
    <member name="M:Aspose.Pdf.Generator.Paragraphs.CopyTo(Aspose.Pdf.Generator.Paragraph[],System.Int32)">
      <summary>
            Copies the elements to a <see cref="T:Aspose.Pdf.Generator.Paragraph" /> object array, starting at a specified array index.
            </summary>
      <param name="paraArray">The <see cref="T:Aspose.Pdf.Generator.Paragraph" /> object array.</param>
      <param name="index">The starting index.</param>
    </member>
    <member name="P:Aspose.Pdf.Generator.Paragraphs.Item(System.Int32)">
      <summary>
            Gets or sets a <see cref="T:Aspose.Pdf.Generator.Paragraph" /> object from the collection according to Paragraph index.
            </summary>
    </member>
    <member name="P:Aspose.Pdf.Generator.Paragraphs.Item(System.String)">
      <summary>
            Gets or sets a <see cref="T:Aspose.Pdf.Generator.Paragraph" /> object from the collection according to Paragraph ID.
            </summary>
    </member>
    <member name="T:Aspose.Pdf.Generator.Pdf">
      <summary>
             Represents the Pdf document.
             </summary>
      <example>
        <code>
             [C#]
            	Pdf pdf1 = new Pdf();
            
            	pdf1.PageSetup.PageHeight = PageSize.A2Height;
            
            	Section sec1 = pdf1.Sections.Add();
            
            	Text text1 = new Text(sec1,"this is text content");
            	text1.Margin.Top = 30;
            	sec1.Paragraphs.Add(text1);
            
             pdf1.Save(...);
             
             [Visual Basic]
            	Dim pdf1 As Pdf = New Pdf()
            
            	pdf1.PageSetup.PageHeight = PageSize.A2Height
            
            	Dim sec1 As Section = pdf1.Sections.Add()
            
            	Dim text1 As Text = New Text(sec1, "this is text content")
            	text1.Margin.Top = 30
            	sec1.Paragraphs.Add(text1)
             
             pdf1.Save(...)
             
             [XML]
             &lt;?xml version="1.0" encoding="utf-8" ?&gt;
             &lt;Pdf xmlns="Aspose.Pdf"&gt;
            		&lt;Section PageHeight="1684"&gt;
            			&lt;Text MarginTop="30"&gt;
            				&lt;Segment&gt;this is text content&lt;/Segment&gt;
            			&lt;/Text&gt;
            		&lt;/Section&gt;
             &lt;/Pdf&gt;
             
             </code>
      </example>
    </member>
    <member name="M:Aspose.Pdf.Generator.Pdf.#ctor">
      <summary>
            Initializes a new instance of the <see cref="T:Aspose.Pdf.Generator.Pdf" /> class for Evaluation License.
            </summary>
      <remarks>
            It can be used in both Windows Forms applications and Web Forms applications
            when the license type is Evaluation License.
            </remarks>
    </member>
    <member name="M:Aspose.Pdf.Generator.Pdf.#ctor(System.IO.Stream)">
      <summary>
            Initializes a new instance of the <see cref="T:Aspose.Pdf.Generator.Pdf" /> class for Evaluation License. You can use 
            SetLicense method to set license if you have purchased license.If you use this constructor,the  
            component will work in direct-to-file or direct-to-stream mode. That means all paragraphs will be rendered into pdf file or stream 
            without being saved in the document object model. Less memory will be consumed in this mode,but you 
            can't access the paragraphs that be added into the document any more, so some of the advanced 
            features such as combination of XML and API,hyperlink to specified paragraph,total page number in 
            footer,etc.,is not available.
            </summary>
      <param name="docStream">The stream to write the document.</param>
    </member>
    <member name="M:Aspose.Pdf.Generator.Pdf.Close">
      <summary>
            Close the document. This method is used for direct-to-file mode only.
            </summary>
    </member>
    <member name="M:Aspose.Pdf.Generator.Pdf.SetLicense(System.String)">
      <summary>
            Obsolete. Licenses this component to use in a Windows application.
            </summary>
      <remarks>
        <p>Use this class for licenses purchased before 2005/01/22. Aspose has upgraded to a new 
            licensing system, please use License.<see cref="M:Aspose.Pdf.License.SetLicense(System.String)" /> for licenses purchased after that date.</p>
      </remarks>
      <param name="licenseFile">The license filename with its path.</param>
    </member>
    <member name="M:Aspose.Pdf.Generator.Pdf.SetLicense(System.IO.TextReader)">
      <summary>
            Obsolete. Licenses this component to use in a Windows application.
            </summary>
      <remarks>
        <p>Use this class for licenses purchased before 2005/01/22. Aspose has upgraded to a new 
            licensing system, please use License.<see cref="M:Aspose.Pdf.License.SetLicense(System.String)" /> for licenses purchased after that date.</p>
      </remarks>
      <param name="licenseReader">Where to read the license from. Please create the TextReader with 
            UnicodeEncoding.UTF7.</param>
    </member>
    <member name="M:Aspose.Pdf.Generator.Pdf.SetLicenseCOM(System.String)">
      <summary>
            Obsolete. Licenses this component to use in a COM application.
            </summary>
      <remarks>
        <p>Use this class for licenses purchased before 2005/01/22. Aspose has upgraded to a new 
            licensing system, please use License.<see cref="M:Aspose.Pdf.License.SetLicense(System.String)" /> for licenses purchased after that date.</p>
      </remarks>
      <example>
        <code>
            Set pdf1 = server.CreateObject("Aspose.Pdf.Pdf")
            pdf1.SetLicenseCOM("e:\projects\CSharp\customer\Aspose.Pdf.lic")
            set sec1 = server.CreateObject("Aspose.Pdf.Section")
            pdf1.Sections.Add(sec1)
            set t1 = server.CreateObject("Aspose.Pdf.Text")
            set s1 = server.CreateObject("Aspose.Pdf.Segment")
            s1.Content = "hello"
            t1.Segments.Add(s1)
            sec1.Paragraphs.Add(t1)
            pdf1.Save("test.Pdf")
            </code>
      </example>
      <param name="licenseFile">The license filename with its path.</param>
    </member>
    <member name="M:Aspose.Pdf.Generator.Pdf.Save(System.String)">
      <summary>
            Generates Pdf document and saves it.
            </summary>
      <param name="pdfFile">The file path and name to save the Pdf document.</param>
      <example>
        <code>
            Pdf pdf = new Pdf();
            pdf.BindXML("C:/xml/Test.xml",null);
            pdf.Save(C;/Pdf/Test.pdf);
            </code>
      </example>
    </member>
    <member name="M:Aspose.Pdf.Generator.Pdf.Save(System.IO.Stream)">
      <summary>
            Generates Pdf document and put it to a <see cref="T:System.IO.Stream" /> object.
            </summary>
      <param name="stream">The <see cref="T:System.IO.Stream" /> object to which the document writes.</param>
      <example>
        <code>
            [C#]
            Pdf pdf = new Pdf();
            pdf.BindXML("C:/xml/Test.xml",null);
            Response.ClearContent();
            Response.ClearHeaders();
            Response.ContentType="application/pdf"; 
            pdf.Save(Response.OutputStream);
            Response.End();
            
            [VisualBasic]
            Dim pdf As Pdf =  New Pdf() 
            pdf.BindXML("C:/xml/Test.xml",Nothing)
            Response.ClearContent()
            Response.ClearHeaders()
            Response.ContentType="application/pdf" 
            pdf.Save(Response.OutputStream)
            Response.End()
            </code>
      </example>
    </member>
    <member name="M:Aspose.Pdf.Generator.Pdf.AddLogListeners(System.IO.Stream)">
      <summary>
            Add tracing output listener
            </summary>
      <param name="listenerStream">Tracing output destination</param>
    </member>
    <member name="M:Aspose.Pdf.Generator.Pdf.BindHTML(System.String)">
      <summary>
            Binds a HTML into the Pdf instance.
            </summary>
      <param name="html">The HTML.</param>
      <example>
        <code>
            [C#]
            string html = File.ReadAllText("C:\\index.htm");
            Pdf pdf = new Pdf();
            pdf.BindHTML(html);
            pdf.Save("test.pdf");
            </code>
      </example>
      <remarks>
            HTML support is a separated part of Aspose.Pdf.Generator and it is not compatible with the DOM of 
            Aspose.Pdf.Generator. You can't modify the content in HTML through API. And you can't using other 
            features such as security setting of the Pdf class when using HTML.
            </remarks>
    </member>
    <member name="M:Aspose.Pdf.Generator.Pdf.BindHTML(System.String,System.String)">
      <summary>
            Binds a HTML into the Pdf instance.
            </summary>
      <param name="html">The HTML.</param>
      <param name="basePath">The base path/url for the HTML document.</param>
      <example>
        <code>
            [C#]
            string html = File.ReadAllText("C:\\index.htm");
            Pdf pdf = new Pdf();
            pdf.BindHTML(html, "C:\\");
            pdf.Save("test.pdf");
            </code>
      </example>
      <remarks>
            HTML support is a separated part of Aspose.Pdf.Generator and it is not compatible with the DOM of 
            Aspose.Pdf.Generator. You can't modify the content in HTML through API. And you can't using other 
            features such as security setting of the Pdf class when using HTML.
            </remarks>
    </member>
    <member name="M:Aspose.Pdf.Generator.Pdf.BindFO(System.Xml.XmlDocument)">
      <summary>
            Binds a FO file into the Pdf instance.
            </summary>
      <param name="xmlFoFileBody">The FO file.</param>
      <example>
        <code>
            [C#]
            Pdf pdf = new Pdf();
            pdf.BindFO(xmlDocument);
            pdf.Save("test.pdf");
            
            [VisualBasic]
            Dim pdf As Pdf = New Pdf
            pdf.BindFO(_XmlDocument)
            pdf.Save("test.pdf")
            </code>
      </example>
      <remarks>
            XSL-FO support is a separated part of Aspose.Pdf.Generator and it is not compatible with the DOM of 
            Aspose.Pdf.Generator. You can't modify the content in XSL-FO through API. And you can't using other 
            features such as security setting of the Pdf class when using XSL-FO.
            </remarks>
    </member>
    <member name="M:Aspose.Pdf.Generator.Pdf.BindFO(System.Xml.XmlDocument,System.String)">
      <summary>
            Binds a FO file into the Pdf instance.
            </summary>
      <param name="xmlFoFileBody">The FO file.</param>
      <param name="xmlFoFileImagePath">Fo Image location path.</param>
      <example>
        <code>
            [C#]
            Pdf pdf = new Pdf();
            pdf.BindFO(xmlDocument, foImagePath);
            pdf.Save("test.pdf");
            
            [VisualBasic]
            Dim pdf As Pdf = New Pdf
            pdf.BindFO(xmlDocument, foImagePath)
            pdf.Save("test.pdf")
            </code>
      </example>
      <remarks>
            XSL-FO support is a separated part of Aspose.Pdf.Generator and it is not compatible with the DOM of 
            Aspose.Pdf.Generator. You can't modify the content in XSL-FO through API. And you can't using other 
            features such as security setting of the Pdf class when using XSL-FO.
            </remarks>
    </member>
    <member name="M:Aspose.Pdf.Generator.Pdf.BindFO(System.String)">
      <summary>
            Binds a FO file into the Pdf instance.
            </summary>
      <param name="xml_fo_file_name">The FO file.</param>
      <example>
        <code>
            [C#]
            Pdf pdf = new Pdf();
            pdf.BindFO("test.fo");
            pdf.Save("test.pdf");
            
            [VisualBasic]
            Dim pdf As Pdf = New Pdf
            pdf.BindFO("test.fo")
            pdf.Save("test.pdf")
            </code>
      </example>
      <remarks>
            XSL-FO support is a separated part of Aspose.Pdf.Generator and it is not compatible with the DOM of 
            Aspose.Pdf.Generator. You can't modify the content in XSL-FO through API. And you can't using other 
            features such as security setting of the Pdf class when using XSL-FO.
            </remarks>
    </member>
    <member name="M:Aspose.Pdf.Generator.Pdf.BindSvg(System.String)">
      <summary>
            Read svg markup area in to Pdf document section 
            </summary>
      <param name="svgFileName">svg File or Svg fragment markup text</param>
      <example>
        <code>
            [C#]
            Pdf pdf = new Pdf();
            pdf.BindSvg("test.svg");
            pdf.Save("test.pdf");
            
            [VisualBasic]
            Dim pdf As Pdf = New Pdf
            pdf.BindSvg("test.svg");
            pdf.Save("test.pdf")
            </code>
      </example>
    </member>
    <member name="M:Aspose.Pdf.Generator.Pdf.BindSvg(System.String,System.Boolean)">
      <summary>
            Read svg markup area in to Pdf document section
            </summary>
      <param name="svgFileName">svg File or Svg fragment markup text</param>
      <param name="ajustPdfToSvg">whether sizes of created PDF will be set according to sizes referenced in SVG</param>
    </member>
    <member name="M:Aspose.Pdf.Generator.Pdf.BindFO(System.Xml.XmlDocument,System.Xml.XmlDocument)">
      <summary>
            Binds a FO file into the Pdf instance.
            </summary>
      <param name="xml_fo_file_name">The FO file.</param>
      <example>
        <code>
            [C#]
            Pdf pdf = new Pdf();
            pdf.BindFO("test.fo", "test.xsl");
            pdf.Save("test.pdf");
            
            [VisualBasic]
            Dim pdf As Pdf = New Pdf
            pdf.BindFO("test.fo", "test.xsl")
            pdf.Save("test.pdf")
            </code>
      </example>
      <remarks>
            XSL-FO support is a separated part of Aspose.Pdf.Generator and it is not compatible with the DOM of 
            Aspose.Pdf.Generator. You can't modify the content in XSL-FO through API. And you can't using other 
            features such as security setting of the Pdf class when using XSL-FO.
            </remarks>
    </member>
    <member name="M:Aspose.Pdf.Generator.Pdf.BindXML(System.Xml.XmlDocument,System.String)">
      <summary>
            Reads info from a xml document.
            </summary>
      <param name="xmlDoc">The xml document.</param>
      <param name="xslFile">The xsl documnet file name if XSLT is used.</param>
    </member>
    <member name="M:Aspose.Pdf.Generator.Pdf.BindXML(System.String,System.String)">
      <summary>
            Binds an xml/xsl document to the <see cref="T:Aspose.Pdf.Generator.Pdf" /> object.
            </summary>
      <param name="xmlFile">The xml file.</param>
      <param name="xslFile">The xsl file if XSLT is used.</param>
    </member>
    <member name="M:Aspose.Pdf.Generator.Pdf.BindXML(System.IO.Stream,System.IO.Stream)">
      <summary>
            Binds an xml/xsl stream to the <see cref="T:Aspose.Pdf.Generator.Pdf" /> object.
            </summary>
      <param name="xmlStream">The xml stream.</param>
      <param name="xslStream">The xsl stream. This parameter can be null if no xml is used.</param>
    </member>
    <member name="M:Aspose.Pdf.Generator.Pdf.BindPCL(System.String)">
      <summary>
             Binds an PCL document to the <see cref="T:Aspose.Pdf.Pdf" /> object.
             </summary>
      <param name="pclFileName">The PCL file.</param>
    </member>
    <member name="M:Aspose.Pdf.Generator.Pdf.ParseToPdf(System.String)">
      <summary>
            Import method that support PdfXml, XslFo, Html, Svg as input source
            </summary>
      <param name="source">Xml formatted input source</param>
    </member>
    <member name="M:Aspose.Pdf.Generator.Pdf.GetBuffer">
      <summary>
            Gets the data buffer used to generate the pdf document in memory.
            </summary>
      <returns>The data buffer.</returns>
      <example>
        <code>
            [C#]
            Pdf pdf = new Pdf();
            pdf.BindXML("C:/xml/Test.xml",null);
            byte[] buf = pdf.GetBuffer();
            
            [VisualBasic]
            Dim pdf as Pdf = New Pdf
            pdf.BindXML("C:/xml/Test.xml",Nothing)
            Dim buf() As Byte =  pdf.GetBuffer()
            </code>
      </example>
    </member>
    <member name="M:Aspose.Pdf.Generator.Pdf.GetObjectByID(System.String)">
      <summary>
            Gets a object with specified ID in the document.
            </summary>
      <param name="ID">The object ID.</param>
      <returns>The object with specified ID. Null if the ID is not found.</returns>
    </member>
    <member name="M:Aspose.Pdf.Generator.Pdf.CreateTruetypeFontMapStream">
      <summary>
            Creates the TrueType font map stream. The stream can be used to set the "TruetypeFontMapStream" 
            property.
            </summary>
      <returns>The font map stream.</returns>
      <example>
        <code>
            [C#]
            MemoryStream fontMap = Pdf.CreateTruetypeFontMapStream();
            
            Pdf pdf = new Pdf();
            
            pdf.IsTruetypeFontMapCached = true;
            pdf.TruetypeFontMapStream = fontMap;
            ...
            
            [VB.Net]
            Dim fontMap As MemoryStream =  Pdf.CreateTruetypeFontMapStream() 
            Dim pdf As Pdf =  New Pdf() 
            pdf.IsTruetypeFontMapCached = True
            pdf.TruetypeFontMapStream = fontMap
            ...
            </code>
      </example>
    </member>
    <member name="M:Aspose.Pdf.Generator.Pdf.CreateObjFromXml(System.String,System.String)">
      <summary>
            Create object from an xml/xsl document.
            </summary>
      <param name="xmlFile">The xml file.</param>
      <param name="xslFile">The xsl file if XSLT is used.</param>
      <remarks>
        <see cref="T:Aspose.Pdf.Generator.Section" />, <see cref="T:Aspose.Pdf.Generator.Text" />, <see cref="T:Aspose.Pdf.Generator.Graph" />, <see cref="T:Aspose.Pdf.Generator.Image" />, 
            <see cref="T:Aspose.Pdf.Generator.Segment" />, <see cref="T:Aspose.Pdf.Generator.Table" />, <see cref="T:Aspose.Pdf.Generator.Attachment" />, <see cref="T:Aspose.Pdf.Generator.FloatingBox" /> 
            objects are supported. </remarks>
      <example>
        <code>
            [C#]
            Pdf pdf = new Pdf();
            
            Text text = Pdf.CreateObjFromXml("testText.xml", null) as Text;
            Section sec = pdf.Sections.Add();
            sec.Paragraphs.Add(text);
            
            pdf.Save("d:/test/test.pdf");
            
            [VB.Net]
            Dim pdf As Pdf =  New Pdf() 
            
            Dim text As Text =  Pdf.CreateObjFromXml("testText.xml",Nothing)
            Dim sec As Section =  pdf.Sections.Add() 
            sec.Paragraphs.Add(text)
            
            pdf.Save("d:/test/test.pdf")
            </code>
      </example>
    </member>
    <member name="M:Aspose.Pdf.Generator.Pdf.CreateObjFromXml(System.IO.Stream,System.IO.Stream)">
      <summary>
            Create object from an xml/xsl stream.
            </summary>
      <param name="xmlStream">The xml stream.</param>
      <param name="xslStream">The xsl stream. This parameter can be null if no xml is used.</param>
      <remarks>
        <see cref="T:Aspose.Pdf.Generator.Section" />, <see cref="T:Aspose.Pdf.Generator.Text" />, <see cref="T:Aspose.Pdf.Generator.Graph" />, <see cref="T:Aspose.Pdf.Generator.Image" />, 
            <see cref="T:Aspose.Pdf.Generator.Segment" />, <see cref="T:Aspose.Pdf.Generator.Table" />, <see cref="T:Aspose.Pdf.Generator.Attachment" />, <see cref="T:Aspose.Pdf.Generator.FloatingBox" /> 
            objects are supported. </remarks>
      <example>
        <code>
            [c#]
            Pdf pdf = new Pdf();
            
            FileStream fs = new FileStream("testText.xml",FileMode.Open);
            Text text = Pdf.CreateObjFromXml(fs, null) as Text;
            Section sec = pdf.Sections.Add();
            sec.Paragraphs.Add(text);
            
            pdf.Save("d:/test/test.pdf");
            
            [VB.Net]
            Dim pdf As Pdf =  New Pdf() 
            
            Dim fs As FileStream =  New FileStream("testText.xml",FileMode.Open) 
            Dim text As Text =  Pdf.CreateObjFromXml(fs,Nothing)
            Dim sec As Section =  pdf.Sections.Add() 
            
            sec.Paragraphs.Add(text)
            pdf.Save("d:/test/test.pdf")
            </code>
      </example>
    </member>
    <member name="M:Aspose.Pdf.Generator.Pdf.CreateObjFromXml(System.Xml.XmlDocument,System.Xml.Xsl.XslTransform)">
      <summary>
            Reads object info from a xml document.
            </summary>
      <param name="xmlDoc">The xml document.</param>
      <param name="xsl">The <see cref="T:System.Xml.Xsl.XslTransform" /> object if XSLT is used.</param>
      <remarks>
        <see cref="T:Aspose.Pdf.Generator.Section" />, <see cref="T:Aspose.Pdf.Generator.Text" />, <see cref="T:Aspose.Pdf.Generator.Graph" />, <see cref="T:Aspose.Pdf.Generator.Image" />, 
            <see cref="T:Aspose.Pdf.Generator.Segment" />, <see cref="T:Aspose.Pdf.Generator.Table" />, <see cref="T:Aspose.Pdf.Generator.Attachment" />, <see cref="T:Aspose.Pdf.Generator.FloatingBox" /> 
            objects are supported. </remarks>
      <example>
        <code>
            [c#]
            Pdf pdf = new Pdf();
            
            XmlDocument xmlDoc = new XmlDocument();
            xmlDoc.Load(@"D:\CSharp\Pdf\Aspose.Pdf.Test\input\testText.xml");
            Text text = Pdf.CreateObjFromXml(xmlDoc, null) as Text;
            Section sec = pdf.Sections.Add();
            sec.Paragraphs.Add(text);
            
            pdf.Save("d:/test/test.pdf");
            
            [VB.Net]
            Dim pdf As Pdf = New Pdf
            
            Dim xmlDoc As XmlDocument = New XmlDocument
            xmlDoc.Load("D:\CSharp\Pdf\Aspose.Pdf.Test\input\testText.xml")
            Dim text As Text = pdf.CreateObjFromXml(xmlDoc, Nothing)
            Dim sec As Section = pdf.Sections.Add()
            sec.Paragraphs.Add(text)
            
            pdf.Save("d:/test/test.pdf")
            </code>
      </example>
    </member>
    <member name="M:Aspose.Pdf.Generator.Pdf.GetPageNumber(System.String)">
      <summary>
            Gets the page number of a paragraph when the PDF is generated. 
            </summary>
      <param name="ID">The ID of the paragraph.</param>
      <returns>The page number of the paragraph. If the paragraph is not found, 0 will be returned.</returns>
    </member>
    <member name="M:Aspose.Pdf.Generator.Pdf.SetUnicode">
      <summary>
            Sets all fonts in the document to be unicode. This method should be called just before the Save method.
            </summary>
      <remarks>When converting Word to Pdf, some font is needed to be set to unicode in Aspose.Pdf.Generator. 
            This method is used to set all fonts to unicode. The font subset will then be embedded.</remarks>
    </member>
    <member name="P:Aspose.Pdf.Generator.Pdf.IsAutoHyphenated">
      <summary>
            Gets or sets a bool value that indicates whehter the text is hyphenated automatically. Default value is false.
            </summary>
      <example>
        <code>
            Pdf pdf = new Pdf();
            pdf.IsAutoHyphenated = true;
            pdf.HyphenationZoneWidth = 0;
            pdf.ConsecutiveHyphensLimits = 0; //no limits
            pdf.HyphenationDictionaryPath = @"c:\temp\Hyphen.xml"
            pdf.BindXML("C:/xml/Test.xml",null);
            pdf.Save(C;/Pdf/Test.pdf);
            </code>
      </example>
    </member>
    <member name="P:Aspose.Pdf.Generator.Pdf.HyphenationDictionaryPath">
      <summary>
            Gets or sets a string that indicates the hyphenation dictionary path.
            </summary>
    </member>
    <member name="P:Aspose.Pdf.Generator.Pdf.HyphenationZoneWidth">
      <summary>
            Gets or sets a float value that indicates the hyphenation area width. Default value is 12 points.
            </summary>
    </member>
    <member name="P:Aspose.Pdf.Generator.Pdf.ConsecutiveHyphensLimits">
      <summary>
            Gets or sets an integer value that indicates the consecutive hyphens limits. Default value is zero that means no limits.
            </summary>
    </member>
    <member name="P:Aspose.Pdf.Generator.Pdf.Credentials">
      <summary>
            Specifies credentials to use to connect to an external URL that required authentication.
            </summary>
      <value>An instance of an object that implements ICredentials.</value>
      <remarks>If the page you are accessing requires authentication or the page contains external reference URLs that require authentication, you will need
            to create a functional ICredentials object and assign it to the <b>Credentials</b> property.  This 
            property needs to be assigned <i>before</i> the call to <see cref="M:Aspose.Pdf.Generator.Pdf.BindHTML(System.String)" /> is made, if that call requires authorization on web server to download resource(s).</remarks>
    </member>
    <member name="P:Aspose.Pdf.Generator.Pdf.PageNumberFormat">
      <summary>
            Gets or sets a <see cref="T:Aspose.Pdf.Generator.PageNumberFormatType" /> value that indicates the format of the page number .
            </summary>
    </member>
    <member name="P:Aspose.Pdf.Generator.Pdf.BackgroundColor">
      <summary>
            Gets or sets a <see cref="T:Aspose.Pdf.Generator.Color" /> object that indicates the background color of the 
            pdf.
            </summary>
    </member>
    <member name="P:Aspose.Pdf.Generator.Pdf.PageSetup">
      <summary>
            Gets or sets a <see cref="P:Aspose.Pdf.Generator.Pdf.PageSetup" /> object that indicates the page setup info in the Pdf document.
            </summary>
    </member>
    <member name="P:Aspose.Pdf.Generator.Pdf.TextInfo">
      <summary>
            Gets or sets a <see cref="P:Aspose.Pdf.Generator.Pdf.TextInfo" /> object that indicates the text info in the Pdf document.
            </summary>
    </member>
    <member name="P:Aspose.Pdf.Generator.Pdf.GraphInfo">
      <summary>
            Gets or sets a <see cref="P:Aspose.Pdf.Generator.Pdf.GraphInfo" /> object that indicates the graph info in the Pdf document.
            </summary>
    </member>
    <member name="P:Aspose.Pdf.Generator.Pdf.Sections">
      <summary>
            Gets or sets a <see cref="P:Aspose.Pdf.Generator.Pdf.Sections" /> collection that indicates all sections in the Pdf document.
            </summary>
    </member>
    <member name="P:Aspose.Pdf.Generator.Pdf.FirstLineIndent">
      <summary>
            Gets or sets an int value that indicates the indent of the first line.
            </summary>
    </member>
    <member name="P:Aspose.Pdf.Generator.Pdf.IsSpaced">
      <summary>
            Gets or sets a bool value that indicates whether the spaces at the begin of the text and returns in 
            the text be shown. For the following XML:
            <code>
            &lt;Text&gt;
            	&lt;Segment&gt;The first line,
            	The second line.&lt;/Segment&gt;
            &lt;/Text&gt;
            </code>
            If IsSpaced is false, the result will be:
            <code>
            The first line,The second line.
            </code>
            If IsSpaced is true, the result will be:
            <code>
            The first line,
            	The second line.
            </code></summary>
    </member>
    <member name="P:Aspose.Pdf.Generator.Pdf.LabelWidth">
      <summary>
            Gets or sets a float value that indicates the width of the heading label.
            </summary>
    </member>
    <member name="P:Aspose.Pdf.Generator.Pdf.CompressionLevel">
      <summary>
            Gets or sets an int value that indicates the compression level. It can be between 0 (the least compression) and 9 (the most compression) and the default value is 6.
            </summary>
    </member>
    <member name="P:Aspose.Pdf.Generator.Pdf.DestinationType">
      <summary>
            Gets or sets a <see cref="P:Aspose.Pdf.Generator.Pdf.DestinationType" /> value that indicates the document open action.
            </summary>
    </member>
    <member name="P:Aspose.Pdf.Generator.Pdf.OpenType">
      <summary>
            Gets or sets a <see cref="P:Aspose.Pdf.Generator.Pdf.OpenType" /> that indicates the document open type. 
            </summary>
    </member>
    <member name="P:Aspose.Pdf.Generator.Pdf.Author">
      <summary>
            Gets or sets a string that indicates the author of the Pdf document.
            </summary>
    </member>
    <member name="P:Aspose.Pdf.Generator.Pdf.TimeOutOfFileWebRequest">
      <summary>        
            Gets or sets the length of time until the request times out for the Pdf document.
            </summary>
    </member>
    <member name="P:Aspose.Pdf.Generator.Pdf.Title">
      <summary>
            Gets or sets a string that indicates the title of the Pdf document.
            </summary>
    </member>
    <member name="P:Aspose.Pdf.Generator.Pdf.Creator">
      <summary>
            Gets or sets a string that indicates the creator of the Pdf document.
            </summary>
    </member>
    <member name="P:Aspose.Pdf.Generator.Pdf.Producer">
      <summary>
            Gets a string that indicates the producer of the Pdf document.
            Property is read-only, any setted value has no effect.
            </summary>
    </member>
    <member name="P:Aspose.Pdf.Generator.Pdf.Keywords">
      <summary>
            Gets or sets a string that indicates key words of the Pdf document.
            </summary>
    </member>
    <member name="P:Aspose.Pdf.Generator.Pdf.Subject">
      <summary>
            Gets or sets a string that indicates the subject of the Pdf document.
            </summary>
    </member>
    <member name="P:Aspose.Pdf.Generator.Pdf.PageTransitionType">
      <summary>
            Gets or sets a <see cref="P:Aspose.Pdf.Generator.Pdf.PageTransitionType" /> that indicates the pdf document page transition type.
            </summary>
    </member>
    <member name="P:Aspose.Pdf.Generator.Pdf.PageDuration">
      <summary>
            Gets or sets a int value that indicates the duration in seconds for the current page. This property 
            is used when using auto advancing in presentation mode. 
            </summary>
    </member>
    <member name="P:Aspose.Pdf.Generator.Pdf.Security">
      <summary>
            Gets or sets a <see cref="T:Aspose.Pdf.Generator.Security" /> object that indicates the document security information.
            </summary>
    </member>
    <member name="P:Aspose.Pdf.Generator.Pdf.IsImagesInXmlDeleteNeeded">
      <summary>
            Gets or sets a bool value that indicates whether images used in XML be deleted when the PDF 
            document is generated.
            </summary>
      <remarks>
            This property is used when integration with Aspose.Word. When converting Word document to PDF,
            Aspose.Word will save images in Word document as file and add the file name into XML. If this 
            property is set to true,Aspose.Pdf.Generator will delete these image files used in XML.
            </remarks>
    </member>
    <member name="P:Aspose.Pdf.Generator.Pdf.IsBuffered">
      <summary>
            Gets or sets a bool value that indicates whether memory buffer is used when generating PDF document.
            The default value is true. If this property is set to false, Aspose.Pdf.Generator will write document directly 
            to PDF file and the <see cref="M:Aspose.Pdf.Generator.Pdf.GetBuffer" /> method can't be used.
            </summary>
    </member>
    <member name="P:Aspose.Pdf.Generator.Pdf.IsBookmarked">
      <summary>
            Gets or sets a bool value that indicates whether the pdf document is bookmarked when generating PDF document.
            The default value is false. If this property is set to true, Aspose.Pdf.Generator will create bookmarks for all the <see cref="T:Aspose.Pdf.Generator.Heading" />s 
            in the PDF if the relative property <see cref="P:Aspose.Pdf.Generator.Pdf.BookMarkLevel" /> is not set. 
            </summary>
    </member>
    <member name="P:Aspose.Pdf.Generator.Pdf.BookmarkLevel">
      <summary>
            Gets or sets a int value that indicates how many levels of <see cref="T:Aspose.Pdf.Generator.Heading" /> of the pdf document is to be bookmarked.
            The default value is 0, which means every heading of the PDF is to be taged as a bookmark.
            Only when the relative property <see cref="P:Aspose.Pdf.Generator.Pdf.IsBookmarked" /> is set as true, this property is valid.
            If <see cref="P:Aspose.Pdf.Generator.Pdf.IsBookmarked" /> is true and this property is set to a non-integer value levelNumber, Aspose.Pdf.Generator will create bookmarks 
            for the corresponding <see cref="T:Aspose.Pdf.Generator.Heading" />s of level 1 to level levelNumber.
            </summary>
    </member>
    <member name="P:Aspose.Pdf.Generator.Pdf.TabStopPosition">
      <summary>
            Gets or sets the tab stop position. Default value is 36 points (0.5inch).
            </summary>
    </member>
    <member name="P:Aspose.Pdf.Generator.Pdf.HtmlInfo">
      <summary>
            Gets or sets a <see cref="P:Aspose.Pdf.Generator.Pdf.HtmlInfo" /> object that indicates the necessary info when converting 
            HTML to PDF.
            </summary>
    </member>
    <member name="P:Aspose.Pdf.Generator.Pdf.IsPageNumberRestarted">
      <summary>
            Gets or sets a bool value that indicates whether the page number is restarted in new section. 
            Default is false.
            </summary>
    </member>
    <member name="P:Aspose.Pdf.Generator.Pdf.IsCoreFontUsed">
      <summary>
            Gets or sets a bool value that indicates whether PDF core fonts are used. Default is true. 
            If this property is set to false, PDF core fonts will be ignored and all font will be used as 
            TrueType font. 
            </summary>
    </member>
    <member name="P:Aspose.Pdf.Generator.Pdf.IsXmlSchemaCheckedOnBind">
      <summary>
            Gets or sets a bool value that indicates whether the error is ignored when unknown elements or attributes
            are used in xml file. Default is false.
            </summary>
    </member>
    <member name="P:Aspose.Pdf.Generator.Pdf.IsImageNotFoundErrorIgnored">
      <summary>
            Gets or sets a bool value that indicates whether the "image not found" error is ignored or not.
            </summary>
    </member>
    <member name="P:Aspose.Pdf.Generator.Pdf.IsPageNumberForDocument">
      <summary>
            Gets or sets a bool value that indicates whether total page number is count for whole document. 
            If this property is set to true, the "$P" symbol will be replaced by the total page number of the 
            document. Otherwise "$P" will be replaced with the total page number of all	sections that were 
            not restarted ("IsPageNumberRestarted" is set to true).
            </summary>
    </member>
    <member name="P:Aspose.Pdf.Generator.Pdf.IsTruetypeFontMapCached">
      <summary>
            Gets or sets a bool value that indicates whether truetype font map be cached on disk. Truetype 
            font map is a font name to font file name map which is used when using unicode. If unicode is 
            used, setting this property to true can make your application run fast. If this property is set 
            to true and the system's fonts are changed (for example, new fonts are installed), delete the font 
            map file (Aspose.Pdf.Generator.TruetypeFontMap.xml) and it will be generated again automatically.
            </summary>
    </member>
    <member name="P:Aspose.Pdf.Generator.Pdf.TruetypeFontMapPath">
      <summary>
            Gets or set a string that indicates the path of the truetype font map file. This property 
            is valid only when the "IsTruetypeFontMapCached" property is set to true.
            <seealso cref="P:Aspose.Pdf.Generator.Pdf.IsTruetypeFontMapCached" /></summary>
    </member>
    <member name="P:Aspose.Pdf.Generator.Pdf.TruetypeFontMapStream">
      <summary>
            Gets or set a memory stream that indicates the TrueType font map stream. This property is valid 
            only when the "IsTruetypeFontMapCached" property is set to true. Normally you should use 
            "TruetypeFontMapPath" instead of this property. But in some server, it is not permitted to 
            create file on disk so you can use TrueType font map stream. You need to create the font map 
            stream only once when you application is running. 
            </summary>
      <example>
        <code>
            [C#]
            MemoryStream fontMap = Pdf.CreateTruetypeFontMapStream();
            
            Pdf pdf = new Pdf();
            
            pdf.IsTruetypeFontMapCached = true;
            pdf.TruetypeFontMapStream = fontMap;
            ...
            
            [VB.Net]
            Dim fontMap As MemoryStream =  Pdf.CreateTruetypeFontMapStream() 
            Dim pdf As Pdf =  New Pdf() 
            pdf.IsTruetypeFontMapCached = True
            pdf.TruetypeFontMapStream = fontMap
            ...
            </code>
      </example>
    </member>
    <member name="P:Aspose.Pdf.Generator.Pdf.PageCount">
      <summary>
            Gets a int value that indicates the pages count of the generated PDF. You can only get the value of 
            this property when the <see cref="M:Aspose.Pdf.Generator.Pdf.Save(System.String)" /> method is called.
            </summary>
    </member>
    <member name="P:Aspose.Pdf.Generator.Pdf.Watermarks">
      <summary>
            Gets or sets a <see cref="P:Aspose.Pdf.Generator.Pdf.Watermarks" /> which will be added upon each page of the PDF document.
            </summary>
    </member>
    <member name="P:Aspose.Pdf.Generator.Pdf.DocumentAttachments">
      <summary>
            Gets or sets a <see cref="P:Aspose.Pdf.Generator.Pdf.DocumentAttachments" /> which will be added upon the PDF document.
            </summary>
    </member>
    <member name="P:Aspose.Pdf.Generator.Pdf.IsFontNotFoundExceptionThrown">
      <summary>
            Gets or sets a bool value that indicates whether throw out exception when font is not found.
            The default value is false.In this case,if user specified font is not found,default font works.
            </summary>
    </member>
    <member name="P:Aspose.Pdf.Generator.Pdf.IsWatermarkOnTop">
      <summary>
            Gets or sets a bool value that indicates if the watermark is on top of the page.
            </summary>
    </member>
    <member name="P:Aspose.Pdf.Generator.Pdf.IsLandscape">
      <summary>
            Gets or sets a bool value that indicates whether the page orientation is landscape.
            The default is false, portrait.
            </summary>
    </member>
    <member name="P:Aspose.Pdf.Generator.Pdf.Index">
      <summary>
            Gets or sets an <see cref="P:Aspose.Pdf.Generator.Pdf.Index" /> object.
            </summary>
    </member>
    <member name="P:Aspose.Pdf.Generator.Pdf.JavaScripts">
      <summary>
            Gets or sets a <see cref="P:Aspose.Pdf.Generator.Pdf.JavaScripts" /> object that indicates the JavaScripts to be added into 
            the PDF.
            </summary>
      <example>
        <code>
            [c#]
            Pdf pdf = new Pdf();
            
            pdf.JavaScripts = new JavaScripts();
            pdf.JavaScripts.Add("this.print(true);");
            pdf.JavaScripts.Add("app.alert(\"hello world\");");
            
            pdf.Save(@"d:\test\test.pdf");
            
            [VB.Net]
            Dim pdf As Pdf =  New Pdf() 
            
            pdf.JavaScripts = New JavaScripts()
            pdf.JavaScripts.Add("this.print(true);")
            pdf.JavaScripts.Add("app.alert(\"hello world\");")
            
            pdf.Save("d:\test\test.pdf")
            
            [XML]
            &lt;Pdf xmlns="Aspose.Pdf"&gt;
            &lt;JavaScript ID="js1"&gt;this.print(true);&lt;/JavaScript&gt;
            &lt;JavaScript&gt;app.alert("hello world");&lt;/JavaScript&gt;
            &lt;/Pdf&gt;
            </code>
      </example>
    </member>
    <member name="P:Aspose.Pdf.Generator.Pdf.XmpMetadata">
      <summary>
             Gets or sets a <see cref="P:Aspose.Pdf.Generator.Pdf.XmpMetadata" /> Object that indicates the XMP metadata to be added into the PDF document.
             </summary>
      <example>
        <code>
             [C#]
             Pdf pdf = new Pdf();
             	
             Section s = pdf.Sections.Add();
             		
             Text text1 = new Text("This is a test for XMP Metadata");
             s.Paragraphs.Add(text1);
             
             pdf.XmpMetadata = new XmpMetadata();
             					
             //core properties
             pdf.XmpMetadata.AddCreationDate(System.DateTime.Now.ToString());
             						
            	//user properties
            	pdf.XmpMetadata.AddUserProperty("xmlns:dc=\"http://purl.org/dc/elements/1.1/\"","dc:contributor","Aspose");
            					
            	pdf.Save(@"d:\test\test.pdf");
            	
            	[VB.Net]
            	Dim pdf As Pdf = New Pdf
            	
            	Dim s As Section = pdf.Sections.Add()
            	Dim text1 As Text = New Text("This is a test for XMP Metadata")
            	s.Paragraphs.Add(text1)
            	
            	pdf.XmpMetadata = New XmpMetadata
            	
            	'core properties
            	pdf.XmpMetadata.AddCreationDate(System.DateTime.Now.ToString())
            	
            	'user properties
            	pdf.XmpMetadata.AddUserProperty("xmlns:dc='http://purl.org/dc/elements/1.1/'", "dc:contributor", "Aspose")
            	
            	pdf.Save("d:\test\test.pdf")
             
            	[XML]
              &lt;Pdf xmlns="Aspose.Pdf"&gt; 
              &lt;XmpMetadata&gt;
              	&lt;MetadataItem Name="CreationDate" Value="2007-7-15 10:51:55" /&gt;
              		&lt;MetadataItem XmlNamespace="xmlns:dc='http://purl.org/dc/elements/1.1/'" Name="dc:contributor" Value="Aspose" /&gt;
              	&lt;/XmpMetadata&gt;
              	&lt;Section&gt;
              		&lt;Text&gt;&lt;Segment&gt;This is a test for XMP Metadata&lt;/Segment&gt;&lt;/Text&gt;
              	&lt;/Section&gt; 
              &lt;/Pdf&gt;
            </code>
      </example>
    </member>
    <member name="P:Aspose.Pdf.Generator.Pdf.DefaultFontName">
      <summary>
            Gets or sets a string that indicates the default font name. When font name is not set or the font is not found,
            this font will be used. The default value is "Times-Roman".
            </summary>
    </member>
    <member name="P:Aspose.Pdf.Generator.Pdf.IsRightToLeft">
      <summary>
            Gets or sets a bool value that indicates whether the text or heading appear in the pdf is right-to-left aligned.
            If it is true, all the texts and headings will be processed as right-to-left language previously. 
            If text or heading don't contain any right-to-left lanuage character, they will be processed as usual( left-to-right).
            This property is used for right-to-left aligned language such as Arabic and Hebrew.
            </summary>
    </member>
    <member name="P:Aspose.Pdf.Generator.Pdf.IsRtlInSegmentMode">
      <summary>
            Gets or sets a bool value that indicates whether the text or heading is processed in segment mode.
            If it is true(default),segment in text will be processed one by one. If false, all segments in text
            will be put together, reorder in arabic rule. We recommend set it true when rendering rtl and
            non-rtl mixed texts.
            </summary>
    </member>
    <member name="P:Aspose.Pdf.Generator.Pdf.IsWidowOrphanControlEnabled">
      <summary>
            Gets or sets a bool value that indicates whether the Widow/Orphan control is enabled. Default is true.
            If it is true, Widow/Orphan control is enabled and Widows/orphans themselves are eliminated (disabled).
            </summary>
    </member>
    <member name="P:Aspose.Pdf.Generator.Pdf.TempFolder">
      <summary>
            Gets or sets a value that indicates where temporary files stored.
            </summary>
    </member>
    <member name="P:Aspose.Pdf.Generator.Pdf.IsAutoFontAdjusted">
      <summary>
            Gets or sets a bool value that indicates whether allow to adjust fonts automatically.
            Each font has a set of supported characters. Sometimes, users may assign a font to a Segment paragraph which 
            doesn't support every character appear in the Segment. If this bool value is true, it will assign proper font to 
            Segment paragraph according to its contents in this case. Default is false.
            </summary>
    </member>
    <member name="P:Aspose.Pdf.Generator.Pdf.Bookmarks">
      <summary>
            Gets or sets a <see cref="P:Aspose.Pdf.Generator.Pdf.Bookmarks" /> object that indicates the bookmarks in the PDF.
            </summary>
    </member>
    <member name="P:Aspose.Pdf.Generator.Pdf.Linearized">
      <summary>
            Gets or sets a bool value that indicates if the document needs to be linearized (optimization for web access) .
            The default value is false . 
            you need to set this property before Save method is called .
            </summary>
    </member>
    <member name="P:Aspose.Pdf.Generator.Pdf.Conformance">
      <summary>
        <BLOCKQUOTE class="dtBlock">
          <Font color="red">NOTE: This is beta version of PdfA. </Font>
        </BLOCKQUOTE> 
            Gets or sets a <see cref="T:Aspose.Pdf.Generator.PdfConformance" /> object that indicates the conformance in the PDF.
            The default value is PdfConformance.None . 
            you need to set this property before Save method is called .
            Notice that PdfConformance.PdfA1B and PdfConformance.PdfA1A  currently only support  TrueType fonts and RGB color space  ,
            specify a wrong font name or a CMYK color name will cause exception.
            </summary>
    </member>
    <member name="P:Aspose.Pdf.Generator.Pdf.DirectModeItemType">
      <summary>
            Gets or sets a DirectModeItemType value that indicates DirectModeItemsCount measure
            The default value is DirectModeItemType.Page 
            </summary>
    </member>
    <member name="P:Aspose.Pdf.Generator.Pdf.DigitSubstitution">
      <summary>
            Gets or set bool value that indicates whether to replace digits with national ones in macros'
            </summary>
    </member>
    <member name="T:Aspose.Pdf.Generator.PdfConformance">
      <summary>
            Enumeration for PDF/A1. PDF/A1 attempts to maximize:Device independence,Self-containment and Self-documentation .
            The constraints include: Audio and video content are forbidden, Javascript and executable file launches are prohibited ,
            All fonts must be embedded and also must be legally embeddable for unlimited, universal rendering ,
            Colorspaces specified in a device-independent manner ,
            Encryption is disallowed, 
            Use of standards-based metadata is mandated  the files.
             </summary>
    </member>
    <member name="F:Aspose.Pdf.Generator.PdfConformance.None">
      <summary>
            No conformance
            </summary>
    </member>
    <member name="F:Aspose.Pdf.Generator.PdfConformance.PdfA1B">
      <summary>
            Part 1 of the PDF/A ISO standard [ISO 19005-1:2005] is a constrained form of Adobe PDF version 1.4 intended to be suitable 
            for long-term preservation of page-oriented documents for which PDF is already being used in practice. Level B conformance 
            (PDF-1b) indicates minimal compliance to ensure that the rendered visual appearance of a conforming file is preservable over 
            the long term. Level A conformance (PDF-1a) indicates complete compliance with the ISO 19005-1 requirements, including those 
            related to structural and semantic properties of documents. 
            </summary>
    </member>
    <member name="F:Aspose.Pdf.Generator.PdfConformance.PdfA1A">
      <summary>
            Part 1 of the PDF/A ISO standard [ISO 19005-1:2005] is a constrained form of Adobe PDF version 1.4 intended to be suitable 
            for long-term preservation of page-oriented documents for which PDF is already being used in practice. Level B conformance 
            (PDF-1b) indicates minimal compliance to ensure that the rendered visual appearance of a conforming file is preservable over 
            the long term. Level A conformance (PDF-1a) indicates complete compliance with the ISO 19005-1 requirements, including those 
            related to structural and semantic properties of documents. 
            </summary>
    </member>
    <member name="T:Aspose.Pdf.Generator.PositionArray">
      <summary>
            Encapsulates a position array used in the <see cref="T:Aspose.Pdf.Generator.Line" />.
            </summary>
      <example>
        <code>
            [C#]
            //Instantiate a Pdf document object
            Pdf pdf1 = new Pdf();
            //Add a section to the Pdf document
            Aspose.Pdf.Generator.Section sec1 = pdf1.Sections.Add();
            
            //Create a graph object in the section with Width=100 and Height=400
            Graph graph1 = new Graph(sec1,100,400);
            //Add the graph object to the paragraphs collection of the section
            sec1.Paragraphs.Add(graph1);
            
            //Create an array containing the (X,Y) values of 4 control points
            //required to position a curve
            float[] posArr = new float[]{0,0,200,80,300,40,350,90};
            //Create a curve in the graph with the coordinates given as an array to
            //the constructor of curve class
            Curve curve1 = new Curve(graph1,posArr);
            //Add the curve shape into the shapes collection of the graph
            graph1.Shapes.Add(curve1);
            
            //Save the Pdf
            pdf1.Save(@"d:/pdftest/PositionArrayTest.pdf");
            
            [Visual Basic]
            'Instantiate a Pdf document object
            Dim pdf1 As Pdf = New Pdf()
             
            'Add a section to the Pdf document
            Dim sec1 As Section = pdf1.Sections.Add()
             
            'Create a graph object in the section with Width=100 and Height=400
            Dim graph1 As Graph = New Graph(sec1, 100, 400)
             
            'Add the graph object to the paragraphs collection of the section
            sec1.Paragraphs.Add(graph1)
             
            'Create an array containing the (X,Y) values of 4 control points
            'required to position a curve
            Dim posArr() As Single = New Single() {0, 0, 200, 80, 300, 40, 350, 90}
             
            'Create a curve in the graph with the coordinates given as an array to
            'the constructor of curve class
            Dim curve1 As Curve = New Curve(graph1, posArr)
             
            'Add the curve shape into the shapes collection of the graph
            graph1.Shapes.Add(curve1)
             
            'Save the Pdf
            pdf1.Save("d:/pdftest/PositionArrayTest.pdf")
            
            [XML]
            &lt;?xml version="1.0" encoding="utf-8" ?&gt;
            &lt;Pdf xmlns="Aspose.Pdf"&gt;
              &lt;Section&gt;
                  &lt;Graph Height="100" Width="400"&gt;
                          &lt;Curve Position="0 0 200 80 300 40 350 90" /&gt;
                  &lt;/Graph&gt;
              &lt;/Section&gt;
            &lt;/Pdf&gt;
            </code>
      </example>
    </member>
    <member name="P:Aspose.Pdf.Generator.PositionArray.Length">
      <summary>
            Represents an int value that indicates the length of the position array. It should be equal to or greater than 4.
            </summary>
    </member>
    <member name="P:Aspose.Pdf.Generator.PositionArray.Item(System.Int32)">
      <summary>
            Gets or sets the specified value in terms of index.
            </summary>
    </member>
    <member name="T:Aspose.Pdf.Generator.PositioningType">
      <summary>
            Enumerates the positioning types when using custom positioning. Custom positioning means customer 
            specify the position of paragraph instead of render automatically. 
            </summary>
      <remarks>Please refer to the programmer's guide for detailed info.
            </remarks>
    </member>
    <member name="F:Aspose.Pdf.Generator.PositioningType.Auto">
      <summary>
            Positioning the paragraph automatically by page renderer engine. This means customer positioning 
            is not used.
            </summary>
    </member>
    <member name="F:Aspose.Pdf.Generator.PositioningType.PageRelative">
      <summary>
            The position of paragraph is page relative. 
            </summary>
    </member>
    <member name="F:Aspose.Pdf.Generator.PositioningType.ColumnRelative">
      <summary>
            The position of paragraph is column relative.
            </summary>
    </member>
    <member name="F:Aspose.Pdf.Generator.PositioningType.ParagraphRelative">
      <summary>
            The position of paragraph is paragraph relative.
            </summary>
    </member>
    <member name="T:Aspose.Pdf.Generator.PrintController">
      <summary>
            PrintController class
            </summary>
      <example>
        <code>
            [C#]
            try
            {
               // streamreader is a global variable that should be accesible from pd_PrintPage procedure
               streamToPrint = new StreamReader(@"C:\test.txt");
               try
               {
                   PrintDocument pd = new PrintDocument();
                   pd.PrintPage += new PrintPageEventHandler
                      (this.pd_PrintPage); // Procedure that convert text file to page
                   PrintController pc = new PrintController();
                   pc.FileName = @"C:\test.pdf";
                   pd.PrintController = pc;
                   pd.Print();
               }
               finally
               {
                   streamToPrint.Close();
               }
            }
            catch (Exception ex)
            {
              MessageBox.Show(ex.Message);
            }
            
            [VisualBasic]
            ' streamToPrint is a global variable that should be accesible from pd_PrintPage procedure
            streamToPrint = New StreamReader("C:\test.txt) 
            Try
               Dim pd As PrintDocument = New PrintDocument()
               AddHandler pd.PrintPage, AddressOf pd_PrintPage ' Procedure that convert text file to page
               Dim pc As Aspose.Pdf.Generator.PrintController = New Aspose.Pdf.Generator.PrintController()
               pc.FileName = "C:\test.pdf"
               pd.PrintController = pc
               pd.Print()
            Catch ex As Exception
               MessageBox.Show(ex.Message)
            Finally
               streamToPrint.Close()
            End Try
            </code>
      </example>
      <remarks>
            PrintController inherits from System.Drawing.Printing.PrintController class with ability 
            to save data to pdf. FileName property contains file path to result pdf.
            </remarks>
    </member>
    <member name="T:Aspose.Pdf.Generator.RadioButton">
      <summary>
            Represents a radiobutton item in a radiobutton field.
            </summary>
      <example>
        <code>
            [C#]
            //Instantiate the Pdf document and add a section to it
            Pdf pdf1 = new Pdf(); 
            Section sec1 = pdf1.Sections.Add(); 
             
             
            //Create a table, set its column widths and add it to paragraphs collection
            //of the  section
            Table tab1 = new Table(); 
            tab1.ColumnWidths = "120 120 120"; 
            sec1.Paragraphs.Add(tab1); 
             
             
            //Add a row to the table
            Row r1 = tab1.Rows.Add(); 
             
             
            //Add 1st cell to the row, set its padding and set the ID of the first paragraph
            //in the cell to "text1"
            Cell c1 = r1.Cells.Add("item1"); 
            c1.Padding.Left = 30; 
            c1.Paragraphs[0].ID = "text1"; 
             
             
            //Add 2nd cell to the row, set its padding and set the ID of the first paragraph
            //in the cell to "text2"
            Cell c2 = r1.Cells.Add("item2"); 
            c2.Padding.Left = 30; 
            c2.Paragraphs[0].ID = "text2"; 
             
             
            //Add 3rd cell to the row, set its padding and set the ID of the first paragraph
            //in the cell to "text3"
            Cell c3 = r1.Cells.Add("item3"); 
            c3.Padding.Left = 30; 
            c3.Paragraphs[0].ID = "text3"; 
             
             
            //Create a form field of RadioButton type. Set its field name and button color.
            //Then set the index of the radio button value to be checked
            FormField radio = new FormField(); 
            radio.FormFieldType = FormFieldType.RadioButton; 
            radio.FieldName = "ARadio"; 
            radio.ButtonColor = System.Drawing.Color.FromName("Red"); 
            radio.RadioButtonCheckedIndex = 0; 
             
             
            //Create 1st radio button instance and add it to above created radio form field.
            //Set its width and height. The position of the radio button is set to be
            //relative to the paragraph. Link this radio button with the paragraph with ID
            //equal to "text1".
            RadioButton bt1 = radio.RadioButtons.Add(); 
            bt1.ButtonHeight = 12; 
            bt1.ButtonWidth = 12; 
            bt1.PositioningType = PositioningType.ParagraphRelative; 
            bt1.ReferenceParagraphID = "text1"; 
            bt1.Left = -20; 
            bt1.Top = 0; 
             
             
            //Create 2nd radio button instance and add it to above created radio form field.
            //Set its width and height. The position of the radio button is set to be
            //relative to the paragraph. Link this radio button with the paragraph with ID
            //equal to "text2".
            RadioButton bt2 = radio.RadioButtons.Add(); 
            bt2.ButtonHeight = 12; 
            bt2.ButtonWidth = 12; 
            bt2.PositioningType = PositioningType.ParagraphRelative; 
            bt2.ReferenceParagraphID = "text2"; 
            bt2.Left = -20; 
            bt2.Top = 0; 
             
             
            //Create 3rd radio button instance and add it to above created radio form field.
            //Set its width and height. The position of the radio button is set to be
            //relative to the paragraph. Link this radio button with the paragraph with ID
            //equal to "text3".
            RadioButton bt3 = radio.RadioButtons.Add(); 
            bt3.ButtonHeight = 12; 
            bt3.ButtonWidth = 12; 
            bt3.PositioningType = PositioningType.ParagraphRelative; 
            bt3.ReferenceParagraphID = "text3"; 
            bt3.Left = -20; 
            bt3.Top = 0; 
             
             
            //Add the radio form field to the paragraphs collection of the section
            sec1.Paragraphs.Add(radio);
             
             
            //Save the Pdf
            pdf1.Save(...); 
            
            [Visual Basic]
            'Instantiate the Pdf document and add a section to it
            Dim pdf1 As Pdf = New Pdf
            Dim sec1 As Section = pdf1.Sections.Add()
             
            'Create a table, set its column widths and add it to paragraphs collection
            'of the  section
            Dim tab1 As Table = New Table
            tab1.ColumnWidths = "120 120 120"
            sec1.Paragraphs.Add(tab1)
             
            'Add a row to the table
            Dim r1 As Row = tab1.Rows.Add()
             
            'Add 1st cell to the row, set its padding and set the ID of the first paragraph
            in the cell to "text1"
            Dim c1 As Cell = r1.Cells.Add("item1")
                    c1.Padding.Left = 30
                    c1.Paragraphs(0).ID = "text1"
             
             
                    'Add 2nd cell to the row, set its padding and set the ID of the first paragraph
            in the cell to "text2"
                    Dim c2 As Cell = r1.Cells.Add("item2")
                    c2.Padding.Left = 30
                    c2.Paragraphs(0).ID = "text2"
             
             
                    'Add 3rd cell to the row, set its padding and set the ID of the first paragraph
            in the cell to "text3"
                    Dim c3 As Cell = r1.Cells.Add("item3")
                    c3.Padding.Left = 30
                    c3.Paragraphs(0).ID = "text3"
             
             
            'Create a form field of RadioButton type. Set its field name and button color.
            'Then set the index of the radio button value to be checked
            Dim radio As FormField = New FormField
            radio.FormFieldType = FormFieldType.RadioButton
            radio.FieldName = "ARadio"
            radio.ButtonColor = System.Drawing.Color.FromName("Red")
            radio.RadioButtonCheckedIndex = 0
             
            'Create 1st radio button instance and add it to above created radio form field.
            'Set its width and height. The position of the radio button is set to be
            'relative to the paragraph. Link this radio button with the paragraph with ID
            'equal to "text1".
            Dim bt1 As RadioButton = radio.RadioButtons.Add()
            bt1.ButtonHeight = 12
            bt1.ButtonWidth = 12
            bt1.PositioningType = PositioningType.ParagraphRelative
            bt1.ReferenceParagraphID = "text1"
            bt1.Left = -20
            bt1.Top = 0
             
            'Create 2nd radio button instance and add it to above created radio form field.
            'Set its width and height. The position of the radio button is set to be
            'relative to the paragraph. Link this radio button with the paragraph with ID
            'equal to "text2".
            Dim bt2 As RadioButton = radio.RadioButtons.Add()
            bt2.ButtonHeight = 12
            bt2.ButtonWidth = 12
            bt2.PositioningType = PositioningType.ParagraphRelative
            bt2.ReferenceParagraphID = "text2"
            bt2.Left = -20
            bt2.Top = 0
             
            'Create 3rd radio button instance and add it to above created radio form field.
            'Set its width and height. The position of the radio button is set to be
            'relative to the paragraph. Link this radio button with the paragraph with ID
            'equal to "text3".
            Dim bt3 As RadioButton = radio.RadioButtons.Add()
            bt3.ButtonHeight = 12
            bt3.ButtonWidth = 12
            bt3.PositioningType = PositioningType.ParagraphRelative
            bt3.ReferenceParagraphID = "text3"
            bt3.Left = -20
            bt3.Top = 0
             
            'Add the radio form field to the paragraphs collection of the section
            sec1.Paragraphs.Add(radio)
             
            'Save the Pdf
            pdf1.Save("e:/temp/test.pdf")
            
            [XML]
            &lt;?xml version="1.0" encoding="utf-8" ?&gt; 
            &lt;Pdf xmlns="Aspose.Pdf"&gt; 
                 &lt;Section&gt; 
                     &lt;Table ColumnWidths="120 120 120"&gt; 
                         &lt;Row&gt; 
                             &lt;Cell PaddingLeft="30"&gt;
                             &lt;Text ID="text1"&gt;
                                     &lt;Segment&gt;item1&lt;/Segment&gt;
                             &lt;/Text&gt;
                            &lt;/Cell&gt; 
                             &lt;Cell PaddingLeft="30"&gt;
                             &lt;Text ID="text2"&gt;
                                     &lt;Segment&gt;item2&lt;/Segment&gt;
                             &lt;/Text&gt;
                            &lt;/Cell&gt; 
                             &lt;Cell PaddingLeft="30"&gt;
                             &lt;Text ID="text3"&gt;
                                     &lt;Segment&gt;item3&lt;/Segment&gt;
                             &lt;/Text&gt;
                            &lt;/Cell&gt; 
                          &lt;/Row&gt; 
                     &lt;/Table&gt; 
                     &lt;FormField FormFieldType="RadioButton" 
                       RadioButtonCheckedIndex="0" FieldName="aRadioutton" 
                       ButtonColor="Red"&gt; 
                         &lt;RadioButton ButtonWidth="12" ButtonHeight="12" 
                          PositioningType="ParagraphRelative" 
                             ReferenceParagraphID="text1" Left="-20" Top="0"&gt;
                         &lt;/RadioButton&gt; 
                         &lt;RadioButton ButtonWidth="12" ButtonHeight="12" 
                             PositioningType="ParagraphRelative"
                             ReferenceParagraphID="text2" Left="-20" Top="0"&gt;
                         &lt;/RadioButton&gt; 
                         &lt;RadioButton ButtonWidth="12" ButtonHeight="12" 
                             PositioningType="ParagraphRelative"
                             ReferenceParagraphID="text3" Left="-20" Top="0"&gt;
                         &lt;/RadioButton&gt; 
                      &lt;/FormField&gt; 
                  &lt;/Section&gt; 
            &lt;/Pdf&gt;
            </code>
      </example>
    </member>
    <member name="M:Aspose.Pdf.Generator.RadioButton.#ctor">
      <summary>
            Initializes a new instance of the <see cref="T:Aspose.Pdf.Generator.RadioButton" /> class.
            </summary>
    </member>
    <member name="P:Aspose.Pdf.Generator.RadioButton.ButtonWidth">
      <summary>
            Gets or sets a float value that indicates the width of the RadioButton. Default value is 100 points.
            </summary>
    </member>
    <member name="P:Aspose.Pdf.Generator.RadioButton.ButtonHeight">
      <summary>
            Gets or sets a float value that indicates the height of the RadioButton. Default value is 100 points.
            </summary>
    </member>
    <member name="T:Aspose.Pdf.Generator.RadioButtons">
      <summary>
             Represents a collection of <see cref="T:Aspose.Pdf.Generator.RadioButton" /> objects.
             </summary>
      <example>
        <code>
             [C#]
             //Instantiate the Pdf document and add a section to it
             Pdf pdf1 = new Pdf(); 
             Section sec1 = pdf1.Sections.Add(); 
              
              
             //Create a table, set its column widths and add it to paragraphs collection
             //of the  section
             Table tab1 = new Table(); 
             tab1.ColumnWidths = "120 120 120"; 
             sec1.Paragraphs.Add(tab1); 
              
              
             //Add a row to the table
             Row r1 = tab1.Rows.Add(); 
              
              
             //Add 1st cell to the row, set its padding and set the ID of the first paragraph
             //in the cell to "text1"
             Cell c1 = r1.Cells.Add("item1"); 
             c1.Padding.Left = 30; 
             c1.Paragraphs[0].ID = "text1"; 
              
              
             //Add 2nd cell to the row, set its padding and set the ID of the first paragraph
             //in the cell to "text2"
             Cell c2 = r1.Cells.Add("item2"); 
             c2.Padding.Left = 30; 
             c2.Paragraphs[0].ID = "text2"; 
              
              
             //Add 3rd cell to the row, set its padding and set the ID of the first paragraph
             //in the cell to "text3"
             Cell c3 = r1.Cells.Add("item3"); 
             c3.Padding.Left = 30; 
             c3.Paragraphs[0].ID = "text3"; 
              
              
             //Create a form field of RadioButton type. Set its field name and button color.
             //Then set the index of the radio button value to be checked
             FormField radio = new FormField(); 
             radio.FormFieldType = FormFieldType.RadioButton; 
             radio.FieldName = "ARadio"; 
             radio.ButtonColor = System.Drawing.Color.FromName("Red"); 
             radio.RadioButtonCheckedIndex = 0; 
              
              
             //Create 1st radio button instance and add it to above created radio form field.
             //Set its width and height. The position of the radio button is set to be
             //relative to the paragraph. Link this radio button with the paragraph with ID
             //equal to "text1".
             RadioButton bt1 = radio.RadioButtons.Add(); 
             bt1.ButtonHeight = 12; 
             bt1.ButtonWidth = 12; 
             bt1.PositioningType = PositioningType.ParagraphRelative; 
             bt1.ReferenceParagraphID = "text1"; 
             bt1.Left = -20; 
             bt1.Top = 0; 
              
              
             //Create 2nd radio button instance and add it to above created radio form field.
             //Set its width and height. The position of the radio button is set to be
             //relative to the paragraph. Link this radio button with the paragraph with ID
             //equal to "text2".
             RadioButton bt2 = radio.RadioButtons.Add(); 
             bt2.ButtonHeight = 12; 
             bt2.ButtonWidth = 12; 
             bt2.PositioningType = PositioningType.ParagraphRelative; 
             bt2.ReferenceParagraphID = "text2"; 
             bt2.Left = -20; 
             bt2.Top = 0; 
              
              
             //Create 3rd radio button instance and add it to above created radio form field.
             //Set its width and height. The position of the radio button is set to be
             //relative to the paragraph. Link this radio button with the paragraph with ID
             //equal to "text3".
             RadioButton bt3 = radio.RadioButtons.Add(); 
             bt3.ButtonHeight = 12; 
             bt3.ButtonWidth = 12; 
             bt3.PositioningType = PositioningType.ParagraphRelative; 
             bt3.ReferenceParagraphID = "text3"; 
             bt3.Left = -20; 
             bt3.Top = 0; 
              
              
             //Add the radio form field to the paragraphs collection of the section
             sec1.Paragraphs.Add(radio);
              
              
             //Save the Pdf
             pdf1.Save(...); 
             
             [Visual Basic]
             'Instantiate the Pdf document and add a section to it
             Dim pdf1 As Pdf = New Pdf
             Dim sec1 As Section = pdf1.Sections.Add()
              
             'Create a table, set its column widths and add it to paragraphs collection
             'of the  section
             Dim tab1 As Table = New Table
             tab1.ColumnWidths = "120 120 120"
             sec1.Paragraphs.Add(tab1)
              
             'Add a row to the table
             Dim r1 As Row = tab1.Rows.Add()
            
             'Add 1st cell to the row, set its padding and set the ID of the first paragraph
             in the cell to "text1"
             Dim c1 As Cell = r1.Cells.Add("item1")
             c1.Padding.Left = 30
             c1.Paragraphs(0).ID = "text1"
              
              
             'Add 2nd cell to the row, set its padding and set the ID of the first paragraph
             in the cell to "text2"
             Dim c2 As Cell = r1.Cells.Add("item2")
             c2.Padding.Left = 30
             c2.Paragraphs(0).ID = "text2"
              
              
             'Add 3rd cell to the row, set its padding and set the ID of the first paragraph
             in the cell to "text3"
             Dim c3 As Cell = r1.Cells.Add("item3")
             c3.Padding.Left = 30
             c3.Paragraphs(0).ID = "text3"
              
              
             'Create a form field of RadioButton type. Set its field name and button color.
             'Then set the index of the radio button value to be checked
             Dim radio As FormField = New FormField
             radio.FormFieldType = FormFieldType.RadioButton
             radio.FieldName = "ARadio"
             radio.ButtonColor = System.Drawing.Color.FromName("Red")
             radio.RadioButtonCheckedIndex = 0
              
             'Create 1st radio button instance and add it to above created radio form field.
             'Set its width and height. The position of the radio button is set to be
             'relative to the paragraph. Link this radio button with the paragraph with ID
             'equal to "text1".
             Dim bt1 As RadioButton = radio.RadioButtons.Add()
             bt1.ButtonHeight = 12
             bt1.ButtonWidth = 12
             bt1.PositioningType = PositioningType.ParagraphRelative
             bt1.ReferenceParagraphID = "text1"
             bt1.Left = -20
             bt1.Top = 0
              
             'Create 2nd radio button instance and add it to above created radio form field.
             'Set its width and height. The position of the radio button is set to be
             'relative to the paragraph. Link this radio button with the paragraph with ID
             'equal to "text2".
             Dim bt2 As RadioButton = radio.RadioButtons.Add()
             bt2.ButtonHeight = 12
             bt2.ButtonWidth = 12
             bt2.PositioningType = PositioningType.ParagraphRelative
             bt2.ReferenceParagraphID = "text2"
             bt2.Left = -20
             bt2.Top = 0
              
             'Create 3rd radio button instance and add it to above created radio form field.
             'Set its width and height. The position of the radio button is set to be
             'relative to the paragraph. Link this radio button with the paragraph with ID
             'equal to "text3".
             Dim bt3 As RadioButton = radio.RadioButtons.Add()
             bt3.ButtonHeight = 12
             bt3.ButtonWidth = 12
             bt3.PositioningType = PositioningType.ParagraphRelative
             bt3.ReferenceParagraphID = "text3"
             bt3.Left = -20
             bt3.Top = 0
              
             'Add the radio form field to the paragraphs collection of the section
             sec1.Paragraphs.Add(radio)
              
             'Save the Pdf
             pdf1.Save("e:/temp/test.pdf")
             
             [XML]
             &lt;?xml version="1.0" encoding="utf-8" ?&gt; 
             &lt;Pdf xmlns="Aspose.Pdf"&gt; 
                  &lt;Section&gt; 
                      &lt;Table ColumnWidths="120 120 120"&gt; 
                          &lt;Row&gt; 
                              &lt;Cell PaddingLeft="30"&gt;
                              &lt;Text ID="text1"&gt;
                                      &lt;Segment&gt;item1&lt;/Segment&gt;
                              &lt;/Text&gt;
                             &lt;/Cell&gt; 
                              &lt;Cell PaddingLeft="30"&gt;
                              &lt;Text ID="text2"&gt;
                                      &lt;Segment&gt;item2&lt;/Segment&gt;
                              &lt;/Text&gt;
                             &lt;/Cell&gt; 
                              &lt;Cell PaddingLeft="30"&gt;
                              &lt;Text ID="text3"&gt;
                                      &lt;Segment&gt;item3&lt;/Segment&gt;
                              &lt;/Text&gt;
                             &lt;/Cell&gt; 
                           &lt;/Row&gt; 
                      &lt;/Table&gt; 
                      &lt;FormField FormFieldType="RadioButton" 
                        RadioButtonCheckedIndex="0" FieldName="aRadioutton" 
                        ButtonColor="Red"&gt; 
                          &lt;RadioButton ButtonWidth="12" ButtonHeight="12" 
                           PositioningType="ParagraphRelative" 
                              ReferenceParagraphID="text1" Left="-20" Top="0"&gt;
                          &lt;/RadioButton&gt; 
                          &lt;RadioButton ButtonWidth="12" ButtonHeight="12" 
                              PositioningType="ParagraphRelative"
                              ReferenceParagraphID="text2" Left="-20" Top="0"&gt;
                          &lt;/RadioButton&gt; 
                          &lt;RadioButton ButtonWidth="12" ButtonHeight="12" 
                              PositioningType="ParagraphRelative"
                              ReferenceParagraphID="text3" Left="-20" Top="0"&gt;
                          &lt;/RadioButton&gt; 
                       &lt;/FormField&gt; 
                   &lt;/Section&gt; 
             &lt;/Pdf&gt;
             </code>
      </example>
    </member>
    <member name="M:Aspose.Pdf.Generator.RadioButtons.#ctor">
      <summary>
            Initializes a new instance of the <see cref="T:Aspose.Pdf.Generator.RadioButtons" /> class.
            </summary>
    </member>
    <member name="M:Aspose.Pdf.Generator.RadioButtons.Add(Aspose.Pdf.Generator.RadioButton)">
      <summary>
            Adds a new <see cref="T:Aspose.Pdf.Generator.RadioButton" /> object into the collection.
            </summary>
      <param name="button">
      </param>
    </member>
    <member name="M:Aspose.Pdf.Generator.RadioButtons.Add">
      <summary>
            Initializes a new instance of the <see cref="T:Aspose.Pdf.Generator.RadioButton" /> class and add it to the RadioButtons 
            collection.
            </summary>
      <returns>The new <see cref="T:Aspose.Pdf.Generator.RadioButton" /> object.</returns>
    </member>
    <member name="M:Aspose.Pdf.Generator.RadioButtons.Remove(Aspose.Pdf.Generator.RadioButton)">
      <summary>
            Removes a <see cref="T:Aspose.Pdf.Generator.RadioButton" /> object from the collection.
            </summary>
      <param name="button">The <see cref="T:Aspose.Pdf.Generator.RadioButton" /> object to be removed.</param>
    </member>
    <member name="M:Aspose.Pdf.Generator.RadioButtons.Insert(System.Int32,Aspose.Pdf.Generator.RadioButton)">
      <summary>
            Inserts a new <see cref="T:Aspose.Pdf.Generator.RadioButton" /> object into the collection at specified position.
            </summary>
      <param name="index">The zero-based index at which <see cref="T:Aspose.Pdf.Generator.RadioButton" /> object should be 
            inserted.</param>
      <param name="button">The <see cref="T:Aspose.Pdf.Generator.RadioButton" /> object to be inserted.</param>
    </member>
    <member name="M:Aspose.Pdf.Generator.RadioButtons.Insert(Aspose.Pdf.Generator.RadioButton,Aspose.Pdf.Generator.RadioButton)">
      <summary>
            Inserts a new <see cref="T:Aspose.Pdf.Generator.RadioButton" /> object into the collection after specified RadioButton object.
            </summary>
      <param name="buttonToInsertAfter">The <see cref="T:Aspose.Pdf.Generator.RadioButton" /> object to insert after.</param>
      <param name="newButton">The <see cref="T:Aspose.Pdf.Generator.RadioButton" /> object to be inserted.</param>
    </member>
    <member name="M:Aspose.Pdf.Generator.RadioButtons.IndexOf(Aspose.Pdf.Generator.RadioButton)">
      <summary>
            Gets the index of a specified section in the collection.
            </summary>
      <param name="button">The specified section.</param>
      <returns>The index value.</returns>
    </member>
    <member name="P:Aspose.Pdf.Generator.RadioButtons.Item(System.Int32)">
      <summary>
            Gets or sets a <see cref="T:Aspose.Pdf.Generator.RadioButton" /> object from the collection according to RadioButton index.
            </summary>
    </member>
    <member name="P:Aspose.Pdf.Generator.RadioButtons.Item(System.String)">
      <summary>
            Gets or sets a <see cref="T:Aspose.Pdf.Generator.RadioButton" /> object from the collection according to RadioButton ID.
            </summary>
    </member>
    <member name="T:Aspose.Pdf.Generator.Rectangle">
      <summary>
             Represents a rectangle <see cref="T:Aspose.Pdf.Generator.Shape" /> in a Pdf document.
             </summary>
      <example>
        <code>
             [C#]
            	Pdf pdf1 = new Pdf();
            			
            	Section sec1 = pdf1.Sections.Add();
            			
            	Graph graph1 = new Graph(sec1,400,100);
            	sec1.Paragraphs.Add(graph1);
            			
            	Aspose.Pdf.Generator.Rectangle rect1 = new Aspose.Pdf.Generator.Rectangle(graph1,50,10,100,50);
            	graph1.Shapes.Add(rect1);
             		
             pdf1.Save(...);
             
             [Visual Basic]
            	Dim pdf1 As Pdf = New Pdf()
            
            	Dim sec1 As Section = pdf1.Sections.Add()
            
            	Dim graph1 As Graph = New Graph(sec1, 400, 100)
            	sec1.Paragraphs.Add(graph1)
            
            	Dim rect1 As Aspose.Pdf.Generator.Rectangle = New Aspose.Pdf.Generator.Rectangle(graph1, 50, 10, 100, 50)
            	graph1.Shapes.Add(rect1)
             
             pdf1.Save(...)
             
             [XML]
             &lt;?xml version="1.0" encoding="utf-8" ?&gt;
             &lt;Pdf xmlns="Aspose.Pdf"&gt;
            		&lt;Section&gt;
            			&lt;Graph Width="400" Height="100"&gt;
            				&lt;Rectangle Position="50 10 100 50" /&gt;
            			&lt;/Graph&gt;
            		&lt;/Section&gt;
             &lt;/Pdf&gt;
             
             </code>
      </example>
    </member>
    <member name="M:Aspose.Pdf.Generator.Rectangle.#ctor">
      <summary>
            Initializes a new instance of the <see cref="T:Aspose.Pdf.Generator.Rectangle" /> class.
            </summary>
    </member>
    <member name="M:Aspose.Pdf.Generator.Rectangle.#ctor(System.Single,System.Single,System.Single,System.Single)">
      <summary>
            Initializes a new instance of the <see cref="T:Aspose.Pdf.Generator.Rectangle" /> class.
            </summary>
      <param name="left">The left position of the rectangle.</param>
      <param name="bottom">The bottom position of the rectangle.</param>
      <param name="height">The height of the rectangle.</param>
      <param name="width">The width of the rectangle.</param>
    </member>
    <member name="M:Aspose.Pdf.Generator.Rectangle.#ctor(Aspose.Pdf.Generator.Graph)">
      <summary>
            Initializes a new instance of the <see cref="T:Aspose.Pdf.Generator.Rectangle" /> class.
            </summary>
      <param name="graph">The specified <see cref="T:Aspose.Pdf.Generator.Graph" /> object.</param>
      <remarks>
            This constructor can inherit common property values from the specified 
            <see cref="T:Aspose.Pdf.Generator.Graph" /> object.
            </remarks>
    </member>
    <member name="M:Aspose.Pdf.Generator.Rectangle.#ctor(Aspose.Pdf.Generator.Graph,System.Single,System.Single,System.Single,System.Single)">
      <summary>
            Initializes a new instance of the <see cref="T:Aspose.Pdf.Generator.Rectangle" /> class.
            </summary>
      <param name="graph">The specified <see cref="T:Aspose.Pdf.Generator.Graph" /> object.</param>
      <param name="left">The left position of the rectangle.</param>
      <param name="bottom">The bottom position of the rectangle.</param>
      <param name="height">The height of the rectangle.</param>
      <param name="width">The width of the rectangle.</param>
      <remarks>
            This constructor can inherit common property values from the specified 
            <see cref="T:Aspose.Pdf.Generator.Graph" /> object.
            </remarks>
    </member>
    <member name="P:Aspose.Pdf.Generator.Rectangle.Left">
      <summary>
            Gets or sets a float value that indicates the left position of the rectangle.
            </summary>
    </member>
    <member name="P:Aspose.Pdf.Generator.Rectangle.Bottom">
      <summary>
            Gets or sets a float value that indicates the bottom position of the rectangle.
            </summary>
    </member>
    <member name="P:Aspose.Pdf.Generator.Rectangle.Width">
      <summary>
            Gets or sets a float value that indicates the width of the rectangle.
            </summary>
    </member>
    <member name="P:Aspose.Pdf.Generator.Rectangle.Height">
      <summary>
            Gets or sets a float value that indicates the height of the rectangle.
            </summary>
    </member>
    <member name="P:Aspose.Pdf.Generator.Rectangle.RadiusForRoundCorner">
      <summary>
            Gets or sets a float value that indicates the radius for the round corner. 
            </summary>
    </member>
    <member name="T:Aspose.Pdf.Generator.RectangleArea">
      <summary>
            A rectangle area specified with left position,top position,width and height.
            </summary>
    </member>
    <member name="M:Aspose.Pdf.Generator.RectangleArea.#ctor">
      <summary>
            Initializes a new instance of the <see cref="T:Aspose.Pdf.Generator.RectangleArea" /> class.
            </summary>
    </member>
    <member name="M:Aspose.Pdf.Generator.RectangleArea.#ctor(System.Single,System.Single,System.Single,System.Single)">
      <summary>
            Initializes a new instance of the <see cref="T:Aspose.Pdf.Generator.RectangleArea" /> class.
            </summary>
      <param name="left">The left position of the rectangle area.</param>
      <param name="top">The top position of the rectangle area.</param>
      <param name="width">The width of the rectangle area.</param>
      <param name="height">The height of the rectangle area.</param>
    </member>
    <member name="P:Aspose.Pdf.Generator.RectangleArea.Left">
      <summary>
            Gets or sets a float value that indicates the left position of the rectangle area.
            </summary>
    </member>
    <member name="P:Aspose.Pdf.Generator.RectangleArea.Top">
      <summary>
            Gets or sets a float value that indicates the top position of the rectangle area.
            </summary>
    </member>
    <member name="P:Aspose.Pdf.Generator.RectangleArea.Width">
      <summary>
            Gets or sets a float value that indicates the width of the rectangle area.
            </summary>
    </member>
    <member name="P:Aspose.Pdf.Generator.RectangleArea.Height">
      <summary>
            Gets or sets a float value that indicates the height of the rectangle area.
            </summary>
    </member>
    <member name="T:Aspose.Pdf.Generator.RectData">
      <summary>
             Represents a rectangle data structure which specifies the low-left and up-right coordinates.
             </summary>
      <example>
        <code>
             [C#]
            	Pdf pdf1 = new Pdf();
            	RectData rect1 = new RectData();
            	rect1.LowerLeftX = 100;
            	rect1.LowerLeftY = 100;
            	rect1.UperRightX = PageSize.A4Width;
            	rect1.UperRightY = PageSize.A4Height;
            	pdf1.PageSetup.CropBox = rect1;
            			
            	Section sec1 = pdf1.Sections.Add();
            			
            	Text text1 = new Text(sec1,"this is text content");
            	text1.Margin.Top = 30;
            	sec1.Paragraphs.Add(text1);
             		
             pdf1.Save(...);
             
             [Visual Basic]
            	Dim pdf1 As Pdf =  New Pdf() 
            	Dim rect1 As RectData =  New RectData() 
            	rect1.LowerLeftX = 100
            	rect1.LowerLeftY = 100
            	rect1.UperRightX = PageSize.A4Width
            	rect1.UperRightY = PageSize.A4Height
            	pdf1.PageSetup.CropBox = rect1
            
            	Dim sec1 As Section =  pdf1.Sections.Add() 
            
            	Dim text1 As Text =  New Text(sec1,"this is text content") 
            	text1.Margin.Top = 30
            	sec1.Paragraphs.Add(text1)
             
             pdf1.Save(...)
             
             [XML]
             &lt;?xml version="1.0" encoding="utf-8" ?&gt;
             &lt;Pdf xmlns="Aspose.Pdf" CropBox="100 100 595 842"&gt;
            		&lt;Section&gt;
            			&lt;Text MarginTop="30"&gt;
            				&lt;Segment&gt;this is text content&lt;/Segment&gt;
            			&lt;/Text&gt;
            		&lt;/Section&gt;
             &lt;/Pdf&gt;
             
             </code>
      </example>
    </member>
    <member name="M:Aspose.Pdf.Generator.RectData.Clone">
      <summary>
            Clones a new <see cref="T:Aspose.Pdf.Generator.RectData" /> object.
            </summary>
      <returns>The new cloned <see cref="T:Aspose.Pdf.Generator.RectData" /> object.</returns>
    </member>
    <member name="P:Aspose.Pdf.Generator.RectData.LowerLeftX">
      <summary>
            Gets or sets a float value that indicates the x-coordinate of the lower-left point.
            </summary>
    </member>
    <member name="P:Aspose.Pdf.Generator.RectData.LowerLeftY">
      <summary>
            Gets or sets a float value that indicates the y-coordinate of the lower-left point.
            </summary>
    </member>
    <member name="P:Aspose.Pdf.Generator.RectData.UperRightX">
      <summary>
            Gets or sets a float value that indicates the x-coordinate of the upper-right point.
            </summary>
    </member>
    <member name="P:Aspose.Pdf.Generator.RectData.UperRightY">
      <summary>
            Gets or sets a float value that indicates the y-coordinate of the upper-right point.
            </summary>
    </member>
    <member name="T:Aspose.Pdf.Generator.RenderingMode">
      <summary>
            Enumerates text rendering modes.
            </summary>
    </member>
    <member name="F:Aspose.Pdf.Generator.RenderingMode.FillText">
      <summary>
            Fill text mode.
            </summary>
    </member>
    <member name="F:Aspose.Pdf.Generator.RenderingMode.StrokeText">
      <summary>
            Stroke text(outline) mode.
            </summary>
    </member>
    <member name="F:Aspose.Pdf.Generator.RenderingMode.FillStrokeText">
      <summary>
            Fill and stroke text mode.
            </summary>
    </member>
    <member name="F:Aspose.Pdf.Generator.RenderingMode.InvisibleText">
      <summary>
            Invisible text mode.
            </summary>
    </member>
    <member name="T:Aspose.Pdf.Generator.Row">
      <summary>
             Repserents a row in a <see cref="T:Aspose.Pdf.Generator.Table" />.
             </summary>
      <example>
        <code>
             [C#]
            	Pdf pdf1 = new Pdf();
            
            	Section sec1 = pdf1.Sections.Add();
            
            	Aspose.Pdf.Generator.Table table1 = new Aspose.Pdf.Generator.Table();
            	sec1.Paragraphs.Add(table1);
            	table1.ColumnWidths = "70 2cm";
            
            	Row row1 = table1.Rows.Add();
            
            	Cell cell1Row1 = row1.Cells.Add("ColumnsSpan = 2");
            	cell1Row1.ColumnsSpan = 2;
            	cell1Row1.Border = new BorderInfo((int)BorderSide.All,0.5F);
            
            	Row row2 = table1.Rows.Add();
            
            	Cell cell1Row2 = row2.Cells.Add("cell1");
            	cell1Row2.Border = new BorderInfo((int)BorderSide.All,0.5F);
            
            	Cell cell2Row2 = row2.Cells.Add("cell2");
            	cell2Row2.Border = new BorderInfo((int)BorderSide.All,0.5F,new Aspose.Pdf.Generator.Color("Red"));
            
             pdf1.Save(...);
             
             [Visual Basic]
            	Dim pdf1 As Pdf = New Pdf()
            
            	Dim sec1 As Section = pdf1.Sections.Add()
            
            	Dim table1 As Aspose.Pdf.Generator.Table = New Aspose.Pdf.Generator.Table()
            	sec1.Paragraphs.Add(table1)
            	table1.ColumnWidths = "70 2cm"
            
            	Dim row1 As Row = table1.Rows.Add()
            
            	Dim cell1Row1 As Cell = row1.Cells.Add("ColumnsSpan = 2")
            	cell1Row1.ColumnsSpan = 2
            	cell1Row1.Border = New BorderInfo(CType(BorderSide.All, Integer), 0.5)
            
            	Dim row2 As Row = table1.Rows.Add()
            
            	Dim cell1Row2 As Cell = row2.Cells.Add("cell1")
            	cell1Row2.Border = New BorderInfo(CType(BorderSide.All, Integer), 0.5)
            
            	Dim cell2Row2 As Cell = row2.Cells.Add("cell2")
            	cell2Row2.Border = New BorderInfo(CType(BorderSide.All, Integer), 0.5, New Aspose.Pdf.Generator.Color("Red"))
             
             pdf1.Save(...)
             
             [XML]
            	&lt;Pdf xmlns="Aspose.Pdf"&gt;
            		&lt;Section&gt;
            			&lt;Table ColumnWidths="70 2cm"&gt;
            				&lt;Row&gt;
            					&lt;Cell ColumnsSpan="2"&gt;
            						&lt;Border&gt;
            							&lt;All LineWidth="0.5"&gt;&lt;/All&gt;
            						&lt;/Border&gt;
            						&lt;Text&gt;
            							&lt;Segment&gt;ColumnsSpan = 2&lt;/Segment&gt;
            						&lt;/Text&gt;
            					&lt;/Cell&gt;
            				&lt;/Row&gt;
            				&lt;Row&gt;
            					&lt;Cell&gt;
            						&lt;Border&gt;
            							&lt;All LineWidth="0.5"&gt;&lt;/All&gt;
            						&lt;/Border&gt;
            						&lt;Text&gt;
            							&lt;Segment&gt;cell1&lt;/Segment&gt;
            						&lt;/Text&gt;
            					&lt;/Cell&gt;
            					&lt;Cell&gt;
            						&lt;Border&gt;
            							&lt;All LineWidth="0.5" Color="Red"&gt;&lt;/All&gt;
            						&lt;/Border&gt;
            						&lt;Text&gt;
            							&lt;Segment&gt;cell2&lt;/Segment&gt;
            						&lt;/Text&gt;
            					&lt;/Cell&gt;
            				&lt;/Row&gt;
            			&lt;/Table&gt;
            		&lt;/Section&gt;
            	&lt;/Pdf&gt;
             </code>
      </example>
    </member>
    <member name="M:Aspose.Pdf.Generator.Row.#ctor">
      <summary>
            Initializes a new instance of the <see cref="T:Aspose.Pdf.Generator.Row" /> class.
            </summary>
    </member>
    <member name="M:Aspose.Pdf.Generator.Row.#ctor(Aspose.Pdf.Generator.Table)">
      <summary>
            Initializes a new instance of the <see cref="T:Aspose.Pdf.Generator.Row" /> class in a table.
            </summary>
      <param name="table">The <see cref="P:Aspose.Pdf.Generator.Row.Table" /> object where the row is in.</param>
    </member>
    <member name="M:Aspose.Pdf.Generator.Row.Clone">
      <summary>
            Clones a new <see cref="T:Aspose.Pdf.Generator.Row" /> object. This method clones only the format but not contents of the Row.
            </summary>
      <returns>The new row object.</returns>
    </member>
    <member name="M:Aspose.Pdf.Generator.Row.CompleteClone">
      <summary>
            Clones a new <see cref="T:Aspose.Pdf.Generator.Row" /> object. This method clones both format and contents of the Row.
            </summary>
      <returns>
      </returns>
    </member>
    <member name="M:Aspose.Pdf.Generator.Row.GetHeight(Aspose.Pdf.Generator.Pdf)">
      <summary>
            Gets the row height. Note that this method returns correct value only when the <see cref="T:Aspose.Pdf.Generator.Row" /> 
            object is added into <see cref="P:Aspose.Pdf.Generator.Row.Table" /> object. Image in table will be ignored.
            </summary>
      <param name="doc">The <see cref="T:Aspose.Pdf.Generator.Pdf" /> object.</param>
      <returns>The row height in points.</returns>
    </member>
    <member name="P:Aspose.Pdf.Generator.Row.Border">
      <summary>
            Gets or sets a <see cref="T:Aspose.Pdf.Generator.BorderInfo" /> object that indicates the row border info.
            </summary>
    </member>
    <member name="P:Aspose.Pdf.Generator.Row.Cells">
      <summary>
            Gets or sets a <see cref="P:Aspose.Pdf.Generator.Row.Cells" /> collection that indicates all cells in the row.
            </summary>
    </member>
    <member name="P:Aspose.Pdf.Generator.Row.ID">
      <summary>
            Gets or sets a string that indicates the ID of the cell.
            </summary>
    </member>
    <member name="P:Aspose.Pdf.Generator.Row.DefaultCellTextInfo">
      <summary>
            Gets or sets a <see cref="T:Aspose.Pdf.Generator.TextInfo" /> object that indicates the text format info of the row. If you 
            want to set text format for all cells that have already been added to the row, please do not set 
            it directly but follow the method in the example.
            </summary>
      <example>
        <code>
            [C#]
            TextInfo info = row.DefaultCellTextInfo.Clone() as TextInfo;
            info.BackgroundColor = new Color("Blue");
            row.DefaultCellTextInfo = info;
            
            [VisualBasic]
            Dim info As TextInfo = row.DefaultCellTextInfo.Clone()
            info.BackgroundColor = new Color("Blue")
            row.DefaultCellTextInfo = info
            </code>
      </example>
    </member>
    <member name="P:Aspose.Pdf.Generator.Row.DefaultCellBorder">
      <summary>
            Gets or sets a <see cref="T:Aspose.Pdf.Generator.BorderInfo" /> object that indicates the default border style for all cells 
            in this row.
            </summary>
    </member>
    <member name="P:Aspose.Pdf.Generator.Row.DefaultRowCellPadding">
      <summary>
            Gets or sets a <see cref="T:Aspose.Pdf.Generator.MarginInfo" /> object that indicates the default cell padding in the row.
            </summary>
    </member>
    <member name="P:Aspose.Pdf.Generator.Row.VerticalAlignment">
      <summary>
            Gets or sets a <see cref="T:Aspose.Pdf.Generator.VerticalAlignmentType" /> object that indicates the vertical 
            alignment type of all cells in this row.
            </summary>
    </member>
    <member name="P:Aspose.Pdf.Generator.Row.FixedRowHeight">
      <summary>
            Gets or sets a float value that indicates the fixed row height. If the fixed row height is set, the property of IsBroken is disabled 
            unless the real height of the row is out of the margin bound. When the value is too small, it will be enlarged automatically. 
            </summary>
    </member>
    <member name="P:Aspose.Pdf.Generator.Row.IsDisabled">
      <summary>
            Gets or sets a bool value that indicates whether this row is disabled. The default value is false. 
            If this property is set to true, this row will not be rendered.
            </summary>
    </member>
    <member name="P:Aspose.Pdf.Generator.Row.IsInNewPage">
      <summary>
            Gets or sets a bool value that indicates whether to split the table from this row and display the subsequent rows on the next page.
            The property doesn't support nested table.
            </summary>
    </member>
    <member name="P:Aspose.Pdf.Generator.Row.BackgroundColor">
      <summary>
            Gets or sets a <see cref="T:Aspose.Pdf.Generator.Color" /> object that indicates the background color of the 
            row.
            </summary>
    </member>
    <member name="P:Aspose.Pdf.Generator.Row.IsBroken">
      <summary>
            Gets or sets a bool value that indicates whether the row can be broken or not when the row spans two pages. Default value is true. 
            </summary>
    </member>
    <member name="T:Aspose.Pdf.Generator.Rows">
      <summary>
             Represents a collection of <see cref="T:Aspose.Pdf.Generator.Row" /> objects.
             </summary>
      <example>
        <code>
             [C#]
            	Pdf pdf1 = new Pdf();
            
            	Section sec1 = pdf1.Sections.Add();
            
            	Aspose.Pdf.Generator.Table table1 = new Aspose.Pdf.Generator.Table();
            	sec1.Paragraphs.Add(table1);
            	table1.ColumnWidths = "70 2cm";
            
            	Row row1 = table1.Rows.Add();
            
            	Cell cell1Row1 = row1.Cells.Add("ColumnsSpan = 2");
            	cell1Row1.ColumnsSpan = 2;
            	cell1Row1.Border = new BorderInfo((int)BorderSide.All,0.5F);
            
            	Row row2 = table1.Rows.Add();
            
            	Cell cell1Row2 = row2.Cells.Add("cell1");
            	cell1Row2.Border = new BorderInfo((int)BorderSide.All,0.5F);
            
            	Cell cell2Row2 = row2.Cells.Add("cell2");
            	cell2Row2.Border = new BorderInfo((int)BorderSide.All,0.5F,new Aspose.Pdf.Generator.Color("Red"));
            
             pdf1.Save(...);
             
             [Visual Basic]
            	Dim pdf1 As Pdf = New Pdf()
            
            	Dim sec1 As Section = pdf1.Sections.Add()
            
            	Dim table1 As Aspose.Pdf.Generator.Table = New Aspose.Pdf.Generator.Table()
            	sec1.Paragraphs.Add(table1)
            	table1.ColumnWidths = "70 2cm"
            
            	Dim row1 As Row = table1.Rows.Add()
            
            	Dim cell1Row1 As Cell = row1.Cells.Add("ColumnsSpan = 2")
            	cell1Row1.ColumnsSpan = 2
            	cell1Row1.Border = New BorderInfo(CType(BorderSide.All, Integer), 0.5)
            
            	Dim row2 As Row = table1.Rows.Add()
            
            	Dim cell1Row2 As Cell = row2.Cells.Add("cell1")
            	cell1Row2.Border = New BorderInfo(CType(BorderSide.All, Integer), 0.5)
            
            	Dim cell2Row2 As Cell = row2.Cells.Add("cell2")
            	cell2Row2.Border = New BorderInfo(CType(BorderSide.All, Integer), 0.5, New Aspose.Pdf.Generator.Color("Red"))
             
             pdf1.Save(...)
             
             [XML]
            	&lt;Pdf xmlns="Aspose.Pdf"&gt;
            		&lt;Section&gt;
            			&lt;Table ColumnWidths="70 2cm"&gt;
            				&lt;Row&gt;
            					&lt;Cell ColumnsSpan="2"&gt;
            						&lt;Border&gt;
            							&lt;All LineWidth="0.5"&gt;&lt;/All&gt;
            						&lt;/Border&gt;
            						&lt;Text&gt;
            							&lt;Segment&gt;ColumnsSpan = 2&lt;/Segment&gt;
            						&lt;/Text&gt;
            					&lt;/Cell&gt;
            				&lt;/Row&gt;
            				&lt;Row&gt;
            					&lt;Cell&gt;
            						&lt;Border&gt;
            							&lt;All LineWidth="0.5"&gt;&lt;/All&gt;
            						&lt;/Border&gt;
            						&lt;Text&gt;
            							&lt;Segment&gt;cell1&lt;/Segment&gt;
            						&lt;/Text&gt;
            					&lt;/Cell&gt;
            					&lt;Cell&gt;
            						&lt;Border&gt;
            							&lt;All LineWidth="0.5" Color="Red"&gt;&lt;/All&gt;
            						&lt;/Border&gt;
            						&lt;Text&gt;
            							&lt;Segment&gt;cell2&lt;/Segment&gt;
            						&lt;/Text&gt;
            					&lt;/Cell&gt;
            				&lt;/Row&gt;
            			&lt;/Table&gt;
            		&lt;/Section&gt;
            	&lt;/Pdf&gt;
             </code>
      </example>
    </member>
    <member name="M:Aspose.Pdf.Generator.Rows.#ctor">
      <summary>
            Initializes a new instance of the <see cref="T:Aspose.Pdf.Generator.Rows" /> class.
            </summary>
    </member>
    <member name="M:Aspose.Pdf.Generator.Rows.AddRow(Aspose.Pdf.Generator.Row)">
      <summary>
            Adds a new <see cref="T:Aspose.Pdf.Generator.Row" /> object into the collection.
            </summary>
      <param name="row">The <see cref="T:Aspose.Pdf.Generator.Row" /> object to be added.</param>
    </member>
    <member name="M:Aspose.Pdf.Generator.Rows.AddRow(Aspose.Pdf.Generator.Section,Aspose.Pdf.Generator.Row)">
      <summary>
            Adds a new <see cref="T:Aspose.Pdf.Generator.Row" /> object into pdf file, this method is used for direct-to-stream mode.
            When calling this method, the added row will be writen into pdf file directly. Direct-to-stream mode is very useful for processing large paragraphs.
            In this mode, however, you can't access the rows that added into the document any more, so some of the advanced features such as combination of XML and API,
            hyperlink to specified paragraph, total page number in footer,etc.,is not available. 
            </summary>
      <param name="section">The <see cref="T:Aspose.Pdf.Generator.Section" /> Section the table belongs to.</param>
      <param name="row">The <see cref="T:Aspose.Pdf.Generator.Row" /> Row to be added.</param>
    </member>
    <member name="M:Aspose.Pdf.Generator.Rows.Add(Aspose.Pdf.Generator.Row)">
      <summary>
            Adds a new <see cref="T:Aspose.Pdf.Generator.Row" /> object into the collection.
            </summary>
      <param name="row">The <see cref="T:Aspose.Pdf.Generator.Row" /> object to be added.</param>
    </member>
    <member name="M:Aspose.Pdf.Generator.Rows.Add">
      <summary>
            Initializes a new instance of the <see cref="T:Aspose.Pdf.Generator.Row" /> class and add it to the Rows collection.
            </summary>
      <returns>The new <see cref="T:Aspose.Pdf.Generator.Row" /> object.</returns>
    </member>
    <member name="M:Aspose.Pdf.Generator.Rows.Insert(System.Int32,Aspose.Pdf.Generator.Row)">
      <summary>
            Inserts a new <see cref="T:Aspose.Pdf.Generator.Row" /> object into the collection at specified position.
            </summary>
      <param name="index">The zero-based index at which <see cref="T:Aspose.Pdf.Generator.Row" /> object should be inserted.</param>
      <param name="row">The <see cref="T:Aspose.Pdf.Generator.Row" /> object to be inserted.</param>
    </member>
    <member name="M:Aspose.Pdf.Generator.Rows.Insert(Aspose.Pdf.Generator.Row,Aspose.Pdf.Generator.Row)">
      <summary>
            Inserts a new <see cref="T:Aspose.Pdf.Generator.Row" /> object into the collection after specified Cell object.
            </summary>
      <param name="rowToInsertAfter">The <see cref="T:Aspose.Pdf.Generator.Row" /> object to insert after.</param>
      <param name="newRow">The <see cref="T:Aspose.Pdf.Generator.Row" /> object to be inserted.</param>
    </member>
    <member name="M:Aspose.Pdf.Generator.Rows.IndexOf(Aspose.Pdf.Generator.Row)">
      <summary>
            Gets the index of a specified row in the collection.
            </summary>
      <param name="row">The specified row.</param>
      <returns>The index value.</returns>
    </member>
    <member name="M:Aspose.Pdf.Generator.Rows.Remove(Aspose.Pdf.Generator.Row)">
      <summary>
            Removes a <see cref="T:Aspose.Pdf.Generator.Row" /> object from the collection.
            </summary>
      <param name="rowToRemove">The <see cref="T:Aspose.Pdf.Generator.Row" /> object to be romoved.</param>
    </member>
    <member name="M:Aspose.Pdf.Generator.Rows.CopyTo(Aspose.Pdf.Generator.Row[],System.Int32)">
      <summary>
            Copies the elements to a <see cref="T:Aspose.Pdf.Generator.Row" /> object array, starting at a specified array index.
            </summary>
      <param name="rowArray">The <see cref="T:Aspose.Pdf.Generator.Row" /> object array.</param>
      <param name="index">The start index.</param>
    </member>
    <member name="P:Aspose.Pdf.Generator.Rows.Item(System.Int32)">
      <summary>
            Gets or sets a <see cref="T:Aspose.Pdf.Generator.Row" /> object from the collection according to Row index.
            </summary>
    </member>
    <member name="P:Aspose.Pdf.Generator.Rows.Item(System.String)">
      <summary>
            Gets or sets a <see cref="T:Aspose.Pdf.Generator.Row" /> object from the collection according to Row ID.
            </summary>
    </member>
    <member name="T:Aspose.Pdf.Generator.SaveType">
      <summary>
            Enumerates different ways of presenting the document at the client browser. 
            </summary>
    </member>
    <member name="F:Aspose.Pdf.Generator.SaveType.OpenInAcrobat">
      <summary>
            Send the document to the browser and present an option to save the
            document to disk or open in an application associated with .pdf extension.
            </summary>
    </member>
    <member name="F:Aspose.Pdf.Generator.SaveType.OpenInBrowser">
      <summary>
            Open the document directly in browser.
            </summary>
    </member>
    <member name="T:Aspose.Pdf.Generator.Sections">
      <summary>
             Represents a collection of <see cref="T:Aspose.Pdf.Generator.Section" /> objects.
             </summary>
      <example>
        <code>
             [C#]
            	Pdf pdf1 = new Pdf();
            
            	Section section1 = pdf1.Sections.Add();
            
            	Text text1 = new Text(section1,"This is text in section1.");
            	text1.Margin.Top = 30;
            	section1.Paragraphs.Add(text1);
            
            	Section section2 = pdf1.Sections.Add();
            	section2.IsLandscape = true;
            
            	Text text2 = new Text(section2,"This is text in section2.");
            	text2.Margin.Top = 30;
            	section2.Paragraphs.Add(text2);
             
             pdf1.Save(...);
             
             [Visual Basic]
            	Dim pdf1 As Pdf = New Pdf()
            
            	Dim section1 As Section = pdf1.Sections.Add()
            
            	Dim text1 As Text = New Text(section1, "This is text in section1.")
            	text1.Margin.Top = 30
            	section1.Paragraphs.Add(text1)
            
            	Dim section2 As Section = pdf1.Sections.Add()
            	section2.IsLandscape = True
            
            	Dim text2 As Text = New Text(section2, "This is text in section2.")
            	text2.Margin.Top = 30
            	section2.Paragraphs.Add(text2)
             
             pdf1.Save(...)
             
             [XML]
             &lt;?xml version="1.0" encoding="utf-8" ?&gt;
             &lt;Pdf xmlns="Aspose.Pdf"&gt;
            		&lt;Section&gt;
            			&lt;Text MarginTop="30"&gt;
            				&lt;Segment&gt;
            				This is text in section1.
            				&lt;/Segment&gt;
            			&lt;/Text&gt;
            		&lt;/Section&gt;
            		&lt;Section IsLandscape="true"&gt;
            			&lt;Text MarginTop="30"&gt;
            				&lt;Segment&gt;
            				This is text in section2..
            				&lt;/Segment&gt;
            			&lt;/Text&gt;
            		&lt;/Section&gt;
             &lt;/Pdf&gt;
             
             </code>
      </example>
    </member>
    <member name="M:Aspose.Pdf.Generator.Sections.#ctor">
      <summary>
            Initializes a new instance of the <see cref="T:Aspose.Pdf.Generator.Sections" /> class.
            </summary>
    </member>
    <member name="M:Aspose.Pdf.Generator.Sections.Add(Aspose.Pdf.Generator.Section)">
      <summary>
            Adds a new <see cref="T:Aspose.Pdf.Generator.Section" /> object into the collection.
            </summary>
      <param name="section">The <see cref="T:Aspose.Pdf.Generator.Section" /> object to be added.</param>
    </member>
    <member name="M:Aspose.Pdf.Generator.Sections.Add">
      <summary>
            Initializes a new instance of the <see cref="T:Aspose.Pdf.Generator.Section" /> class and add it to the Sections collection
            </summary>
      <returns>The new <see cref="T:Aspose.Pdf.Generator.Section" /> object.</returns>
    </member>
    <member name="M:Aspose.Pdf.Generator.Sections.Insert(System.Int32,Aspose.Pdf.Generator.Section)">
      <summary>
            Inserts a new <see cref="T:Aspose.Pdf.Generator.Section" /> object into the collection at specified position.
            </summary>
      <param name="index">The zero-based index at which <see cref="T:Aspose.Pdf.Generator.Section" /> object should be inserted.</param>
      <param name="section">The <see cref="T:Aspose.Pdf.Generator.Section" /> object to be inserted.</param>
    </member>
    <member name="M:Aspose.Pdf.Generator.Sections.Insert(Aspose.Pdf.Generator.Section,Aspose.Pdf.Generator.Section)">
      <summary>
            Inserts a new <see cref="T:Aspose.Pdf.Generator.Section" /> object into the collection after specified Section object.
            </summary>
      <param name="sectionToInsertAfter">The <see cref="T:Aspose.Pdf.Generator.Section" /> object to insert after.</param>
      <param name="newSection">The <see cref="T:Aspose.Pdf.Generator.Section" /> object to be inserted.</param>
    </member>
    <member name="M:Aspose.Pdf.Generator.Sections.Remove(Aspose.Pdf.Generator.Section)">
      <summary>
            Removes a <see cref="T:Aspose.Pdf.Generator.Section" /> object from the collection.
            </summary>
      <param name="sectionToRemove">The <see cref="T:Aspose.Pdf.Generator.Section" /> object to be romoved.</param>
    </member>
    <member name="M:Aspose.Pdf.Generator.Sections.CopyTo(Aspose.Pdf.Generator.Section[],System.Int32)">
      <summary>
            Copies the elements to a <see cref="T:Aspose.Pdf.Generator.Section" /> object array, starting at a specified array index.
            </summary>
      <param name="secArray">The <see cref="T:Aspose.Pdf.Generator.Section" /> object array.</param>
      <param name="index">The start index.</param>
    </member>
    <member name="M:Aspose.Pdf.Generator.Sections.IndexOf(Aspose.Pdf.Generator.Section)">
      <summary>
            Gets the index of a specified section in the collection.
            </summary>
      <param name="section">The specified section.</param>
      <returns>The index value.</returns>
    </member>
    <member name="P:Aspose.Pdf.Generator.Sections.Item(System.Int32)">
      <summary>
            Gets or sets a <see cref="T:Aspose.Pdf.Generator.Section" /> object from the collection according to Section index.
            </summary>
    </member>
    <member name="P:Aspose.Pdf.Generator.Sections.Item(System.String)">
      <summary>
            Gets or sets a <see cref="T:Aspose.Pdf.Generator.Section" /> object from the collection according to Section ID.
            </summary>
    </member>
    <member name="T:Aspose.Pdf.Generator.Security">
      <summary>
             Encapsulates information used in pdf Security.
             </summary>
      <example>
        <code>
             
             [C#]
            	Pdf pdf1 = new Pdf();
            
            	pdf1.Security = new Security();
            	pdf1.Security.IsCopyingAllowed = false;
            
            	pdf1.PageSetup.PageHeight = PageSize.A2Height;
            
            	Section sec1 = pdf1.Sections.Add();
            
            	Text text1 = new Text(sec1,"this is text content");
            	text1.Margin.Top = 30;
            	sec1.Paragraphs.Add(text1);
            
             pdf1.Save(...);
             
             [Visual Basic]
            	Dim pdf1 As Pdf = New Pdf()
            
            	pdf1.Security = New Security()
            	pdf1.Security.IsCopyingAllowed = False
            
            	pdf1.PageSetup.PageHeight = PageSize.A2Height
            
            	Dim sec1 As Section = pdf1.Sections.Add()
            
            	Dim text1 As Text = New Text(sec1, "this is text content")
            	text1.Margin.Top = 30
            	sec1.Paragraphs.Add(text1)
             
             pdf1.Save(...)
             
             [XML]
             &lt;?xml version="1.0" encoding="utf-8" ?&gt;
             &lt;Pdf xmlns="Aspose.Pdf" IsCopyingAllowed="false"&gt;
            		&lt;Section PageHeight="1684"&gt;
            			&lt;Text MarginTop="30"&gt;
            				&lt;Segment&gt;this is text content&lt;/Segment&gt;
            			&lt;/Text&gt;
            		&lt;/Section&gt;
             &lt;/Pdf&gt;
             
             </code>
      </example>
    </member>
    <member name="M:Aspose.Pdf.Generator.Security.#ctor">
      <summary>
            Initializes a new instance of the <see cref="T:Aspose.Pdf.Generator.Security" /> class.
            </summary>
    </member>
    <member name="P:Aspose.Pdf.Generator.Security.Is128BitsEncrypted">
      <summary>
            Gets or sets a bool value that indicates whether the Pdf documents will be 128 bits or 40 bits encrypted. Default is false, 40 bits encrypted.
            </summary>
    </member>
    <member name="P:Aspose.Pdf.Generator.Security.UserPassword">
      <summary>
            Gets or sets a string that indicates the user password used in pdf encryption.
            </summary>
    </member>
    <member name="P:Aspose.Pdf.Generator.Security.MasterPassword">
      <summary>
             Gets or sets a string that indicates the master password used in pdf encryption.
            </summary>
    </member>
    <member name="P:Aspose.Pdf.Generator.Security.IsPrintingAllowed">
      <summary>
            Gets or sets a bool value that indicates whether printing is allowed. Default is true.
            </summary>
      <remarks>
            To fully disable Pdf documents to be printable both <see cref="P:Aspose.Pdf.Generator.Security.IsPrintingAllowed" /> and <see cref="P:Aspose.Pdf.Generator.Security.IsDegradedPrintingAllowed" /> should be false.  
            </remarks>
    </member>
    <member name="P:Aspose.Pdf.Generator.Security.IsContentsModifyingAllowed">
      <summary>
            Gets or sets a bool value that indicates whether modifying contents is allowed. 
            Default is true.
            </summary>
    </member>
    <member name="P:Aspose.Pdf.Generator.Security.IsCopyingAllowed">
      <summary>
            Gets or sets a bool value that indicates whether copying or otherwise extracting 
            text and graphics from the document is allowed. Default is true.
            </summary>
    </member>
    <member name="P:Aspose.Pdf.Generator.Security.IsAnnotationsModifyingAllowed">
      <summary>
            Gets or sets a bool value that indicates whether adding or modifying text annotations 
            is allowed. Default is true.
            </summary>
    </member>
    <member name="P:Aspose.Pdf.Generator.Security.IsFormFillingAllowed">
      <summary>
            Gets or sets a bool value that indicates whether filling in forms and 
            signing the document is allowed. Default is true.
            </summary>
    </member>
    <member name="P:Aspose.Pdf.Generator.Security.IsScreenReadersAllowed">
      <summary>
            Gets or sets a bool value that indicates whether screen readers are allowed. 
            Default is true.
            </summary>
    </member>
    <member name="P:Aspose.Pdf.Generator.Security.IsDocumentAssemblyingAllowed">
      <summary>
            Gets or sets a bool value that indicates whether assembling the document is allowed. 
            This includes inserting, rotating, or deleting pages and creating
            navigation elements such as bookmarks or thumbnail images. Default is true.
            </summary>
    </member>
    <member name="P:Aspose.Pdf.Generator.Security.IsDegradedPrintingAllowed">
      <summary>
            Gets or sets a bool value that indicates whether printing in low resolution is allowed. 
            Default is true.
            </summary>
      <remarks>
            To fully disable Pdf documents to be printable both <see cref="P:Aspose.Pdf.Generator.Security.IsPrintingAllowed" /> and <see cref="P:Aspose.Pdf.Generator.Security.IsDegradedPrintingAllowed" /> should be false.  
            </remarks>
    </member>
    <member name="P:Aspose.Pdf.Generator.Security.IsDefaultAllAllowed">
      <summary>
            Gets or sets a bool value that indicates if all permissions are set to allowed as default. 
            Default value is true. If this property is set to false, then all permissions are set to 
            NOT allowed.
            </summary>
    </member>
    <member name="T:Aspose.Pdf.Generator.Segment">
      <summary>
             Represents a segment in a <see cref="F:Aspose.Pdf.Generator.Segment.Text" /> paragraph.
             </summary>
      <example>
        <code>
             [C#]
            	Pdf pdf1 = new Pdf();
            
            	Section sec1 = pdf1.Sections.Add();
            
            	Text text1 = new Text(sec1,"seg1 ");
            	sec1.Paragraphs.Add(text1);
            
            	Segment seg2 = text1.Segments.Add("seg2");
            	seg2.TextInfo.Color = new Aspose.Pdf.Generator.Color("Red");
            	seg2.TextInfo.FontSize = 16;
            
             pdf1.Save(...);
             
             [Visual Basic]
            	Dim pdf1 As Pdf =  New Pdf() 
            
            	Dim sec1 As Section =  pdf1.Sections.Add() 
            
            	Dim text1 As Text =  New Text(sec1,"seg1 ") 
            	sec1.Paragraphs.Add(text1)
             
            	Dim seg2 As Segment =  text1.Segments.Add("seg2") 
            	seg2.TextInfo.Color = New Aspose.Pdf.Generator.Color("Red")
            	seg2.TextInfo.FontSize = 16
             
             pdf1.Save(...)
             
             [XML]
             &lt;?xml version="1.0" encoding="utf-8" ?&gt;
             &lt;Pdf xmlns="Aspose.Pdf"&gt;
            		&lt;Section&gt;
            			&lt;Text&gt;
            				&lt;Segment&gt;seg1 &lt;/Segment&gt;
            				&lt;Segment Color="Red" FontSize="16"&gt;seg2 &lt;/Segment&gt;
            			&lt;/Text&gt;
            		&lt;/Section&gt;
             &lt;/Pdf&gt;
             
             </code>
      </example>
    </member>
    <member name="M:Aspose.Pdf.Generator.Segment.#ctor(System.String)">
      <summary>
            Initializes a new instance of the <see cref="T:Aspose.Pdf.Generator.Segment" /> class.
            </summary>
      <param name="content">The content of the segment.</param>
    </member>
    <member name="M:Aspose.Pdf.Generator.Segment.#ctor(System.String,Aspose.Pdf.Generator.TextInfo)">
      <summary>
            Initializes a new instance of the <see cref="T:Aspose.Pdf.Generator.Segment" /> class.
            </summary>
      <param name="content">The content of the segment.</param>
      <param name="info">The text format info of the segment.</param>
    </member>
    <member name="M:Aspose.Pdf.Generator.Segment.#ctor(Aspose.Pdf.Generator.Text)">
      <summary>
            Initializes a new instance of the <see cref="T:Aspose.Pdf.Generator.Segment" /> class.
            </summary>
      <param name="text">
      </param>
      <remarks>
            This constructor can inherit common property values from the specified 
            <see cref="F:Aspose.Pdf.Generator.Segment.Text" /> object.
            </remarks>
    </member>
    <member name="M:Aspose.Pdf.Generator.Segment.CompleteClone">
      <summary>
            Clones a new <see cref="T:Aspose.Pdf.Generator.Segment" /> object. All members are cloned.
            </summary>
      <returns>The new <see cref="T:Aspose.Pdf.Generator.Segment" /> object.</returns>
    </member>
    <member name="M:Aspose.Pdf.Generator.Segment.IsNumeric">
      <summary>
            Whether the segment is numeric
             </summary>
    </member>
    <member name="P:Aspose.Pdf.Generator.Segment.IsAutoHyphenated">
      <summary>
            Gets or sets a bool value that indicates whehter the text is hyphenated automatically.
            </summary>
    </member>
    <member name="P:Aspose.Pdf.Generator.Segment.TextInfo">
      <summary>
            Gets or sets a <see cref="P:Aspose.Pdf.Generator.Segment.TextInfo" /> object that indicates the text info of the segment.
            </summary>
    </member>
    <member name="P:Aspose.Pdf.Generator.Segment.FootNote">
      <summary>
            get or set the FootNote object that indicates the footnote of the current segment.
            </summary>
    </member>
    <member name="P:Aspose.Pdf.Generator.Segment.EndNote">
      <summary>
            get or set the EndNote object that indicates the endnote of the current segment.
            </summary>
    </member>
    <member name="P:Aspose.Pdf.Generator.Segment.Content">
      <summary>
            Gets or sets a string that indicates the content of the text segment.
            </summary>
    </member>
    <member name="P:Aspose.Pdf.Generator.Segment.DateFormat">
      <summary>
            Gets or sets a string that indicates the date format of the replaceable date symbol($D). It's value can be 
            "d", "D", "f", "F","g", "G","m","r","s","t", "T","u", "U","y","dddd, MMMM dd yyyy","ddd, MMM d \"'\"yy","dddd, MMMM dd","M/yy","dd-MM-yy".
            The default value is "d". Please refer to example of DateTime.ToString() in MSDN.
            </summary>
    </member>
    <member name="P:Aspose.Pdf.Generator.Segment.IsSymbolReplaceable">
      <summary>
            Whether replace symbols like $p or not.
            </summary>
      <summary>
            Gets or sets a bool value that indicates whether a symbol like $p is replaceable or not. 
            Default is true.
            </summary>
    </member>
    <member name="P:Aspose.Pdf.Generator.Segment.ID">
      <summary>
            Gets or sets a string that indicates the ID of the segment.
            </summary>
    </member>
    <member name="P:Aspose.Pdf.Generator.Segment.Hyperlink">
      <summary>
            Gets or sets a <see cref="P:Aspose.Pdf.Generator.Segment.Hyperlink" /> object that indicates the hyper link info of the segment.
            </summary>
    </member>
    <member name="P:Aspose.Pdf.Generator.Segment.InlineParagraph">
      <summary>
             Gets or sets a <see cref="T:Aspose.Pdf.Generator.Paragraph" /> object that indicates the inline paragraph. If this 
             property is set, the segment become the inline paragraph of Text and the <see cref="P:Aspose.Pdf.Generator.Segment.Content" /> 
             is disabled. <see cref="T:Aspose.Pdf.Generator.Image" />, <see cref="T:Aspose.Pdf.Generator.Graph" />, <see cref="T:Aspose.Pdf.Generator.FormField" /> and 
             <see cref="T:Aspose.Pdf.Generator.Attachment" /> can be used as inline paragraph.
             </summary>
      <example>
        <code>
             [C#]
             Pdf p = new Pdf();
            
            	Section sec1 = p.Sections.Add();
            
            	Text text1 = new Text();
            	sec1.Paragraphs.Add(text1);
            
            	text1.Segments.Add("This is a test for inline");
            	Segment seg2 = text1.Segments.Add();
            
            	Image img1 = new Image();
            	img1.ImageInfo.File = "c:/images/logo.gif";
            	seg2.InlineParagraph = img1;
            
            	p.Save("d:/test/test.pdf");
             
             [VB.NET]
             Dim p As Pdf =  New Pdf() 
             
            	Dim sec1 As Section =  p.Sections.Add() 
             
            	Dim text1 As Text =  New Text() 
            	sec1.Paragraphs.Add(text1)
             
            	text1.Segments.Add("This is a test for inline")
            	Dim seg2 As Segment =  text1.Segments.Add() 
            
            	Dim img1 As Image =  New Image() 
            	img1.ImageInfo.File = "c:/images/logo.gif"
            	seg2.InlineParagraph = img1
            
            	p.Save("d:/test/test.pdf")
            
             [XML]
             &lt;Pdf xmlns="Aspose.Pdf"&gt;
            		&lt;Section&gt;
            			&lt;Text&gt;
            				&lt;Segment FontSize="16"&gt;This is a inline image: &lt;/Segment&gt;
            				&lt;Segment&gt;
            					&lt;Image File="c:\images\logo.gif" /&gt;
            				&lt;/Segment&gt;
            			&lt;/Text&gt;
            		&lt;/Section&gt;
            	&lt;/Pdf&gt; 
             </code>
      </example>
    </member>
    <member name="T:Aspose.Pdf.Generator.Segments">
      <summary>
             Represents a collection of <see cref="T:Aspose.Pdf.Generator.Segment" /> objects.
             </summary>
      <example>
        <code>
             [C#]
            	Pdf pdf1 = new Pdf();
            
            	Section sec1 = pdf1.Sections.Add();
            
            	Text text1 = new Text(sec1,"seg1 ");
            	sec1.Paragraphs.Add(text1);
            
            	Segment seg2 = text1.Segments.Add("seg2");
            	seg2.TextInfo.Color = new Aspose.Pdf.Generator.Color("Red");
            	seg2.TextInfo.FontSize = 16;
            
             pdf1.Save(...);
             
             [Visual Basic]
            	Dim pdf1 As Pdf =  New Pdf() 
            
            	Dim sec1 As Section =  pdf1.Sections.Add() 
            
            	Dim text1 As Text =  New Text(sec1,"seg1 ") 
            	sec1.Paragraphs.Add(text1)
             
            	Dim seg2 As Segment =  text1.Segments.Add("seg2") 
            	seg2.TextInfo.Color = New Aspose.Pdf.Generator.Color("Red")
            	seg2.TextInfo.FontSize = 16
             
             pdf1.Save(...)
             
             [XML]
             &lt;?xml version="1.0" encoding="utf-8" ?&gt;
             &lt;Pdf xmlns="Aspose.Pdf"&gt;
            		&lt;Section&gt;
            			&lt;Text&gt;
            				&lt;Segment&gt;seg1 &lt;/Segment&gt;
            				&lt;Segment Color="Red" FontSize="16"&gt;seg2 &lt;/Segment&gt;
            			&lt;/Text&gt;
            		&lt;/Section&gt;
             &lt;/Pdf&gt;
             
             </code>
      </example>
    </member>
    <member name="M:Aspose.Pdf.Generator.Segments.#ctor">
      <summary>
            Initializes a new instance of the <see cref="T:Aspose.Pdf.Generator.Segments" /> class.
            </summary>
    </member>
    <member name="M:Aspose.Pdf.Generator.Segments.Add(Aspose.Pdf.Generator.Segment)">
      <summary>
            Adds a new <see cref="T:Aspose.Pdf.Generator.Segment" /> object into the collection.
            </summary>
      <param name="segment">The <see cref="T:Aspose.Pdf.Generator.Segment" /> object to be added.</param>
    </member>
    <member name="M:Aspose.Pdf.Generator.Segments.Add(System.String)">
      <summary>
            Initializes a new instance of the <see cref="T:Aspose.Pdf.Generator.Segment" /> class and add it to the Segments collection
            </summary>
      <param name="segmentString">The string content of the segment.</param>
      <returns>The <see cref="T:Aspose.Pdf.Generator.Segment" /> object.</returns>
    </member>
    <member name="M:Aspose.Pdf.Generator.Segments.Add">
      <summary>
            Initializes a new instance of the <see cref="T:Aspose.Pdf.Generator.Segment" /> class and add it to the Segments collection
            </summary>
      <returns>The <see cref="T:Aspose.Pdf.Generator.Segment" /> object.</returns>
    </member>
    <member name="M:Aspose.Pdf.Generator.Segments.Insert(System.Int32,Aspose.Pdf.Generator.Segment)">
      <summary>
            Inserts a new <see cref="T:Aspose.Pdf.Generator.Segment" /> object into the collection at specified position.
            </summary>
      <param name="index">The zero-based index at which the <see cref="T:Aspose.Pdf.Generator.Segment" /> object should be inserted.</param>
      <param name="segment">The <see cref="T:Aspose.Pdf.Generator.Segment" /> object to be inserted.</param>
    </member>
    <member name="M:Aspose.Pdf.Generator.Segments.Insert(Aspose.Pdf.Generator.Segment,Aspose.Pdf.Generator.Segment)">
      <summary>
            Inserts a new <see cref="T:Aspose.Pdf.Generator.Segment" /> object into the collection after specified Segment object.
            </summary>
      <param name="segmentToInsertAfter">The <see cref="T:Aspose.Pdf.Generator.Segment" /> object to insert after.</param>
      <param name="newSegment">The <see cref="T:Aspose.Pdf.Generator.Segment" /> object to be inserted.</param>
    </member>
    <member name="M:Aspose.Pdf.Generator.Segments.Remove(Aspose.Pdf.Generator.Segment)">
      <summary>
            Removes a <see cref="T:Aspose.Pdf.Generator.Segment" /> object from the collection.
            </summary>
      <param name="segmentToRemove">The <see cref="T:Aspose.Pdf.Generator.Segment" /> object to be romoved.</param>
    </member>
    <member name="M:Aspose.Pdf.Generator.Segments.IndexOf(Aspose.Pdf.Generator.Segment)">
      <summary>
            Gets the index of a specified <see cref="T:Aspose.Pdf.Generator.Segment" /> object in the collection.
            </summary>
      <param name="segment">The specified <see cref="T:Aspose.Pdf.Generator.Segment" /> object.</param>
      <returns>The index value.</returns>
    </member>
    <member name="M:Aspose.Pdf.Generator.Segments.CopyTo(Aspose.Pdf.Generator.Segment[],System.Int32)">
      <summary>
            Copies the elements to a <see cref="T:Aspose.Pdf.Generator.Segment" /> object array, starting at a specified array index.
            </summary>
      <param name="segmentArray">The <see cref="T:Aspose.Pdf.Generator.Segment" /> object array.</param>
      <param name="index">The start index.</param>
    </member>
    <member name="P:Aspose.Pdf.Generator.Segments.Item(System.Int32)">
      <summary>
            Gets or sets a <see cref="T:Aspose.Pdf.Generator.Segment" /> object from the collection according to Segment index.
            </summary>
    </member>
    <member name="P:Aspose.Pdf.Generator.Segments.Item(System.String)">
      <summary>
            Gets or sets a <see cref="T:Aspose.Pdf.Generator.Segment" /> object from the collection according to Segment ID.
            </summary>
    </member>
    <member name="T:Aspose.Pdf.Generator.Shapes">
      <summary>
             Represents a collection of <see cref="T:Aspose.Pdf.Generator.Shape" /> objects.
             </summary>
      <example>
        <code>
             [C#]
            	Pdf pdf1 = new Pdf();
            			
            	Section sec1 = pdf1.Sections.Add();
            			
            	Graph graph1 = new Graph(sec1,100,400);
            	sec1.Paragraphs.Add(graph1);
            			
            	float[] posArr = new float[]{0,0,200,80,300,40,350,90};
            	Curve curve1 = new Curve(graph1,posArr);
            	graph1.Shapes.Add(curve1);
            
            	pdf1.Save(...);
            	
            	[Visual Basic]
            	Dim pdf1 As Pdf = New Pdf()
            
            	Dim sec1 As Section = pdf1.Sections.Add()
            
            	Dim graph1 As Graph = New Graph(sec1, 100, 400)
            	sec1.Paragraphs.Add(graph1)
            
            	Dim posArr() As Single = New Single() {0, 0, 200, 80, 300, 40, 350, 90}
            
            	Dim curve1 As Curve = New Curve(graph1, posArr)
            	graph1.Shapes.Add(curve1)
            	
            	pdf1.Save(...)
            	
            	[XML]
            	&lt;?xml version="1.0" encoding="utf-8" ?&gt;
            	&lt;Pdf xmlns="Aspose.Pdf"&gt;
            		&lt;Section&gt;
            			&lt;Graph Height="100" Width="400"&gt;
            				&lt;Curve Position="0 0 200 80 300 40 350 90" /&gt;
            			&lt;/Graph&gt;
            		&lt;/Section&gt;
            	&lt;/Pdf&gt;
             </code>
      </example>
    </member>
    <member name="M:Aspose.Pdf.Generator.Shapes.#ctor">
      <summary>
            Initializes a new instance of the <see cref="T:Aspose.Pdf.Generator.Shapes" /> class.
            </summary>
    </member>
    <member name="M:Aspose.Pdf.Generator.Shapes.Add(Aspose.Pdf.Generator.Shape)">
      <summary>
            Adds a new <see cref="T:Aspose.Pdf.Generator.Shape" /> object into the collection.
            </summary>
      <param name="shape">The <see cref="T:Aspose.Pdf.Generator.Shape" /> object to be added.</param>
    </member>
    <member name="M:Aspose.Pdf.Generator.Shapes.Remove(Aspose.Pdf.Generator.Shape)">
      <summary>
            Removes a <see cref="T:Aspose.Pdf.Generator.Shape" /> object from the collection.
            </summary>
      <param name="shapeToRemove">The <see cref="T:Aspose.Pdf.Generator.Shape" /> object to be romoved.</param>
    </member>
    <member name="M:Aspose.Pdf.Generator.Shapes.CopyTo(Aspose.Pdf.Generator.Shape[],System.Int32)">
      <summary>
            Copies the elements to a <see cref="T:Aspose.Pdf.Generator.Shape" /> object array, starting at a specified array index.
            </summary>
      <param name="shapeArray">The shapes array.</param>
      <param name="index">The start index.</param>
    </member>
    <member name="M:Aspose.Pdf.Generator.Shapes.IndexOf(Aspose.Pdf.Generator.Shape)">
      <summary>
            Gets the index of a specified <see cref="T:Aspose.Pdf.Generator.Shape" /> object in the collection.
            </summary>
      <param name="shape">The specified <see cref="T:Aspose.Pdf.Generator.Shape" /> object.</param>
      <returns>The index value.</returns>
    </member>
    <member name="P:Aspose.Pdf.Generator.Shapes.Item(System.Int32)">
      <summary>
            Gets or sets a <see cref="T:Aspose.Pdf.Generator.Shape" /> object from the collection according to Shape index.
            </summary>
    </member>
    <member name="P:Aspose.Pdf.Generator.Shapes.Item(System.String)">
      <summary>
            Gets or sets a <see cref="T:Aspose.Pdf.Generator.Shape" /> object from the collection according to Shape ID.
            </summary>
    </member>
    <member name="T:Aspose.Pdf.Generator.Table">
      <summary>
             Represents a table <see cref="T:Aspose.Pdf.Generator.Paragraph" /> in a Pdf document.
             </summary>
      <example>
        <code>
             [C#]
            	Pdf pdf1 = new Pdf();
            
            	Section sec1 = pdf1.Sections.Add();
            
            	Aspose.Pdf.Generator.Table table1 = new Aspose.Pdf.Generator.Table();
            	sec1.Paragraphs.Add(table1);
            	table1.ColumnWidths = "70 2cm";
            
            	Row row1 = table1.Rows.Add();
            
            	Cell cell1Row1 = row1.Cells.Add("ColumnsSpan = 2");
            	cell1Row1.ColumnsSpan = 2;
            	cell1Row1.Border = new BorderInfo((int)BorderSide.All,0.5F);
            
            	Row row2 = table1.Rows.Add();
            
            	Cell cell1Row2 = row2.Cells.Add("cell1");
            	cell1Row2.Border = new BorderInfo((int)BorderSide.All,0.5F);
            
            	Cell cell2Row2 = row2.Cells.Add("cell2");
            	cell2Row2.Border = new BorderInfo((int)BorderSide.All,0.5F,new Aspose.Pdf.Generator.Color("Red"));
            
             pdf1.Save(...);
             
             [Visual Basic]
            	Dim pdf1 As Pdf = New Pdf()
            
            	Dim sec1 As Section = pdf1.Sections.Add()
            
            	Dim table1 As Aspose.Pdf.Generator.Table = New Aspose.Pdf.Generator.Table()
            	sec1.Paragraphs.Add(table1)
            	table1.ColumnWidths = "70 2cm"
            
            	Dim row1 As Row = table1.Rows.Add()
            
            	Dim cell1Row1 As Cell = row1.Cells.Add("ColumnsSpan = 2")
            	cell1Row1.ColumnsSpan = 2
            	cell1Row1.Border = New BorderInfo(CType(BorderSide.All, Integer), 0.5)
            
            	Dim row2 As Row = table1.Rows.Add()
            
            	Dim cell1Row2 As Cell = row2.Cells.Add("cell1")
            	cell1Row2.Border = New BorderInfo(CType(BorderSide.All, Integer), 0.5)
            
            	Dim cell2Row2 As Cell = row2.Cells.Add("cell2")
            	cell2Row2.Border = New BorderInfo(CType(BorderSide.All, Integer), 0.5, New Aspose.Pdf.Generator.Color("Red"))
             
             pdf1.Save(...)
             
             [XML]
            	&lt;Pdf xmlns="Aspose.Pdf"&gt;
            		&lt;Section&gt;
            			&lt;Table ColumnWidths="70 2cm"&gt;
            				&lt;Row&gt;
            					&lt;Cell ColumnsSpan="2"&gt;
            						&lt;Border&gt;
            							&lt;All LineWidth="0.5"&gt;&lt;/All&gt;
            						&lt;/Border&gt;
            						&lt;Text&gt;
            							&lt;Segment&gt;ColumnsSpan = 2&lt;/Segment&gt;
            						&lt;/Text&gt;
            					&lt;/Cell&gt;
            				&lt;/Row&gt;
            				&lt;Row&gt;
            					&lt;Cell&gt;
            						&lt;Border&gt;
            							&lt;All LineWidth="0.5"&gt;&lt;/All&gt;
            						&lt;/Border&gt;
            						&lt;Text&gt;
            							&lt;Segment&gt;cell1&lt;/Segment&gt;
            						&lt;/Text&gt;
            					&lt;/Cell&gt;
            					&lt;Cell&gt;
            						&lt;Border&gt;
            							&lt;All LineWidth="0.5" Color="Red"&gt;&lt;/All&gt;
            						&lt;/Border&gt;
            						&lt;Text&gt;
            							&lt;Segment&gt;cell2&lt;/Segment&gt;
            						&lt;/Text&gt;
            					&lt;/Cell&gt;
            				&lt;/Row&gt;
            			&lt;/Table&gt;
            		&lt;/Section&gt;
            	&lt;/Pdf&gt;
             </code>
      </example>
    </member>
    <member name="M:Aspose.Pdf.Generator.Table.#ctor">
      <summary>
            Initializes a new instance of the <see cref="T:Aspose.Pdf.Generator.Table" /> class.
            </summary>
    </member>
    <member name="M:Aspose.Pdf.Generator.Table.#ctor(Aspose.Pdf.Generator.Section)">
      <summary>
            Initializes a new instance of the <see cref="T:Aspose.Pdf.Generator.Table" /> class in the <see cref="T:Aspose.Pdf.Generator.Section" />.
            </summary>
      <param name="section">The section object where the table is in.</param>
    </member>
    <member name="M:Aspose.Pdf.Generator.Table.#ctor(Aspose.Pdf.Generator.Cell)">
      <summary>
            Initializes a new instance of the <see cref="T:Aspose.Pdf.Generator.Table" /> class in the <see cref="T:Aspose.Pdf.Generator.Cell" />.
            </summary>
      <param name="cell">The cell object where the table is in.</param>
    </member>
    <member name="F:Aspose.Pdf.Generator.Table.UseTOCasTargetList">
      <summary>
            Get or set a bool value that indicates whether the table will be referenced in TOC instead of special TableList
            </summary>
    </member>
    <member name="F:Aspose.Pdf.Generator.Table.CornerStyle">
      <summary>
            The border corner style.
            </summary>
    </member>
    <member name="M:Aspose.Pdf.Generator.Table.ImportArray(System.String[],System.Int32,System.Byte,System.Boolean)">
      <summary>
            Imports an array of string into the table. 
            </summary>
      <param name="stringArray">The string array.</param>
      <param name="firstRow">The zero oriented row number of the first cell to import in.</param>
      <param name="firstColumn">The zero oriented column number of the first cell to import in.</param>
      <param name="isLeftColumnsFilled">If the value of this parameter is true,in the below rows of 
            the first import row, columns will be filled at the first column of the table. Otherwise,
            columns in the below rows will be filled at the first import column specified by the firstColumn
            parameter.</param>
    </member>
    <member name="M:Aspose.Pdf.Generator.Table.ImportArray(System.Int32[],System.Int32,System.Byte,System.Boolean)">
      <summary>
            Imports an array of integer into the table. 
            </summary>
      <param name="intArray">The integer array.</param>
      <param name="firstRow">The zero oriented row number of the first cell to import in.</param>
      <param name="firstColumn">The zero oriented column number of the first cell to import in.</param>
      <param name="isLeftColumnsFilled">If the value of this parameter is true,in the below rows of 
            the first import row, columns will be filled at the first column of the table. Otherwise,
            columns in the below rows will be filled at the first import column specified by the firstColumn
            parameter.</param>
    </member>
    <member name="M:Aspose.Pdf.Generator.Table.ImportArray(System.Double[],System.Int32,System.Byte,System.Boolean)">
      <summary>
            Imports an array of double number into the table. 
            </summary>
      <param name="doubleArray">The double number array.</param>
      <param name="firstRow">The zero oriented row number of the first cell to import in.</param>
      <param name="firstColumn">The zero oriented column number of the first cell to import in.</param>
      <param name="isLeftColumnsFilled">If the value of this parameter is true,in the below rows of 
            the first import row, columns will be filled at the first column of the table. Otherwise,
            columns in the below rows will be filled at the first import column specified by the firstColumn
            parameter.</param>
    </member>
    <member name="M:Aspose.Pdf.Generator.Table.ImportArray(System.Object[],System.Int32,System.Byte,System.Boolean)">
      <summary>
             Imports an array of object(any data type) into the table. 
             </summary>
      <param name="objArray">The object array.</param>
      <param name="firstRow">The zero oriented row number of the first cell to import in.</param>
      <param name="firstColumn">The zero oriented column number of the first cell to import in.</param>
      <param name="isLeftColumnsFilled">If the value of this parameter is true,in the below rows of 
             the first import row, columns will be filled at the first column of the table. Otherwise,
             columns in the below rows will be filled at the first import column specified by the firstColumn
             parameter.</param>
      <example>
        <code>
             [C#]
             Pdf pdf1 = new Pdf();
            
            	Section sec1 = pdf1.Sections.Add();
            
            	Aspose.Pdf.Generator.Table tab1 = new Aspose.Pdf.Generator.Table();
            	sec1.Paragraphs.Add(tab1);
            	tab1.ColumnWidths = "60 100 100";
            	tab1.DefaultCellBorder = new BorderInfo((int)BorderSide.All,0.1F);
            	tab1.DefaultCellTextInfo.Color = new Aspose.Pdf.Generator.Color("Red");
            
            	double[] darr = new Double[]{1.5,3.1415926,100000,20,4000,30.4512,45.67};
            	tab1.ImportArray(darr,1,1,true);
            
            	Aspose.Pdf.Generator.Table tab2 = new Aspose.Pdf.Generator.Table();
            	sec1.Paragraphs.Add(tab2);
            	tab2.ColumnWidths = "60 60 60 2cm 100";
            	tab2.DefaultCellBorder = new BorderInfo((int)BorderSide.All,0.1F);
            	tab2.DefaultCellTextInfo.FontSize = 8;
            
            	Row row1 = tab2.Rows.Add();
            	for(int i=1;i&lt;=5;i++)
            		row1.Cells.Add(i.ToString());
            	for(int j=2;j&lt;5;j++)
            	{
            		row1 = tab2.Rows.Add();
            		row1.Cells.Add(j.ToString());
            	}
            
            	tab2.ImportArray(darr,1,2,false);
            
            	pdf1.Save(...);
            
             [VisualBasic]
             
             Dim pdf1 As Pdf = New Pdf("e:\projects\CSharp\customer\Aspose.Pdf.lic")
            
            	Dim sec1 As Section = pdf1.Sections.Add()
            
            	Dim tab1 As Aspose.Pdf.Generator.Table = New Aspose.Pdf.Generator.Table()
            	sec1.Paragraphs.Add(tab1)
            	tab1.ColumnWidths = "60 100 100"
            	tab1.DefaultCellBorder = New BorderInfo(CType(BorderSide.All, Integer), 0.1F)
            	tab1.DefaultCellTextInfo.Color = New Aspose.Pdf.Generator.Color("Red")
            
            	Dim darr() As Double = New Double() {1.5, 3.1415926, 100000, 20, 4000, 30.4512, 45.67}
            
            	tab1.ImportArray(darr, 1, 1, True)
            
            	Dim tab2 As Aspose.Pdf.Generator.Table = New Aspose.Pdf.Generator.Table()
            	sec1.Paragraphs.Add(tab2)
            	tab2.ColumnWidths = "60 60 60 2cm 100"
            	tab2.DefaultCellBorder = New BorderInfo(CType(BorderSide.All, Integer), 0.1F)
            	tab2.DefaultCellTextInfo.FontSize = 8
            
            	Dim row1 As Row = tab2.Rows.Add()
            	Dim i As Integer
            	For i = 1 To 5 Step i + 1
            		row1.Cells.Add(i.ToString())
            	Next
            	Dim j As Integer
            	For j = 2 To 5 - 1 Step j + 1
            		row1 = tab2.Rows.Add()
            		row1.Cells.Add(j.ToString())
            	Next
            
            	tab2.ImportArray(darr, 1, 2, False)
            
            	pdf1.Save(...)
            
             </code>
      </example>
    </member>
    <member name="M:Aspose.Pdf.Generator.Table.ImportDataTable(System.Data.DataTable,System.Boolean,System.Int32,System.Byte)">
      <summary>
             Imports a <see cref="T:System.Data.DataTable" /> object into the table.
             </summary>
      <param name="dataTable">The <see cref="T:System.Data.DataTable" /> object to be imported.</param>
      <param name="isFieldNameShown">Indicates whether the field name of the datatable will be 
             imported to the first row.</param>
      <param name="firstRow">The zero oriented row number of the first cell to import in.</param>
      <param name="firstColumn">The zero oriented column number of the first cell to import in.</param>
      <example>
        <code>
             [C#]
            	DataTable dt = new DataTable("Employee");
            	dt.Columns.Add("Employee_ID",typeof(Int32));
            	dt.Columns.Add("Employee_Name",typeof(string));
            	dt.Columns.Add("Gender",typeof(string));
            	DataRow dr = dt.NewRow();
            	dr[0] = 1;
            	dr[1] = "John Smith";
            	dr[2] = "Male";
            	dt.Rows.Add(dr);
            	dr = dt.NewRow();
            	dr[0] = 2;
            	dr[1] = "Mary Miller";
            	dr[2] = "Female";
            	dt.Rows.Add(dr);
            
            	Pdf pdf1 = new Pdf();
            
            	Section sec1 = pdf1.Sections.Add();
            
            	Aspose.Pdf.Generator.Table tab1 = new Aspose.Pdf.Generator.Table();
            	sec1.Paragraphs.Add(tab1);
            	tab1.ColumnWidths = "40 100 100 100";
            	tab1.DefaultCellBorder = new BorderInfo((int)BorderSide.All,0.1F);
            
            	tab1.ImportDataTable(dt,true,0,1,3,3);
            
            	Row row1 = tab1.Rows[0];
            	foreach(Cell curCell in row1.Cells)
            	curCell.BackgroundColor = new Aspose.Pdf.Generator.Color("Blue");
            
            	pdf1.Save(...);
            	
            	[VisualBasic]
            	
            	Dim dt As DataTable = New DataTable("Employee")
            	dt.Columns.Add("Employee_ID", System.Type.GetType("System.Int32"))
            	dt.Columns.Add("Employee_Name", System.Type.GetType("System.String"))
            	dt.Columns.Add("Gender", System.Type.GetType("System.String"))
            	Dim dr As DataRow = dt.NewRow()
            	dr(0) = 1
            	dr(1) = "John Smith"
            	dr(2) = "Male"
            	dt.Rows.Add(dr)
            	dr = dt.NewRow()
            	dr(0) = 2
            	dr(1) = "Mary Miller"
            	dr(2) = "Female"
            	dt.Rows.Add(dr)
            
            	Dim pdf1 As Pdf = New Pdf("e:\projects\CSharp\customer\Aspose.Pdf.lic")
            
            	Dim sec1 As Section = pdf1.Sections.Add()
            
            	Dim tab1 As Aspose.Pdf.Generator.Table = New Aspose.Pdf.Generator.Table()
            	sec1.Paragraphs.Add(tab1)
            	tab1.ColumnWidths = "40 100 100 100"
            	tab1.DefaultCellBorder = New BorderInfo(CType(BorderSide.All, Integer), 0.1F)
            
            	tab1.ImportDataTable(dt, True, 0, 1, 3, 3)
            
            	Dim row1 As Row = tab1.Rows(0)
            	Dim curCell As Cell
            	For Each curCell In row1.Cells
            		curCell.BackgroundColor = New Aspose.Pdf.Generator.Color("Blue")
            	Next
            
            	pdf1.Save(...)
             </code>
      </example>
    </member>
    <member name="M:Aspose.Pdf.Generator.Table.ImportDataTable(System.Data.DataTable,System.Boolean,System.Int32,System.Byte,System.Int32,System.Int32)">
      <summary>
            Imports a <see cref="T:System.Data.DataTable" /> object into the table.
            </summary>
      <param name="dataTable">The <see cref="T:System.Data.DataTable" /> object to be imported.</param>
      <param name="isFieldNameShown">Indicates whether the field name of the datatable will be 
            imported to the first row.</param>
      <param name="firstRow">The zero oriented row number of the first cell to import in.</param>
      <param name="firstColumn">The zero oriented column number of the first cell to import in.</param>
      <param name="maxRows">Maximum rows to be imported.</param>
      <param name="maxColumns">Maximum columns to be imported,no more than 128.</param>
    </member>
    <member name="M:Aspose.Pdf.Generator.Table.ImportDataTable(System.Data.DataTable,System.Boolean,System.Int32,System.Byte,System.Int32[],System.Int32[])">
      <summary>
            Imports a <see cref="T:System.Data.DataTable" /> object with given rows and columns into the table.
            </summary>
      <param name="dataTable">The <see cref="T:System.Data.DataTable" /> object to be imported.</param>
      <param name="isFieldNameShown">Indicates whether the field name of the datatable will be 
            imported to the first row.</param>
      <param name="firstRow">The zero oriented row number of the first cell to import in.</param>
      <param name="firstColumn">The zero oriented column number of the first cell to import in.</param>
      <param name="dataRowIndex">The index of rows in <see cref="T:System.Data.DataTable" /> object.</param>
      <param name="dataColumnIndex">The index of columns in <see cref="T:System.Data.DataTable" /> object.</param>
    </member>
    <member name="M:Aspose.Pdf.Generator.Table.ImportDataView(System.Data.DataView,System.Boolean,System.Int32,System.Byte,System.Int32,System.Int32)">
      <summary>
            Imports a <see cref="T:System.Data.DataView" /> object into the table.
            </summary>
      <param name="dataView">The <see cref="T:System.Data.DataView" /> object to be imported.</param>
      <param name="isFieldNameShown">Indicates whether the field name of the datatable will be 
            imported to the first row.</param>
      <param name="firstRow">The zero oriented row number of the first cell to import in.</param>
      <param name="firstColumn">The zero oriented column number of the first cell to import in.</param>
      <param name="maxRows">Maximum rows to be imported.</param>
      <param name="maxColumns">Maximum columns to be imported,no more than 128.</param>
    </member>
    <member name="M:Aspose.Pdf.Generator.Table.Clone">
      <summary>
            Clones a new <see cref="T:Aspose.Pdf.Generator.Table" /> object. Table properties are cloned but rows in table is not cloned.
            </summary>
      <returns>The new table</returns>
    </member>
    <member name="M:Aspose.Pdf.Generator.Table.CompleteClone">
      <summary>
            Clones a new <see cref="T:Aspose.Pdf.Generator.Table" /> object. All members in the table are cloned.
            </summary>
      <returns>The new <see cref="T:Aspose.Pdf.Generator.Table" /> object.</returns>
    </member>
    <member name="M:Aspose.Pdf.Generator.Table.SetColumnTextInfo(System.Int32,Aspose.Pdf.Generator.TextInfo)">
      <summary>
            Sets the text format info of specified column.
            </summary>
      <param name="columnNumber">The number of the column to be set.</param>
      <param name="textInfo">The text info object to set.</param>
    </member>
    <member name="M:Aspose.Pdf.Generator.Table.GetMinColumnWidth(Aspose.Pdf.Generator.Pdf,System.Int32)">
      <summary>
            Gets the minimum column width at which no hyphenation needs for all cells in the column.
            Note that you can only use this method to get the minimum width for text paragraphs in the column.
            Other paragraph such as image will be ignored.
            </summary>
      <param name="pdf">The <see cref="T:Aspose.Pdf.Generator.Pdf" /> object that indicates the PDF document.</param>
      <param name="columnNumber">The column number which begins at 0.</param>
      <returns>The minimum with for the column.</returns>
      <example>
        <code>
            [C#]
            ...
            tab1.ImportArray(darr,0,0,true);
            tab1.SetColumnWidth(2,tab1.GetMinColumnWidth(pdf,2));
            ...
            
            [VisualBasic]
            tab1.ImportArray(darr,0,0,true)
            tab1.SetColumnWidth(2,tab1.GetMinColumnWidth(pdf,2))
            </code>
      </example>
    </member>
    <member name="M:Aspose.Pdf.Generator.Table.GetMaxColumnWidth(Aspose.Pdf.Generator.Pdf,System.Int32)">
      <summary>
            Gets the maximum column width which allows text in all cells in the column be shown in one line. 
            For example,if the text is "Thank you for considering Aspose",<see cref="M:Aspose.Pdf.Generator.Table.GetMinColumnWidth(Aspose.Pdf.Generator.Pdf,System.Int32)" /> 
            will return the width of "considering",and this method will return the width of 
            "Thank you for considering Aspose".
            Note that you can only use this method to get the maximum width for text paragraphs in the column.
            Other paragraph such as image will be ignored.
            </summary>
      <param name="pdf">The <see cref="T:Aspose.Pdf.Generator.Pdf" /> object that indicates the PDF document.</param>
      <param name="columnNumber">The column number which begins at 0.</param>
      <returns>The maximum with for the column.</returns>
      <example>
        <code>
            [C#]
            ...
            tab1.ImportArray(darr,0,0,true);
            tab1.SetColumnWidth(2,tab1.GetMaxColumnWidth(pdf,2));
            ...
            
            [VisualBasic]
            tab1.ImportArray(darr,0,0,true)
            tab1.SetColumnWidth(2,tab1.GetMaxColumnWidth(pdf,2))
            </code>
      </example>
    </member>
    <member name="M:Aspose.Pdf.Generator.Table.SetColumnWidth(System.Int32,System.Single)">
      <summary>
            Sets the width of specidied column. This method is used to adjust column width after all cells have 
            been added to table. Please see example of <see cref="M:Aspose.Pdf.Generator.Table.GetMinColumnWidth(Aspose.Pdf.Generator.Pdf,System.Int32)" />.
            </summary>
      <param name="columnNumber">The column number which begins at 0.</param>
      <param name="width">The width to be set.</param>
    </member>
    <member name="M:Aspose.Pdf.Generator.Table.GetCell(System.Int32,System.Int32,System.Boolean)">
      <summary>
            Gets a cell according to it's row and column index. In the object model of table, rows and cells 
            are represented by collections. When row span or column span is used, it is difficult to get cell 
            from the collections according to it's row and column index. This method is used to get the cell 
            when row span or column span is used.
            </summary>
      <param name="row">The 0-based row index.</param>
      <param name="column">The 0-based column index.</param>
      <param name="isTableChanged">If the table is changed after the last calling of this method 
            on the same table.</param>
      <returns>The cell at specified row and column.</returns>
    </member>
    <member name="M:Aspose.Pdf.Generator.Table.GetHeight(Aspose.Pdf.Generator.Pdf)">
      <summary>
            Gets the table height.
            </summary>
      <param name="doc">The <see cref="T:Aspose.Pdf.Generator.Pdf" /> object.</param>
      <returns>The row height in points.</returns>
    </member>
    <member name="M:Aspose.Pdf.Generator.Table.FormatTableWithFormatInfo(Aspose.Pdf.Generator.TableFormatInfo,System.Int32,System.Int32,System.Int32,System.Int32)">
      <summary>
            Format the table in specified columns and rows with given TableFormatInfo
            </summary>
      <param name="info">The TableFormatInfo Object.</param>
      <param name="firstColumn">The first column index.</param>
      <param name="firstRow">The first Row index.</param>
      <param name="maxRows">Maximum rows to be imported.</param>
      <param name="maxColumns">Maximum columns to be imported,no more than 128.</param>
    </member>
    <member name="M:Aspose.Pdf.Generator.Table.FormatRowsWithFormatInfo(Aspose.Pdf.Generator.TableFormatInfo,System.Int32,System.Int32)">
      <summary>
            Format the table in specified rows with given TableFormatInfo
            </summary>
      <param name="info">The TableFormatInfo Object.</param>
      <param name="firstRow">The first Row index.</param>
      <param name="maxRows">Maximum rows to be imported.</param>
    </member>
    <member name="M:Aspose.Pdf.Generator.Table.FormatColumnsWithFormatInfo(Aspose.Pdf.Generator.TableFormatInfo,System.Int32,System.Int32)">
      <summary>
            Format the table in specified columns with given TableFormatInfo
            </summary>
      <param name="info">The TableFormatInfo Object.</param>
      <param name="firstColumn">The first column index.</param>
      <param name="maxColumns">Maximum columns to be imported,no more than 128.</param>
    </member>
    <member name="P:Aspose.Pdf.Generator.Table.IsFitToPage">
      <summary>
            Gets or sets a bool value that indicates whether the table need to be placed on single page.
            Default value is false.The attribute is only valid when the table is the first paragraph on a page;
            </summary>
    </member>
    <member name="P:Aspose.Pdf.Generator.Table.IsNeedRepeating">
      <summary>
            Gets or sets a bool value that indicates whether the paragraph need to be repeated on next page.
            Default value is false.The attribute is only valid when the paragraph itself and the object its ReferenceParagraphID referred to both are included in RepeatingRows.
            </summary>
    </member>
    <member name="P:Aspose.Pdf.Generator.Table.ColumnWidths">
      <summary>
            Gets or sets a string that contains the width of each columns in this table. 
            The value of each column should be separated by blank.The default unit is point,
            but cm,inch and percentage of available width are also supported.For example,"120 2.5cm 1.5inch",
            or "60% 40%", The max column number is 1024,  
            </summary>
      <remarks>
            If this property is set, the FitWidth property of the <see cref="T:Aspose.Pdf.Generator.Cell" /> object needs not set. 
            </remarks>
    </member>
    <member name="P:Aspose.Pdf.Generator.Table.IsRowBroken">
      <summary>
            Gets or sets a bool value that indicates whether the row can be broken or not when its table 
            is broken. Default value is true.
            </summary>
    </member>
    <member name="P:Aspose.Pdf.Generator.Table.IsBroken">
      <summary>
            Gets or sets a bool value that indicates whether the table is allowed to be broken or not when 
            crossing pages.
            </summary>
    </member>
    <member name="P:Aspose.Pdf.Generator.Table.IsVerticalBroken">
      <summary>
            Gets or sets a bool value that indicates whether the table is broken vertically as the table
            is printed out of the right page margin.If The sub-table can be place in the same page,it will be placed after the original table in the same page.
            If The sub-table can't be place in the same page,it will be placed after the original table in the next page.
            The default value is false.
            </summary>
    </member>
    <member name="P:Aspose.Pdf.Generator.Table.IsOriginalVerticalBrokenTable">
      <summary>
            Gets or sets a bool value that indicates whether the table is the original vertical broken table
            </summary>
    </member>
    <member name="P:Aspose.Pdf.Generator.Table.IsVerticalBrokenInSamePage">
      <summary>
            Gets or sets a bool value that indicates whether the vertically broken table is in the same page.
            </summary>
    </member>
    <member name="P:Aspose.Pdf.Generator.Table.IsFirstRowRepeated">
      <summary>
            Gets or sets a bool value that indicates whether the first row is repeated when its table is broken.
            </summary>
    </member>
    <member name="P:Aspose.Pdf.Generator.Table.RepeatingRows">
      <summary>
            Gets or sets a int value that indicates how many rows from the first row will be repeated when 
            the table is broken across pages.
            </summary>
    </member>
    <member name="P:Aspose.Pdf.Generator.Table.IsFixedRowHeightContentClip">
      <summary>
            Gets or sets a value that indicates in case with fixed row height, do content will be truncated if it go out of margin
            </summary>
    </member>
    <member name="P:Aspose.Pdf.Generator.Table.RepeatingRowStyle">
      <summary>
            Text formatting style for table repeating rows
            </summary>
    </member>
    <member name="P:Aspose.Pdf.Generator.Table.Border">
      <summary>
            Gets or sets a <see cref="T:Aspose.Pdf.Generator.BorderInfo" /> object that indicates the table border info.
            </summary>
    </member>
    <member name="P:Aspose.Pdf.Generator.Table.Title">
      <summary>
            Gets or sets a string value that indicates the title of the table.
            </summary>
    </member>
    <member name="P:Aspose.Pdf.Generator.Table.Rows">
      <summary>
            Gets or sets a <see cref="P:Aspose.Pdf.Generator.Table.Rows" /> collection that indicates all rows in the table.
            </summary>
    </member>
    <member name="P:Aspose.Pdf.Generator.Table.FixedWidth">
      <summary>
             Gets or sets a float value that indicates the fixed width of the table.
            <BLOCKQUOTE class="dtBlock"><Font color="red">NOTE: This member is now obsolete.</Font></BLOCKQUOTE><BLOCKQUOTE class="dtBlock"> 
             You should use <see cref="P:Aspose.Pdf.Generator.Table.ColumnWidths" /> to set the column width of the table. 
             It will be removed 12 months later since release 3.0.0.0 in April 2006. Aspose apologizes for any inconvenience you may have experienced.</BLOCKQUOTE></summary>
    </member>
    <member name="P:Aspose.Pdf.Generator.Table.Alignment">
      <summary>
            Gets or sets a <see cref="T:Aspose.Pdf.Generator.AlignmentType" /> that indicates the paragraph alignment type.
            </summary>
    </member>
    <member name="P:Aspose.Pdf.Generator.Table.ColumnAdjustment">
      <summary>
            Gets or sets a <see cref="T:Aspose.Pdf.Generator.ColumnAdjustmentType" /> that indicates how to determine the width of columns.Default is Customized which means the column width are specified by manual.
            </summary>
    </member>
    <member name="P:Aspose.Pdf.Generator.Table.DefaultCellBorder">
      <summary>
            Gets or sets a <see cref="T:Aspose.Pdf.Generator.BorderInfo" /> object that indicates the default border style for all cells 
            in this table.
            </summary>
    </member>
    <member name="P:Aspose.Pdf.Generator.Table.DefaultCellTextInfo">
      <summary>
            Gets or sets a <see cref="T:Aspose.Pdf.Generator.TextInfo" /> object that indicates the default cell text format info.
            </summary>
    </member>
    <member name="P:Aspose.Pdf.Generator.Table.VerticalAlignment">
      <summary>
            Gets or sets a <see cref="T:Aspose.Pdf.Generator.VerticalAlignmentType" /> object that indicates the vertical 
            alignment type of all cells in the table.
            </summary>
    </member>
    <member name="P:Aspose.Pdf.Generator.Table.DefaultCellPadding">
      <summary>
            Gets or sets a <see cref="T:Aspose.Pdf.Generator.MarginInfo" /> object that indicates the default cell padding in the table.
            </summary>
    </member>
    <member name="P:Aspose.Pdf.Generator.Table.DefaultColumnWidth">
      <summary>
            Get or sets default column width in the table.
            The default unit is point, but cm and inch are also 
            supported. For example,FitWidth="2cm" or FitWidth="2inch".
            </summary>
    </member>
    <member name="P:Aspose.Pdf.Generator.Table.IsSingleHeaderShown">
      <summary>
            A bool value that indicates whether table with only a header(IsFirstRowRepeated=true and Rows.Count=1) 
            be shown. The default value is true.
            </summary>
    </member>
    <member name="P:Aspose.Pdf.Generator.Table.BackgroundColor">
      <summary>
            Gets or sets a <see cref="T:Aspose.Pdf.Generator.Color" /> object that indicates the background color of the table.
            </summary>
    </member>
    <member name="P:Aspose.Pdf.Generator.Table.BreakText">
      <summary>
            Gets or sets a <see cref="T:Aspose.Pdf.Generator.Text" /> object that will appear in the end of the table if it is continued to the next page.
            </summary>
    </member>
    <member name="P:Aspose.Pdf.Generator.Table.IsEmptyRowAtBottomShown">
      <summary>
            Gets or sets a bool value that indicates if the empty row at the bottom of the table be shown 
            in the PDF. When a table is larger and can't be display in one page, the table will be splited 
            into more tables. Sometimes the broken table has a empty row at the bottom. This property is 
            used to control the displaying of the empty row. The default value is false.
            </summary>
    </member>
    <member name="P:Aspose.Pdf.Generator.Table.IsWordWrapped">
      <summary>
            Gets or sets a boolean value that indicates the alignment type of the cell.
            </summary>
    </member>
    <member name="T:Aspose.Pdf.Generator.TabLeaderType">
      <summary>
            Enumerates the tab leader types.
            </summary>
    </member>
    <member name="F:Aspose.Pdf.Generator.TabLeaderType.Solid">
      <summary>
            Solid tab leader.
            </summary>
    </member>
    <member name="F:Aspose.Pdf.Generator.TabLeaderType.Dash">
      <summary>
            Dash tab leader.
            </summary>
    </member>
    <member name="F:Aspose.Pdf.Generator.TabLeaderType.Dot">
      <summary>
            Dot tab leader.
            </summary>
    </member>
    <member name="F:Aspose.Pdf.Generator.TabLeaderType.None">
      <summary>
            No tab leader.
            </summary>
    </member>
    <member name="T:Aspose.Pdf.Generator.TableFormatInfo">
      <summary>
            Represent a TableFormatInfo
            </summary>
      <example>
        <code>
            [C#]
            // Create an object of TableFormatInfo class.
            TableFormatInfo tfi = new TableFormatInfo();
            //Sets a string value that indicate currency symbol of money, the default is "$".
            tfi.CurrencySymbol = "$";
            // Format the table in specified columns and rows with given TableFormatInfo
            table.FormatTableWithFormatInfo(tfi,int firstColumn,int firstRow,int maxRows,int maxColumns);
            
            [Visual Basic]
            ' Create an object of TableFormatInfo class.
            Dim tfi As TableFormatInfo = New TableFormatInfo()
            'Sets a string value that indicate currency symbol of money, the default is "$".
            tfi.CurrencySymbol = "$"
            'Format the table in specified columns and rows with given TableFormatInfo   
            table.FormatTableWithFormatInfo(tfi,int firstColumn,int firstRow,int maxRows,int maxColumns)
            </code>
      </example>
    </member>
    <member name="P:Aspose.Pdf.Generator.TableFormatInfo.SymbolBehind">
      <summary>
            Gets or Sets a bool value that indicate whether the currency symbol of money is behind the number.
            The default value is false,the style is just like $100.If it setted true,the style is just like 100$.
            </summary>
    </member>
    <member name="P:Aspose.Pdf.Generator.TableFormatInfo.CurrencySymbol">
      <summary>
            Gets or Sets a string value that indicate symbol of money;
            the default is "$".
            </summary>
    </member>
    <member name="P:Aspose.Pdf.Generator.TableFormatInfo.ZeroStyle">
      <summary>
            Gets or Sets a int value that indicate the zeroStyle in table.
            the number 0 style means 0;
            the number 1 style means 0.0;
            the number 2 style means 0.00;
            the number 3 style means 0.000;
            anything else style means do noting;
            </summary>
    </member>
    <member name="T:Aspose.Pdf.Generator.TabStop">
      <summary>
            Represents a custom Tab stop position in a paragraph.
            </summary>
      <example>
        <code>
            [C#]
            //Create a text object 
            Text t1 = new Text("This #$TAB is a example for custom TAB stop positions.");
             
            //Assign an instance of TabStops to the TabStops property of text object
            t1.TabStops = new TabStops(); 
             
            //Call Add method of TabStops and pass a specified position as argument
            t1.TabStops.Add(150); 
             
            //Call Add method with specified position and tab leader type as Dot
            t1.TabStops.Add(350,TabLeaderType.Dot);
            
            [Visual Basic]
            'Create a text object 
            Dim t1 As Aspose.Pdf.Generator.Text = New Aspose.Pdf.Generator.Text("This #$TAB is a example for custom TAB stop positions.")
             
            'Call Add method of TabStops and pass a specified position as argument
            t1.TabStops = New TabStops t1.TabStops.Add(150) 
             
            'Initialize an instance of TabStops and call Add method with specified position and tab leader type as Dot
            t1.TabStops.Add(350, TabLeaderType.Dot)
            
            [XML]
            &lt;Text&gt; 
                 &lt;TabStops&gt; 
                     &lt;TabStop Position="150" /&gt; 
                     &lt;TabStop Position="350" LeaderType="Dot" /&gt; 
                 &lt;/TabStops&gt; 
                 &lt;Segment&gt;
                   This is a example for custom TAB stop positions.
                 &lt;/Segment&gt; 
            &lt;/Text&gt;
            </code>
      </example>
    </member>
    <member name="M:Aspose.Pdf.Generator.TabStop.#ctor">
      <summary>
            Initializes a new instance of the <see cref="T:Aspose.Pdf.Generator.TabStop" /> class.
            </summary>
    </member>
    <member name="P:Aspose.Pdf.Generator.TabStop.Position">
      <summary>
            Gets or sets a float value that indicates the tab stop position.
            </summary>
    </member>
    <member name="P:Aspose.Pdf.Generator.TabStop.LeaderType">
      <summary>
            Gets or sets a <see cref="T:Aspose.Pdf.Generator.TabLeaderType" /> enum that indicates the tab leader type.
            </summary>
    </member>
    <member name="P:Aspose.Pdf.Generator.TabStop.AlignmentType">
      <summary>
            Gets or sets a <see cref="T:Aspose.Pdf.Generator.TabAlignmentType" /> enumeration that indicates the custom tab 
            stop position alignment type.
            </summary>
    </member>
    <member name="T:Aspose.Pdf.Generator.TabStops">
      <summary>
            Represents a collection of <see cref="T:Aspose.Pdf.Generator.TabStop" /> objects.
            </summary>
      <example>
        <code>
            [C#]
            //Create a text object 
            Text t1 = new Text("This #$TAB is a example for custom TAB stop positions.");
             
            //Assign an instance of TabStops to the TabStops property of text object
            t1.TabStops = new TabStops(); 
             
            //Call Add method of TabStops and pass a specified position as argument
            t1.TabStops.Add(150); 
             
            //Call Add method with specified position and tab leader type as Dot
            t1.TabStops.Add(350,TabLeaderType.Dot);
            
            [Visual Basic]
            'Create a text object 
            Dim t1 As Aspose.Pdf.Generator.Text = New Aspose.Pdf.Generator.Text("This #$TAB is a example for custom TAB stop positions.")
             
            'Call Add method of TabStops and pass a specified position as argument
            t1.TabStops = New TabStops t1.TabStops.Add(150) 
             
            'Initialize an instance of TabStops and call Add method with specified position and tab leader type as Dot
            t1.TabStops.Add(350, TabLeaderType.Dot)
            
            [XML]
            &lt;Text&gt; 
                 &lt;TabStops&gt; 
                     &lt;TabStop Position="150" /&gt; 
                     &lt;TabStop Position="350" LeaderType="Dot" /&gt; 
                 &lt;/TabStops&gt; 
                 &lt;Segment&gt;
                   This is a example for custom TAB stop positions.
                 &lt;/Segment&gt; 
            &lt;/Text&gt;
            </code>
      </example>
    </member>
    <member name="M:Aspose.Pdf.Generator.TabStops.#ctor">
      <summary>
            Initializes a new instance of the <see cref="T:Aspose.Pdf.Generator.TabStops" /> class.
            </summary>
    </member>
    <member name="M:Aspose.Pdf.Generator.TabStops.Add">
      <summary>
            Initializes a new instance of the <see cref="T:Aspose.Pdf.Generator.TabStop" /> class and add it to the 
            TabStops collection.
            </summary>
      <returns>The new <see cref="T:Aspose.Pdf.Generator.TabStop" /> object.</returns>
    </member>
    <member name="M:Aspose.Pdf.Generator.TabStops.Add(System.Single)">
      <summary>
            Initializes a new instance of the <see cref="T:Aspose.Pdf.Generator.TabStop" /> class with specified position and 
            add it to the TabStops collection.
            </summary>
      <param name="position">The position of the tab stop.</param>
      <returns>The new <see cref="T:Aspose.Pdf.Generator.TabStop" /> object.</returns>
    </member>
    <member name="M:Aspose.Pdf.Generator.TabStops.Add(System.Single,Aspose.Pdf.Generator.TabLeaderType)">
      <summary>
            Initializes a new instance of the <see cref="T:Aspose.Pdf.Generator.TabStop" /> class with specified position and leader 
            type and add it to the TabStops collection.
            </summary>
      <param name="position">The position of the tab stop.</param>
      <param name="leaderType">The leader type of the tab stop.</param>
      <returns>The new <see cref="T:Aspose.Pdf.Generator.TabStop" /> object.</returns>
    </member>
    <member name="M:Aspose.Pdf.Generator.TabStops.Remove(Aspose.Pdf.Generator.TabStop)">
      <summary>
            Removes a <see cref="T:Aspose.Pdf.Generator.TabStop" /> object from the collection.
            </summary>
      <param name="stop">
      </param>
    </member>
    <member name="M:Aspose.Pdf.Generator.TabStops.Clone">
      <summary>
            Clones a new <see cref="T:Aspose.Pdf.Generator.TabStops" /> objects.
            </summary>
      <returns>The new <see cref="T:Aspose.Pdf.Generator.TabStops" /> object.</returns>
    </member>
    <member name="P:Aspose.Pdf.Generator.TabStops.Item(System.Int32)">
      <summary>
            Gets or sets a <see cref="T:Aspose.Pdf.Generator.TabStop" /> object from the collection according to TabStop index.
            </summary>
    </member>
    <member name="T:Aspose.Pdf.Generator.TextInfo">
      <summary>
             Encapsulates info for a <see cref="T:Aspose.Pdf.Generator.Text" /> paragraph.
             </summary>
      <example>
        <b>Note</b>: The custom PostScript font used in the example is from Jonathan Paterson's <a href="http://www.mlink.net/~paterson/piped-ps.zip">Pipe-Dream font</a>. 
             <code>
             [C#]
            	Pdf pdf1 = new Pdf();
            
            	Section sec1 = pdf1.Sections.Add();
            
            	Text text1 = new Text(sec1);
            	text1.Margin.Top = 30;
            	text1.TextInfo.BackgroundColor = new Aspose.Pdf.Generator.Color("Beige");
            	sec1.Paragraphs.Add(text1);
            
            	Segment segment1 = text1.Segments.Add("this is text content");
            	segment1.TextInfo.Alignment = AlignmentType.Center;
            	segment1.TextInfo.Color = new Aspose.Pdf.Generator.Color("Red");
            	segment1.TextInfo.FontSize = 16;
            	segment1.TextInfo.IsUnderline = true;
            
            	//TrueType font example
            	Text text2 = new Text(sec1);
            	text2.Margin.Top = 30;
            	sec1.Paragraphs.Add(text2);
            
            	Segment segment2 = text2.Segments.Add("This is TrueType font 'Arial Narrow Bold Italic'.");
            	segment2.TextInfo.FontSize = 20;
            	segment2.TextInfo.FontName = "Arial Narrow";
            	segment2.TextInfo.IsTrueTypeFontBold = true;
            	segment2.TextInfo.IsTrueTypeFontItalic = true;
            
            	//Embeded custom postscript font example
            	Text text3 = new Text(sec1);
            	text3.Margin.Top = 30;
            	sec1.Paragraphs.Add(text3);
            
            	Segment segment3 = text3.Segments.Add("CUSTOM PIPE DREAM FONT");
            	segment3.TextInfo.FontSize = 20;
            	segment3.TextInfo.FontName = "Pipe-Dream";
            	segment3.TextInfo.FontAfmFile = "E:/Projects/CSharp/Pdf-bak/fonts/PIPED___.AFM";
            	segment3.TextInfo.FontOutlineFile = "E:/Projects/CSharp/Pdf-bak/fonts/PIPED___.PFB";
            	segment3.TextInfo.FontEncodingFile = "E:/Projects/CSharp/Pdf-bak/fonts/cp1250.txt";
            	segment3.TextInfo.FontEncoding = "cp1250";
            	segment3.TextInfo.IsFontEmbedded = true;
             
             pdf1.Save(...);
            
             [Visual Basic] 
            	Dim pdf1 As Pdf =  New Pdf() 
            
            	Dim sec1 As Section =  pdf1.Sections.Add() 
            
            	Dim text1 As Text =  New Text(sec1) 
            	text1.Margin.Top = 30
            	text1.TextInfo.BackgroundColor = New Aspose.Pdf.Generator.Color("Beige")
            	sec1.Paragraphs.Add(text1)
            
            	Dim segment1 As Segment =  text1.Segments.Add("this is text content") 
            	segment1.TextInfo.Alignment = AlignmentType.Center
            	segment1.TextInfo.Color = New Aspose.Pdf.Generator.Color("Red")
            	segment1.TextInfo.FontSize = 16
            	segment1.TextInfo.IsUnderline = True
            
            	'TrueType font example
            	Dim text2 As Text =  New Text(sec1) 
            	text2.Margin.Top = 30
            	sec1.Paragraphs.Add(text2)
            
            	Dim segment2 As Segment =  text2.Segments.Add("This is TrueType font 'Arial Narrow Bold Italic'.") 
            	segment2.TextInfo.FontSize = 20
            	segment2.TextInfo.FontName = "Arial Narrow"
            	segment2.TextInfo.IsTrueTypeFontBold = True
            	segment2.TextInfo.IsTrueTypeFontItalic = True
            
            	'Embeded custom postscript font example
            	Dim text3 As Text =  New Text(sec1) 
            	text3.Margin.Top = 30
            	sec1.Paragraphs.Add(text3)
             
            	Dim segment3 As Segment =  text3.Segments.Add("CUSTOM PIPE DREAM FONT") 
            	segment3.TextInfo.FontSize = 20
            	segment3.TextInfo.FontName = "Pipe-Dream"
            	segment3.TextInfo.FontAfmFile = "E:/Projects/CSharp/Pdf-bak/fonts/PIPED___.AFM"
            	segment3.TextInfo.FontOutlineFile = "E:/Projects/CSharp/Pdf-bak/fonts/PIPED___.PFB"
            	segment3.TextInfo.FontEncodingFile = "E:/Projects/CSharp/Pdf-bak/fonts/cp1250.txt"
            	segment3.TextInfo.FontEncoding = "cp1250"
            	segment3.TextInfo.IsFontEmbedded = True
             
             pdf1.Save(...)
             
             [XML]
             &lt;?xml version="1.0" encoding="utf-8" ?&gt;
             &lt;Pdf xmlns="Aspose.Pdf"&gt;
            		&lt;Section&gt;
            			&lt;Text MarginTop="30" BackgroundColor="Beige"&gt;
            				&lt;Segment Alignment="center" Color="Red" FontSize="16"&gt;
            				this is text content
            				&lt;/Segment&gt;
            			&lt;/Text&gt;
            			&lt;Text MarginTop="30"&gt;
            				&lt;Segment FontSize="20" FontName="Arial Narrow"
            					IsTrueTypeFontBold="true" IsTrueTypeFontItalic="true"&gt;
            				This is TrueType font 'Arial Narrow Bold Italic'.
            				&lt;/Segment&gt;
            			&lt;/Text&gt;
            			&lt;Text MarginTop="30"&gt;
            				&lt;Segment FontSize="20" FontName="Pipe-Dream" FontEncoding="cp1250" 
            					IsFontEmbedded="true" FontAfmFile="E:/Projects/CSharp/Pdf-bak/fonts/PIPED___.AFM" 
            					FontOutlineFile="E:/Projects/CSharp/Pdf-bak/fonts/PIPED___.PFB" 
            					FontEncodingFile="E:/Projects/CSharp/Pdf-bak/fonts/cp1250.txt"&gt;
            				CUSTOM PIPE DREAM FONT
            				&lt;/Segment&gt;
            			&lt;/Text&gt;
            		&lt;/Section&gt;
             &lt;/Pdf&gt;
             
             </code></example>
    </member>
    <member name="M:Aspose.Pdf.Generator.TextInfo.#ctor">
      <summary>
            Initializes a new instance of the <see cref="T:Aspose.Pdf.Generator.TextInfo" /> class.
            </summary>
    </member>
    <member name="M:Aspose.Pdf.Generator.TextInfo.Clone">
      <summary>
            Clone a new <see cref="T:Aspose.Pdf.Generator.TextInfo" /> object.
            </summary>
      <returns>The new <see cref="T:Aspose.Pdf.Generator.TextInfo" /> object.</returns>
    </member>
    <member name="P:Aspose.Pdf.Generator.TextInfo.FontName">
      <summary>
            Gets or sets a string that indicates the text font name. Default is Times-Roman.
            </summary>
      <remarks>
            In Aspose.Pdf.Generator,three types of fonts is supported. The first type is base 14 font which are 
            Courier,Courier-Bold,Courier-BoldOblique,Courier-Oblique,Helvetica,Helvetica-Bold,Helvetica-BoldOblique,
            Helvetica-Oblique,Symbol,Times-Bold,Times-BoldItalic,Times-Italic,Times-Roman and ZapfDingbats. Only 
            font name are needed when using these fonts. The second type is postscript font. User should set the 
            FontAfmFile or FontPfmFile,FontEncodingFile and FontOutlineFile if want to embed font. The last type 
            is truetype font. User need to install the truetype font if it is not installed in the system. Truetype 
            font with unicode is supported. TruetypeFontFileName should be set when unicode is used. We recommend 
            that you use truetype font instead of postscript font becouse some type of postscript fonts are not supported.
            </remarks>
    </member>
    <member name="P:Aspose.Pdf.Generator.TextInfo.FontEncoding">
      <summary>
            Gets or sets a string that indicates the font encoding name. For 8-bit fonts, encoding 
            should be "builtin"(Original encoding used by non-text or non-Latin text fonts) , or 
            "winansi"(Windows code page 1252), or the name of an external encoding("cp1251" for example). 
            The default value is "winansi". 
            </summary>
    </member>
    <member name="P:Aspose.Pdf.Generator.TextInfo.IsUnicode">
      <summary>
            Gets or sets a bool value that indicates whether unicode is used.
            </summary>
    </member>
    <member name="P:Aspose.Pdf.Generator.TextInfo.IsFontEmbedded">
      <summary>
            Gets or sets a bool value that indicates if the font is embedded. Default is false.
            </summary>
    </member>
    <member name="P:Aspose.Pdf.Generator.TextInfo.FontSize">
      <summary>
            Gets or sets a float number that indicates the size of font. Unit is point. Default is 12.
            </summary>
    </member>
    <member name="P:Aspose.Pdf.Generator.TextInfo.StrokeWidth">
      <summary>
            Gets or sets a float number that indicates the width of the stroke.
            </summary>
    </member>
    <member name="P:Aspose.Pdf.Generator.TextInfo.IsTrueTypeFontBold">
      <summary>
            Gets or sets a bool value that indicates whether the TrueType font is bold. 		
            </summary>
      <remarks>
            Valid for TrueType fonts only.
            </remarks>
    </member>
    <member name="P:Aspose.Pdf.Generator.TextInfo.IsTrueTypeFontItalic">
      <summary>
            Gets or sets a bool value that indicates whether the TrueType font is italic.		
            </summary>
      <remarks>
            Valid for TrueType fonts only.
            </remarks>
    </member>
    <member name="P:Aspose.Pdf.Generator.TextInfo.FontAfmFile">
      <summary>
            Gets or sets a string that indicates the name of custom AFM font file. 
            </summary>
      <remarks>
            Valid for custom PostScript fonts only.
            You need to assign either <see cref="P:Aspose.Pdf.Generator.TextInfo.FontAfmFile" /> or <see cref="P:Aspose.Pdf.Generator.TextInfo.FontPfmFile" />. 
            If both are assigned <see cref="P:Aspose.Pdf.Generator.TextInfo.FontAfmFile" /> will be evaluated first.
            </remarks>
    </member>
    <member name="P:Aspose.Pdf.Generator.TextInfo.FontPfmFile">
      <summary>
            Gets or sets a string that indicates the name of custom PFM font file.
            </summary>
      <remarks>
            Valid for custom PostScript fonts only.
            You need to assign either <see cref="P:Aspose.Pdf.Generator.TextInfo.FontAfmFile" /> or <see cref="P:Aspose.Pdf.Generator.TextInfo.FontPfmFile" />. 
            If both are assigned <see cref="P:Aspose.Pdf.Generator.TextInfo.FontAfmFile" /> will be evaluated first.
            </remarks>
    </member>
    <member name="P:Aspose.Pdf.Generator.TextInfo.FontOutlineFile">
      <summary>
            Gets or sets a string that indicates the name of custom font outline file. 
            This property is needed when embedding custom PostScript font into PDF files.
            </summary>
      <remarks>
        <b>Valid for custom PostScript fonts only.</b>
      </remarks>
    </member>
    <member name="P:Aspose.Pdf.Generator.TextInfo.FontEncodingFile">
      <summary>
            Gets or sets a string that indicates the name of font encoding file. 		
            Font encoding files are available at <a href="http://www.unicode.org/Public/MAPPINGS/VENDORS/MICSFT/WINDOWS/">http://www.unicode.org/Public/MAPPINGS/VENDORS/MICSFT/WINDOWS/</a> 
            and <a href="http://www.unicode.org/Public/MAPPINGS/ISO8859/">http://www.unicode.org/Public/MAPPINGS/ISO8859/</a>.The font encoding name 
            is same as the encoding file name. For example, the encoding file is 'cp1250.txt' and the encoding name is 
            'cp1250';the encoding file is '8859-1.TXT' and the encoding name is '8859-1'.
            </summary>
      <remarks>
        <b>Valid for custom PostScript fonts only.</b>
      </remarks>
    </member>
    <member name="P:Aspose.Pdf.Generator.TextInfo.IsBaseline">
      <summary>
            Gets or sets a bool value that indicates whether the text is baseline. Default is true.
            </summary>
    </member>
    <member name="P:Aspose.Pdf.Generator.TextInfo.Alignment">
      <summary>
            Gets or sets a <see cref="T:Aspose.Pdf.Generator.AlignmentType" /> that indicates the text alignment mode. This property 
            should be set for the Text object but not Segment object.
            </summary>
    </member>
    <member name="P:Aspose.Pdf.Generator.TextInfo.IsUnderline">
      <summary>
            Gets or sets a bool value that indicates whether the text is with underline.
            </summary>
    </member>
    <member name="P:Aspose.Pdf.Generator.TextInfo.UnderlineOffset">
      <summary>
            Gets or sets a float value that indicates the offset of the underline. Use positive value to move it up and negative to move down.
            </summary>
    </member>
    <member name="P:Aspose.Pdf.Generator.TextInfo.IsOverline">
      <summary>
            Gets or sets a bool value that indicates whether the text is with overline.
            </summary>
    </member>
    <member name="P:Aspose.Pdf.Generator.TextInfo.OverlineOffset">
      <summary>
            Gets or sets a float value that indicates the offset of the overline. Use positive value to move it up and negative to move down.
            </summary>
    </member>
    <member name="P:Aspose.Pdf.Generator.TextInfo.IsStrikeOut">
      <summary>
            Gets or sets a bool value that indicates whether the text is with strikeout.
            </summary>
    </member>
    <member name="P:Aspose.Pdf.Generator.TextInfo.CharSpace">
      <summary>
             Indicates space between characters.
             </summary>
            private float textCharSpace = 0;
             <summary>
             Gets or sets a float value that indicates space between characters.The unit is point.
             </summary></member>
    <member name="P:Aspose.Pdf.Generator.TextInfo.WordSpace">
      <summary>
            Gets or sets a float value that indicates space between words.The unit is point.
            </summary>
    </member>
    <member name="P:Aspose.Pdf.Generator.TextInfo.RenderingMode">
      <summary>
            Gets or sets an <see cref="P:Aspose.Pdf.Generator.TextInfo.RenderingMode" /> object that indicates the rendering mode of the text.
            </summary>
    </member>
    <member name="P:Aspose.Pdf.Generator.TextInfo.Color">
      <summary>
            Gets or sets a <see cref="P:Aspose.Pdf.Generator.TextInfo.Color" /> object that indicates the color of the text.
            </summary>
    </member>
    <member name="P:Aspose.Pdf.Generator.TextInfo.BackgroundColor">
      <summary>
            Gets or sets the background color of the text paragraph.
            </summary>
    </member>
    <member name="P:Aspose.Pdf.Generator.TextInfo.LineSpacing">
      <summary>
            Gets or sets a float value that indicates the spacing between two text lines.The unit is point.
            </summary>
    </member>
    <member name="P:Aspose.Pdf.Generator.TextInfo.TruetypeFontFileName">
      <summary>
            Gets or sets a string that indicates the truetype font file name. This property is only 
            needed when using truetype font with unicode. If your truetype font has been installed in your 
            system, you can use truetype font with unicode without this property. But using this property will 
            greatly improve the performance.
            </summary>
    </member>
    <member name="P:Aspose.Pdf.Generator.TextInfo.TextBorder">
      <summary>
            Gets or sets a <see cref="T:Aspose.Pdf.Generator.BorderInfo" /> object that indicates the text border. This property should be set 
            to Text object but not segment object.
            </summary>
    </member>
    <member name="P:Aspose.Pdf.Generator.TextInfo.IsRightToLeft">
      <summary>
            Gets or sets a bool value that indicates whether the text is right-to-left aligned. This property 
            is used for right-to-left aligned language such as Arabic and Hebrew.
            </summary>
    </member>
    <member name="P:Aspose.Pdf.Generator.TextInfo.IsRoman">
      <summary>
            Gets or sets a bool value that indicates whether Roman number is used. The default value is false 
            which means Arabic number.
            </summary>
    </member>
    <member name="P:Aspose.Pdf.Generator.TextInfo.IsCapRoman">
      <summary>
            Gets or sets a bool value that indicates the Roman page number is Capital or lowercase, 
            the default value is false which means lowercase.
            </summary>
    </member>
    <member name="T:Aspose.Pdf.Generator.UncolouredTilingPattern">
      <summary>
        <p>Realizes uncoloured tiling pattern that is tiling pattern contains shapes or text or image with one common color or no color at all.
             In the later case a color of the tile will be inherited from current color state of document.</p>
        <p>Typical usages are the following:</p>
        <xmp>
             [C#]
             Pdf pdf = new Pdf();
             Section sec = pdf.Sections.Add();
             Graph graph = new Graph(sec, 100, 700);
             sec.Paragraphs.Add(graph);
             Rectangle rect = new Rectangle(0, 600, 200, 100);
             graph.getShapes().add(rect);
             int xStep = 8;
             int yStep = 8;
             Graph tile1 = new Graph(xStep, yStep);
             tile1.PosX = 0;
             tile1.PosY = 0;
             Line line = new Line(new float [] {xStep/2, yStep, xStep/2, 0});
             line.GraphInfo.Color = null;
             line.GraphInfo.LineWidth = 0.1f;
             tile1.Shapes.Add(line);
             line = new Line(new float [] {xStep, yStep/2, 0, yStep/2});
             line.GraphInfo.Color = null;
             line.GraphInfo.LineWidth = 0.1f;
             tile1.Shapes.Add = line;
             pdf.save(....);
             </xmp>
      </summary>
    </member>
    <member name="M:Aspose.Pdf.Generator.UncolouredTilingPattern.#ctor">
      <summary>
             Initializes a new instance of the <see cref="T:Aspose.Pdf.UncolouredTilingPattern" /></summary>
    </member>
    <member name="M:Aspose.Pdf.Generator.UncolouredTilingPattern.#ctor(Aspose.Pdf.Generator.Color)">
      <summary>
             Initializes a new instance of the <see cref="T:Aspose.Pdf.UncolouredTilingPattern" /> with specified <see cref="T:Aspose.Pdf.Color" /> object.
             </summary>
    </member>
    <member name="M:Aspose.Pdf.Generator.UncolouredTilingPattern.GetColor">
      <summary>
             Returns a color of tile.
             </summary>
    </member>
    <member name="M:Aspose.Pdf.Generator.UncolouredTilingPattern.SetColor(Aspose.Pdf.Generator.Color)">
      <summary>
             Sets a color of tile.
             </summary>
    </member>
    <member name="M:Aspose.Pdf.Generator.UncolouredTilingPattern.CompleteClone">
      <summary>
             Copies all fields. Tile is copied by value.
             </summary>
    </member>
    <member name="M:Aspose.Pdf.Generator.UncolouredTilingPattern.Clone">
      <summary>
             Copies all fields. Tile is copied by reference.
             Shell be used for patterns that use one tile but different colors or matrix or steps or width, height.
             </summary>
    </member>
    <member name="T:Aspose.Pdf.Generator.ValidatorCollection">
      <summary>
            Represents a collection of validators.
            </summary>
    </member>
    <member name="M:Aspose.Pdf.Generator.ValidatorCollection.Add(Aspose.Pdf.Generator.BaseValidator)">
      <summary>
            Adds a new object derived from <see cref="T:Aspose.Pdf.Generator.BaseValidator" /> object into the collection.
            </summary>
      <param name="validator">The object derived from<see cref="T:Aspose.Pdf.Generator.BaseValidator" /> object to be added.</param>
    </member>
    <member name="T:Aspose.Pdf.Generator.ValidationCompareOperator">
      <summary>
            Specifies the validation comparison operators used by the CompareValidator.
            </summary>
    </member>
    <member name="F:Aspose.Pdf.Generator.ValidationCompareOperator.Equal">
      <summary>
            A comparison for equality.
            </summary>
    </member>
    <member name="F:Aspose.Pdf.Generator.ValidationCompareOperator.NotEqual">
      <summary>
            A comparison for inequality.
            </summary>
    </member>
    <member name="F:Aspose.Pdf.Generator.ValidationCompareOperator.GreaterThan">
      <summary>
            A comparison for greater than.
            </summary>
    </member>
    <member name="F:Aspose.Pdf.Generator.ValidationCompareOperator.GreaterThanEqual">
      <summary>
            A comparison for greater than or equal to.
            </summary>
    </member>
    <member name="F:Aspose.Pdf.Generator.ValidationCompareOperator.LessThan">
      <summary>
            A comparison for less than.
            </summary>
    </member>
    <member name="F:Aspose.Pdf.Generator.ValidationCompareOperator.LessThanEqual">
      <summary>
            A comparison for less than or equal to.
            </summary>
    </member>
    <member name="F:Aspose.Pdf.Generator.ValidationCompareOperator.DataTypeCheck">
      <summary>
            A comparison for data type only.
            </summary>
    </member>
    <member name="T:Aspose.Pdf.Generator.VerticalAlignmentType">
      <summary>
            Enumerates the vertiacl alignment types.
            </summary>
    </member>
    <member name="F:Aspose.Pdf.Generator.VerticalAlignmentType.Top">
      <summary>
            Top alignment.
            </summary>
    </member>
    <member name="F:Aspose.Pdf.Generator.VerticalAlignmentType.Center">
      <summary>
            Center alignment type.
            </summary>
    </member>
    <member name="F:Aspose.Pdf.Generator.VerticalAlignmentType.Bottom">
      <summary>
            Bottom alignment type.
            </summary>
    </member>
    <member name="T:Aspose.Pdf.Generator.VerticalTextRotationType">
      <summary>
            Enumerates the rotation type for vertical text in cells or floating box
            </summary>
    </member>
    <member name="F:Aspose.Pdf.Generator.VerticalTextRotationType.None">
      <summary>
            No rotation type is used. This means rotation angle is 0.
            </summary>
    </member>
    <member name="F:Aspose.Pdf.Generator.VerticalTextRotationType.ClockWise">
      <summary>
            90.
            </summary>
    </member>
    <member name="F:Aspose.Pdf.Generator.VerticalTextRotationType.AntiClockWise">
      <summary>
            -90.
            </summary>
    </member>
    <member name="T:Aspose.Pdf.Generator.Watermarks">
      <summary>
             Represents a collection of <see cref="T:Aspose.Pdf.Generator.FloatingBox" />,which lay upon other content for the identification purpose as watermark, 
             Only <see cref="T:Aspose.Pdf.Generator.Image" />,<see cref="T:Aspose.Pdf.Generator.Graph" /> and <see cref="T:Aspose.Pdf.Generator.Text" /> are allowed in <see cref="T:Aspose.Pdf.Generator.FloatingBox" />.
             are added on each page.
             </summary>
      <example>
        <code>
             [C#]
             Pdf pdf1 = new Pdf();
             Aspose.Pdf.Generator.Section sec1 = pdf1.Sections.Add();
             Aspose.Pdf.Generator.Text text1 = new Text(sec1,"This is text in section1.");
             text1.Left = 30;
             text1.Top = 100;
             sec1.Paragraphs.Add(text1);
             Aspose.Pdf.Generator.Section sec2 = pdf1.Sections.Add();
             Aspose.Pdf.Generator.Text text2 = new Text(sec2,"This is text in section2.");
             text2.Left = 30;
             text2.Top = 100;
             sec2.Paragraphs.Add(text2);
            
             //image watermark
             Aspose.Pdf.Generator.Image image1 = new Aspose.Pdf.Generator.Image();
             image1.ImageInfo.File = "world.jpg";
             image1.ImageInfo.ImageFileType = ImageFileType.Jpeg; 
             image1.ImageScale = 0.1f;	
             FloatingBox watermark1 = new FloatingBox(200,100);
             watermark1.BoxHorizontalPositioning = BoxHorizontalPositioningType.Page;
             watermark1.BoxHorizontalAlignment = BoxHorizontalAlignmentType.Center;
             watermark1.BoxVerticalPositioning = BoxVerticalPositioningType.Page;
             watermark1.BoxVerticalAlignment = BoxVerticalAlignmentType.Center;
             watermark1.Paragraphs.Add(image1);
             
             //graph watermark
             Graph graph1 = new Graph(400,100);
             float[] posArr = new float[]{0,0,200,80,300,40,350,90};
             Curve curve1 = new Curve(graph1,posArr);
             graph1.Shapes.Add(curve1);
             FloatingBox watermark2 = new FloatingBox(400,100);
             watermark2.Paragraphs.Add(graph1);
             		
             //text watermark
             Text text3 = new Text("Text Watermark");
             FloatingBox watermark3 = new FloatingBox(100,100);
             watermark3.Left = 50;
             watermark3.Top = 500;
             watermark3.Paragraphs.Add(text3);
             
             pdf1.Watermarks.Add(watermark1);
             pdf1.Watermarks.Add(watermark2);
             pdf1.Watermarks.Add(watermark3);
             pdf1.Save("WatermarkExample.pdf");
             
             [Visual Basic]
             Dim pdf1 As Pdf =  New Pdf() 
             Dim sec1 As Aspose.Pdf.Generator.Section =  pdf1.Sections.Add() 
             Dim text1 As Aspose.Pdf.Generator.Text =  New Text(sec1,"This is text in section1.") 
             text1.Left = 30
             text1.Top = 100
             sec1.Paragraphs.Add(text1)
             Dim sec2 As Aspose.Pdf.Generator.Section =  pdf1.Sections.Add() 
             Dim text2 As Aspose.Pdf.Generator.Text =  New Text(sec2,"This is text in section2.") 
             text2.Left = 30
             text2.Top = 100
             sec2.Paragraphs.Add(text2)
             
             'image watermark
             Dim image1 As Aspose.Pdf.Generator.Image =  New Aspose.Pdf.Generator.Image() 
             image1.ImageInfo.File = "world.jpg"
             image1.ImageInfo.ImageFileType = ImageFileType.Jpeg 
             image1.ImageScale = 0.1f	
             Dim watermark1 As FloatingBox =  New FloatingBox(200,100) 
             watermark1.BoxHorizontalPositioning = BoxHorizontalPositioningType.Page
             watermark1.BoxHorizontalAlignment = BoxHorizontalAlignmentType.Center
             watermark1.BoxVerticalPositioning = BoxVerticalPositioningType.Page
             watermark1.BoxVerticalAlignment = BoxVerticalAlignmentType.Center
             watermark1.Paragraphs.Add(image1)
             
             'graph watermark
             Dim graph1 As Graph =  New Graph(400,100) 
             Dim posArr() As single =  New single() {0,0,200,80,300,40,350,90}
             Dim curve1 As Curve =  New Curve(graph1,posArr) 
             graph1.Shapes.Add(curve1)
             Dim watermark2 As FloatingBox =  New FloatingBox(400,100) 
             watermark2.Paragraphs.Add(graph1)
             
             'text watermark
             Dim text3 As Text =  New Text("Text Watermark") 
             Dim watermark3 As FloatingBox =  New FloatingBox(100,100) 
             watermark3.Left = 50
             watermark3.Top = 500
             watermark3.Paragraphs.Add(text3)
             
             pdf1.Watermarks.Add(watermark1)
             pdf1.Watermarks.Add(watermark2)
             pdf1.Watermarks.Add(watermark3)
             pdf1.Save("WatermarkExample.pdf")
             
             [XML]
            	&lt;Pdf xmlns="Aspose.Pdf" &gt;
            		&lt;Section ID="section1"&gt;
            			&lt;Text Left="30" Top="100"&gt;
            				&lt;Segment&gt;This is text in section1.&lt;/Segment&gt;
            			&lt;/Text&gt;
            		&lt;/Section&gt;
            		&lt;Section ID="section2"&gt;
            			&lt;Text Left="30" Top="100"&gt;
            				&lt;Segment&gt;"This is text in section2."&lt;/Segment&gt;
            			&lt;/Text&gt;
            		&lt;/Section&gt;
            		&lt;Watermark Width="200" Height="100" BoxHorizontalPositioning="Page" BoxHorizontalAlignment="Center" BoxVerticalPositioning="Page" BoxVerticalAlignment="Center"&gt;
            			&lt;Image File="world.jpg" Type="jpeg" ImageScale="0.1" /&gt;
            		&lt;/Watermark&gt;
            		&lt;Watermark Width="400" Height="100"&gt;
            			&lt;Graph  Width="400" Height="100"&gt;
            				&lt;Curve Position="0 0 200 80 300 40 350 90" /&gt;
            			&lt;/Graph&gt; 
            		&lt;/Watermark&gt;
            		&lt;Watermark Width="100" Height="100" Left ="50" Top="500"&gt;
            			&lt;Text &gt;
            				&lt;Segment  IsUnicode="true" FontSize="12"&gt;Text Watermark&lt;/Segment&gt;       
            			&lt;/Text&gt;
            		&lt;/Watermark&gt;
            	&lt;/Pdf&gt;
             </code>
      </example>
    </member>
    <member name="M:Aspose.Pdf.Generator.Watermarks.Add(Aspose.Pdf.Generator.FloatingBox)">
      <summary>
            Adds a new <see cref="T:Aspose.Pdf.Generator.FloatingBox" /> object into the collection.
            </summary>
      <param name="watermark">The <see cref="T:Aspose.Pdf.Generator.FloatingBox" /> object to be added.</param>
    </member>
    <member name="M:Aspose.Pdf.Generator.Watermarks.Insert(Aspose.Pdf.Generator.FloatingBox,Aspose.Pdf.Generator.FloatingBox)">
      <summary>
            Inserts a new <see cref="T:Aspose.Pdf.Generator.FloatingBox" /> object into the collection after specified <see cref="T:Aspose.Pdf.Generator.FloatingBox" /> object.
            </summary>
      <param name="watermarkToInsertAfter">The <see cref="T:Aspose.Pdf.Generator.FloatingBox" /> object to insert after. 
            If this object is null, the new object will be inserted as the first member.</param>
      <param name="newWatermark">The <see cref="T:Aspose.Pdf.Generator.FloatingBox" /> object to be inserted.</param>
    </member>
    <member name="T:Aspose.Pdf.Generator.XmpMetadata">
      <summary>
             Represents the XmpMetadata of a pdf document.
             </summary>
      <example>
        <code>
             [C#]
             Pdf pdf = new Pdf();
            
             Section s = pdf.Sections.Add();
            
             Text text1 = new Text("This is a test for XMP Metadata");
             s.Paragraphs.Add(text1);
             
             pdf.XmpMetadata = new XmpMetadata();
            
             //core properties
             pdf.XmpMetadata.AddCreationDate(System.DateTime.Now.ToString());
            
            	//user properties
            	pdf.XmpMetadata.AddUserProperty("xmlns:dc=\"http://purl.org/dc/elements/1.1/\"","dc:contributor","Aspose");
            
            	pdf.Save(@"d:\test\test.pdf");
            	
            	[VB.Net]
            	Dim pdf As Pdf = New Pdf
            	
            	Dim s As Section = pdf.Sections.Add()
            	Dim text1 As Text = New Text("This is a test for XMP Metadata")
            	s.Paragraphs.Add(text1)
            	
            	pdf.XmpMetadata = New XmpMetadata
            	
            	'core properties
            	pdf.XmpMetadata.AddCreationDate(System.DateTime.Now.ToString())
            	
            	'user properties
            	pdf.XmpMetadata.AddUserProperty("xmlns:dc='http://purl.org/dc/elements/1.1/'", "dc:contributor", "Aspose")
            	
            	pdf.Save("d:\test\test.pdf")
             
            	[XML]
              &lt;Pdf xmlns="Aspose.Pdf"&gt; 
              &lt;XmpMetadata&gt;
              	&lt;MetadataItem Name="CreationDate" Value="2007-7-15 10:51:55" /&gt;
              		&lt;MetadataItem XmlNamespace="xmlns:dc='http://purl.org/dc/elements/1.1/'" Name="dc:contributor" Value="Aspose" /&gt;
              	&lt;/XmpMetadata&gt;
              	&lt;Section&gt;
              		&lt;Text&gt;&lt;Segment&gt;This is a test for XMP Metadata&lt;/Segment&gt;&lt;/Text&gt;
              	&lt;/Section&gt; 
              &lt;/Pdf&gt;
            </code>
      </example>
    </member>
    <member name="M:Aspose.Pdf.Generator.XmpMetadata.#ctor">
      <summary>
            Represents a constructor of the XmpMetadata object.
            </summary>
    </member>
    <member name="M:Aspose.Pdf.Generator.XmpMetadata.AddCreationDate(System.String)">
      <summary>
            Adds the CreationDate property. It will be added into "xmlns:xap='http://ns.adobe.com/xap/1.0/'" namespace.
            </summary>
      <param name="date">The value of the property.</param>
    </member>
    <member name="M:Aspose.Pdf.Generator.XmpMetadata.AddCreatorTool(System.String)">
      <summary>
            Adds the CreatorTool property. It will be added into "xmlns:xap='http://ns.adobe.com/xap/1.0/'" namespace.
            </summary>
      <param name="tool">The value of the property.</param>
    </member>
    <member name="M:Aspose.Pdf.Generator.XmpMetadata.AddModifyDate(System.String)">
      <summary>
            Adds the ModifyDate property. It will be added into "xmlns:xap='http://ns.adobe.com/xap/1.0/'" namespace.
            </summary>
      <param name="date">The value of the property.</param>
    </member>
    <member name="M:Aspose.Pdf.Generator.XmpMetadata.AddMetaDataDate(System.String)">
      <summary>
            Adds the MetaDataDate property. It will be added into "xmlns:xap='http://ns.adobe.com/xap/1.0/'" namespace.
            </summary>
      <param name="date">The value of the property.</param>
    </member>
    <member name="M:Aspose.Pdf.Generator.XmpMetadata.AddUserProperty(System.String,System.String,System.String)">
      <summary>
            Adds a user defined property.
            </summary>
      <param name="xmlns">The xml namespace.</param>
      <param name="name">The name of the property.</param>
      <param name="val">The value of the property.</param>
    </member>
    <member name="T:Aspose.Pdf.Generator.BadHtmlHandlingStrategy">
      <summary>
              This enum is used during HTML to PDF conversion of textblocks where IsHtmlTagSupported flag set as 'true'. 
              It enumerates possible strategies of handling of situation when serious errors in converted HTML detected and Aspose.PDF unable normally process HTML markup.
            </summary>
    </member>
    <member name="F:Aspose.Pdf.Generator.BadHtmlHandlingStrategy.ThrowException">
      <summary>
            Standard default strategy : exception will be thrown
            </summary>
    </member>
    <member name="F:Aspose.Pdf.Generator.BadHtmlHandlingStrategy.TreatAsPlainText">
      <summary>
            Target Text's content will be treated as plain text, it's flag IsHtmlTagSupported will be forcebly reset
            and processing will be continued
            </summary>
    </member>
    <member name="T:Aspose.Pdf.Generator.HtmlInfo">
      <summary>
            Encapsulates info for HTML when inporting HTML.
            </summary>
      <example>
        <code>
            [C#]
            // Instantiate an object PDF class
            Pdf pdf = new Pdf();
            // add the section to PDF document sections collection
            Aspose.Pdf.Generator.Section section = pdf.Sections.Add();
            // Read the contents of HTML file into StreamReader object
            StreamReader Stream = File.OpenText(@"D:/pdftest/samplehtml.html");
            //Create text paragraphs containing HTML text
            Aspose.Pdf.Generator.Text text2 = new Aspose.Pdf.Generator.Text(section, Stream.ReadToEnd());
            // enable the property to display HTML contents within their own formatting
            text2.IsHtmlTagSupported = true;
            // Add the text object containing HTML contents to PD Sections
            section.Paragraphs.Add(text2);
            // Specify the URL which serves as images database
            pdf.HtmlInfo.ImgUrl = "D:/pdftest/";
            // Specify the value that indicates the maximum time for a Http request to get response
            pdf.HtmlInfo.TimeOut = 3600;
            //Save the pdf document
            pdf.Save("D:/pdftest/HTMLPageIntoPDF.pdf");
            
            [Visual Basic]
            ' Instantiate an object PDF class
            Dim pdf As Pdf = New Pdf()
            ' add the section to PDF document sections collection
            Dim Section As Aspose.Pdf.Generator.Section = pdf.Sections.Add()
            ' Read the contents of HTML file into StreamReader object
            Dim Stream As StreamReader = File.OpenText("D:/pdftest/samplehtml.html")
            ' Create text paragraphs containing HTML text
            Dim text2 As Aspose.Pdf.Generator.Text = New Aspose.Pdf.Generator.Text(Section, Stream.ReadToEnd())
            ' enable the property to display HTML contents within their own formatting
            text2.IsHtmlTagSupported = True
            ' Add the text object containing HTML contents to PD Sections
            Section.Paragraphs.Add(text2)
            ' Specify the URL which serves as images database
            pdf.HtmlInfo.ImgUrl = "D:/pdftest/"
            ' Specify the value that indicates the maximum time for a Http request to get response
            pdf.HtmlInfo.TimeOut = 3600
            ' Save the pdf document
            pdf.Save("D:/pdftest/HTMLPageIntoPDF.pdf")
            </code>
      </example>
    </member>
    <member name="F:Aspose.Pdf.Generator.HtmlInfo.ShrinkLongImagesToPageHeight">
      <summary>
            Gets or sets a bool value that indicates whether durimg HTML conversion big images will be shrinked vertically to match page's size. 
            The default is false.
            </summary>
    </member>
    <member name="F:Aspose.Pdf.Generator.HtmlInfo.UseNewHtmlConvertorForEachHtmlTextBlock">
      <summary>
              This parameter is used during HTML to PDF conversion and by default set to 'True'.
            It means that for each textblock treated as HTML(having IsHtmlTagSupported
            flag set as 'True') will be created it's own converter. 
              Such strategy does not work good on HTML pages with huge amount
            of textblocks with relatively simple HTML cause creation of Html conversion classes 
            is relatively expensive operation. To deminish conversion time in such cases please set this parameter to 'False'.
            </summary>
    </member>
    <member name="F:Aspose.Pdf.Generator.HtmlInfo.BadHtmlHandlingStrategy">
      <summary>
              This parameter is used during HTML to PDF conversion of textblocks where IsHtmlTagSupported flag set as 'true'. 
              It selects strategy of handling of situation when serious errors in converted HTML detected and Aspose.PDF unable normally process HTML markup.
              By default in such situation will be thrown exception .
              If this parameter set as 'TreateAsPlainText'  - then instead of exception generation,
              IsHtmlTagSupported for processed textblock will be forcebly reset
              and processing of that textblock will be continued but it's content will be treated as plain text without markup
            </summary>
    </member>
    <!-- Badly formed XML comment ignored for member "F:Aspose.Pdf.Generator.HtmlInfo.ShowUnknownHtmlTagsAsText" -->
    <member name="P:Aspose.Pdf.Generator.HtmlInfo.ExternalResourcesBasePath">
      <summary>
            Gets or sets the external resources base path.
            </summary>
      <value>The external resources base path.</value>
    </member>
    <member name="P:Aspose.Pdf.Generator.HtmlInfo.IsLandScape">
      <summary>
            Gets or sets a bool value that indicates whether the page orientation is landscape. 
            The default is false, portrait.
            </summary>
    </member>
    <member name="P:Aspose.Pdf.Generator.HtmlInfo.PageWidth">
      <summary>
            Gets or sets a float value that indicates the page width of the PDF document when converting 
            HTML to PDF. Default is A4 width.
            </summary>
    </member>
    <member name="P:Aspose.Pdf.Generator.HtmlInfo.PageHeight">
      <summary>
            Gets or sets a float value that indicates the page height of the PDF document when converting 
            HTML to PDF. Default is A4 height.
            </summary>
    </member>
    <member name="P:Aspose.Pdf.Generator.HtmlInfo.Margin">
      <summary>
            Gets or sets a <see cref="T:Aspose.Pdf.Generator.MarginInfo" /> object that indicates the page margin info.
            </summary>
    </member>
    <member name="P:Aspose.Pdf.Generator.HtmlInfo.CharSet">
      <summary>
            Gets or sets a string value that indicates character-set of the HTML document  
            </summary>
    </member>
    <member name="P:Aspose.Pdf.Generator.HtmlInfo.ImgUrl">
      <summary>
            Gets or sets a string value that indicates the image url as from the database when converting 
            HTML to PDF.
            </summary>
    </member>
    <member name="P:Aspose.Pdf.Generator.HtmlInfo.SvgUrl">
      <summary>
            Gets or sets a string value that indicates the svg url when converting 
            Embedded Svg HTML to PDF.
            </summary>
    </member>
    <member name="P:Aspose.Pdf.Generator.HtmlInfo.TdPadding">
      <summary>
            Gets or sets a <see cref="T:Aspose.Pdf.Generator.MarginInfo" /> object that indicates the cell's padding.
            </summary>
    </member>
    <member name="P:Aspose.Pdf.Generator.HtmlInfo.TdTextMargin">
      <summary>
            Gets or sets a <see cref="T:Aspose.Pdf.Generator.MarginInfo" /> object that indicates the cell text's margin.
            </summary>
    </member>
    <member name="P:Aspose.Pdf.Generator.HtmlInfo.ListLabelWidth">
      <summary>
            Gets or sets a float value that indicates the width of the label in HTML list. 
            Default value is 30 points.
            </summary>
    </member>
    <member name="P:Aspose.Pdf.Generator.HtmlInfo.ListLevelIndent">
      <summary>
            Gets or sets a float value that indicates the horizontal shift when go to next layer in lists. 
            Default value is 32 points.
            </summary>
    </member>
    <member name="P:Aspose.Pdf.Generator.HtmlInfo.TimeOut">
      <summary>
            Gets or sets an int value that indicates the maximum time for a Http request to get response.
            Default value is Timeout.Infinite.
            Once you set the value in your code, you must also handle the WebException. Otherwise there will be an error in your program when your HttpWebRequest expires.
            </summary>
    </member>
    <member name="P:Aspose.Pdf.Generator.HtmlInfo.MarginAboveP">
      <summary>
            Gets or sets an float value that indicates the margin above &lt; p &gt;.
            Default value is 12.
            </summary>
    </member>
    <member name="P:Aspose.Pdf.Generator.HtmlInfo.MarginBelowP">
      <summary>
            Gets or sets an float value that indicates the margin above &lt; p &gt;.
            Default value is 12.
            </summary>
    </member>
    <member name="T:Aspose.Pdf.Generator.CellBackgroundAlignment">
      <summary>
            Specifies alignment of background image of the cell.
            </summary>
    </member>
    <member name="F:Aspose.Pdf.Generator.CellBackgroundAlignment.TopLeft">
      <summary>
            Background image is drawing from the top left corner and only fitted part is visible.
            </summary>
    </member>
    <member name="F:Aspose.Pdf.Generator.CellBackgroundAlignment.TopRight">
      <summary>
            Background image is drawing from the top right corner and whole image is visible.
            </summary>
    </member>
    <member name="F:Aspose.Pdf.Generator.CellBackgroundAlignment.BottomRight">
      <summary>
            Background image is drawing from bottom right corner and whole image is visible.
            </summary>
    </member>
    <member name="F:Aspose.Pdf.Generator.CellBackgroundAlignment.BottomLeft">
      <summary>
            Background image is drawing from bottom left corner and whole image is visible.
            </summary>
    </member>
    <member name="T:Aspose.Pdf.Generator.AnnotationType">
      <summary>
            Enumerates the attachment types.
            </summary>
    </member>
    <member name="F:Aspose.Pdf.Generator.AnnotationType.None">
      <summary>
            The attachment is a free text note.
            </summary>
    </member>
    <member name="F:Aspose.Pdf.Generator.AnnotationType.Line">
      <summary>
            The attachment is a line text note.
            </summary>
    </member>
    <member name="F:Aspose.Pdf.Generator.AnnotationType.Circle">
      <summary>
            The attachment is a circle note.
            </summary>
    </member>
    <member name="F:Aspose.Pdf.Generator.AnnotationType.Square">
      <summary>
            The attachment is a Square note.
            </summary>
    </member>
    <member name="F:Aspose.Pdf.Generator.AnnotationType.TextMarkup">
      <summary>
            The attachment is a Square note.
            </summary>
    </member>
    <member name="F:Aspose.Pdf.Generator.AnnotationType.FreeText">
      <summary>
            The attachment is a free text note.
            </summary>
    </member>
    <member name="F:Aspose.Pdf.Generator.AnnotationType.Sound">
      <summary>
            The attachment is a sound note.
            </summary>
    </member>
    <member name="F:Aspose.Pdf.Generator.AnnotationType.Video">
      <summary>
            The attachment is a video note.
            </summary>
    </member>
    <member name="F:Aspose.Pdf.Generator.AnnotationType.Flash">
      <summary>
            The attachment is flash note.
            </summary>
    </member>
    <member name="T:Aspose.Pdf.Generator.Index">
      <summary>
            Represents an index in a Pdf document.
            </summary>
    </member>
    <member name="P:Aspose.Pdf.Generator.Index.TextInfo">
      <summary>
            Gets or sets a <see cref="P:Aspose.Pdf.Generator.Index.TextInfo" /> object that indicates the text info of the text paragraphs in the Index.
            </summary>
    </member>
    <member name="P:Aspose.Pdf.Generator.Index.PageInfo">
      <summary>
            Gets or sets a <see cref="P:Aspose.Pdf.Generator.Index.PageInfo" /> that indicates page info of the index.
            </summary>
    </member>
    <member name="T:Aspose.Pdf.Generator.CrossHatchPattern">
      <summary>
        <p>Realizes uncoloured cross-hatch pattern (lines intersected under a right angle).</p>
        <p>Typical usages are the following:</p>
        <xmp>
             [C#]
             Pdf pdf = new Pdf();
             Section sec = pdf.Sections.Add();
             Graph graph = new Graph(sec, 100, 700);
             sec.Paragraphs.Add(graph);
             Rectangle rect = new Rectangle(0, 600, 200, 100);
             graph.Shapes.Add(rect);
             CrossHatchPattern pattern = new CrossHatchPattern(10, 45);
             Color fillColor = new Color();
             fillColor.PatternColorSpace = pattern;
             rect.GraphInfo.FillColor = fillColor;
             rect.GraphInfo.IsFilled = true;
             pdf.save(....);
             </xmp>
      </summary>
    </member>
    <member name="M:Aspose.Pdf.Generator.CrossHatchPattern.#ctor">
      <summary>
             Initializes a new instance of the <see cref="T:Aspose.Pdf.CrossHatchPattern" /></summary>
    </member>
    <member name="M:Aspose.Pdf.Generator.CrossHatchPattern.#ctor(System.Single)">
      <summary>
             Initializes a new instance of the <see cref="T:Aspose.Pdf.CrossHatchPattern" /> with value of spacing between lines.
             </summary>
    </member>
    <member name="M:Aspose.Pdf.Generator.CrossHatchPattern.#ctor(System.Single,System.Single)">
      <summary>
             Initializes a new instance of the <see cref="T:Aspose.Pdf.CrossHatchPattern" /> with value of spacing between lines and a rotation angle of lines.
             </summary>
    </member>
    <member name="M:Aspose.Pdf.Generator.CrossHatchPattern.#ctor(System.Single,System.Single,System.Single)">
      <summary>
             Initializes a new instance of the <see cref="T:Aspose.Pdf.CrossHatchPattern" /> with value of spacing between lines, line width and a rotation angle of lines.
             </summary>
    </member>
    <member name="M:Aspose.Pdf.Generator.CrossHatchPattern.GetSpacing">
      <summary>
             Returns a distance between lines.
             </summary>
    </member>
    <member name="M:Aspose.Pdf.Generator.CrossHatchPattern.GetLineWidth">
      <summary>
             Returns a width of the lines.
             </summary>
    </member>
    <member name="T:Aspose.Pdf.Generator.HatchingPattern">
      <summary>
        <p>Realizes uncoloured hatching pattern (parallel lines).</p>
        <p>Typical usages are the following:</p>
        <xmp>
             [C#]
             Pdf pdf = new Pdf();
             Section sec = pdf.Sections.Add();
             Graph graph = new Graph(sec, 100, 700);
             sec.Paragraphs.Add(graph);
             Rectangle rect = new Rectangle(0, 600, 200, 100);
             graph.Shapes.Add(rect);
             HatchingPattern pattern = new HatchingPattern(10, 45);
             Color fillColor = new Color();
             fillColor.PatternColorSpace = pattern;
             rect.GraphInfo.FillColor = fillColor;
             rect.GraphInfo.IsFilled = true;
             pdf.save(....);
             </xmp>
      </summary>
    </member>
    <member name="M:Aspose.Pdf.Generator.HatchingPattern.#ctor">
      <summary>
             Initializes a new instance of the <see cref="T:Aspose.Pdf.HatchingPattern" /></summary>
    </member>
    <member name="M:Aspose.Pdf.Generator.HatchingPattern.#ctor(System.Single)">
      <summary>
             Initializes a new instance of the <see cref="T:Aspose.Pdf.HatchingPattern" /> with value of spacing between lines.
             </summary>
    </member>
    <member name="M:Aspose.Pdf.Generator.HatchingPattern.#ctor(System.Single,System.Single)">
      <summary>
             Initializes a new instance of the <see cref="T:Aspose.Pdf.HatchingPattern" /> with value of spacing between lines and a rotation angle of lines.
             </summary>
    </member>
    <member name="M:Aspose.Pdf.Generator.HatchingPattern.#ctor(System.Single,System.Single,System.Single)">
      <summary>
             Initializes a new instance of the <see cref="T:Aspose.Pdf.HatchingPattern" /> with value of spacing between lines, line width and a rotation angle of lines.
             </summary>
    </member>
    <member name="M:Aspose.Pdf.Generator.HatchingPattern.GetSpacing">
      <summary>
             Returns a distance between lines.
             </summary>
    </member>
    <member name="M:Aspose.Pdf.Generator.HatchingPattern.GetLineWidth">
      <summary>
             Returns a width of the lines.
             </summary>
    </member>
    <member name="M:Aspose.Pdf.Generator.HatchingPattern.SetLineWidth(System.Single)">
      <summary>
             Specifies a width of the lines.
             </summary>
    </member>
    <member name="T:Aspose.Pdf.Generator.ImagePattern">
      <summary>
        <p>Realizes tiling pattern with image as tile (mosaic).</p>
        <p>Typical usages are the following:</p>
        <xmp>
             [C#]
             Pdf pdf = new Pdf();
             Section sec = pdf.Sections.Add();
             Graph graph = new Graph(sec, 100, 700);
             sec.Paragraphs.Add(graph);
             Rectangle rect = new Rectangle(0, 600, 200, 100);
             graph.Shapes.Add(rect);
             ImagePattern pattern = new ImagePattern(TEST_DATA + "frog.jpg", 50, 50);
             or in another way:
             Image image = new Image();
             image.ImageInfo.File = TEST_DATA + "frog.jpg";
             ImagePattern pattern = new ImagePattern(image, 20, 20);
             if image fixed size isn't set it will be equal tileWidth/tileHeight from constructor (20, 20)
             Color fillColor = new Color();
             fillColor.PatternColorSpace = pattern;
             rect.GraphInfo.FillColor = fillColor;
             rect.GraphInfo.IsFilled = true;
             // image fixed size will be equal tileWidth/tileHeight from constructor  (50, 50)
             pdf.save(....);
             </xmp>
      </summary>
    </member>
    <member name="M:Aspose.Pdf.Generator.ImagePattern.CompleteClone">
      <summary>
             Copies all fields. Tile is copied by value.
             </summary>
    </member>
    <member name="M:Aspose.Pdf.Generator.ImagePattern.Clone">
      <summary>
             Copies all fields. Tile is copied by reference.
             Shell be used for patterns that use one tile but different colors or matrix or steps or width, height.
             </summary>
    </member>
    <member name="T:Aspose.Pdf.Generator.LongSideAlignmentType">
      <summary> Shows label text alignment in dependence of text path.
            If text path is left or right, than long side will be parallel X axis,
            If text path is up or down, than long side will be parallel Y axis.
            </summary>
    </member>
    <member name="T:Aspose.Pdf.Generator.PaintType">
      <summary>
             Enumerates the paint types for tiling pattern.
             </summary>
    </member>
    <member name="T:Aspose.Pdf.Generator.PatternType">
      <summary>
             Enumerates the pattern types.
             </summary>
    </member>
    <member name="T:Aspose.Pdf.Generator.ShadingPattern">
      <summary>
        <p>Realizes tiling pattern with image as shaded tile (mosaic).</p>
      </summary>
    </member>
    <member name="M:Aspose.Pdf.Generator.ShadingPattern.CompleteClone">
      <summary>
             Copies all fields. Tile is copied by value.
             </summary>
    </member>
    <member name="M:Aspose.Pdf.Generator.ShadingPattern.Clone">
      <summary>
             Copies all fields. Tile is copied by reference.
             Shell be used for patterns that use one tile but different colors or matrix or steps or width, height.
             </summary>
    </member>
    <member name="T:Aspose.Pdf.Generator.ShadingPatternFactory">
      <summary>
        <p>Maps level to predefined shading patterns.</p>
      </summary>
    </member>
    <member name="T:Aspose.Pdf.Generator.TextDirection">
      <summary> Directs label text to.
            </summary>
    </member>
    <member name="T:Aspose.Pdf.Generator.TilingType">
      <summary>
             Enumerates tiling types for tiling patterns.
             </summary>
    </member>
    <member name="T:Aspose.Pdf.Generator.ComplexShape">
      <summary>
        <p>ComplexShape is a Shape that consists of several closed Shapes (contours).
             It can contain Circle, Ellipse, Rectangle and PathArea.
             Other shapes are ignored.</p>
        <p>Typical usages are the following:</p>
        <xmp>
             [C#]
             Pdf pdf1 = new Pdf();
             Section sec = pdf1.Sections.Add();
             Color color = new Aspose.Pdf.Generator.Color("Red");
             Graph graph = new Graph(100,400);
             sec.Paragraphs.Add(graph);
             ComplexShape complexShape = new ComplexShape(graph);
             path.GraphInfo.FillColor = color;
             path.GraphInfo.IsFilled = true;
             path.GraphInfo.FillRule = "evenodd"; 
             graph.Shapes.Add(complexShape);
             PathArea path = new PathArea();
             complexShape.Shapes.Add(path); 
             Line line = new Line(new float [] {200, 80, 200, 100});
             path.Shapes.Add(line);
             Arc arc = new Arc(200, 50, 50, 90, 270);
             path.Shapes.add(arc);
             float [] curPos = arc.getEndPosition();
             line = new Line(new float [] {curPos[0], curPos[1], 200, 20});
             path.Shapes.Add(line);
             arc = new Arc(200, 50, 30, 270, 90);
             path.Shapes.Add(arc);
             Circle circle = new Circle(160, 50, 5);
             complexShape.Shapes.add(circle);
             pdf1.save(....);
             </xmp>
      </summary>
    </member>
    <member name="M:Aspose.Pdf.Generator.ComplexShape.#ctor">
      <summary>
             Initializes a new instance of the <see cref="T:Aspose.Pdf.ComplexShape" /> class.
             </summary>
    </member>
    <member name="M:Aspose.Pdf.Generator.ComplexShape.#ctor(Aspose.Pdf.Generator.Graph)">
      <summary>
             Initializes a new instance of the <see cref="T:Aspose.Pdf.ComplexShape" /> class.
             </summary>
      <param name="graph">object. <p><b>Remarks</b>: This constructor can inherit common property values from  the specified  <see cref="T:Aspose.Pdf.Graph" />  object. </p></param>
    </member>
    <member name="P:Aspose.Pdf.Generator.ComplexShape.Shapes">
      <summary>
             Returns or specifies a list of closed shapes.
             </summary>
    </member>
    <member name="T:Aspose.Pdf.Generator.PointsPattern">
      <summary>
        <p>Realizes uncoloured pattern represented by points followed one by one in chess order.</p>
        <p>Typical usages are the following:</p>
        <xmp>
             [C#]
             Pdf pdf = new Pdf();
             Section sec = pdf.Sections.Add();
             Graph graph = new Graph(sec, 100, 700);
             sec.Paragraphs.Add(graph);
             Rectangle rect = new Rectangle(0, 600, 200, 100);
             graph.Shapes.Add(rect);
             PointsPattern pattern = new PointsPattern(10, 0.1f);
             Color fillColor = new Color();
             fillColor.PatternColorSpace = pattern;
             rect.GraphInfo.FillColor = fillColor;
             rect.GraphInfo.IsFilled = true;
             pdf.Save(....);
             </xmp>
      </summary>
    </member>
    <member name="M:Aspose.Pdf.Generator.PointsPattern.#ctor">
      <summary>
             Initializes a new instance of the <see cref="T:Aspose.Pdf.PointsPattern" /></summary>
    </member>
    <member name="M:Aspose.Pdf.Generator.PointsPattern.#ctor(System.Single)">
      <summary>
             Initializes a new instance of the <see cref="T:Aspose.Pdf.PointsPattern" /> with spacing value
             </summary>
    </member>
    <member name="M:Aspose.Pdf.Generator.PointsPattern.#ctor(System.Single,System.Single)">
      <summary>
             Initializes a new instance of the <see cref="T:Aspose.Pdf.PointsPattern" /> with spacing value and a radius of point.
             </summary>
      <param name="spacing">
      </param>
      <param name="radius">- radius of point. Range 0 - spacing/2. If radius is greater than spacing/2 it will be spacing/2.</param>
    </member>
    <member name="M:Aspose.Pdf.Generator.PointsPattern.GetSpacing">
      <summary>
             Returns a distance between points. 
             </summary>
    </member>
    <member name="M:Aspose.Pdf.Generator.PointsPattern.GetRadius">
      <summary>
             Returns a radius of point.
             </summary>
    </member>
    <member name="T:Aspose.Pdf.Generator.GradientAxialShading">
      <summary>
        <p>Realizes linear gradient fill.</p>
        <p>Typical usages are the following:</p>
        <xmp>
             [C#]
             Pdf pdf = new Pdf();
             Section sec = pdf.Sections.Add();
             Graph graph = new Graph(sec, 100, 700);
             sec.Paragraphs.Add(graph);
             Rectangle rect = new Rectangle(0, 600, 200, 100);
             graph.Shapes.Add(rect);
             GradientAxialShading pattern = new GradientAxialShading(new Color("Blue"), new Color("Red"));
             pattern.StartX = 0;
             pattern.StartY = 0;
             pattern.EndX = 200;
             pattern.EndY = 0;
             Color fillColor = new Color();
             fillColor.PatternColorSpace = pattern;
             rect.GraphInfo.FillColor = fillColor;
             rect.GraphInfo.IsFilled = true;
             pdf.save(....);
             </xmp>
      </summary>
    </member>
    <member name="T:Aspose.Pdf.Generator.GradientRadialShading">
      <summary>
        <p>Realizes radial gradient fill.</p>
      </summary>
    </member>
    <member name="M:Aspose.Pdf.Generator.MhtUtility.UnpackMHT(System.String,System.String,System.String,System.Text.Encoding)">
      <summary>
              This method gives opportuity to unpack MHT-file, that is set of HTML page and referenced external resources(like images, CSSes, scripts etc)
            </summary>
      <param name="sourceMhtFile">full path to source MHT-file</param>
      <param name="targetFolder">absolute path to folder that will be used as target folder for parts of unpacked MHT-file</param>
      <param name="htmlPartFilesPrefix">this prefix will be added at beginning of file names of files of extracted parts of HTML file</param>
      <param name="sourceEncoding">encoding of source HTML file, isually is System.Text.Encoding.UTF8 encoding</param>
      <returns> returns full path for output HTML file </returns>
    </member>
    <member name="T:Aspose.Pdf.BaseActionCollection">
      <summary>
            Class incapsulates basic actions wuth page/annotation/field interactive actions
            </summary>
    </member>
    <member name="M:Aspose.Pdf.BaseActionCollection.RemoveActions">
      <summary>
            Removes all actions of the annotation. 
            </summary>
    </member>
    <member name="T:Aspose.Pdf.ColorType">
      <summary>
            Specifies color type of elements on page.
            </summary>
    </member>
    <member name="T:Aspose.Pdf.Exceptions.UnsupportedFontTypeException">
      <summary>
            The exception that is thrown when a font type is not supported.
            </summary>
    </member>
    <member name="M:Aspose.Pdf.Exceptions.UnsupportedFontTypeException.#ctor(System.String)">
      <summary>
            Initializes a new instance of the <see cref="T:Aspose.Pdf.Exceptions.UnsupportedFontTypeException" /> class.
            </summary>
      <param name="message">The message.</param>
    </member>
    <member name="M:Aspose.Pdf.Exceptions.UnsupportedFontTypeException.#ctor(System.String,System.Exception)">
      <summary>
            Initializes a new instance of the <see cref="T:Aspose.Pdf.Exceptions.UnsupportedFontTypeException"></see> class with a specified error message and a reference to the inner exception that is the cause of this exception.
            </summary>
      <param name="message">The error message that explains the reason for the exception. </param>
      <param name="innerException">The exception that is the cause of the current exception, or a null reference (Nothing in Visual Basic) if no inner exception is specified. </param>
    </member>
    <member name="M:Aspose.Pdf.Exceptions.UnsupportedFontTypeException.#ctor(System.Exception)">
      <summary>
            Initializes a new instance of the <see cref="T:Aspose.Pdf.Exceptions.UnsupportedFontTypeException"></see> class with a specified error message and a reference to the inner exception that is the cause of this exception.
            </summary>
      <param name="innerException">The exception that is the cause of the current exception, or a null reference (Nothing in Visual Basic) if no inner exception is specified. </param>
    </member>
    <member name="T:Aspose.Pdf.ExtendedBoolean">
      <summary>
            Represents boolean type that supports Undefined value.
            </summary>
    </member>
    <member name="F:Aspose.Pdf.ExtendedBoolean.Undefined">
      <summary>
            Undefined.
            </summary>
    </member>
    <member name="F:Aspose.Pdf.ExtendedBoolean.False">
      <summary>
            False.
            </summary>
    </member>
    <member name="F:Aspose.Pdf.ExtendedBoolean.True">
      <summary>
            True.
            </summary>
    </member>
    <member name="T:Aspose.Pdf.Text.FolderFontSource">
      <summary>
             Represents the folder that contains font files. 
             </summary>
    </member>
    <member name="T:Aspose.Pdf.Text.FontSource">
      <summary>
             Represents a base class fot font source.
             </summary>
    </member>
    <member name="M:Aspose.Pdf.Text.FolderFontSource.#ctor(System.String)">
      <summary> 
            Initializes a new instance of <see cref="T:Aspose.Pdf.Text.FolderFontSource" /> class.
            </summary>
      <param name="folderPath">Path to the folder.</param>
    </member>
    <member name="P:Aspose.Pdf.Text.FolderFontSource.FolderPath">
      <summary>
            Path to the folder that contains font files. 
            </summary>
    </member>
    <member name="T:Aspose.Pdf.Text.FontSourceCollection">
      <summary>
            Represents font sources collection.
            </summary>
    </member>
    <member name="M:Aspose.Pdf.Text.FontSourceCollection.GetEnumerator">
      <summary>
             Returns an enumerator for the entire collection.
            </summary>
    </member>
    <member name="M:Aspose.Pdf.Text.FontSourceCollection.CopyTo(System.Array,System.Int32)">
      <summary>
             Copies the entire collection to a compatible one-dimensional Array, starting at the specified index of the target array
            </summary>
    </member>
    <member name="M:Aspose.Pdf.Text.FontSourceCollection.Add(Aspose.Pdf.Text.FontSource)">
      <summary>
            Adds new font source object to the collection.
            </summary>
      <param name="fontSource">Font source.</param>
    </member>
    <member name="M:Aspose.Pdf.Text.FontSourceCollection.Clear">
      <summary>
            Clears the font source collection.
            </summary>
    </member>
    <member name="M:Aspose.Pdf.Text.FontSourceCollection.Delete(Aspose.Pdf.Text.FontSource)">
      <summary>
            Deletes the font source element.
            </summary>
    </member>
    <member name="M:Aspose.Pdf.Text.FontSourceCollection.Delete(System.Int32)">
      <summary>
            Deletes the font source element at the specified index.
            </summary>
    </member>
    <member name="P:Aspose.Pdf.Text.FontSourceCollection.Count">
      <summary>
             Gets the number of <see cref="T:Aspose.Pdf.Text.Font" /> object elements actually contained in the collection. 
             </summary>
    </member>
    <member name="P:Aspose.Pdf.Text.FontSourceCollection.SyncRoot">
      <summary>
             Gets an object that can be used to synchronize access to the collection.
             </summary>
    </member>
    <member name="P:Aspose.Pdf.Text.FontSourceCollection.IsSynchronized">
      <summary>
             Gets a value indicating whether access to the collection is synchronized (thread safe). 
            </summary>
    </member>
    <member name="P:Aspose.Pdf.Text.FontSourceCollection.Item(System.Int32)">
      <summary>
            Gets the font element at the specified index.
            </summary>
      <param name="index">
      </param>
      <returns>
      </returns>
    </member>
    <member name="T:Aspose.Pdf.Text.SystemFontSource">
      <summary>
             Represents all fonts installed to the system. 
             </summary>
    </member>
    <member name="M:Aspose.Pdf.Text.SystemFontSource.#ctor">
      <summary> 
            Initializes a new instance of <see cref="T:Aspose.Pdf.Text.SystemFontSource" /> class.
            </summary>
    </member>
    <member name="T:Aspose.Pdf.Text.CustomFontSubstitutionBase">
      <summary>
             Represents a base class for custom font substitution strategy.
             </summary>
    </member>
    <member name="T:Aspose.Pdf.Text.FontSubstitution">
      <summary>
             Represents a base class fot font substitution strategies.
             </summary>
    </member>
    <member name="M:Aspose.Pdf.Text.CustomFontSubstitutionBase.TrySubstitute(Aspose.Pdf.Text.CustomFontSubstitutionBase.OriginalFontSpecification,Aspose.Pdf.Text.Font@)">
      <summary>
            Substitutes original font with another font.
            </summary>
      <remarks>
            The class CustomFontSubstitutionBase should be inherited to implement custom font substitution logic.
            TrySubstitute method should be overridden properly:
            
            Must return true in case substitution is required. substitutionFont must be set to valid Font object.
            Must return false in case no substitution is required. substitutionFont may be set to null. 
            </remarks>
      <param name="originalFontSpecification">
      </param>
      <param name="substitutionFont">
      </param>
      <returns>
      </returns>
    </member>
    <member name="T:Aspose.Pdf.Text.SystemFontsSubstitution">
      <summary>
             Represents a class for font substitution strategy that substitutes fonts with system fonts.
             </summary>
    </member>
    <member name="M:Aspose.Pdf.Text.SystemFontsSubstitution.#ctor(Aspose.Pdf.Text.SubstitutionFontCategories)">
      <summary> 
            Initializes a new instance of <see cref="T:Aspose.Pdf.Text.SystemFontsSubstitution" /> class.
            </summary>
      <param name="fontCategories">Target font categories to substitute with system fonts</param>
    </member>
    <member name="P:Aspose.Pdf.Text.SystemFontsSubstitution.FontCategories">
      <summary>
            Gets or sets substitution font categories that should be substituted with system fonts.
            </summary>
    </member>
    <member name="P:Aspose.Pdf.Text.SystemFontsSubstitution.DefaultFont">
      <summary>
            Gets or sets default substitution font.
            The font is used when no other valid substitution were found but initial font belongs to target substitution category (<see cref="P:Aspose.Pdf.Text.SystemFontsSubstitution.FontCategories" />).
            </summary>
    </member>
    <member name="T:Aspose.Pdf.Text.SubstitutionFontCategories">
      <summary>
            Represents font categories that can be substituted.
            </summary>
    </member>
    <member name="F:Aspose.Pdf.Text.SubstitutionFontCategories.TheSameNamedEmbeddedFonts">
      <summary>
            The fonts that are named the same as system fonts.
            Those fonts are mostly safe to be substituted with the same named system fonts.
            </summary>
    </member>
    <member name="F:Aspose.Pdf.Text.SubstitutionFontCategories.AllEmbeddedFonts">
      <summary>
            All embedded fonts are substituted.
            </summary>
    </member>
    <member name="T:Aspose.Pdf.Text.FontSubstitutionCollection">
      <summary>
            Represents font substitution strategies collection.
            </summary>
    </member>
    <member name="M:Aspose.Pdf.Text.FontSubstitutionCollection.GetEnumerator">
      <summary>
             Returns an enumerator for the entire collection.
            </summary>
    </member>
    <member name="M:Aspose.Pdf.Text.FontSubstitutionCollection.CopyTo(System.Array,System.Int32)">
      <summary>
             Copies the entire collection to a compatible one-dimensional Array, starting at the specified index of the target array
            </summary>
    </member>
    <member name="M:Aspose.Pdf.Text.FontSubstitutionCollection.Add(Aspose.Pdf.Text.FontSubstitution)">
      <summary>
            Adds new font substitution object to the collection.
            </summary>
      <param name="fontSubstitution">Font substitution strategy.</param>
    </member>
    <member name="M:Aspose.Pdf.Text.FontSubstitutionCollection.Clear">
      <summary>
            Clears the font substitution collection.
            </summary>
    </member>
    <member name="P:Aspose.Pdf.Text.FontSubstitutionCollection.Count">
      <summary>
             Gets the number of <see cref="T:Aspose.Pdf.Text.Font" /> object elements actually contained in the collection. 
             </summary>
    </member>
    <member name="P:Aspose.Pdf.Text.FontSubstitutionCollection.SyncRoot">
      <summary>
             Gets an object that can be used to synchronize access to the collection.
             </summary>
    </member>
    <member name="P:Aspose.Pdf.Text.FontSubstitutionCollection.IsSynchronized">
      <summary>
             Gets a value indicating whether access to the collection is synchronized (thread safe). 
            </summary>
    </member>
    <member name="P:Aspose.Pdf.Text.FontSubstitutionCollection.Item(System.Int32)">
      <summary>
            Gets the font element at the specified index.
            </summary>
      <param name="index">
      </param>
      <returns>
      </returns>
    </member>
    <member name="T:Aspose.Pdf.Text.SimpleFontSubstitution">
      <summary>
             Represents a class for simple font substitution strategy.
             </summary>
    </member>
    <member name="M:Aspose.Pdf.Text.SimpleFontSubstitution.#ctor(System.String,System.String)">
      <summary> 
            Initializes a new instance of <see cref="T:Aspose.Pdf.Text.SimpleFontSubstitution" /> class.
            </summary>
      <param name="originalFontName">
      </param>
      <param name="substitutionFontName">
      </param>
    </member>
    <member name="M:Aspose.Pdf.Text.SimpleFontSubstitution.#ctor(System.String,System.String,Aspose.Pdf.Text.UnicodeSubstitution[])">
      <summary>
            Initializes a new instance of <see cref="T:Aspose.Pdf.Text.SimpleFontSubstitution" /> class.
            </summary>
      <param name="originalFontName">
      </param>
      <param name="substitutionFontName">
      </param>
      <param name="unicodeSubstitutions">
      </param>
    </member>
    <member name="P:Aspose.Pdf.Text.SimpleFontSubstitution.OriginalFontName">
      <summary>
            Gets original font name that should be substituted with <see cref="P:Aspose.Pdf.Text.SimpleFontSubstitution.SubstitutionFontName" /></summary>
    </member>
    <member name="P:Aspose.Pdf.Text.SimpleFontSubstitution.SubstitutionFontName">
      <summary>
            Gets font name that should substitute the <see cref="P:Aspose.Pdf.Text.SimpleFontSubstitution.OriginalFontName" /></summary>
    </member>
    <member name="T:Aspose.Pdf.Exceptions.PdfException">
      <summary>
            Represents errors that occur during PDF application execution.
            </summary>
    </member>
    <member name="M:Aspose.Pdf.Exceptions.PdfException.#ctor(System.String)">
      <summary>
            Initializes a new instance of the <see cref="T:Aspose.Pdf.Exceptions.PdfException" /> class.
            </summary>
      <param name="message">The message.</param>
    </member>
    <member name="M:Aspose.Pdf.Exceptions.PdfException.#ctor(System.String,System.Exception)">
      <summary>
            Initializes a new instance of the <see cref="T:Aspose.Pdf.Exceptions.PdfException"></see> class with a specified error message and a reference to the inner exception that is the cause of this exception.
            </summary>
      <param name="message">The error message that explains the reason for the exception. </param>
      <param name="innerException">The exception that is the cause of the current exception, or a null reference (Nothing in Visual Basic) if no inner exception is specified. </param>
    </member>
    <member name="M:Aspose.Pdf.Exceptions.PdfException.#ctor(System.Exception)">
      <summary>
            Initializes a new instance of the <see cref="T:Aspose.Pdf.Exceptions.PdfException"></see> class with a specified error message and a reference to the inner exception that is the cause of this exception.
            </summary>
      <param name="innerException">The exception that is the cause of the current exception, or a null reference (Nothing in Visual Basic) if no inner exception is specified. </param>
    </member>
    <member name="T:Aspose.Pdf.Exceptions.IncorrectFontUsageException">
      <summary>
            The exception that is thrown when font usage is incorrect.
            </summary>
    </member>
    <member name="T:Aspose.Pdf.Exceptions.InvalidFileFormatException">
      <summary>
            The exception that is thrown when a file is invalid.
            </summary>
    </member>
    <member name="M:Aspose.Pdf.Exceptions.InvalidFileFormatException.#ctor(System.String)">
      <summary>
            Initializes a new instance of the <see cref="T:Aspose.Pdf.Exceptions.InvalidFileFormatException" /> class.
            </summary>
      <param name="message">The message.</param>
    </member>
    <member name="M:Aspose.Pdf.Exceptions.InvalidFileFormatException.#ctor(System.String,System.Exception)">
      <summary>
            Initializes a new instance of the <see cref="T:Aspose.Pdf.Exceptions.InvalidFileFormatException"></see> class with a specified error message and a reference to the inner exception that is the cause of this exception.
            </summary>
      <param name="message">The error message that explains the reason for the exception. </param>
      <param name="innerException">The exception that is the cause of the current exception, or a null reference (Nothing in Visual Basic) if no inner exception is specified. </param>
    </member>
    <member name="M:Aspose.Pdf.Exceptions.InvalidFileFormatException.#ctor(System.Exception)">
      <summary>
            Initializes a new instance of the <see cref="T:Aspose.Pdf.Exceptions.InvalidFileFormatException"></see> class with a specified error message and a reference to the inner exception that is the cause of this exception.
            </summary>
      <param name="innerException">The exception that is the cause of the current exception, or a null reference (Nothing in Visual Basic) if no inner exception is specified. </param>
    </member>
    <member name="M:Aspose.Pdf.Exceptions.IncorrectFontUsageException.#ctor(System.String)">
      <summary>
            Initializes a new instance of the <see cref="T:Aspose.Pdf.Exceptions.IncorrectFontUsageException" /> class.
            </summary>
      <param name="message">The message.</param>
    </member>
    <member name="M:Aspose.Pdf.Exceptions.IncorrectFontUsageException.#ctor(System.String,System.Exception)">
      <summary>
            Initializes a new instance of the <see cref="T:Aspose.Pdf.Exceptions.IncorrectFontUsageException"></see> class with a specified error message and a reference to the inner exception that is the cause of this exception.
            </summary>
      <param name="message">The error message that explains the reason for the exception. </param>
      <param name="innerException">The exception that is the cause of the current exception, or a null reference (Nothing in Visual Basic) if no inner exception is specified. </param>
    </member>
    <member name="M:Aspose.Pdf.Exceptions.IncorrectFontUsageException.#ctor(System.Exception)">
      <summary>
            Initializes a new instance of the <see cref="T:Aspose.Pdf.Exceptions.IncorrectFontUsageException"></see> class with a specified error message and a reference to the inner exception that is the cause of this exception.
            </summary>
      <param name="innerException">The exception that is the cause of the current exception, or a null reference (Nothing in Visual Basic) if no inner exception is specified. </param>
    </member>
    <member name="M:Aspose.Pdf.Exceptions.InvalidPasswordException.#ctor(System.String)">
      <summary>
            Initializes a new instance of the <see cref="T:Aspose.Pdf.Exceptions.InvalidPasswordException" /> class.
            </summary>
      <param name="message">The message.</param>
    </member>
    <member name="M:Aspose.Pdf.Exceptions.InvalidPasswordException.#ctor(System.String,System.Exception)">
      <summary>
            Initializes a new instance of the <see cref="T:Aspose.Pdf.Exceptions.InvalidPasswordException"></see> class with a specified error message and a reference to the inner exception that is the cause of this exception.
            </summary>
      <param name="message">The error message that explains the reason for the exception. </param>
      <param name="innerException">The exception that is the cause of the current exception, or a null reference (Nothing in Visual Basic) if no inner exception is specified. </param>
    </member>
    <member name="M:Aspose.Pdf.Exceptions.InvalidPasswordException.#ctor(System.Exception)">
      <summary>
            Initializes a new instance of the <see cref="T:Aspose.Pdf.Exceptions.InvalidPasswordException"></see> class with a specified error message and a reference to the inner exception that is the cause of this exception.
            </summary>
      <param name="innerException">The exception that is the cause of the current exception, or a null reference (Nothing in Visual Basic) if no inner exception is specified. </param>
    </member>
    <member name="T:Aspose.Pdf.Exceptions.InvalidPdfFileFormatException">
      <summary>
            The exception that is thrown when a pdf file is invalid.
            </summary>
    </member>
    <member name="M:Aspose.Pdf.Exceptions.InvalidPdfFileFormatException.#ctor(System.String)">
      <summary>
            Initializes a new instance of the <see cref="T:Aspose.Pdf.Exceptions.InvalidPdfFileFormatException" /> class.
            </summary>
      <param name="message">The message.</param>
    </member>
    <member name="M:Aspose.Pdf.Exceptions.InvalidPdfFileFormatException.#ctor(System.String,System.Exception)">
      <summary>
            Initializes a new instance of the <see cref="T:Aspose.Pdf.Exceptions.InvalidPdfFileFormatException"></see> class with a specified error message and a reference to the inner exception that is the cause of this exception.
            </summary>
      <param name="message">The error message that explains the reason for the exception. </param>
      <param name="innerException">The exception that is the cause of the current exception, or a null reference (Nothing in Visual Basic) if no inner exception is specified. </param>
    </member>
    <member name="M:Aspose.Pdf.Exceptions.InvalidPdfFileFormatException.#ctor(System.Exception)">
      <summary>
            Initializes a new instance of the <see cref="T:Aspose.Pdf.Exceptions.InvalidPdfFileFormatException"></see> class with a specified error message and a reference to the inner exception that is the cause of this exception.
            </summary>
      <param name="innerException">The exception that is the cause of the current exception, or a null reference (Nothing in Visual Basic) if no inner exception is specified. </param>
    </member>
    <member name="T:Aspose.Pdf.PdfFormat">
      <summary>
            This class represents an pdf format.
            </summary>
    </member>
    <member name="F:Aspose.Pdf.PdfFormat.PDF_A_1A">
            Pdf/A-1a
        </member>
    <member name="F:Aspose.Pdf.PdfFormat.PDF_A_1B">
            Pdf/A-1b
        </member>
    <member name="F:Aspose.Pdf.PdfFormat.PDF_A_2B">
            Pdf/A-2b
        </member>
    <member name="F:Aspose.Pdf.PdfFormat.Tagged_PDF">
            Tagged PDF
        </member>
    <member name="F:Aspose.Pdf.PdfFormat.v_1_3">
            Adobe version 1.3
        </member>
    <member name="F:Aspose.Pdf.PdfFormat.v_1_4">
            Adobe version 1.4
        </member>
    <member name="F:Aspose.Pdf.PdfFormat.v_1_5">
            Adobe version 1.5
        </member>
    <member name="F:Aspose.Pdf.PdfFormat.v_1_6">
            Adobe version 1.6
        </member>
    <member name="F:Aspose.Pdf.PdfFormat.v_1_7">
            Adobe version 1.7
        </member>
    <member name="T:Aspose.Pdf.IIndexBitmapConverter">
      <summary>
            This interface declared for customization algorithms of quantization. 
            Users can implement their own realization of this algorithms (for example algorithms based on unmanaged code).
            </summary>
    </member>
    <member name="M:Aspose.Pdf.IIndexBitmapConverter.Get1BppImage(System.Drawing.Bitmap)">
      <summary>
            Returns 1Bpp bitmap representation
            </summary>
    </member>
    <member name="M:Aspose.Pdf.IIndexBitmapConverter.Get4BppImage(System.Drawing.Bitmap)">
      <summary>
            Returns 4Bpp bitmap representation
            </summary>
    </member>
    <member name="M:Aspose.Pdf.IIndexBitmapConverter.Get8BppImage(System.Drawing.Bitmap)">
      <summary>
            Returns 8Bpp bitmap representation
            </summary>
    </member>
    <member name="T:Aspose.Pdf.CryptoAlgorithm">
      <summary>
            Represent type of cryptographic algorithm that used in encryption/decryption routines.
            </summary>
    </member>
    <member name="F:Aspose.Pdf.CryptoAlgorithm.RC4x40">
      <summary>
            RC4 with key length 40.
            </summary>
    </member>
    <member name="F:Aspose.Pdf.CryptoAlgorithm.RC4x128">
      <summary>
            RC4 with key length 128.
            </summary>
    </member>
    <member name="F:Aspose.Pdf.CryptoAlgorithm.AESx128">
      <summary>
            AES with key length 128.
            </summary>
    </member>
    <member name="F:Aspose.Pdf.CryptoAlgorithm.AESx256">
      <summary>
            AES with key length 256.
            </summary>
    </member>
    <member name="T:Aspose.Pdf.Exceptions.FontNotFoundException">
      <summary>
            The exception that is thrown when a font is not found.
            </summary>
    </member>
    <member name="M:Aspose.Pdf.Exceptions.FontNotFoundException.#ctor(System.String)">
      <summary>
            Initializes a new instance of the <see cref="T:Aspose.Pdf.Exceptions.FontNotFoundException" /> class.
            </summary>
      <param name="message">The message.</param>
    </member>
    <member name="M:Aspose.Pdf.Exceptions.FontNotFoundException.#ctor(System.String,System.Exception)">
      <summary>
            Initializes a new instance of the <see cref="T:Aspose.Pdf.Exceptions.FontNotFoundException"></see> class with a specified error message and a reference to the inner exception that is the cause of this exception.
            </summary>
      <param name="message">The error message that explains the reason for the exception. </param>
      <param name="innerException">The exception that is the cause of the current exception, or a null reference (Nothing in Visual Basic) if no inner exception is specified. </param>
    </member>
    <member name="M:Aspose.Pdf.Exceptions.FontNotFoundException.#ctor(System.Exception)">
      <summary>
            Initializes a new instance of the <see cref="T:Aspose.Pdf.Exceptions.FontNotFoundException"></see> class with a specified error message and a reference to the inner exception that is the cause of this exception.
            </summary>
      <param name="innerException">The exception that is the cause of the current exception, or a null reference (Nothing in Visual Basic) if no inner exception is specified. </param>
    </member>
    <member name="T:Aspose.Pdf.ExtractImageMode">
      <summary>
            Defines different modes which can be used while extracting images from documents.
            </summary>
    </member>
    <member name="F:Aspose.Pdf.ExtractImageMode.DefinedInResources">
      <summary>
            Defines image extraction mode in which all images defined in resources for particular page are extracted.
            </summary>
    </member>
    <member name="F:Aspose.Pdf.ExtractImageMode.ActuallyUsed">
      <summary> 
            Defines image extraction mode in which only those images are extracted that are actually shown on a page.
            </summary>
    </member>
    <member name="T:Aspose.Pdf.Devices.FormPresentationMode">
      <summary>
            Used to specify the form presentation mode when printing or converting to image pdf documents.
            </summary>
    </member>
    <member name="F:Aspose.Pdf.Devices.FormPresentationMode.Production">
      <summary>
            Specifies Production form presentation mode (used by default).
            </summary>
    </member>
    <member name="F:Aspose.Pdf.Devices.FormPresentationMode.Editor">
      <summary>
            Specifies Editor form presentation mode.
            </summary>
      <remarks>
            The Editor mode is used by some products to display forms.
            In Editor mode some form elements are displayed as they are shown in form designer.
            </remarks>
    </member>
    <member name="T:Aspose.Pdf.BaseParagraph">
      <summary>
            Represents a abstract base object can be added to the page(doc.Paragraphs.Add()).
            </summary>
    </member>
    <member name="P:Aspose.Pdf.BaseParagraph.Margin">
      <summary>
            Gets or sets a outer margin for paragraph (for pdf generation)
            </summary>
    </member>
    <member name="P:Aspose.Pdf.BaseParagraph.IsKeptWithNext">
      <summary>
            Gets or sets a bool value that indicates whether current paragraph remains in the same page along with next paragraph.
            Default is false.(for pdf generation)
            </summary>
    </member>
    <member name="T:Aspose.Pdf.BorderCornerStyle">
      <summary>
            Enumerates the border corner styles for border.
            </summary>
    </member>
    <member name="F:Aspose.Pdf.BorderCornerStyle.None">
      <summary>
            None border style.
            </summary>
    </member>
    <member name="F:Aspose.Pdf.BorderCornerStyle.Round">
      <summary>
            Round border style.
            </summary>
    </member>
    <member name="M:Aspose.Pdf.BorderInfo.#ctor(Aspose.Pdf.BorderSide,Aspose.Pdf.Color)">
      <summary>
            Initializes a new instance of the <see cref="T:Aspose.Pdf.BorderInfo" /> class.
            </summary>
      <param name="borderSide">Indicates the border sides info. For example: (int)(BorderSide.Left | BorderSide.Top).</param>
      <param name="borderColor">The border color.</param>
    </member>
    <member name="M:Aspose.Pdf.BorderInfo.#ctor">
      <summary>
            Initializes a new instance of the <see cref="T:Aspose.Pdf.BorderInfo" /> class.
            </summary>
    </member>
    <member name="M:Aspose.Pdf.BorderInfo.#ctor(Aspose.Pdf.BorderSide)">
      <summary>
            Initializes a new instance of the <see cref="T:Aspose.Pdf.BorderInfo" /> class.
            </summary>
      <param name="borderSide">Indicates the border sides info. For example: (BorderSide.Left | BorderSide.Top).</param>
    </member>
    <member name="M:Aspose.Pdf.BorderInfo.#ctor(Aspose.Pdf.BorderSide,System.Single)">
      <summary>
            Initializes a new instance of the <see cref="T:Aspose.Pdf.BorderInfo" /> class.
            </summary>
      <param name="borderSide">Indicates the border sides info. For example: (BorderSide.Left | BorderSide.Top).</param>
      <param name="borderWidth">The width of the border.</param>
    </member>
    <member name="M:Aspose.Pdf.BorderInfo.#ctor(Aspose.Pdf.BorderSide,System.Single,Aspose.Pdf.Color)">
      <summary>
            Initializes a new instance of the <see cref="T:Aspose.Pdf.BorderInfo" /> class.
            </summary>
      <param name="borderSide">Indicates the border sides info. For example: (BorderSide.Left | BorderSide.Top).</param>
      <param name="borderWidth">The width of the border.</param>
      <param name="borderColor">The border color.</param>
    </member>
    <member name="M:Aspose.Pdf.BorderInfo.#ctor(Aspose.Pdf.BorderSide,Aspose.Pdf.CellBorderStyle)">
      <summary>
            Initializes a new instance of the <see cref="T:Aspose.Pdf.BorderInfo" /> class.
            </summary>
      <param name="borderSide">Indicates the border sides info. For example: (BorderSide.Left | BorderSide.Top).</param>
      <param name="borderStyle">The border format info.</param>
    </member>
    <member name="M:Aspose.Pdf.BorderInfo.Clone">
      <summary>
            Clones a new BorderInfo object.
            </summary>
      <returns>The new BorderInfo object.</returns>
    </member>
    <member name="P:Aspose.Pdf.BorderInfo.Left">
      <summary>
            Gets or sets a <see cref="T:Aspose.Pdf.CellBorderStyle" /> object that indicates left of the border.
            </summary>
    </member>
    <member name="P:Aspose.Pdf.BorderInfo.Right">
      <summary>
            Gets or sets a <see cref="T:Aspose.Pdf.CellBorderStyle" /> object that indicates right of the border.
            </summary>
    </member>
    <member name="P:Aspose.Pdf.BorderInfo.Top">
      <summary>
            Gets or sets a <see cref="T:Aspose.Pdf.CellBorderStyle" /> object that indicates the top border.
            </summary>
    </member>
    <member name="P:Aspose.Pdf.BorderInfo.Bottom">
      <summary>
            Gets or sets a <see cref="T:Aspose.Pdf.CellBorderStyle" /> object that indicates bottom of the border.
            </summary>
    </member>
    <member name="P:Aspose.Pdf.BorderInfo.RoundedBorderRadius">
      <summary>
            Gets or sets a rouded border radius
            </summary>
    </member>
    <member name="T:Aspose.Pdf.BorderSide">
      <summary>
            Enumerates the border sides.
            </summary>
    </member>
    <member name="F:Aspose.Pdf.BorderSide.None">
      <summary>
            No border.
            </summary>
    </member>
    <member name="F:Aspose.Pdf.BorderSide.Left">
      <summary>
            Left border.
            </summary>
    </member>
    <member name="F:Aspose.Pdf.BorderSide.Top">
      <summary>
            Top border.
            </summary>
    </member>
    <member name="F:Aspose.Pdf.BorderSide.Right">
      <summary>
            Right border.
            </summary>
    </member>
    <member name="F:Aspose.Pdf.BorderSide.Bottom">
      <summary>
            Bottom border.
            </summary>
    </member>
    <member name="F:Aspose.Pdf.BorderSide.All">
      <summary>
            All sides borders.It has the same meaning when useing "Box" and will be replaced by "Box" one year later. So, please use "Box" if possible. 
            </summary>
    </member>
    <member name="F:Aspose.Pdf.BorderSide.Box">
      <summary>
            Four sides borders.
            </summary>
    </member>
    <member name="T:Aspose.Pdf.CellBorderStyle">
      <summary>
            Represents a border style.
            </summary>
    </member>
    <member name="M:Aspose.Pdf.CellBorderStyle.Clone">
      <summary>
            Clones a new BorderInfo object.
            </summary>
      <returns>The new BorderInfo object.</returns>
    </member>
    <member name="P:Aspose.Pdf.CellBorderStyle.IsBorderEnabled">
      <summary>
            The border enabled.
            </summary>
    </member>
    <member name="P:Aspose.Pdf.CellBorderStyle.LineWidth">
      <summary>
            The border line width.
            </summary>
    </member>
    <member name="P:Aspose.Pdf.CellBorderStyle.Color">
      <summary>
            The border color.
            </summary>
    </member>
    <member name="T:Aspose.Pdf.FloatingBox">
            Represents a FloatingBox in a Pdf document. FloatingBox is custom positioned.
        </member>
    <member name="M:Aspose.Pdf.FloatingBox.#ctor(System.Single,System.Single)">
      <summary>
            Initializes a new instance of the <see cref="T:Aspose.Pdf.FloatingBox" /> class with specified width and height.
            </summary>
      <param name="width">The width of the box.</param>
      <param name="height">The height of the box.</param>
    </member>
    <member name="F:Aspose.Pdf.FloatingBox.VerticalAlignment">
            Gets or sets a vertical alignment of paragraph 
        </member>
    <member name="M:Aspose.Pdf.FloatingBox.Clone">
      <summary>
            Clones a new <see cref="T:Aspose.Pdf.FloatingBox" /> object. Paragraphs in the floating box are not cloned.
            </summary>
      <returns>The new <see cref="T:Aspose.Pdf.FloatingBox" /> object.</returns>
    </member>
    <member name="P:Aspose.Pdf.FloatingBox.Width">
            Gets or sets a float value that indicates the width of the floating box.
        </member>
    <member name="P:Aspose.Pdf.FloatingBox.Height">
            Gets or sets a float value that indicates the height of the floating box.
        </member>
    <member name="P:Aspose.Pdf.FloatingBox.IsNeedRepeating">
            Gets or sets a bool value that indicates whether the paragraph need to be repeated on next page.
            Default value is false.The attribute is only valid when the paragraph itself and the object its ReferenceParagraphID referred to both are included in RepeatingRows.
        </member>
    <member name="P:Aspose.Pdf.FloatingBox.Paragraphs">
            Gets or sets a <see cref="P:Aspose.Pdf.FloatingBox.Paragraphs" /> collection that indicates all paragraphs in the cell.
        </member>
    <member name="P:Aspose.Pdf.FloatingBox.IsExtraContentClip">
            Gets or sets a value that indicates in case with fixed row height, do content will be truncated if it go out of margin
        </member>
    <member name="P:Aspose.Pdf.FloatingBox.Border">
            Gets or sets a <see cref="T:Aspose.Pdf.BorderInfo" /> object that indicates the border info of the floating box.
        </member>
    <member name="P:Aspose.Pdf.FloatingBox.BackgroundColor">
            Gets or sets a <see cref="T:Aspose.Pdf.Color" /> object that indicates the background color of the 
            floating box.
        </member>
    <member name="P:Aspose.Pdf.FloatingBox.Padding">
            Gets or sets a <see cref="T:Aspose.Pdf.MarginInfo" /> object that indicates the padding of the floating box.
        </member>
    <member name="P:Aspose.Pdf.FloatingBox.Left">
      <summary>
            Gets or sets the table left coordinate.
            </summary>
    </member>
    <member name="P:Aspose.Pdf.FloatingBox.Top">
      <summary>
            Gets or sets the table top coordinate.
            </summary>
    </member>
    <member name="T:Aspose.Pdf.HeaderFooter">
      <summary>
            Class represents header or footer pdf page.
            </summary>
    </member>
    <member name="P:Aspose.Pdf.HeaderFooter.Paragraphs">
      <summary>
            Gets the paragraphs.
            </summary>
    </member>
    <member name="P:Aspose.Pdf.HeaderFooter.Margin">
      <summary>
            Gets or sets the margin info.
            </summary>
    </member>
    <member name="T:Aspose.Pdf.Heading">
      <summary>
            Represents heading.
            </summary>
    </member>
    <member name="T:Aspose.Pdf.Text.TextFragment">
      <summary>
             Represents fragment of Pdf text.
             </summary>
      <remarks>
             In a few words, <see cref="T:Aspose.Pdf.Text.TextFragment" /> object contains list of <see cref="T:Aspose.Pdf.Text.TextSegment" /> objects.
             
             In details:
             Text of pdf document in <see cref="N:Aspose.Pdf" /> is represented by two basic objects: <see cref="T:Aspose.Pdf.Text.TextFragment" /> and <see cref="T:Aspose.Pdf.Text.TextSegment" />
            
             The differences between them is mostly context-dependent.
             
             Let's consider following scenario. User searches text "hello world" to operate with it, change it's properties, look etc.
             <code lang="C#">
             Document doc = new Document(docFile);
             TextFragmentAbsorber absorber = new TextFragmentAbsorber("hello world");
             doc.Pages[1].Accept(absorber);
             </code>
             Phisycally pdf text's representation is very complex.
             The text "hello world" may consist of several phisycally independent text segments.
            
             The Aspose.Pdf text model basically establishes that <see cref="T:Aspose.Pdf.Text.TextFragment" /> object
             provides single logic operation set over physical <see cref="T:Aspose.Pdf.Text.TextSegment" /> objects set that represent user's query.
            
             In text search scenario, <see cref="T:Aspose.Pdf.Text.TextFragment" /> is logical "hello world" text representation,
             and <see cref="T:Aspose.Pdf.Text.TextSegment" /> object collection represents all physical segments that construct "hello world" text object.
            
             So, <see cref="T:Aspose.Pdf.Text.TextFragment" /> is close to logical text representation.
             And <see cref="T:Aspose.Pdf.Text.TextSegment" /> is close to physical text representation.
            
             Obviously each <see cref="T:Aspose.Pdf.Text.TextSegment" /> object may have it's own font, coloring, positioning properties.
            
             <see cref="T:Aspose.Pdf.Text.TextFragment" /> provides simple way to change text with it's properties: set font, set font size, set font color etc.
             Meanwhile <see cref="T:Aspose.Pdf.Text.TextSegment" /> objects are accessible and users are able to operate with <see cref="T:Aspose.Pdf.Text.TextSegment" /> objects independently.
             
             Note that changing TextFragment properties may change inner <see cref="P:Aspose.Pdf.Text.TextFragment.Segments" /> collection because TextFragment is an aggregate object and it may rearrange internal segments or merge them into single segment.
             If your requirement is to leave the <see cref="P:Aspose.Pdf.Text.TextFragment.Segments" /> collection unchanged, please change inner segments individually.
             </remarks>
      <example>
             The example demonstrates how to find text on the first PDF document page and replace the text and it's font.
             <code lang="C#"> 
             // Open document
             Document doc = new Document(@"D:\Tests\input.pdf");
             
             // Find font that will be used to change document text font
             Aspose.Pdf.Txt.Font font = FontRepository.FindFont("Arial");
             
             // Create TextFragmentAbsorber object to find all "hello world" text occurrences
             TextFragmentAbsorber absorber = new TextFragmentAbsorber("hello world");
             
             // Accept the absorber for first page
             doc.Pages[1].Accept(absorber);
             
             // Change text and font of the first text occurrence
             absorber.TextFragments[1].Text = "hi world";
             absorber.TextFragments[1].TextState.Font = font;
             
             // Save document
             doc.Save(@"D:\Tests\output.pdf");  
             </code></example>
    </member>
    <member name="M:Aspose.Pdf.Text.TextFragment.#ctor">
      <summary>
            Initializes new instance of the <see cref="T:Aspose.Pdf.Text.TextFragment" /> object.
            </summary>
    </member>
    <member name="M:Aspose.Pdf.Text.TextFragment.#ctor(System.String)">
      <summary>
            Creates <see cref="T:Aspose.Pdf.Text.TextFragment" /> object with single <see cref="T:Aspose.Pdf.Text.TextSegment" /> object inside. 
            Specifies text string inside the segment.
            </summary>
      <param name="text">Text fragment's text.</param>
    </member>
    <member name="P:Aspose.Pdf.Text.TextFragment.Text">
      <summary>
            Gets or sets <see cref="T:System.String" /> text object that the <see cref="T:Aspose.Pdf.Text.TextFragment" /> object represents.
            </summary>
      <example>
            The example demonstrates how to search a text and replace first occurrence represented with <see cref="T:Aspose.Pdf.Text.TextFragment" /> object .
            <code lang="C#"> 
            // Open document
            Document doc = new Document(@"D:\Tests\input.pdf");
            
            // Create TextFragmentAbsorber object to find all "hello world" text occurrences
            TextFragmentAbsorber absorber = new TextFragmentAbsorber("hello world");
            
            // Accept the absorber for first page
            doc.Pages[1].Accept(absorber);
            
            // Change font of the first text occurrence
            absorber.TextFragments[1].Text = "hi world";
            
            // Save document
            doc.Save(@"D:\Tests\output.pdf"); 
            </code></example>
      <seealso cref="T:Aspose.Pdf.Text.TextFragmentAbsorber" />
      <seealso cref="T:Aspose.Pdf.Document" />
    </member>
    <member name="P:Aspose.Pdf.Text.TextFragment.TextState">
      <summary>
            Gets or sets text state for the text that <see cref="T:Aspose.Pdf.Text.TextFragment" /> object represents.
            </summary>
      <remarks>
            Provides a way to change following properties of the text:
               Font
               FontSize
               FontStyle
               ForegroundColor
               BackgroundColor
            </remarks>
      <example>
            The example demonstrates how to change text color and font size of the text with <see cref="P:Aspose.Pdf.Text.TextFragment.TextState" /> object.
            <code lang="C#"> 
            // Open document
            Document doc = new Document(@"D:\Tests\input.pdf");
            
            // Create TextFragmentAbsorber object to find all "hello world" text occurrences
            TextFragmentAbsorber absorber = new TextFragmentAbsorber("hello world");
            
            // Accept the absorber for first page
            doc.Pages[1].Accept(absorber);
            
            // Change foreground color of the first text occurrence
            absorber.TextFragments[1].TextState.ForegroundColor = Color.FromRgb(System.Drawing.Color.Red);
            
            // Change font size of the first text occurrence
            absorber.TextFragments[1].TextState.FontSize = 15;
            
            // Save document
            doc.Save(@"D:\Tests\output.pdf");  
            </code></example>
      <seealso cref="T:Aspose.Pdf.Text.TextFragmentAbsorber" />
      <seealso cref="T:Aspose.Pdf.Document" />
    </member>
    <member name="P:Aspose.Pdf.Text.TextFragment.Segments">
      <summary>
            Gets text segments for current <see cref="T:Aspose.Pdf.Text.TextFragment" />.
            </summary>
      <remarks>
            In a few words, <see cref="T:Aspose.Pdf.Text.TextSegment" /> objects are children of <see cref="T:Aspose.Pdf.Text.TextFragment" /> object.
            Advanced users may access segments directly to perform more complex text edit scenarios.
            For details, please look at <see cref="T:Aspose.Pdf.Text.TextFragment" /> object description.
            </remarks>
      <example>
            The example demonstrates how to navigate all <see cref="T:Aspose.Pdf.Text.TextSegment" /> objects inside <see cref="T:Aspose.Pdf.Text.TextFragment" />.
            <code lang="C#"> 
            // Open document
            Document doc = new Document(@"D:\Tests\input.pdf");
            
            // Create TextFragmentAbsorber object to find all "hello world" text occurrences
            TextFragmentAbsorber absorber = new TextFragmentAbsorber("hello world");
            
            // Accept the absorber for first page
            doc.Pages[1].Accept(absorber);
            
            // Navigate all text segments and out their text and placement info
            foreach (TextSegment segment in absorber.TextFragments[1].Segments)
            {
                Console.Out.WriteLine(string.Format("segment text: {0}", segment.Text));
                Console.Out.WriteLine(string.Format("segment X indent: {0}", segment.Position.XIndent));
                Console.Out.WriteLine(string.Format("segment Y indent: {0}", segment.Position.YIndent));
            }
            
            </code></example>
      <seealso cref="T:Aspose.Pdf.Text.TextFragmentAbsorber" />
      <seealso cref="T:Aspose.Pdf.Document" />
      <seealso cref="T:Aspose.Pdf.Text.TextSegment" />
    </member>
    <member name="P:Aspose.Pdf.Text.TextFragment.Position">
      <summary>
            Gets or sets text position for text, represented with <see cref="T:Aspose.Pdf.Text.TextFragment" /> object.
            </summary>
      <example>
            The example demonstrates how to view placement of a text, represented by <see cref="T:Aspose.Pdf.Text.TextFragment" /> object.
            <code lang="C#"> 
             // Open document
             Document doc = new Document(@"D:\Tests\input.pdf");
            
             // Create TextFragmentAbsorber object to find all "hello world" text occurrences
             TextFragmentAbsorber absorber = new TextFragmentAbsorber("hello world");
            
             // Accept the absorber for first page
             doc.Pages[1].Accept(absorber);
            
             // View text and placement info of first text occurrence
             TextFragment firstOccurrence = absorber.TextFragments[1];
            
             Console.Out.WriteLine(string.Format("fragment text: {0}", firstOccurrence.Text));
             Console.Out.WriteLine(string.Format("fragment X indent: {0}", firstOccurrence.Position.XIndent));
             Console.Out.WriteLine(string.Format("fragment Y indent: {0}", firstOccurrence.Position.YIndent));
            
            </code></example>
      <seealso cref="T:Aspose.Pdf.Text.TextFragmentAbsorber" />
      <seealso cref="T:Aspose.Pdf.Document" />
      <seealso cref="T:Aspose.Pdf.Text.TextSegment" />
    </member>
    <member name="P:Aspose.Pdf.Text.TextFragment.BaselinePosition">
      <summary>
            Gets text position for text, represented with <see cref="T:Aspose.Pdf.Text.TextFragment" /> object.
            The YIndent of the Position structure represents baseline coordinate of the text fragment.
            </summary>
    </member>
    <member name="P:Aspose.Pdf.Text.TextFragment.Rectangle">
      <summary>
            Gets rectangle of the TextFragment
            </summary>
    </member>
    <member name="P:Aspose.Pdf.Text.TextFragment.Page">
      <summary>
            Gets page that contains the TextFragment
            </summary>
      <remarks>
            The value can be null in case the TextFragment object doesn't belong to any page.
            </remarks>
    </member>
    <member name="P:Aspose.Pdf.Text.TextFragment.Form">
      <summary>
            Gets form object that contains the TextFragment
            </summary>
      <remarks>
            The value can be null in case the TextFragment object doesn't belong to a form.
            </remarks>
    </member>
    <member name="P:Aspose.Pdf.Text.TextFragment.PlacementInfo">
      <summary>
            Gets or sets placement info
            </summary>
    </member>
    <member name="M:Aspose.Pdf.Heading.#ctor(System.Int32)">
      <summary>
            Initializes a new instance of the Cell class.
            </summary>
      <param name="level">The headings level.</param>
    </member>
    <member name="P:Aspose.Pdf.Heading.TocPage">
      <summary>
            Gets the page that contains this heading.
            </summary>
      <value>The page.</value>
    </member>
    <member name="P:Aspose.Pdf.Heading.Top">
      <summary>
            Gets the top Y of this headings.
            </summary>
      <value>The top Y.</value>
    </member>
    <member name="P:Aspose.Pdf.Heading.IsAutoSequence">
      <summary>
            Gets the heading should be numered automatically.
            </summary>
      <value>The IsAutoSequens.</value>
    </member>
    <member name="P:Aspose.Pdf.Heading.IsInList">
      <summary>
            Gets the heading should be in toc list.
            </summary>
      <value>The IsInList.</value>
    </member>
    <member name="P:Aspose.Pdf.Heading.DestinationPage">
      <summary>
            Gets the destination page.
            </summary>
      <value>The destination page.</value>
    </member>
    <member name="P:Aspose.Pdf.Heading.Level">
      <summary>
            Gets the level.
            </summary>
      <value>The heading level.</value>
    </member>
    <member name="P:Aspose.Pdf.Heading.Style">
      <summary>
            Gets or sets style.
            </summary>
      <value>The heading style.</value>
    </member>
    <member name="T:Aspose.Pdf.Hyperlink">
      <summary>
            Represents abstract hyperlink.
            </summary>
    </member>
    <member name="T:Aspose.Pdf.Image">
      <summary>
            Represents image.
            </summary>
    </member>
    <member name="M:Aspose.Pdf.Image.Clone">
      <summary>
            Clone the image.
            </summary>
    </member>
    <member name="P:Aspose.Pdf.Image.File">
      <summary>
            Gets or sets the image file.
            </summary>
    </member>
    <member name="P:Aspose.Pdf.Image.FixWidth">
      <summary>
            Gets or sets the image width.
            </summary>
    </member>
    <member name="P:Aspose.Pdf.Image.FixHeight">
      <summary>
            Gets or sets the image height.
            </summary>
    </member>
    <member name="P:Aspose.Pdf.Image.Hyperlink">
      <summary>
            Gets or sets the image hyperlink.
            </summary>
    </member>
    <member name="P:Aspose.Pdf.Image.ImageScale">
      <summary>
            Gets or sets the image scale.
            </summary>
    </member>
    <member name="P:Aspose.Pdf.Image.ImageStream">
      <summary>
            Gets or sets the image stream.
            </summary>
    </member>
    <member name="T:Aspose.Pdf.LevelFormat">
      <summary>
            Represents format of the table of contents.
            </summary>
    </member>
    <member name="P:Aspose.Pdf.LevelFormat.TextState">
      <summary>
            Gets or sets a list level text state 
            </summary>
    </member>
    <member name="P:Aspose.Pdf.LevelFormat.Margin">
      <summary>
            Gets or sets a list level margin 
            </summary>
    </member>
    <member name="T:Aspose.Pdf.MarginInfo">
      <summary>
            This class represents a margin for different objects.
            </summary>
    </member>
    <member name="M:Aspose.Pdf.MarginInfo.#ctor">
      <summary>
            Initializes a new instance of the <see cref="T:Aspose.Pdf.MarginInfo" /> class.
            </summary>
    </member>
    <member name="M:Aspose.Pdf.MarginInfo.#ctor(System.Double,System.Double,System.Double,System.Double)">
      <summary>
            Constructor of Rectangle.
            </summary>
      <param name="left">Left margin.</param>
      <param name="bottom">Bottom margin</param>
      <param name="right">Right margin.</param>
      <param name="top">Top margin.</param>
    </member>
    <member name="M:Aspose.Pdf.MarginInfo.Clone">
      <summary>
            Clones a new <see cref="T:Aspose.Pdf.MarginInfo" /> object.
            </summary>
      <returns>The new object.</returns>
    </member>
    <member name="P:Aspose.Pdf.MarginInfo.Left">
      <summary>
            Gets or sets a float value that indicates the left margin.
            The unit is point. In XML,the default unit is point,but cm and inch are also 
            supported. For example,"10cm" or "5inch".
            </summary>
    </member>
    <member name="P:Aspose.Pdf.MarginInfo.Right">
      <summary>
            Gets or sets a float value that indicates the right margin.
            The unit is point. In XML,the default unit is point,but cm and inch are also 
            supported. For example,"10cm" or "5inch".
            </summary>
    </member>
    <member name="P:Aspose.Pdf.MarginInfo.Top">
      <summary>
            Gets or sets a float value that indicates the top margin.
            The unit is point. In XML,the default unit is point,but cm and inch are also 
            supported. For example,"10cm" or "5inch".
            </summary>
    </member>
    <member name="P:Aspose.Pdf.MarginInfo.Bottom">
      <summary>
            Gets or sets a float value that indicates the bottom margin.
            The unit is point. In XML,the default unit is point,but cm and inch are also 
            supported. For example,"10cm" or "5inch".
            </summary>
    </member>
    <member name="T:Aspose.Pdf.NewParagraphPlacementInfo">
      <summary>
            This class represents a placement info for new paragraph.
            </summary>
    </member>
    <member name="P:Aspose.Pdf.NewParagraphPlacementInfo.StartNewPage">
      <summary>
            Gets or sets a is this paragraph will start new page 
            </summary>
    </member>
    <member name="T:Aspose.Pdf.PageInfo">
      <summary>
            Represents the page information.
            </summary>
    </member>
    <member name="M:Aspose.Pdf.PageInfo.Clone">
      <summary>
            Clone page info.
            </summary>
    </member>
    <member name="P:Aspose.Pdf.PageInfo.Height">
      <summary>
            Gets or sets page height.
            </summary>
    </member>
    <member name="P:Aspose.Pdf.PageInfo.IsLandscape">
      <summary>
            Gets or sets is page landscaped.
            </summary>
    </member>
    <member name="P:Aspose.Pdf.PageInfo.Margin">
      <summary>
            Gets or sets page margin.
            </summary>
    </member>
    <member name="P:Aspose.Pdf.PageInfo.Width">
      <summary>
            Gets or sets page width.
            </summary>
    </member>
    <member name="M:Aspose.Pdf.Paragraphs.Add(Aspose.Pdf.BaseParagraph)">
      <summary>
            Add paragraph to collection.
            </summary>
      <value>The paragraph.</value>
    </member>
    <member name="M:Aspose.Pdf.Paragraphs.Add(Aspose.Pdf.BaseParagraph,Aspose.Pdf.NewParagraphPlacementInfo)">
      <summary>
            Add paragraph to collection.
            </summary>
      <value>The paragraph.</value>
      <value>The placement info.</value>
    </member>
    <member name="M:Aspose.Pdf.Paragraphs.GetRange(System.Int32,System.Int32)">
      <summary>
            Remove paragraphs range.
            </summary>
      <value>The first paragraph index.</value>
      <value>The paragraphs count.</value>
    </member>
    <member name="M:Aspose.Pdf.Paragraphs.RemoveRange(System.Int32,System.Int32)">
      <summary>
            Remove paragraphs range.
            </summary>
      <value>The first paragraph index.</value>
      <value>The paragraphs count.</value>
    </member>
    <member name="M:Aspose.Pdf.Paragraphs.Remove(Aspose.Pdf.BaseParagraph)">
      <summary>
            Remove paragraph from collection.
            </summary>
      <value>The paragraph.</value>
    </member>
    <member name="M:Aspose.Pdf.Paragraphs.Insert(System.Int32,Aspose.Pdf.BaseParagraph)">
      <summary>
            Insert paragraph to collection.
            </summary>
      <value>The paragraph.</value>
    </member>
    <member name="M:Aspose.Pdf.Paragraphs.Clear">
      <summary>
            Clear paragraphs.
            </summary>
    </member>
    <member name="P:Aspose.Pdf.Paragraphs.Count">
      <summary>
            Get paragraphs count.
            </summary>
    </member>
    <member name="P:Aspose.Pdf.Paragraphs.Item(System.Int32)">
      <summary>
            Get paragraphs from collection.
            </summary>
      <value>The paragraph index.</value>
    </member>
    <member name="T:Aspose.Pdf.TocInfo">
      <summary>
            Represents table of contents info.
            </summary>
    </member>
    <member name="P:Aspose.Pdf.TocInfo.FormatArray">
      <summary>
            Get format array for table of contents.
            </summary>
    </member>
    <member name="P:Aspose.Pdf.TocInfo.FormatArrayLength">
      <summary>
            Get format array length
            </summary>
    </member>
    <member name="P:Aspose.Pdf.TocInfo.Title">
      <summary>
            Get table of contents title.
            </summary>
    </member>
    <member name="P:Aspose.Pdf.WebHyperlink.Url">
      <summary>
            Gets or sets the web url.
            </summary>
    </member>
    <member name="T:Aspose.Pdf.MobiXmlSaveOptions">
      <summary>
            Save options for export to Xml format
            </summary>
    </member>
    <member name="T:Aspose.Pdf.SaveOptions">
      <summary>
             SaveOptions type hold level of abstraction on individual save options
            </summary>
    </member>
    <member name="P:Aspose.Pdf.SaveOptions.WarningHandler">
      <summary>
            Callback to handle any warnings generated. 
            The WarningHandler returns ReturnAction enum item specifying either Continue or Abort. 
            Continue is the default action and the Save operation continues, however the user may also return Abort in which case the Save operation should cease.
            </summary>
    </member>
    <member name="P:Aspose.Pdf.SaveOptions.SaveFormat">
      <summary>
            Format of data save.
            </summary>
    </member>
    <member name="P:Aspose.Pdf.SaveOptions.CloseResponse">
      <summary>
            Gets or sets boolean value which indicates will Response object be closed after document saved into response.
            </summary>
    </member>
    <member name="M:Aspose.Pdf.MobiXmlSaveOptions.#ctor">
      <summary>
            Constructor
            </summary>
    </member>
    <member name="T:Aspose.Pdf.NumberingStyle">
      <summary>
            Enumeration of supported page numbering style for PageLabel class.
            </summary>
    </member>
    <member name="F:Aspose.Pdf.NumberingStyle.NumeralsArabic">
      <summary>
            Arabic decimal numbers.
            </summary>
    </member>
    <member name="F:Aspose.Pdf.NumberingStyle.NumeralsRomanUppercase">
      <summary>
            Uppercase roman numbers (I, II, III...).
            </summary>
    </member>
    <member name="F:Aspose.Pdf.NumberingStyle.NumeralsRomanLowercase">
      <summary>
            Lowercase roman numbers (i, ii, iii...).
            </summary>
    </member>
    <member name="F:Aspose.Pdf.NumberingStyle.LettersUppercase">
      <summary>
            Uppercase latin letters (A, B, C...).
            </summary>
    </member>
    <member name="F:Aspose.Pdf.NumberingStyle.LettersLowercase">
      <summary>
            Lowercase latin letters (a, b, c...).
            </summary>
    </member>
    <member name="F:Aspose.Pdf.NumberingStyle.None">
      <summary>
            No numbering.
            </summary>
    </member>
    <member name="T:Aspose.Pdf.PageActionCollection">
      <summary>
            This class describes page actions
            </summary>
    </member>
    <member name="T:Aspose.Pdf.PageCoordinateType">
      <summary>
            Describes page coordinate type.
            </summary>
    </member>
    <member name="F:Aspose.Pdf.PageCoordinateType.MediaBox">
      <summary>
            The MediaBox is used to specify the width and height of the page. 
            For the average user, this probably equals the actual page size. 
            The MediaBox is the largest page box in a PDF. The other page boxes can equal the 
            size of the MediaBox but they cannot be larger.
            </summary>
    </member>
    <member name="F:Aspose.Pdf.PageCoordinateType.CropBox">
      <summary>
            The CropBox defines the region to which the page contents are to be clipped. 
            Acrobat uses this size for screen display and printing.
            </summary>
    </member>
    <member name="T:Aspose.Pdf.PageLabel">
      <summary>
            Class representing Page Label range.
            </summary>
    </member>
    <member name="M:Aspose.Pdf.PageLabel.#ctor">
      <summary>
            Constructor for page label. 
            </summary>
    </member>
    <member name="P:Aspose.Pdf.PageLabel.StartingValue">
      <summary>
            Gets or sets starting value of the page numbering range.
            </summary>
    </member>
    <member name="P:Aspose.Pdf.PageLabel.NumberingStyle">
      <summary>
            Gets or sets numbering style. 
            </summary>
    </member>
    <member name="P:Aspose.Pdf.PageLabel.Prefix">
      <summary>
            Gets or sets page number prefix.
            </summary>
    </member>
    <member name="T:Aspose.Pdf.PageLabelCollection">
      <summary>
            Class represeingting page label collection. 
            </summary>
    </member>
    <member name="M:Aspose.Pdf.PageLabelCollection.GetLabel(System.Int32)">
      <summary>
            Gets page label by page index (page index is started from 0).
            </summary>
      <param name="pageIndex">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:Aspose.Pdf.PageLabelCollection.UpdateLabel(System.Int32,Aspose.Pdf.PageLabel)">
      <summary>
            Update label for given page index (page index is started from 0).
            </summary>
      <param name="pageIndex">
      </param>
      <param name="pageLabel">
      </param>
    </member>
    <member name="M:Aspose.Pdf.PageLabelCollection.RemoveLabel(System.Int32)">
      <summary>
            Remove label by page index (page index is started from 0).
            </summary>
      <param name="pageIndex">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:Aspose.Pdf.PageLabelCollection.GetPages">
      <summary>
            Gets page indexes in collection.
            </summary>
      <returns>
      </returns>
    </member>
    <member name="T:Aspose.Pdf.PageSize">
      <summary>
            Class representing size of page in PDF document.
            </summary>
    </member>
    <member name="M:Aspose.Pdf.PageSize.#ctor(System.Single,System.Single)">
      <summary>
            Constructor for PageSize.
            </summary>
      <param name="x">Width of the page.</param>
      <param name="y">Height of the page.</param>
    </member>
    <member name="P:Aspose.Pdf.PageSize.Width">
      <summary>
            Gets or sets page width.
            </summary>
    </member>
    <member name="P:Aspose.Pdf.PageSize.Height">
      <summary>
            Gets or sets page height.
            </summary>
    </member>
    <member name="P:Aspose.Pdf.PageSize.IsLandscape">
      <summary>
            Gets page orientation. Returns true of this is landscape orientation and false if this is portrait. 
            </summary>
    </member>
    <member name="P:Aspose.Pdf.PageSize.A0">
      <summary>
            A0 size (1189x840 mm).
            </summary>
    </member>
    <member name="P:Aspose.Pdf.PageSize.A1">
      <summary>
            A1 size (840x594 mm).
            </summary>
    </member>
    <member name="P:Aspose.Pdf.PageSize.A2">
      <summary>
            A2 size (594x420 mm).
            </summary>
    </member>
    <member name="P:Aspose.Pdf.PageSize.A3">
      <summary>
            A3 size (420x297 mm).
            </summary>
    </member>
    <member name="P:Aspose.Pdf.PageSize.A4">
      <summary>
            A4 size (297x210 mm).
            </summary>
    </member>
    <member name="P:Aspose.Pdf.PageSize.A5">
      <summary>
            A5 size (210x148 mm).
            </summary>
    </member>
    <member name="P:Aspose.Pdf.PageSize.A6">
      <summary>
            A6 size (148x105 mm).
            </summary>
    </member>
    <member name="P:Aspose.Pdf.PageSize.B5">
      <summary>
            B5 size (250x176 mm).
            </summary>
    </member>
    <member name="P:Aspose.Pdf.PageSize.PageLetter">
      <summary>
            Letter size (279x216 mm).
            </summary>
    </member>
    <member name="P:Aspose.Pdf.PageSize.PageLegal">
      <summary>
            Legal size (356x216 mm).
            </summary>
    </member>
    <member name="P:Aspose.Pdf.PageSize.PageLedger">
      <summary>
            Ledger size (432x279 mm).
            </summary>
    </member>
    <member name="P:Aspose.Pdf.PageSize.P11x17">
      <summary>
            11x17 inches format.
            </summary>
    </member>
    <member name="T:Aspose.Pdf.CompositingParameters">
      <summary>
            Represents an object containing graphics compositing parameters of current graphics state.
            </summary>
    </member>
    <member name="M:Aspose.Pdf.CompositingParameters.#ctor(Aspose.Pdf.BlendMode)">
      <summary>
            Initializes new instance of the <see cref="T:Aspose.Pdf.CompositingParameters" /> object.
            </summary>
      <param name="blendMode">Blend mode of current graphics state.</param>
    </member>
    <member name="P:Aspose.Pdf.CompositingParameters.BlendMode">
      <summary>
            Gets blend mode of current graphics state.
            </summary>
    </member>
    <member name="T:Aspose.Pdf.BlendMode">
      <summary>
            The blend modes enumeration.
            </summary>
    </member>
    <member name="F:Aspose.Pdf.BlendMode.Normal">
      <summary>
            Normal blend mode.
            </summary>
    </member>
    <member name="F:Aspose.Pdf.BlendMode.Multiply">
      <summary>
            Multiply blend mode.
            </summary>
    </member>
    <member name="F:Aspose.Pdf.BlendMode.Screen">
      <summary>
            Screen blend mode.
            </summary>
    </member>
    <member name="F:Aspose.Pdf.BlendMode.Overlay">
      <summary>
            Overlay blend mode.
            </summary>
    </member>
    <member name="F:Aspose.Pdf.BlendMode.Darken">
      <summary>
            Darken blend mode.
            </summary>
    </member>
    <member name="F:Aspose.Pdf.BlendMode.Lighten">
      <summary>
            Lighten blend mode.
            </summary>
    </member>
    <member name="F:Aspose.Pdf.BlendMode.ColorDodge">
      <summary>
            ColorDodge blend mode.
            </summary>
    </member>
    <member name="F:Aspose.Pdf.BlendMode.ColorBurn">
      <summary>
            ColorBurn blend mode.
            </summary>
    </member>
    <member name="F:Aspose.Pdf.BlendMode.HardLight">
      <summary>
            HardLight blend mode.
            </summary>
    </member>
    <member name="F:Aspose.Pdf.BlendMode.SoftLight">
      <summary>
            SoftLight blend mode.
            </summary>
    </member>
    <member name="F:Aspose.Pdf.BlendMode.Difference">
      <summary>
            Difference blend mode.
            </summary>
    </member>
    <member name="F:Aspose.Pdf.BlendMode.Exclusion">
      <summary>
            Exclusion blend mode.
            </summary>
    </member>
    <member name="F:Aspose.Pdf.BlendMode.Hue">
      <summary>
            Hue blend mode.
            </summary>
    </member>
    <member name="F:Aspose.Pdf.BlendMode.Saturation">
      <summary>
            Saturation blend mode.
            </summary>
    </member>
    <member name="F:Aspose.Pdf.BlendMode.Color">
      <summary>
            Color blend mode.
            </summary>
    </member>
    <member name="F:Aspose.Pdf.BlendMode.Luminosity">
      <summary>
            Luminosity blend mode.
            </summary>
    </member>
    <member name="T:Aspose.Pdf.Exceptions.InvalidFormTypeOperationException">
      <summary>
            The exception that is thrown when an operation with form type is not valid.
            </summary>
    </member>
    <member name="M:Aspose.Pdf.Exceptions.InvalidFormTypeOperationException.#ctor(System.String)">
      <summary>
            Initializes a new instance of the <see cref="T:Aspose.Pdf.Exceptions.InvalidFormTypeOperationException" /> class.
            </summary>
      <param name="message">The message.</param>
    </member>
    <member name="M:Aspose.Pdf.Exceptions.InvalidFormTypeOperationException.#ctor(System.String,System.Exception)">
      <summary>
            Initializes a new instance of the <see cref="T:Aspose.Pdf.Exceptions.InvalidFormTypeOperationException"></see> class with a specified error message and a reference to the inner exception that is the cause of this exception.
            </summary>
      <param name="message">The error message that explains the reason for the exception. </param>
      <param name="innerException">The exception that is the cause of the current exception, or a null reference (Nothing in Visual Basic) if no inner exception is specified. </param>
    </member>
    <member name="M:Aspose.Pdf.Exceptions.InvalidFormTypeOperationException.#ctor(System.Exception)">
      <summary>
            Initializes a new instance of the <see cref="T:Aspose.Pdf.Exceptions.InvalidFormTypeOperationException"></see> class with a specified error message and a reference to the inner exception that is the cause of this exception.
            </summary>
      <param name="innerException">The exception that is the cause of the current exception, or a null reference (Nothing in Visual Basic) if no inner exception is specified. </param>
    </member>
    <member name="T:Aspose.Pdf.Exceptions.InvalidCgmFileFormatException">
      <summary>
            The exception that is thrown when a Cgm file is invalid.
            </summary>
    </member>
    <member name="M:Aspose.Pdf.Exceptions.InvalidCgmFileFormatException.#ctor(System.String)">
      <summary>
            Initializes a new instance of the <see cref="T:Aspose.Pdf.Exceptions.InvalidCgmFileFormatException" /> class.
            </summary>
      <param name="message">The message.</param>
    </member>
    <member name="M:Aspose.Pdf.Exceptions.InvalidCgmFileFormatException.#ctor(System.String,System.Exception)">
      <summary>
            Initializes a new instance of the <see cref="T:Aspose.Pdf.Exceptions.InvalidCgmFileFormatException"></see> class with a specified error message and a reference to the inner exception that is the cause of this exception.
            </summary>
      <param name="message">The error message that explains the reason for the exception. </param>
      <param name="innerException">The exception that is the cause of the current exception, or a null reference (Nothing in Visual Basic) if no inner exception is specified. </param>
    </member>
    <member name="M:Aspose.Pdf.Exceptions.InvalidCgmFileFormatException.#ctor(System.Exception)">
      <summary>
            Initializes a new instance of the <see cref="T:Aspose.Pdf.Exceptions.InvalidCgmFileFormatException"></see> class with a specified error message and a reference to the inner exception that is the cause of this exception.
            </summary>
      <param name="innerException">The exception that is the cause of the current exception, or a null reference (Nothing in Visual Basic) if no inner exception is specified. </param>
    </member>
    <member name="T:Aspose.Pdf.BuildVersionInfo">
      <summary>
            This class provides information about current product build.
            </summary>
    </member>
    <member name="F:Aspose.Pdf.BuildVersionInfo.AssemblyVersion">
      <summary>
            Assembly Version
            </summary>
    </member>
    <member name="F:Aspose.Pdf.BuildVersionInfo.Product">
      <summary>
            Product Name
            </summary>
    </member>
    <member name="F:Aspose.Pdf.BuildVersionInfo.FileVersion">
      <summary>
            File Version
            </summary>
    </member>
    <member name="T:Aspose.Pdf.Color">
      <summary>
            Represents class for color value which can be expressed in different color space.
            </summary>
    </member>
    <member name="F:Aspose.Pdf.Color.Empty">
      <summary>
            Represents empty color.
            </summary>
    </member>
    <member name="M:Aspose.Pdf.Color.Parse(System.String)">
      <summary>
            Extracts color components from the string.
            </summary>
      <param name="value">
            String value with color component values.
            </param>
      <returns>
            Color object.
            </returns>
    </member>
    <member name="M:Aspose.Pdf.Color.ToString">
      <summary>
            Converts to string.
            </summary>
      <returns>
            String representation of the Color object.
            </returns>
    </member>
    <member name="M:Aspose.Pdf.Color.ToRgb">
      <summary>
            Converts color into rgb.
            </summary>
      <returns>
            Rgb color value.
            </returns>
    </member>
    <member name="M:Aspose.Pdf.Color.FromRgb(System.Drawing.Color)">
      <summary>
            Gets valid pdf Color object from System.Drawing.Color value.
            </summary>
      <param name="color">
            System.Drawing.Color value.
            </param>
      <returns>
            Color object with each component value in [0..1] range.
            </returns>
    </member>
    <member name="M:Aspose.Pdf.Color.FromRgb(System.Double,System.Double,System.Double)">
      <summary>
            Gets valid pdf Color object from RGB color components.
            </summary>
      <param name="r">
            The Red color component (value 0 - 1).
            </param>
      <param name="g">
            The Green color component (value 0 - 1).
            </param>
      <param name="b">
            The Blue color component (value 0 - 1).
            </param>
      <returns>
            Color object with each component value in [0..1] range.
            </returns>
    </member>
    <member name="M:Aspose.Pdf.Color.FromGray(System.Double)">
      <summary>
            Gets valid pdf Color object from Gray color component.
            </summary>
      <param name="g">
            The Gray color component (value 0 - 1).
            </param>
      <returns>
            Color object with each component value in [0..1] range.
            </returns>
    </member>
    <member name="M:Aspose.Pdf.Color.FromCmyk(System.Double,System.Double,System.Double,System.Double)">
      <summary>
            Gets valid pdf Color object from RGB color components.
            </summary>
      <param name="c">
            The Cyan color component (value 0 - 1).
            </param>
      <param name="m">
            The Magenta color component (value 0 - 1).
            </param>
      <param name="y">
            The Yellow color component (value 0 - 1).
            </param>
      <param name="k">
            The Key color component (value 0 - 1).
            </param>
      <returns>
            Color object with each component value in [0..1] range.
            </returns>
    </member>
    <member name="M:Aspose.Pdf.Color.Equals(System.Object)">
      <summary>
            Returns true if two Colors are equal.
            </summary>
    </member>
    <member name="M:Aspose.Pdf.Color.op_Equality(Aspose.Pdf.Color,Aspose.Pdf.Color)">
      <summary>
            Returns true if two Colors are equal.
            </summary>
    </member>
    <member name="M:Aspose.Pdf.Color.op_Inequality(Aspose.Pdf.Color,Aspose.Pdf.Color)">
      <summary>
            Returns true if two Colors are not equal.
            </summary>
    </member>
    <member name="P:Aspose.Pdf.Color.Data">
      <summary>
            Gets color value.
            </summary>
    </member>
    <member name="P:Aspose.Pdf.Color.ColorSpace">
      <summary>
            Gets color space that the color represents.
            </summary>
    </member>
    <member name="P:Aspose.Pdf.Color.Transparent">
      <summary>
            Gets a system-defined color.
            </summary>
      <returns>
            A  representing a system-defined color.
            </returns>
    </member>
    <member name="P:Aspose.Pdf.Color.AliceBlue">
      <summary>
            Gets a system-defined color that has an ARGB value of #FFF0F8FF.
            </summary>
      <returns>
            A  representing a system-defined color.
            </returns>
    </member>
    <member name="P:Aspose.Pdf.Color.AntiqueWhite">
      <summary>
            Gets a system-defined color that has an ARGB value of #FFFAEBD7.
            </summary>
      <returns>
            A  representing a system-defined color.
            </returns>
    </member>
    <member name="P:Aspose.Pdf.Color.Aqua">
      <summary>
            Gets a system-defined color that has an ARGB value of #FF00FFFF.
            </summary>
      <returns>
            A  representing a system-defined color.
            </returns>
    </member>
    <member name="P:Aspose.Pdf.Color.Aquamarine">
      <summary>
            Gets a system-defined color that has an ARGB value of #FF7FFFD4.
            </summary>
      <returns>
            A  representing a system-defined color.
            </returns>
    </member>
    <member name="P:Aspose.Pdf.Color.Azure">
      <summary>
            Gets a system-defined color that has an ARGB value of #FFF0FFFF.
            </summary>
      <returns>
            A  representing a system-defined color.
            </returns>
    </member>
    <member name="P:Aspose.Pdf.Color.Beige">
      <summary>
            Gets a system-defined color that has an ARGB value of #FFF5F5DC.
            </summary>
      <returns>
            A  representing a system-defined color.
            </returns>
    </member>
    <member name="P:Aspose.Pdf.Color.Bisque">
      <summary>
            Gets a system-defined color that has an ARGB value of #FFFFE4C4.
            </summary>
      <returns>
            A  representing a system-defined color.
            </returns>
    </member>
    <member name="P:Aspose.Pdf.Color.Black">
      <summary>
            Gets a system-defined color that has an ARGB value of #FF000000.
            </summary>
      <returns>
            A  representing a system-defined color.
            </returns>
    </member>
    <member name="P:Aspose.Pdf.Color.BlanchedAlmond">
      <summary>
            Gets a system-defined color that has an ARGB value of #FFFFEBCD.
            </summary>
      <returns>
            A  representing a system-defined color.
            </returns>
    </member>
    <member name="P:Aspose.Pdf.Color.Blue">
      <summary>
            Gets a system-defined color that has an ARGB value of #FF0000FF.
            </summary>
      <returns>
            A  representing a system-defined color.
            </returns>
    </member>
    <member name="P:Aspose.Pdf.Color.BlueViolet">
      <summary>
            Gets a system-defined color that has an ARGB value of #FF8A2BE2.
            </summary>
      <returns>
            A  representing a system-defined color.
            </returns>
    </member>
    <member name="P:Aspose.Pdf.Color.Brown">
      <summary>
            Gets a system-defined color that has an ARGB value of #FFA52A2A.
            </summary>
      <returns>
            A  representing a system-defined color.
            </returns>
    </member>
    <member name="P:Aspose.Pdf.Color.BurlyWood">
      <summary>
            Gets a system-defined color that has an ARGB value of #FFDEB887.
            </summary>
      <returns>
            A  representing a system-defined color.
            </returns>
    </member>
    <member name="P:Aspose.Pdf.Color.CadetBlue">
      <summary>
            Gets a system-defined color that has an ARGB value of #FF5F9EA0.
            </summary>
      <returns>
            A  representing a system-defined color.
            </returns>
    </member>
    <member name="P:Aspose.Pdf.Color.Chartreuse">
      <summary>
            Gets a system-defined color that has an ARGB value of #FF7FFF00.
            </summary>
      <returns>
            A  representing a system-defined color.
            </returns>
    </member>
    <member name="P:Aspose.Pdf.Color.Chocolate">
      <summary>
            Gets a system-defined color that has an ARGB value of #FFD2691E.
            </summary>
      <returns>
            A  representing a system-defined color.
            </returns>
    </member>
    <member name="P:Aspose.Pdf.Color.Coral">
      <summary>
            Gets a system-defined color that has an ARGB value of #FFFF7F50.
            </summary>
      <returns>
            A  representing a system-defined color.
            </returns>
    </member>
    <member name="P:Aspose.Pdf.Color.CornflowerBlue">
      <summary>
            Gets a system-defined color that has an ARGB value of #FF6495ED.
            </summary>
      <returns>
            A  representing a system-defined color.
            </returns>
    </member>
    <member name="P:Aspose.Pdf.Color.Cornsilk">
      <summary>
            Gets a system-defined color that has an ARGB value of #FFFFF8DC.
            </summary>
      <returns>
            A  representing a system-defined color.
            </returns>
    </member>
    <member name="P:Aspose.Pdf.Color.Crimson">
      <summary>
            Gets a system-defined color that has an ARGB value of #FFDC143C.
            </summary>
      <returns>
            A  representing a system-defined color.
            </returns>
    </member>
    <member name="P:Aspose.Pdf.Color.Cyan">
      <summary>
            Gets a system-defined color that has an ARGB value of #FF00FFFF.
            </summary>
      <returns>
            A  representing a system-defined color.
            </returns>
    </member>
    <member name="P:Aspose.Pdf.Color.DarkBlue">
      <summary>
            Gets a system-defined color that has an ARGB value of #FF00008B.
            </summary>
      <returns>
            A  representing a system-defined color.
            </returns>
    </member>
    <member name="P:Aspose.Pdf.Color.DarkCyan">
      <summary>
            Gets a system-defined color that has an ARGB value of #FF008B8B.
            </summary>
      <returns>
            A  representing a system-defined color.
            </returns>
    </member>
    <member name="P:Aspose.Pdf.Color.DarkGoldenrod">
      <summary>
            Gets a system-defined color that has an ARGB value of #FFB8860B.
            </summary>
      <returns>
            A  representing a system-defined color.
            </returns>
    </member>
    <member name="P:Aspose.Pdf.Color.DarkGray">
      <summary>
            Gets a system-defined color that has an ARGB value of #FFA9A9A9.
            </summary>
      <returns>
            A  representing a system-defined color.
            </returns>
    </member>
    <member name="P:Aspose.Pdf.Color.DarkGreen">
      <summary>
            Gets a system-defined color that has an ARGB value of #FF006400.
            </summary>
      <returns>
            A  representing a system-defined color.
            </returns>
    </member>
    <member name="P:Aspose.Pdf.Color.DarkKhaki">
      <summary>
            Gets a system-defined color that has an ARGB value of #FFBDB76B.
            </summary>
      <returns>
            A  representing a system-defined color.
            </returns>
    </member>
    <member name="P:Aspose.Pdf.Color.DarkMagenta">
      <summary>
            Gets a system-defined color that has an ARGB value of #FF8B008B.
            </summary>
      <returns>
            A  representing a system-defined color.
            </returns>
    </member>
    <member name="P:Aspose.Pdf.Color.DarkOliveGreen">
      <summary>
            Gets a system-defined color that has an ARGB value of #FF556B2F.
            </summary>
      <returns>
            A  representing a system-defined color.
            </returns>
    </member>
    <member name="P:Aspose.Pdf.Color.DarkOrange">
      <summary>
            Gets a system-defined color that has an ARGB value of #FFFF8C00.
            </summary>
      <returns>
            A  representing a system-defined color.
            </returns>
    </member>
    <member name="P:Aspose.Pdf.Color.DarkOrchid">
      <summary>
            Gets a system-defined color that has an ARGB value of #FF9932CC.
            </summary>
      <returns>
            A  representing a system-defined color.
            </returns>
    </member>
    <member name="P:Aspose.Pdf.Color.DarkRed">
      <summary>
            Gets a system-defined color that has an ARGB value of #FF8B0000.
            </summary>
      <returns>
            A  representing a system-defined color.
            </returns>
    </member>
    <member name="P:Aspose.Pdf.Color.DarkSalmon">
      <summary>
            Gets a system-defined color that has an ARGB value of #FFE9967A.
            </summary>
      <returns>
            A  representing a system-defined color.
            </returns>
    </member>
    <member name="P:Aspose.Pdf.Color.DarkSeaGreen">
      <summary>
            Gets a system-defined color that has an ARGB value of #FF8FBC8F.
            </summary>
      <returns>
            A  representing a system-defined color.
            </returns>
    </member>
    <member name="P:Aspose.Pdf.Color.DarkSlateBlue">
      <summary>
            Gets a system-defined color that has an ARGB value of #FF483D8B.
            </summary>
      <returns>
            A  representing a system-defined color.
            </returns>
    </member>
    <member name="P:Aspose.Pdf.Color.DarkSlateGray">
      <summary>
            Gets a system-defined color that has an ARGB value of #FF2F4F4F.
            </summary>
      <returns>
            A  representing a system-defined color.
            </returns>
    </member>
    <member name="P:Aspose.Pdf.Color.DarkTurquoise">
      <summary>
            Gets a system-defined color that has an ARGB value of #FF00CED1.
            </summary>
      <returns>
            A  representing a system-defined color.
            </returns>
    </member>
    <member name="P:Aspose.Pdf.Color.DarkViolet">
      <summary>
            Gets a system-defined color that has an ARGB value of #FF9400D3.
            </summary>
      <returns>
            A  representing a system-defined color.
            </returns>
    </member>
    <member name="P:Aspose.Pdf.Color.DeepPink">
      <summary>
            Gets a system-defined color that has an ARGB value of #FFFF1493.
            </summary>
      <returns>
            A  representing a system-defined color.
            </returns>
    </member>
    <member name="P:Aspose.Pdf.Color.DeepSkyBlue">
      <summary>
            Gets a system-defined color that has an ARGB value of #FF00BFFF.
            </summary>
      <returns>
            A  representing a system-defined color.
            </returns>
    </member>
    <member name="P:Aspose.Pdf.Color.DimGray">
      <summary>
            Gets a system-defined color that has an ARGB value of #FF696969.
            </summary>
      <returns>
            A  representing a system-defined color.
            </returns>
    </member>
    <member name="P:Aspose.Pdf.Color.DodgerBlue">
      <summary>
            Gets a system-defined color that has an ARGB value of #FF1E90FF.
            </summary>
      <returns>
            A  representing a system-defined color.
            </returns>
    </member>
    <member name="P:Aspose.Pdf.Color.Firebrick">
      <summary>
            Gets a system-defined color that has an ARGB value of #FFB22222.
            </summary>
      <returns>
            A  representing a system-defined color.
            </returns>
    </member>
    <member name="P:Aspose.Pdf.Color.FloralWhite">
      <summary>
            Gets a system-defined color that has an ARGB value of #FFFFFAF0.
            </summary>
      <returns>
            A  representing a system-defined color.
            </returns>
    </member>
    <member name="P:Aspose.Pdf.Color.ForestGreen">
      <summary>
            Gets a system-defined color that has an ARGB value of #FF228B22.
            </summary>
      <returns>
            A  representing a system-defined color.
            </returns>
    </member>
    <member name="P:Aspose.Pdf.Color.Fuchsia">
      <summary>
            Gets a system-defined color that has an ARGB value of #FFFF00FF.
            </summary>
      <returns>
            A  representing a system-defined color.
            </returns>
    </member>
    <member name="P:Aspose.Pdf.Color.Gainsboro">
      <summary>
            Gets a system-defined color that has an ARGB value of #FFDCDCDC.
            </summary>
      <returns>
            A  representing a system-defined color.
            </returns>
    </member>
    <member name="P:Aspose.Pdf.Color.GhostWhite">
      <summary>
            Gets a system-defined color that has an ARGB value of #FFF8F8FF.
            </summary>
      <returns>
            A  representing a system-defined color.
            </returns>
    </member>
    <member name="P:Aspose.Pdf.Color.Gold">
      <summary>
            Gets a system-defined color that has an ARGB value of #FFFFD700.
            </summary>
      <returns>
            A  representing a system-defined color.
            </returns>
    </member>
    <member name="P:Aspose.Pdf.Color.Goldenrod">
      <summary>
            Gets a system-defined color that has an ARGB value of #FFDAA520.
            </summary>
      <returns>
            A  representing a system-defined color.
            </returns>
    </member>
    <member name="P:Aspose.Pdf.Color.Gray">
      <summary>
            Gets a system-defined color that has an ARGB value of #FF808080.
            </summary>
      <returns>
            A  strcture representing a system-defined color.
            </returns>
    </member>
    <member name="P:Aspose.Pdf.Color.Green">
      <summary>
            Gets a system-defined color that has an ARGB value of #FF008000.
            </summary>
      <returns>
            A  representing a system-defined color.
            </returns>
    </member>
    <member name="P:Aspose.Pdf.Color.GreenYellow">
      <summary>
            Gets a system-defined color that has an ARGB value of #FFADFF2F.
            </summary>
      <returns>
            A  representing a system-defined color.
            </returns>
    </member>
    <member name="P:Aspose.Pdf.Color.Honeydew">
      <summary>
            Gets a system-defined color that has an ARGB value of #FFF0FFF0.
            </summary>
      <returns>
            A  representing a system-defined color.
            </returns>
    </member>
    <member name="P:Aspose.Pdf.Color.HotPink">
      <summary>
            Gets a system-defined color that has an ARGB value of #FFFF69B4.
            </summary>
      <returns>
            A  representing a system-defined color.
            </returns>
    </member>
    <member name="P:Aspose.Pdf.Color.IndianRed">
      <summary>
            Gets a system-defined color that has an ARGB value of #FFCD5C5C.
            </summary>
      <returns>
            A  representing a system-defined color.
            </returns>
    </member>
    <member name="P:Aspose.Pdf.Color.Indigo">
      <summary>
            Gets a system-defined color that has an ARGB value of #FF4B0082.
            </summary>
      <returns>
            A  representing a system-defined color.
            </returns>
    </member>
    <member name="P:Aspose.Pdf.Color.Ivory">
      <summary>
            Gets a system-defined color that has an ARGB value of #FFFFFFF0.
            </summary>
      <returns>
            A  representing a system-defined color.
            </returns>
    </member>
    <member name="P:Aspose.Pdf.Color.Khaki">
      <summary>
            Gets a system-defined color that has an ARGB value of #FFF0E68C.
            </summary>
      <returns>
            A  representing a system-defined color.
            </returns>
    </member>
    <member name="P:Aspose.Pdf.Color.Lavender">
      <summary>
            Gets a system-defined color that has an ARGB value of #FFE6E6FA.
            </summary>
      <returns>
            A  representing a system-defined color.
            </returns>
    </member>
    <member name="P:Aspose.Pdf.Color.LavenderBlush">
      <summary>
            Gets a system-defined color that has an ARGB value of #FFFFF0F5.
            </summary>
      <returns>
            A  representing a system-defined color.
            </returns>
    </member>
    <member name="P:Aspose.Pdf.Color.LawnGreen">
      <summary>
            Gets a system-defined color that has an ARGB value of #FF7CFC00.
            </summary>
      <returns>
            A  representing a system-defined color.
            </returns>
    </member>
    <member name="P:Aspose.Pdf.Color.LemonChiffon">
      <summary>
            Gets a system-defined color that has an ARGB value of #FFFFFACD.
            </summary>
      <returns>
            A  representing a system-defined color.
            </returns>
    </member>
    <member name="P:Aspose.Pdf.Color.LightBlue">
      <summary>
            Gets a system-defined color that has an ARGB value of #FFADD8E6.
            </summary>
      <returns>
            A  representing a system-defined color.
            </returns>
    </member>
    <member name="P:Aspose.Pdf.Color.LightCoral">
      <summary>
            Gets a system-defined color that has an ARGB value of #FFF08080.
            </summary>
      <returns>
            A  representing a system-defined color.
            </returns>
    </member>
    <member name="P:Aspose.Pdf.Color.LightCyan">
      <summary>
            Gets a system-defined color that has an ARGB value of #FFE0FFFF.
            </summary>
      <returns>
            A  representing a system-defined color.
            </returns>
    </member>
    <member name="P:Aspose.Pdf.Color.LightGoldenrodYellow">
      <summary>
            Gets a system-defined color that has an ARGB value of #FFFAFAD2.
            </summary>
      <returns>
            A  representing a system-defined color.
            </returns>
    </member>
    <member name="P:Aspose.Pdf.Color.LightGreen">
      <summary>
            Gets a system-defined color that has an ARGB value of #FF90EE90.
            </summary>
      <returns>
            A  representing a system-defined color.
            </returns>
    </member>
    <member name="P:Aspose.Pdf.Color.LightGray">
      <summary>
            Gets a system-defined color that has an ARGB value of #FFD3D3D3.
            </summary>
      <returns>
            A  representing a system-defined color.
            </returns>
    </member>
    <member name="P:Aspose.Pdf.Color.LightPink">
      <summary>
            Gets a system-defined color that has an ARGB value of #FFFFB6C1.
            </summary>
      <returns>
            A  representing a system-defined color.
            </returns>
    </member>
    <member name="P:Aspose.Pdf.Color.LightSalmon">
      <summary>
            Gets a system-defined color that has an ARGB value of #FFFFA07A.
            </summary>
      <returns>
            A  representing a system-defined color.
            </returns>
    </member>
    <member name="P:Aspose.Pdf.Color.LightSeaGreen">
      <summary>
            Gets a system-defined color that has an ARGB value of #FF20B2AA.
            </summary>
      <returns>
            A  representing a system-defined color.
            </returns>
    </member>
    <member name="P:Aspose.Pdf.Color.LightSkyBlue">
      <summary>
            Gets a system-defined color that has an ARGB value of #FF87CEFA.
            </summary>
      <returns>
            A  representing a system-defined color.
            </returns>
    </member>
    <member name="P:Aspose.Pdf.Color.LightSlateGray">
      <summary>
            Gets a system-defined color that has an ARGB value of #FF778899.
            </summary>
      <returns>
            A  representing a system-defined color.
            </returns>
    </member>
    <member name="P:Aspose.Pdf.Color.LightSteelBlue">
      <summary>
            Gets a system-defined color that has an ARGB value of #FFB0C4DE.
            </summary>
      <returns>
            A  representing a system-defined color.
            </returns>
    </member>
    <member name="P:Aspose.Pdf.Color.LightYellow">
      <summary>
            Gets a system-defined color that has an ARGB value of #FFFFFFE0.
            </summary>
      <returns>
            A  representing a system-defined color.
            </returns>
    </member>
    <member name="P:Aspose.Pdf.Color.Lime">
      <summary>
            Gets a system-defined color that has an ARGB value of #FF00FF00.
            </summary>
      <returns>
            A  representing a system-defined color.
            </returns>
    </member>
    <member name="P:Aspose.Pdf.Color.LimeGreen">
      <summary>
            Gets a system-defined color that has an ARGB value of #FF32CD32.
            </summary>
      <returns>
            A  representing a system-defined color.
            </returns>
    </member>
    <member name="P:Aspose.Pdf.Color.Linen">
      <summary>
            Gets a system-defined color that has an ARGB value of #FFFAF0E6.
            </summary>
      <returns>
            A  representing a system-defined color.
            </returns>
    </member>
    <member name="P:Aspose.Pdf.Color.Magenta">
      <summary>
            Gets a system-defined color that has an ARGB value of #FFFF00FF.
            </summary>
      <returns>
            A  representing a system-defined color.
            </returns>
    </member>
    <member name="P:Aspose.Pdf.Color.Maroon">
      <summary>
            Gets a system-defined color that has an ARGB value of #FF800000.
            </summary>
      <returns>
            A  representing a system-defined color.
            </returns>
    </member>
    <member name="P:Aspose.Pdf.Color.MediumAquamarine">
      <summary>
            Gets a system-defined color that has an ARGB value of #FF66CDAA.
            </summary>
      <returns>
            A  representing a system-defined color.
            </returns>
    </member>
    <member name="P:Aspose.Pdf.Color.MediumBlue">
      <summary>
            Gets a system-defined color that has an ARGB value of #FF0000CD.
            </summary>
      <returns>
            A  representing a system-defined color.
            </returns>
    </member>
    <member name="P:Aspose.Pdf.Color.MediumOrchid">
      <summary>
            Gets a system-defined color that has an ARGB value of #FFBA55D3.
            </summary>
      <returns>
            A  representing a system-defined color.
            </returns>
    </member>
    <member name="P:Aspose.Pdf.Color.MediumPurple">
      <summary>
            Gets a system-defined color that has an ARGB value of #FF9370DB.
            </summary>
      <returns>
            A  representing a system-defined color.
            </returns>
    </member>
    <member name="P:Aspose.Pdf.Color.MediumSeaGreen">
      <summary>
            Gets a system-defined color that has an ARGB value of #FF3CB371.
            </summary>
      <returns>
            A  representing a system-defined color.
            </returns>
    </member>
    <member name="P:Aspose.Pdf.Color.MediumSlateBlue">
      <summary>
            Gets a system-defined color that has an ARGB value of #FF7B68EE.
            </summary>
      <returns>
            A  representing a system-defined color.
            </returns>
    </member>
    <member name="P:Aspose.Pdf.Color.MediumSpringGreen">
      <summary>
            Gets a system-defined color that has an ARGB value of #FF00FA9A.
            </summary>
      <returns>
            A  representing a system-defined color.
            </returns>
    </member>
    <member name="P:Aspose.Pdf.Color.MediumTurquoise">
      <summary>
            Gets a system-defined color that has an ARGB value of #FF48D1CC.
            </summary>
      <returns>
            A  representing a system-defined color.
            </returns>
    </member>
    <member name="P:Aspose.Pdf.Color.MediumVioletRed">
      <summary>
            Gets a system-defined color that has an ARGB value of #FFC71585.
            </summary>
      <returns>
            A  representing a system-defined color.
            </returns>
    </member>
    <member name="P:Aspose.Pdf.Color.MidnightBlue">
      <summary>
            Gets a system-defined color that has an ARGB value of #FF191970.
            </summary>
      <returns>
            A  representing a system-defined color.
            </returns>
    </member>
    <member name="P:Aspose.Pdf.Color.MintCream">
      <summary>
            Gets a system-defined color that has an ARGB value of #FFF5FFFA.
            </summary>
      <returns>
            A  representing a system-defined color.
            </returns>
    </member>
    <member name="P:Aspose.Pdf.Color.MistyRose">
      <summary>
            Gets a system-defined color that has an ARGB value of #FFFFE4E1.
            </summary>
      <returns>
            A  representing a system-defined color.
            </returns>
    </member>
    <member name="P:Aspose.Pdf.Color.Moccasin">
      <summary>
            Gets a system-defined color that has an ARGB value of #FFFFE4B5.
            </summary>
      <returns>
            A  representing a system-defined color.
            </returns>
    </member>
    <member name="P:Aspose.Pdf.Color.NavajoWhite">
      <summary>
            Gets a system-defined color that has an ARGB value of #FFFFDEAD.
            </summary>
      <returns>
            A  representing a system-defined color.
            </returns>
    </member>
    <member name="P:Aspose.Pdf.Color.Navy">
      <summary>
            Gets a system-defined color that has an ARGB value of #FF000080.
            </summary>
      <returns>
            A  representing a system-defined color.
            </returns>
    </member>
    <member name="P:Aspose.Pdf.Color.OldLace">
      <summary>
            Gets a system-defined color that has an ARGB value of #FFFDF5E6.
            </summary>
      <returns>
            A  representing a system-defined color.
            </returns>
    </member>
    <member name="P:Aspose.Pdf.Color.Olive">
      <summary>
            Gets a system-defined color that has an ARGB value of #FF808000.
            </summary>
      <returns>
            A  representing a system-defined color.
            </returns>
    </member>
    <member name="P:Aspose.Pdf.Color.OliveDrab">
      <summary>
            Gets a system-defined color that has an ARGB value of #FF6B8E23.
            </summary>
      <returns>
            A  representing a system-defined color.
            </returns>
    </member>
    <member name="P:Aspose.Pdf.Color.Orange">
      <summary>
            Gets a system-defined color that has an ARGB value of #FFFFA500.
            </summary>
      <returns>
            A  representing a system-defined color.
            </returns>
    </member>
    <member name="P:Aspose.Pdf.Color.OrangeRed">
      <summary>
            Gets a system-defined color that has an ARGB value of #FFFF4500.
            </summary>
      <returns>
            A  representing a system-defined color.
            </returns>
    </member>
    <member name="P:Aspose.Pdf.Color.Orchid">
      <summary>
            Gets a system-defined color that has an ARGB value of #FFDA70D6.
            </summary>
      <returns>
            A  representing a system-defined color.
            </returns>
    </member>
    <member name="P:Aspose.Pdf.Color.PaleGoldenrod">
      <summary>
            Gets a system-defined color that has an ARGB value of #FFEEE8AA.
            </summary>
      <returns>
            A  representing a system-defined color.
            </returns>
    </member>
    <member name="P:Aspose.Pdf.Color.PaleGreen">
      <summary>
            Gets a system-defined color that has an ARGB value of #FF98FB98.
            </summary>
      <returns>
            A  representing a system-defined color.
            </returns>
    </member>
    <member name="P:Aspose.Pdf.Color.PaleTurquoise">
      <summary>
            Gets a system-defined color that has an ARGB value of #FFAFEEEE.
            </summary>
      <returns>
            A  representing a system-defined color.
            </returns>
    </member>
    <member name="P:Aspose.Pdf.Color.PaleVioletRed">
      <summary>
            Gets a system-defined color that has an ARGB value of #FFDB7093.
            </summary>
      <returns>
            A  representing a system-defined color.
            </returns>
    </member>
    <member name="P:Aspose.Pdf.Color.PapayaWhip">
      <summary>
            Gets a system-defined color that has an ARGB value of #FFFFEFD5.
            </summary>
      <returns>
            A  representing a system-defined color.
            </returns>
    </member>
    <member name="P:Aspose.Pdf.Color.PeachPuff">
      <summary>
            Gets a system-defined color that has an ARGB value of #FFFFDAB9.
            </summary>
      <returns>
            A  representing a system-defined color.
            </returns>
    </member>
    <member name="P:Aspose.Pdf.Color.Peru">
      <summary>
            Gets a system-defined color that has an ARGB value of #FFCD853F.
            </summary>
      <returns>
            A  representing a system-defined color.
            </returns>
    </member>
    <member name="P:Aspose.Pdf.Color.Pink">
      <summary>
            Gets a system-defined color that has an ARGB value of #FFFFC0CB.
            </summary>
      <returns>
            A  representing a system-defined color.
            </returns>
    </member>
    <member name="P:Aspose.Pdf.Color.Plum">
      <summary>
            Gets a system-defined color that has an ARGB value of #FFDDA0DD.
            </summary>
      <returns>
            A  representing a system-defined color.
            </returns>
    </member>
    <member name="P:Aspose.Pdf.Color.PowderBlue">
      <summary>
            Gets a system-defined color that has an ARGB value of #FFB0E0E6.
            </summary>
      <returns>
            A  representing a system-defined color.
            </returns>
    </member>
    <member name="P:Aspose.Pdf.Color.Purple">
      <summary>
            Gets a system-defined color that has an ARGB value of #FF800080.
            </summary>
      <returns>
            A  representing a system-defined color.
            </returns>
    </member>
    <member name="P:Aspose.Pdf.Color.Red">
      <summary>
            Gets a system-defined color that has an ARGB value of #FFFF0000.
            </summary>
      <returns>
            A  representing a system-defined color.
            </returns>
    </member>
    <member name="P:Aspose.Pdf.Color.RosyBrown">
      <summary>
            Gets a system-defined color that has an ARGB value of #FFBC8F8F.
            </summary>
      <returns>
            A  representing a system-defined color.
            </returns>
    </member>
    <member name="P:Aspose.Pdf.Color.RoyalBlue">
      <summary>
            Gets a system-defined color that has an ARGB value of #FF4169E1.
            </summary>
      <returns>
            A  representing a system-defined color.
            </returns>
    </member>
    <member name="P:Aspose.Pdf.Color.SaddleBrown">
      <summary>
            Gets a system-defined color that has an ARGB value of #FF8B4513.
            </summary>
      <returns>
            A  representing a system-defined color.
            </returns>
    </member>
    <member name="P:Aspose.Pdf.Color.Salmon">
      <summary>
            Gets a system-defined color that has an ARGB value of #FFFA8072.
            </summary>
      <returns>
            A  representing a system-defined color.
            </returns>
    </member>
    <member name="P:Aspose.Pdf.Color.SandyBrown">
      <summary>
            Gets a system-defined color that has an ARGB value of #FFF4A460.
            </summary>
      <returns>
            A  representing a system-defined color.
            </returns>
    </member>
    <member name="P:Aspose.Pdf.Color.SeaGreen">
      <summary>
            Gets a system-defined color that has an ARGB value of #FF2E8B57.
            </summary>
      <returns>
            A  representing a system-defined color.
            </returns>
    </member>
    <member name="P:Aspose.Pdf.Color.SeaShell">
      <summary>
            Gets a system-defined color that has an ARGB value of #FFFFF5EE.
            </summary>
      <returns>
            A  representing a system-defined color.
            </returns>
    </member>
    <member name="P:Aspose.Pdf.Color.Sienna">
      <summary>
            Gets a system-defined color that has an ARGB value of #FFA0522D.
            </summary>
      <returns>
            A  representing a system-defined color.
            </returns>
    </member>
    <member name="P:Aspose.Pdf.Color.Silver">
      <summary>
            Gets a system-defined color that has an ARGB value of #FFC0C0C0.
            </summary>
      <returns>
            A  representing a system-defined color.
            </returns>
    </member>
    <member name="P:Aspose.Pdf.Color.SkyBlue">
      <summary>
            Gets a system-defined color that has an ARGB value of #FF87CEEB.
            </summary>
      <returns>
            A  representing a system-defined color.
            </returns>
    </member>
    <member name="P:Aspose.Pdf.Color.SlateBlue">
      <summary>
            Gets a system-defined color that has an ARGB value of #FF6A5ACD.
            </summary>
      <returns>
            A  representing a system-defined color.
            </returns>
    </member>
    <member name="P:Aspose.Pdf.Color.SlateGray">
      <summary>
            Gets a system-defined color that has an ARGB value of #FF708090.
            </summary>
      <returns>
            A  representing a system-defined color.
            </returns>
    </member>
    <member name="P:Aspose.Pdf.Color.Snow">
      <summary>
            Gets a system-defined color that has an ARGB value of #FFFFFAFA.
            </summary>
      <returns>
            A  representing a system-defined color.
            </returns>
    </member>
    <member name="P:Aspose.Pdf.Color.SpringGreen">
      <summary>
            Gets a system-defined color that has an ARGB value of #FF00FF7F.
            </summary>
      <returns>
            A  representing a system-defined color.
            </returns>
    </member>
    <member name="P:Aspose.Pdf.Color.SteelBlue">
      <summary>
            Gets a system-defined color that has an ARGB value of #FF4682B4.
            </summary>
      <returns>
            A  representing a system-defined color.
            </returns>
    </member>
    <member name="P:Aspose.Pdf.Color.Tan">
      <summary>
            Gets a system-defined color that has an ARGB value of #FFD2B48C.
            </summary>
      <returns>
            A  representing a system-defined color.
            </returns>
    </member>
    <member name="P:Aspose.Pdf.Color.Teal">
      <summary>
            Gets a system-defined color that has an ARGB value of #FF008080.
            </summary>
      <returns>
            A  representing a system-defined color.
            </returns>
    </member>
    <member name="P:Aspose.Pdf.Color.Thistle">
      <summary>
            Gets a system-defined color that has an ARGB value of #FFD8BFD8.
            </summary>
      <returns>
            A  representing a system-defined color.
            </returns>
    </member>
    <member name="P:Aspose.Pdf.Color.Tomato">
      <summary>
            Gets a system-defined color that has an ARGB value of #FFFF6347.
            </summary>
      <returns>
            A  representing a system-defined color.
            </returns>
    </member>
    <member name="P:Aspose.Pdf.Color.Turquoise">
      <summary>
            Gets a system-defined color that has an ARGB value of #FF40E0D0.
            </summary>
      <returns>
            A  representing a system-defined color.
            </returns>
    </member>
    <member name="P:Aspose.Pdf.Color.Violet">
      <summary>
            Gets a system-defined color that has an ARGB value of #FFEE82EE.
            </summary>
      <returns>
            A  representing a system-defined color.
            </returns>
    </member>
    <member name="P:Aspose.Pdf.Color.Wheat">
      <summary>
            Gets a system-defined color that has an ARGB value of #FFF5DEB3.
            </summary>
      <returns>
            A  representing a system-defined color.
            </returns>
    </member>
    <member name="P:Aspose.Pdf.Color.White">
      <summary>
            Gets a system-defined color that has an ARGB value of #FFFFFFFF.
            </summary>
      <returns>
            A  representing a system-defined color.
            </returns>
    </member>
    <member name="P:Aspose.Pdf.Color.WhiteSmoke">
      <summary>
            Gets a system-defined color that has an ARGB value of #FFF5F5F5.
            </summary>
      <returns>
            A  representing a system-defined color.
            </returns>
    </member>
    <member name="P:Aspose.Pdf.Color.Yellow">
      <summary>
            Gets a system-defined color that has an ARGB value of #FFFFFF00.
            </summary>
      <returns>
            A  representing a system-defined color.
            </returns>
    </member>
    <member name="P:Aspose.Pdf.Color.YellowGreen">
      <summary>
            Gets a system-defined color that has an ARGB value of #FF9ACD32.
            </summary>
      <returns>
            A  representing a system-defined color.
            </returns>
    </member>
    <member name="T:Aspose.Pdf.HtmlDocumentType">
      <summary>
            Represents enumeration of the Html document types.
            </summary>
    </member>
    <member name="F:Aspose.Pdf.HtmlDocumentType.Xhtml">
      <summary>
            The XHtml Document Type.
            </summary>
    </member>
    <member name="F:Aspose.Pdf.HtmlDocumentType.Html5">
      <summary>
            The HTML5 Document Type.
            </summary>
    </member>
    <member name="T:Aspose.Pdf.HtmlSaveOptions">
      <summary>
            Save options for export to Html format
            </summary>
    </member>
    <member name="M:Aspose.Pdf.HtmlSaveOptions.#ctor">
      <summary>
            Initializes a new instance of the <see cref="T:Aspose.Pdf.HtmlSaveOptions" /> class.
            </summary>
    </member>
    <member name="M:Aspose.Pdf.HtmlSaveOptions.#ctor(Aspose.Pdf.HtmlDocumentType)">
      <summary>
            Initializes a new instance of the <see cref="T:Aspose.Pdf.HtmlSaveOptions" /> class.
            </summary>
      <param name="documentType">The <see cref="T:Aspose.Pdf.HtmlDocumentType" />.</param>
    </member>
    <member name="M:Aspose.Pdf.HtmlSaveOptions.#ctor(System.Boolean)">
      <summary>
            Initializes a new instance of the <see cref="T:Aspose.Pdf.HtmlSaveOptions" /> class.
            </summary>
      <param name="fixedLayout">if set to <c>true</c> HTML is created as fixed layout.</param>
    </member>
    <member name="M:Aspose.Pdf.HtmlSaveOptions.#ctor(Aspose.Pdf.HtmlDocumentType,System.Boolean)">
      <summary>
            Initializes a new instance of the <see cref="T:Aspose.Pdf.HtmlSaveOptions" /> class.
            </summary>
      <param name="documentType">The <see cref="T:Aspose.Pdf.HtmlDocumentType" />.</param>
      <param name="fixedLayout">if set to <c>true</c> HTML is created as fixed layout.</param>
    </member>
    <member name="P:Aspose.Pdf.HtmlSaveOptions.DocumentType">
      <summary>
            Gets or sets the <see cref="T:Aspose.Pdf.HtmlDocumentType" />.
            </summary>
      <value>
            The <see cref="T:Aspose.Pdf.HtmlDocumentType" />.
            </value>
    </member>
    <member name="P:Aspose.Pdf.HtmlSaveOptions.CompressSvgGraphicsIfAny">
      <summary>
            Gets or sets the flag that indicates whether
            found SVG graphics(if any) will be compressed(zipped) 
            into SVGZ format during saving
            </summary>
      <value>
            The <see cref="T:Aspose.Pdf.HtmlDocumentType" />.
            </value>
    </member>
    <member name="P:Aspose.Pdf.HtmlSaveOptions.SplitIntoPages">
      <summary>
            Gets or sets the flag that indicates whether each page of source 
            document will be converted into it's own target HTML, i.e whether result HTML 
            will be splitted into pages.
            </summary>
    </member>
    <member name="P:Aspose.Pdf.HtmlSaveOptions.FixedLayout">
      <summary>
            Gets or sets a value indicating whether that HTML is created as fixed layout.
            </summary>
      <value>
        <c>true</c> if [fixed layout]; otherwise, <c>false</c>.
            </value>
    </member>
    <member name="T:Aspose.Pdf.ImportFormat">
      <summary>
             Specifies import format.
            </summary>
    </member>
    <member name="F:Aspose.Pdf.ImportFormat.Cgm">
      <summary>
             Computer Graphics Metafile format.
            </summary>
    </member>
    <member name="T:Aspose.Pdf.ImportOptions">
      <summary>
             ImportOptions type hold level of abstraction on individual import options.
            </summary>
    </member>
    <member name="P:Aspose.Pdf.ImportOptions.ImportFormat">
      <summary>
            Import format.
            </summary>
    </member>
    <member name="T:Aspose.Pdf.CgmImportOptions">
      <summary>
            Import option for import from Computer Graphics Metafile(CGM) format.
            </summary>
    </member>
    <member name="M:Aspose.Pdf.CgmImportOptions.#ctor">
      <summary>
            Constructor
            </summary>
    </member>
    <member name="P:Aspose.Pdf.CgmImportOptions.PageSize">
      <summary>
            Gets or sets output page size for import.
            Default page size - A4 300dpi 2480 X 3508.
            </summary>
    </member>
    <member name="T:Aspose.Pdf.Devices.BmpDevice">
      <summary>
            Represents image device that helps to save pdf document pages into bmp. 
            </summary>
    </member>
    <member name="T:Aspose.Pdf.Devices.ImageDevice">
      <summary>
            An abstract class for image devices.
            </summary>
    </member>
    <member name="T:Aspose.Pdf.Devices.PageDevice">
      <summary>
            Abstract class for all devices which is used to process certain page the pdf document.
            </summary>
    </member>
    <member name="T:Aspose.Pdf.Devices.Device">
      <summary>
            Abstract class for all types of devices. Device is used to represent pdf document in some format.
            For example, document page can be represented as image or text. 
            </summary>
    </member>
    <member name="M:Aspose.Pdf.Devices.PageDevice.Process(Aspose.Pdf.Page,System.IO.Stream)">
      <summary>
            Perfoms some operation on the given page, e.g. converts page into graphic image.
            </summary>
      <param name="page">
            The page to process.
            </param>
      <param name="output">
            This stream contains the results of processing.
            </param>
    </member>
    <member name="M:Aspose.Pdf.Devices.PageDevice.Process(Aspose.Pdf.Page,System.String)">
      <summary>
            Perfoms some operation on the given page and saves results into the file.
            </summary>
      <param name="page">
            The page to process.
            </param>
      <param name="outputFileName">
            This file contains the results of processing.
            </param>
    </member>
    <member name="M:Aspose.Pdf.Devices.PageDevice.Process(Aspose.Pdf.Page,System.Drawing.Graphics)">
      <summary>
            renders page on the graphics
            </summary>
      <param name="page">
      </param>
      <param name="gr">
      </param>
    </member>
    <member name="M:Aspose.Pdf.Devices.ImageDevice.#ctor">
      <summary>
            Abstract initializer for <see cref="T:Aspose.Pdf.Devices.ImageDevice" /> descendants, set resolution to 150x150.
            </summary>
    </member>
    <member name="M:Aspose.Pdf.Devices.ImageDevice.#ctor(Aspose.Pdf.Devices.Resolution)">
      <summary>
            Abstract initializer for <see cref="T:Aspose.Pdf.Devices.ImageDevice" /> descendants.
            <param name="resolution">
            Resolution for the result image file, see <see cref="P:Aspose.Pdf.Devices.ImageDevice.Resolution" /> class.
            </param></summary>
    </member>
    <member name="M:Aspose.Pdf.Devices.ImageDevice.#ctor(System.Int32,System.Int32)">
      <summary>
            Initializes a new instance of the <see cref="T:Aspose.Pdf.Devices.JpegDevice" /> class with provided image dimensions and default resolution (=150).
            </summary>
      <param name="width">
            Image output width.
            </param>
      <param name="height">
            Image output height.
            </param>
    </member>
    <member name="M:Aspose.Pdf.Devices.ImageDevice.#ctor(Aspose.Pdf.PageSize)">
      <summary>
            Initializes a new instance of the <see cref="T:Aspose.Pdf.Devices.JpegDevice" /> class with provided image dimensions and default resolution (=150).
            </summary>
      <param name="pageSize">
            Page size of the output image.
            </param>
    </member>
    <member name="M:Aspose.Pdf.Devices.ImageDevice.#ctor(System.Int32,System.Int32,Aspose.Pdf.Devices.Resolution)">
      <summary>
            Initializes a new instance of the <see cref="T:Aspose.Pdf.Devices.JpegDevice" /> class with provided image dimensions and resolution.
            </summary>
      <param name="width">
            Image output width.
            </param>
      <param name="height">
            Image output height.
            </param>
      <param name="resolution">
            Resolution for the result image file, see <see cref="P:Aspose.Pdf.Devices.ImageDevice.Resolution" /> class.
            </param>
    </member>
    <member name="M:Aspose.Pdf.Devices.ImageDevice.#ctor(Aspose.Pdf.PageSize,Aspose.Pdf.Devices.Resolution)">
      <summary>
            Initializes a new instance of the <see cref="T:Aspose.Pdf.Devices.JpegDevice" /> class with provided image dimensions and resolution.
            </summary>
      <param name="pageSize">
            Page size of the output image.
            </param>
      <param name="resolution">
            Resolution for the result image file, see <see cref="P:Aspose.Pdf.Devices.ImageDevice.Resolution" /> class.
            </param>
    </member>
    <member name="P:Aspose.Pdf.Devices.ImageDevice.CoordinateType">
      <summary>
            Gets or sets the page coordinate type (Media/Crop boxes). CropBox value is used by default.
            </summary>
    </member>
    <member name="P:Aspose.Pdf.Devices.ImageDevice.RenderingOptions">
      <summary>
            Gets or sets rendering options.
            </summary>
    </member>
    <member name="P:Aspose.Pdf.Devices.ImageDevice.FormPresentationMode">
      <summary>
            Gets or sets form presentation mode.
            </summary>
    </member>
    <member name="P:Aspose.Pdf.Devices.ImageDevice.Resolution">
      <summary>
            Gets image resolution.
            </summary>
    </member>
    <member name="P:Aspose.Pdf.Devices.ImageDevice.Width">
      <summary>
            Gets image output width.
            </summary>
    </member>
    <member name="P:Aspose.Pdf.Devices.ImageDevice.Height">
      <summary>
            Gets image output height.
            </summary>
    </member>
    <member name="M:Aspose.Pdf.Devices.BmpDevice.#ctor">
      <summary>
            Initializes a new instance of the <see cref="T:Aspose.Pdf.Devices.BmpDevice" /> class with default resolution.
            </summary>
    </member>
    <member name="M:Aspose.Pdf.Devices.BmpDevice.#ctor(Aspose.Pdf.Devices.Resolution)">
      <summary>
            Initializes a new instance of the <see cref="T:Aspose.Pdf.Devices.BmpDevice" /> class.
            <param name="resolution">
            Resolution for the result image file, see <see cref="T:Aspose.Pdf.Devices.Resolution" /> class.
            </param></summary>
    </member>
    <member name="M:Aspose.Pdf.Devices.BmpDevice.#ctor(System.Int32,System.Int32,Aspose.Pdf.Devices.Resolution)">
      <summary>
            Initializes a new instance of the <see cref="T:Aspose.Pdf.Devices.BmpDevice" /> class with provided image dimensions and
            resolution.
            </summary>
      <param name="width">
            Image output width.
            </param>
      <param name="height">
            Image output height.
            </param>
      <param name="resolution">
            Resolution for the result image file, see <see cref="T:Aspose.Pdf.Devices.Resolution" /> class.
            </param>
    </member>
    <member name="M:Aspose.Pdf.Devices.BmpDevice.#ctor(Aspose.Pdf.PageSize,Aspose.Pdf.Devices.Resolution)">
      <summary>
            Initializes a new instance of the <see cref="T:Aspose.Pdf.Devices.BmpDevice" /> class with provided page size and
            resolution.
            </summary>
      <param name="pageSize">
            Page size of the output image.
            </param>
      <param name="resolution">
            Resolution for the result image file, see <see cref="T:Aspose.Pdf.Devices.Resolution" /> class.
            </param>
    </member>
    <member name="M:Aspose.Pdf.Devices.BmpDevice.Process(Aspose.Pdf.Page,System.IO.Stream)">
      <summary>
            Converts the page into bmp and saves it in the output stream.
            </summary>
      <param name="page">
            The page to convert.
            </param>
      <param name="output">
            Output stream with bmp image.
            </param>
    </member>
    <member name="M:Aspose.Pdf.Devices.BmpDevice.#ctor(System.Int32,System.Int32)">
      <summary>
            Initializes a new instance of the <see cref="T:Aspose.Pdf.Devices.BmpDevice" /> class with provided image dimensions, 
            default resolution (=150).
            </summary>
      <param name="width">
            Image output width.
            </param>
      <param name="height">
            Image output height.
            </param>
    </member>
    <member name="M:Aspose.Pdf.Devices.BmpDevice.#ctor(Aspose.Pdf.PageSize)">
      <summary>
            Initializes a new instance of the <see cref="T:Aspose.Pdf.Devices.BmpDevice" /> class with provided page size, 
            default resolution (=150).
            </summary>
      <param name="pageSize">
            Page size of the output image.
            </param>
    </member>
    <member name="M:Aspose.Pdf.Devices.BmpDevice.Process(Aspose.Pdf.Page,System.Drawing.Graphics)">
      <summary>
            renders page on the graphics
            </summary>
      <param name="page">
      </param>
      <param name="gr">
      </param>
    </member>
    <member name="T:Aspose.Pdf.Devices.ColorDepth">
      <summary>
            Used to specify the parameter value passed to a Tiff image device.
            </summary>
    </member>
    <member name="F:Aspose.Pdf.Devices.ColorDepth.Default">
      <summary>
            Default color depth.
            32 bit depth is used by default.
            </summary>
    </member>
    <member name="F:Aspose.Pdf.Devices.ColorDepth.Format8bpp">
      <summary>
            8 bits per pixel. Equal <see cref="F:System.Drawing.Imaging.PixelFormat.Format8bppIndexed" /></summary>
    </member>
    <member name="F:Aspose.Pdf.Devices.ColorDepth.Format4bpp">
      <summary>
            4 bits per pixel. Equal <see cref="F:System.Drawing.Imaging.PixelFormat.Format4bppIndexed" /></summary>
    </member>
    <member name="F:Aspose.Pdf.Devices.ColorDepth.Format1bpp">
      <summary>
            1 bit per pixel. Equal <see cref="F:System.Drawing.Imaging.PixelFormat.Format32bppRgb" /></summary>
    </member>
    <member name="T:Aspose.Pdf.Devices.CompressionType">
      <summary>
            Used to specify the parameter value passed to a Tiff image device.
            </summary>
    </member>
    <member name="F:Aspose.Pdf.Devices.CompressionType.LZW">
      <summary>
            Specifies the LZW compression scheme. Can be passed to the Tiff encoder as a parameter that belongs to the Compression category.
            </summary>
    </member>
    <member name="F:Aspose.Pdf.Devices.CompressionType.CCITT4">
      <summary>
            Specifies the CCITT4 compression scheme. Can be passed to the CCITT4 encoder as a parameter that belongs to the Compression category.
            </summary>
    </member>
    <member name="F:Aspose.Pdf.Devices.CompressionType.CCITT3">
      <summary>
            Specifies the CCITT3 compression scheme. Can be passed to the CCITT3 encoder as a parameter that belongs to the Compression category.
            </summary>
    </member>
    <member name="F:Aspose.Pdf.Devices.CompressionType.RLE">
      <summary>
            Specifies the RLE compression scheme. Can be passed to the RLE encoder as a parameter that belongs to the Compression category.
            </summary>
    </member>
    <member name="F:Aspose.Pdf.Devices.CompressionType.None">
      <summary>
            Specifies no compression. Can be passed to the Tiff encoder as a parameter that belongs to the compression category.
            </summary>
    </member>
    <member name="T:Aspose.Pdf.Devices.DocumentDevice">
      <summary>
            Abstract class for all devices which is used to process the whole pdf document.
            </summary>
    </member>
    <member name="M:Aspose.Pdf.Devices.DocumentDevice.Process(Aspose.Pdf.Document,System.Int32,System.Int32,System.IO.Stream)">
      <summary>
            Each device represents some operation on the document, e.g. we can convert pdf document into another format.
            </summary>
      <param name="document">
            The document to process.
            </param>
      <param name="fromPage">
            Defines the page from which to start processing.
            </param>
      <param name="toPage">
            Defines the last page to process.
            </param>
      <param name="output">
            Defines stream where the results of processing are stored.
            </param>
    </member>
    <member name="M:Aspose.Pdf.Devices.DocumentDevice.Process(Aspose.Pdf.Document,System.IO.Stream)">
      <summary>
            Processes the whole document and saves results into stream.
            </summary>
      <param name="document">
            The document to process.
            </param>
      <param name="output">
            Defines stream where the results of processing are stored.
            </param>
    </member>
    <member name="M:Aspose.Pdf.Devices.DocumentDevice.Process(Aspose.Pdf.Document,System.String)">
      <summary>
            Processes the whole document and saves results into file.
            </summary>
      <param name="document">
            The document to process.
            </param>
      <param name="outputFileName">
            Defines file where the results of processing are stored.
            </param>
    </member>
    <member name="M:Aspose.Pdf.Devices.DocumentDevice.Process(Aspose.Pdf.Document,System.Int32,System.Int32,System.String)">
      <summary>
            Processes certain pages of the document and saves results into file.
            </summary>
      <param name="document">
            The document to process.
            </param>
      <param name="fromPage">
            The first page to start processing.
            </param>
      <param name="toPage">
            The last page of processing.
            </param>
      <param name="outputFileName">
            Defines file where the results of processing are stored.
            </param>
    </member>
    <member name="T:Aspose.Pdf.Devices.GifDevice">
      <summary>
            Represents image device that helps to save pdf document pages into gif. 
            </summary>
    </member>
    <member name="M:Aspose.Pdf.Devices.GifDevice.#ctor">
      <summary>
            Initializes a new instance of the <see cref="T:Aspose.Pdf.Devices.GifDevice" /> class with default resolution.
            </summary>
    </member>
    <member name="M:Aspose.Pdf.Devices.GifDevice.#ctor(Aspose.Pdf.Devices.Resolution)">
      <summary>
            Initializes a new instance of the <see cref="T:Aspose.Pdf.Devices.GifDevice" /> class.
            <param name="resolution">
            Resolution for the result image file, see <see cref="T:Aspose.Pdf.Devices.Resolution" /> class.
            </param></summary>
    </member>
    <member name="M:Aspose.Pdf.Devices.GifDevice.#ctor(System.Int32,System.Int32,Aspose.Pdf.Devices.Resolution)">
      <summary>
            Initializes a new instance of the <see cref="T:Aspose.Pdf.Devices.GifDevice" /> class with provided image dimensions and
            resolution.
            </summary>
      <param name="width">
            Image output width.
            </param>
      <param name="height">
            Image output height.
            </param>
      <param name="resolution">
            Resolution for the result image file, see <see cref="T:Aspose.Pdf.Devices.Resolution" /> class.
            </param>
    </member>
    <member name="M:Aspose.Pdf.Devices.GifDevice.#ctor(Aspose.Pdf.PageSize,Aspose.Pdf.Devices.Resolution)">
      <summary>
            Initializes a new instance of the <see cref="T:Aspose.Pdf.Devices.GifDevice" /> class with provided page size and
            resolution.
            </summary>
      <param name="pageSize">
            Page size of the output image.
            </param>
      <param name="resolution">
            Resolution for the result image file, see <see cref="T:Aspose.Pdf.Devices.Resolution" /> class.
            </param>
    </member>
    <member name="M:Aspose.Pdf.Devices.GifDevice.Process(Aspose.Pdf.Page,System.IO.Stream)">
      <summary>
            Converts the page into gif and saves it in the output stream.
            </summary>
      <param name="page">
            The page to convert.
            </param>
      <param name="output">
            Output stream with gif image.
            </param>
    </member>
    <member name="M:Aspose.Pdf.Devices.GifDevice.#ctor(System.Int32,System.Int32)">
      <summary>
            Initializes a new instance of the <see cref="T:Aspose.Pdf.Devices.GifDevice" /> class with provided image dimensions, 
            default resolution (=150).
            </summary>
      <param name="width">
            Image output width.
            </param>
      <param name="height">
            Image output height.
            </param>
    </member>
    <member name="M:Aspose.Pdf.Devices.GifDevice.#ctor(Aspose.Pdf.PageSize)">
      <summary>
            Initializes a new instance of the <see cref="T:Aspose.Pdf.Devices.GifDevice" /> class with provided page size, 
            default resolution (=150).
            </summary>
      <param name="pageSize">
            Page size of the output image.
            </param>
    </member>
    <member name="T:Aspose.Pdf.Devices.JpegDevice">
      <summary>
            Represents image device that helps to save pdf document pages into jpeg. 
            </summary>
    </member>
    <member name="M:Aspose.Pdf.Devices.JpegDevice.#ctor">
      <summary>
            Initializes a new instance of the <see cref="T:Aspose.Pdf.Devices.JpegDevice" /> class with default resolution and maximum quality.
            </summary>
    </member>
    <member name="M:Aspose.Pdf.Devices.JpegDevice.#ctor(Aspose.Pdf.Devices.Resolution)">
      <summary>
            Initializes a new instance of the <see cref="T:Aspose.Pdf.Devices.JpegDevice" /> class.
            <param name="resolution">
            Resolution for the result image file, see <see cref="T:Aspose.Pdf.Devices.Resolution" /> class.
            </param></summary>
    </member>
    <member name="M:Aspose.Pdf.Devices.JpegDevice.#ctor(System.Int32)">
      <summary>
            Initializes a new instance of the <see cref="T:Aspose.Pdf.Devices.JpegDevice" /> class.
            </summary>
      <param name="quality">
            Specifies the level of compression for an image. 
            The range of useful values for the quality is from 0 to 100. 
            The lower the number specified, the higher the compression and therefore the lower the quality of the image. 
            Zero would give you the lowest quality image and 100 the highest.
            </param>
    </member>
    <member name="M:Aspose.Pdf.Devices.JpegDevice.#ctor(Aspose.Pdf.Devices.Resolution,System.Int32)">
      <summary>
            Initializes a new instance of the <see cref="T:Aspose.Pdf.Devices.JpegDevice" /> class.
            </summary>
      <param name="resolution">
            Resolution for the result image file, see <see cref="T:Aspose.Pdf.Devices.Resolution" /> class.
            </param>
      <param name="quality">
            Specifies the level of compression for an image. 
            The range of useful values for the quality is from 0 to 100. 
            The lower the number specified, the higher the compression and therefore the lower the quality of the image. 
            Zero would give you the lowest quality image and 100 the highest.
            </param>
    </member>
    <member name="M:Aspose.Pdf.Devices.JpegDevice.#ctor(System.Int32,System.Int32)">
      <summary>
            Initializes a new instance of the <see cref="T:Aspose.Pdf.Devices.JpegDevice" /> class with provided image dimensions, 
            default resolution (=150) and maximum quality.
            </summary>
      <param name="width">
            Image output width.
            </param>
      <param name="height">
            Image output height.
            </param>
    </member>
    <member name="M:Aspose.Pdf.Devices.JpegDevice.#ctor(Aspose.Pdf.PageSize)">
      <summary>
            Initializes a new instance of the <see cref="T:Aspose.Pdf.Devices.JpegDevice" /> class with provided page size, 
            default resolution (=150) and maximum quality.
            </summary>
      <param name="pageSize">
            Page size of the output image.
            </param>
    </member>
    <member name="M:Aspose.Pdf.Devices.JpegDevice.#ctor(System.Int32,System.Int32,Aspose.Pdf.Devices.Resolution)">
      <summary>
            Initializes a new instance of the <see cref="T:Aspose.Pdf.Devices.JpegDevice" /> class with provided image dimensions, 
            resolution and maximum quality.
            </summary>
      <param name="width">
            Image output width.
            </param>
      <param name="height">
            Image output height.
            </param>
      <param name="resolution">
            Resolution for the result image file, see <see cref="T:Aspose.Pdf.Devices.Resolution" /> class.
            </param>
    </member>
    <member name="M:Aspose.Pdf.Devices.JpegDevice.#ctor(Aspose.Pdf.PageSize,Aspose.Pdf.Devices.Resolution)">
      <summary>
            Initializes a new instance of the <see cref="T:Aspose.Pdf.Devices.JpegDevice" /> class with provided page size, 
            resolution and maximum quality.
            </summary>
      <param name="pageSize">
            Page size of the output image.
            </param>
      <param name="resolution">
            Resolution for the result image file, see <see cref="T:Aspose.Pdf.Devices.Resolution" /> class.
            </param>
    </member>
    <member name="M:Aspose.Pdf.Devices.JpegDevice.#ctor(System.Int32,System.Int32,Aspose.Pdf.Devices.Resolution,System.Int32)">
      <summary>
            Initializes a new instance of the <see cref="T:Aspose.Pdf.Devices.JpegDevice" /> class with provided image dimensions, 
            resolution and quality.
            </summary>
      <param name="width">
            Image output width.
            </param>
      <param name="height">
            Image output height.
            </param>
      <param name="resolution">
            Resolution for the result image file, see <see cref="T:Aspose.Pdf.Devices.Resolution" /> class.
            </param>
      <param name="quality">
            Specifies the level of compression for an image. 
            The range of useful values for the quality is from 0 to 100. 
            The lower the number specified, the higher the compression and therefore the lower the quality of the image. 
            Zero would give you the lowest quality image and 100 the highest.
            </param>
    </member>
    <member name="M:Aspose.Pdf.Devices.JpegDevice.#ctor(Aspose.Pdf.PageSize,Aspose.Pdf.Devices.Resolution,System.Int32)">
      <summary>
            Initializes a new instance of the <see cref="T:Aspose.Pdf.Devices.JpegDevice" /> class with provided page size, 
            resolution and quality.
            </summary>
      <param name="pageSize">
            Page size of the output image.
            </param>
      <param name="resolution">
            Resolution for the result image file, see <see cref="T:Aspose.Pdf.Devices.Resolution" /> class.
            </param>
      <param name="quality">
            Specifies the level of compression for an image. 
            The range of useful values for the quality is from 0 to 100. 
            The lower the number specified, the higher the compression and therefore the lower the quality of the image. 
            Zero would give you the lowest quality image and 100 the highest.
            </param>
    </member>
    <member name="M:Aspose.Pdf.Devices.JpegDevice.Process(Aspose.Pdf.Page,System.IO.Stream)">
      <summary>
            Converts the page into jpeg and saves it in the output stream.
            </summary>
      <param name="page">
            The page to convert.
            </param>
      <param name="output">
            Output stream with jpeg image.
            </param>
    </member>
    <member name="T:Aspose.Pdf.Devices.Margins">
      <summary>
            This class represents margins of an image.
            </summary>
    </member>
    <member name="M:Aspose.Pdf.Devices.Margins.#ctor(System.Int32,System.Int32,System.Int32,System.Int32)">
      <summary>
            Initializes a new instance of the <see cref="T:Aspose.Pdf.Devices.Margins"></see> class.
            </summary>
      <param name="left">The left.</param>
      <param name="right">The right.</param>
      <param name="top">The top.</param>
      <param name="bottom">The bottom.</param>
    </member>
    <member name="M:Aspose.Pdf.Devices.Margins.#ctor">
      <summary>
            Initializes a new instance of the <see cref="T:Aspose.Pdf.Devices.Margins"></see> class.
            </summary>
    </member>
    <member name="P:Aspose.Pdf.Devices.Margins.Left">
      <summary>
            Gets or sets the left.
            </summary>
      <value>The left.</value>
    </member>
    <member name="P:Aspose.Pdf.Devices.Margins.Right">
      <summary>
            Gets or sets the right.
            </summary>
      <value>The right.</value>
    </member>
    <member name="P:Aspose.Pdf.Devices.Margins.Top">
      <summary>
            Gets or sets the top.
            </summary>
      <value>The top.</value>
    </member>
    <member name="P:Aspose.Pdf.Devices.Margins.Bottom">
      <summary>
            Gets or sets the bottom.
            </summary>
      <value>The bottom.</value>
    </member>
    <member name="T:Aspose.Pdf.Devices.PngDevice">
      <summary>
            Represents image device that helps to save pdf document pages into png. 
            </summary>
    </member>
    <member name="M:Aspose.Pdf.Devices.PngDevice.#ctor">
      <summary>
            Initializes a new instance of the <see cref="T:Aspose.Pdf.Devices.PngDevice" /> class with default resolution.
            </summary>
    </member>
    <member name="M:Aspose.Pdf.Devices.PngDevice.#ctor(Aspose.Pdf.Devices.Resolution)">
      <summary>
            Initializes a new instance of the <see cref="T:Aspose.Pdf.Devices.PngDevice" /> class.
            <param name="resolution">
            Resolution for the result image file, see <see cref="T:Aspose.Pdf.Devices.Resolution" /> class.
            </param></summary>
    </member>
    <member name="M:Aspose.Pdf.Devices.PngDevice.#ctor(System.Int32,System.Int32,Aspose.Pdf.Devices.Resolution)">
      <summary>
            Initializes a new instance of the <see cref="T:Aspose.Pdf.Devices.PngDevice" /> class with provided image dimensions and
            resolution.
            </summary>
      <param name="width">
            Image output width.
            </param>
      <param name="height">
            Image output height.
            </param>
      <param name="resolution">
            Resolution for the result image file, see <see cref="T:Aspose.Pdf.Devices.Resolution" /> class.
            </param>
    </member>
    <member name="M:Aspose.Pdf.Devices.PngDevice.#ctor(Aspose.Pdf.PageSize,Aspose.Pdf.Devices.Resolution)">
      <summary>
            Initializes a new instance of the <see cref="T:Aspose.Pdf.Devices.PngDevice" /> class with provided page size and
            resolution.
            </summary>
      <param name="pageSize">
            Page size of the output image.
            </param>
      <param name="resolution">
            Resolution for the result image file, see <see cref="T:Aspose.Pdf.Devices.Resolution" /> class.
            </param>
    </member>
    <member name="M:Aspose.Pdf.Devices.PngDevice.Process(Aspose.Pdf.Page,System.IO.Stream)">
      <summary>
            Converts the page into png and saves it in the output stream.
            </summary>
      <param name="page">
            The page to convert.
            </param>
      <param name="output">
            Output stream with png image.
            </param>
    </member>
    <member name="M:Aspose.Pdf.Devices.PngDevice.#ctor(System.Int32,System.Int32)">
      <summary>
            Initializes a new instance of the <see cref="T:Aspose.Pdf.Devices.PngDevice" /> class with provided image dimensions, 
            default resolution (=150).
            </summary>
      <param name="width">
            Image output width.
            </param>
      <param name="height">
            Image output height.
            </param>
    </member>
    <member name="M:Aspose.Pdf.Devices.PngDevice.#ctor(Aspose.Pdf.PageSize)">
      <summary>
            Initializes a new instance of the <see cref="T:Aspose.Pdf.Devices.PngDevice" /> class with provided page size, 
            default resolution (=150).
            </summary>
      <param name="pageSize">
            Page size of the output image.
            </param>
    </member>
    <member name="T:Aspose.Pdf.Devices.Resolution">
      <summary>
            Represents class for holding image resolution.
            </summary>
    </member>
    <member name="M:Aspose.Pdf.Devices.Resolution.#ctor(System.Int32)">
      <summary>
            Initializes a new instance of the <see cref="T:Aspose.Pdf.Devices.Resolution" /> class.
            </summary>
      <param name="value">
            Value which represents the horizontal and vertical resolution.
            </param>
    </member>
    <member name="M:Aspose.Pdf.Devices.Resolution.#ctor(System.Int32,System.Int32)">
      <summary>
            Initializes a new instance of the <see cref="T:Aspose.Pdf.Devices.Resolution" /> class.
            </summary>
      <param name="valueX">
            Horizontal resolution.
            </param>
      <param name="valueY">
            Vertical resolution.
            </param>
    </member>
    <member name="P:Aspose.Pdf.Devices.Resolution.X">
      <summary>
            Gets or sets horizontal image resolution.
            </summary>
    </member>
    <member name="P:Aspose.Pdf.Devices.Resolution.Y">
      <summary>
            Gets or sets vertical image resolution.
            </summary>
    </member>
    <member name="T:Aspose.Pdf.Devices.ShapeType">
      <summary>
            This enum represents shape type for the extracted images.
            </summary>
    </member>
    <member name="F:Aspose.Pdf.Devices.ShapeType.None">
      <summary>
            As it is.
            </summary>
    </member>
    <member name="F:Aspose.Pdf.Devices.ShapeType.Landscape">
      <summary>
            Landscape Shape.
            </summary>
    </member>
    <member name="F:Aspose.Pdf.Devices.ShapeType.Portait">
      <summary>
            Portrait Shape.
            </summary>
    </member>
    <member name="T:Aspose.Pdf.Devices.TextDevice">
      <summary>
            Represents class for converting pdf document pages into text.
            </summary>
      <remarks>
            The <see cref="T:Aspose.Pdf.Devices.TextDevice" /> object is basically used to extract text from pdf page.
            </remarks>
      <example>
            The example demonstrates how to extract text on the first PDF document page.
            <code lang="C#"> 
            Document doc = new Document(inFile);
            string extractedText;
            
            using (MemoryStream ms = new MemoryStream())
            {
                // create text device
                TextDevice device = new TextDevice();
            
                // convert the page and save text to the stream
                device.Process(doc.Pages[1], ms);
            
                // use the extracted text
                ms.Close();
                extractedText = Encoding.Unicode.GetString(ms.ToArray());
            }
            </code></example>
    </member>
    <member name="M:Aspose.Pdf.Devices.TextDevice.Process(Aspose.Pdf.Page,System.IO.Stream)">
      <summary>
            Convert page and save it as text stream.
            </summary>
      <example>
            The example demonstrates how to extract text on the first PDF document page.
            <code lang="C#"> 
            Document doc = new Document(inFile);
            string extractedText;
            
            using (MemoryStream ms = new MemoryStream())
            {
                // create text device
                TextDevice device = new TextDevice();
            
                // convert the page and save text to the stream
                device.Process(doc.Pages[1], ms);
            
                // use the extracted text
                ms.Close();
                extractedText = Encoding.Unicode.GetString(ms.ToArray());
            }
            </code></example>
      <param name="page">
            The page to convert.
            </param>
      <param name="output">
            Result stream.
            </param>
    </member>
    <member name="M:Aspose.Pdf.Devices.TextDevice.#ctor(Aspose.Pdf.Text.TextOptions.TextExtractionOptions)">
      <summary>
            Initializes a new instance of the <see cref="T:Aspose.Pdf.Devices.TextDevice" /> with text extraction options.
            </summary>
      <param name="extractionOptions">
            Text extraction options.
            </param>
    </member>
    <member name="M:Aspose.Pdf.Devices.TextDevice.#ctor">
      <summary>
            Initializes a new instance of the <see cref="T:Aspose.Pdf.Devices.TextDevice" /> with the Raw text formatting mode and Unicode text encoding.
            </summary>
    </member>
    <member name="M:Aspose.Pdf.Devices.TextDevice.#ctor(System.Text.Encoding)">
      <summary>
            Initializes a new instance of the <see cref="T:Aspose.Pdf.Devices.TextDevice" /> for the specified encoding.
            </summary>
      <param name="encoding">
            Encoding of extracted text
            </param>
    </member>
    <member name="M:Aspose.Pdf.Devices.TextDevice.#ctor(Aspose.Pdf.Text.TextOptions.TextExtractionOptions,System.Text.Encoding)">
      <summary>
            Initializes a new instance of the <see cref="T:Aspose.Pdf.Devices.TextDevice" /> for the specified encoding with text extraction options.
            </summary>
      <param name="extractionOptions">
            Text extraction options.
            </param>
      <param name="encoding">
            Encoding of extracted text.
            </param>
    </member>
    <member name="P:Aspose.Pdf.Devices.TextDevice.ExtractionOptions">
      <summary>
            Gets or sets text extraction options.
            </summary>
      <example>
            The example demonstrates how to extracted text in raw order.
            <code lang="C#"> 
            Document doc = new Document(inFile);
            string extractedText;
            
            // create text device
            TextDevice device = new TextDevice(new TextExtractionOptions(TextExtractionOptions.TextFormattingMode.Raw));
            
            // convert the page and save text to the stream
            device.Process(doc.Pages[1], outFile);
            
            // use the extracted text
            extractedText = File.ReadAllText(outFile, Encoding.Unicode); 
            </code></example>
    </member>
    <member name="P:Aspose.Pdf.Devices.TextDevice.Encoding">
      <summary>
            Gets or sets encoding of extracted text.
            </summary>
      <example>
            The example demonstrates how to represent extracted text in UTF-8 encoding.
            <code lang="C#"> 
            Document doc = new Document(inFile);
            string extractedText;
            
            // create text device
            TextDevice device = new TextDevice(Encoding.UTF8);
            
            // convert the page and save text to the stream
            device.Process(doc.Pages[1], outFile);
            
            // use the extracted text
            extractedText = File.ReadAllText(outFile, Encoding.UTF8);
            </code></example>
    </member>
    <member name="T:Aspose.Pdf.Devices.TiffDevice">
      <summary>
            This class helps to save pdf document page by page into the one tiff image.
            </summary>
    </member>
    <member name="M:Aspose.Pdf.Devices.TiffDevice.#ctor(Aspose.Pdf.Devices.Resolution)">
      <summary>
            Initializes a new instance of the <see cref="T:Aspose.Pdf.Devices.TiffDevice" /> class.
            </summary>
      <param name="resolution">
            Resolution for the result image file.
            </param>
    </member>
    <member name="M:Aspose.Pdf.Devices.TiffDevice.#ctor(Aspose.Pdf.Devices.Resolution,Aspose.Pdf.Devices.TiffSettings)">
      <summary>
            Initializes a new instance of the <see cref="T:Aspose.Pdf.Devices.TiffDevice" /> class.
            </summary>
      <param name="resolution">
            Resolution for the output image.
            </param>
      <param name="settings">
            Tiff settings, see <see cref="T:Aspose.Pdf.Devices.TiffSettings" /> class.
            </param>
    </member>
    <member name="M:Aspose.Pdf.Devices.TiffDevice.#ctor(Aspose.Pdf.Devices.Resolution,Aspose.Pdf.Devices.TiffSettings,Aspose.Pdf.IIndexBitmapConverter)">
      <summary>
            Initializes a new instance of the <see cref="T:Aspose.Pdf.Devices.TiffDevice" /> class.
            </summary>
      <param name="resolution">
            Resolution for the output image.
            </param>
      <param name="settings">
            Tiff settings, see <see cref="T:Aspose.Pdf.Devices.TiffSettings" /> class.
            </param>
      <param name="converter">
            External converter
            </param>
    </member>
    <member name="M:Aspose.Pdf.Devices.TiffDevice.#ctor(Aspose.Pdf.Devices.TiffSettings)">
      <summary>
            Initializes a new instance of the <see cref="T:Aspose.Pdf.Devices.TiffDevice" /> class.
            </summary>
      <param name="settings">
            Tiff settings, see <see cref="T:Aspose.Pdf.Devices.TiffSettings" /> class.
            </param>
    </member>
    <member name="M:Aspose.Pdf.Devices.TiffDevice.#ctor(Aspose.Pdf.Devices.TiffSettings,Aspose.Pdf.IIndexBitmapConverter)">
      <summary>
            Initializes a new instance of the <see cref="T:Aspose.Pdf.Devices.TiffDevice" /> class.
            </summary>
      <param name="settings">
            Tiff settings, see <see cref="T:Aspose.Pdf.Devices.TiffSettings" /> class.
            </param>
      <param name="converter">
            External converter
            </param>
    </member>
    <member name="M:Aspose.Pdf.Devices.TiffDevice.#ctor">
      <summary>
            Initializes a new instance of the <see cref="T:Aspose.Pdf.Devices.TiffDevice" /> class with default settings.
            </summary>
    </member>
    <member name="M:Aspose.Pdf.Devices.TiffDevice.Process(Aspose.Pdf.Document,System.Int32,System.Int32,System.IO.Stream)">
      <summary>
            Converts certain document pages into tiff and save it in the output stream.
            </summary>
      <param name="document">
            The document to convert.
            </param>
      <param name="fromPage">
            Defines page number from which converting will start.
            </param>
      <param name="toPage">
            Defines page number which will end the converting.
            </param>
      <param name="output">
            Output stream with tiff image.
            </param>
    </member>
    <member name="M:Aspose.Pdf.Devices.TiffDevice.#ctor(System.Int32,System.Int32,Aspose.Pdf.Devices.Resolution,Aspose.Pdf.Devices.TiffSettings)">
      <summary>
            Initializes a new instance of the <see cref="T:Aspose.Pdf.Devices.TiffDevice" /> class.
            </summary>
      <param name="width">
            Image output width.
            </param>
      <param name="height">
            Image output height.
            </param>
      <param name="resolution">
            Resolution for the output image.
            </param>
      <param name="settings">
            Tiff settings, see <see cref="T:Aspose.Pdf.Devices.TiffSettings" /> class.
            </param>
    </member>
    <member name="M:Aspose.Pdf.Devices.TiffDevice.#ctor(System.Int32,System.Int32,Aspose.Pdf.Devices.Resolution,Aspose.Pdf.Devices.TiffSettings,Aspose.Pdf.IIndexBitmapConverter)">
      <summary>
            Initializes a new instance of the <see cref="T:Aspose.Pdf.Devices.TiffDevice" /> class.
            </summary>
      <param name="width">
            Image output width.
            </param>
      <param name="height">
            Image output height.
            </param>
      <param name="resolution">
            Resolution for the output image.
            </param>
      <param name="settings">
            Tiff settings, see <see cref="T:Aspose.Pdf.Devices.TiffSettings" /> class.
            </param>
      <param name="converter">
            External converter
            </param>
    </member>
    <member name="M:Aspose.Pdf.Devices.TiffDevice.#ctor(Aspose.Pdf.PageSize,Aspose.Pdf.Devices.Resolution,Aspose.Pdf.Devices.TiffSettings)">
      <summary>
            Initializes a new instance of the <see cref="T:Aspose.Pdf.Devices.TiffDevice" /> class.
            </summary>
      <param name="pageSize">
            Page size of the output image.
            </param>
      <param name="resolution">
            Resolution for the output image.
            </param>
      <param name="settings">
            Tiff settings, see <see cref="T:Aspose.Pdf.Devices.TiffSettings" /> class.
            </param>
    </member>
    <member name="M:Aspose.Pdf.Devices.TiffDevice.#ctor(Aspose.Pdf.PageSize,Aspose.Pdf.Devices.Resolution,Aspose.Pdf.Devices.TiffSettings,Aspose.Pdf.IIndexBitmapConverter)">
      <summary>
            Initializes a new instance of the <see cref="T:Aspose.Pdf.Devices.TiffDevice" /> class.
            </summary>
      <param name="pageSize">
            Page size of the output image.
            </param>
      <param name="resolution">
            Resolution for the output image.
            </param>
      <param name="settings">
            Tiff settings, see <see cref="T:Aspose.Pdf.Devices.TiffSettings" /> class.
            </param>
      <param name="converter">
            External converter
            </param>
    </member>
    <member name="M:Aspose.Pdf.Devices.TiffDevice.#ctor(System.Int32,System.Int32,Aspose.Pdf.Devices.Resolution)">
      <summary>
            Initializes a new instance of the <see cref="T:Aspose.Pdf.Devices.TiffDevice" /> class.
            </summary>
      <param name="width">
            Image output width.
            </param>
      <param name="height">
            Image output height.
            </param>
      <param name="resolution">
            Resolution for the output image.
            </param>
    </member>
    <member name="M:Aspose.Pdf.Devices.TiffDevice.#ctor(Aspose.Pdf.PageSize,Aspose.Pdf.Devices.Resolution)">
      <summary>
            Initializes a new instance of the <see cref="T:Aspose.Pdf.Devices.TiffDevice" /> class.
            </summary>
      <param name="pageSize">
            Page size of the output image.
            </param>
      <param name="resolution">
            Resolution for the output image.
            </param>
    </member>
    <member name="M:Aspose.Pdf.Devices.TiffDevice.#ctor(System.Int32,System.Int32,Aspose.Pdf.Devices.TiffSettings)">
      <summary>
            Initializes a new instance of the <see cref="T:Aspose.Pdf.Devices.TiffDevice" /> class.
            </summary>
      <param name="width">
            Image output width.
            </param>
      <param name="height">
            Image output height.
            </param>
      <param name="settings">
            Tiff settings, see <see cref="T:Aspose.Pdf.Devices.TiffSettings" /> class.
            </param>
    </member>
    <member name="M:Aspose.Pdf.Devices.TiffDevice.#ctor(System.Int32,System.Int32,Aspose.Pdf.Devices.TiffSettings,Aspose.Pdf.IIndexBitmapConverter)">
      <summary>
            Initializes a new instance of the <see cref="T:Aspose.Pdf.Devices.TiffDevice" /> class.
            </summary>
      <param name="width">
            Image output width.
            </param>
      <param name="height">
            Image output height.
            </param>
      <param name="settings">
            Tiff settings, see <see cref="T:Aspose.Pdf.Devices.TiffSettings" /> class.
            </param>
      <param name="converter">
            External converter
            </param>
    </member>
    <member name="M:Aspose.Pdf.Devices.TiffDevice.#ctor(Aspose.Pdf.PageSize,Aspose.Pdf.Devices.TiffSettings,Aspose.Pdf.IIndexBitmapConverter)">
      <summary>
            Initializes a new instance of the <see cref="T:Aspose.Pdf.Devices.TiffDevice" /> class.
            </summary>
      <param name="pageSize">
            Page size of the output image.
            </param>
      <param name="settings">
            Tiff settings, see <see cref="T:Aspose.Pdf.Devices.TiffSettings" /> class.
            </param>
      <param name="converter">
            External converter
            </param>
    </member>
    <member name="M:Aspose.Pdf.Devices.TiffDevice.#ctor(Aspose.Pdf.PageSize,Aspose.Pdf.Devices.TiffSettings)">
      <summary>
            Initializes a new instance of the <see cref="T:Aspose.Pdf.Devices.TiffDevice" /> class.
            </summary>
      <param name="pageSize">
            Page size of the output image.
            </param>
      <param name="settings">
            Tiff settings, see <see cref="T:Aspose.Pdf.Devices.TiffSettings" /> class.
            </param>
    </member>
    <member name="M:Aspose.Pdf.Devices.TiffDevice.#ctor(System.Int32,System.Int32)">
      <summary>
            Initializes a new instance of the <see cref="T:Aspose.Pdf.Devices.TiffDevice" /> class.
            </summary>
      <param name="width">
            Image output width.
            </param>
      <param name="height">
            Image output height.
            </param>
    </member>
    <member name="M:Aspose.Pdf.Devices.TiffDevice.#ctor(Aspose.Pdf.PageSize)">
      <summary>
            Initializes a new instance of the <see cref="T:Aspose.Pdf.Devices.TiffDevice" /> class.
            </summary>
      <param name="pageSize">
            Page size of the output image.
            </param>
    </member>
    <member name="P:Aspose.Pdf.Devices.TiffDevice.RenderingOptions">
      <summary>
            Gets or sets rendering options.
            </summary>
    </member>
    <member name="P:Aspose.Pdf.Devices.TiffDevice.FormPresentationMode">
      <summary>
            Gets or sets form presentation mode.
            </summary>
    </member>
    <member name="P:Aspose.Pdf.Devices.TiffDevice.Settings">
      <summary>
            Gets settings for mapping pdf into tiff image.
            </summary>
    </member>
    <member name="P:Aspose.Pdf.Devices.TiffDevice.Resolution">
      <summary>
            Gets image resolution.
            </summary>
    </member>
    <member name="P:Aspose.Pdf.Devices.TiffDevice.Width">
      <summary>
            Gets image output width.
            </summary>
    </member>
    <member name="P:Aspose.Pdf.Devices.TiffDevice.Height">
      <summary>
            Gets image output height.
            </summary>
    </member>
    <member name="T:Aspose.Pdf.Devices.TiffSettings">
      <summary>
            This class represents settings for importing pdf to Tiff.
            </summary>
    </member>
    <member name="M:Aspose.Pdf.Devices.TiffSettings.#ctor">
      <summary>
            Initializes a new instance of the <see cref="T:Aspose.Pdf.Devices.TiffSettings" /> class.
            </summary>
    </member>
    <member name="M:Aspose.Pdf.Devices.TiffSettings.#ctor(Aspose.Pdf.Devices.ShapeType)">
      <summary>
            Initializes a new instance of the <see cref="T:Aspose.Pdf.Devices.TiffSettings" /> class.
            </summary>
      <param name="shapeType">Type of the shape.</param>
    </member>
    <member name="M:Aspose.Pdf.Devices.TiffSettings.#ctor(Aspose.Pdf.Devices.CompressionType)">
      <summary>
            Initializes a new instance of the <see cref="T:Aspose.Pdf.Devices.TiffSettings" /> class.
            </summary>
      <param name="compressionType">Type of the compression.</param>
    </member>
    <member name="M:Aspose.Pdf.Devices.TiffSettings.#ctor(Aspose.Pdf.Devices.ColorDepth)">
      <summary>
            Initializes a new instance of the <see cref="T:Aspose.Pdf.Devices.TiffSettings" /> class.
            </summary>
      <param name="colorDepth">The color depth.</param>
    </member>
    <member name="M:Aspose.Pdf.Devices.TiffSettings.#ctor(Aspose.Pdf.Devices.Margins)">
      <summary>
            Initializes a new instance of the <see cref="T:Aspose.Pdf.Devices.TiffSettings" /> class.
            </summary>
      <param name="margins">The margins.</param>
    </member>
    <member name="M:Aspose.Pdf.Devices.TiffSettings.#ctor(Aspose.Pdf.Devices.CompressionType,Aspose.Pdf.Devices.ColorDepth,Aspose.Pdf.Devices.Margins)">
      <summary>
            Initializes a new instance of the <see cref="T:Aspose.Pdf.Devices.TiffSettings" /> class.
            </summary>
      <param name="compressionType">Type of the compression.</param>
      <param name="colorDepth">The color depth.</param>
      <param name="margins">The margins.</param>
    </member>
    <member name="M:Aspose.Pdf.Devices.TiffSettings.#ctor(Aspose.Pdf.Devices.CompressionType,Aspose.Pdf.Devices.ColorDepth,Aspose.Pdf.Devices.Margins,System.Boolean)">
      <summary>
            Initializes a new instance of the <see cref="T:Aspose.Pdf.Devices.TiffSettings" /> class.
            </summary>
      <param name="compressionType">Type of the compression.</param>
      <param name="colorDepth">The color depth.</param>
      <param name="margins">The margins.</param>
      <param name="skipBlankPages">if set to <c>true</c> need to skip blank pages.</param>
    </member>
    <member name="M:Aspose.Pdf.Devices.TiffSettings.#ctor(Aspose.Pdf.Devices.CompressionType,Aspose.Pdf.Devices.ColorDepth,Aspose.Pdf.Devices.Margins,System.Boolean,Aspose.Pdf.Devices.ShapeType)">
      <summary>
            Initializes a new instance of the <see cref="T:Aspose.Pdf.Devices.TiffSettings" /> class.
            </summary>
      <param name="compressionType">Type of the compression.</param>
      <param name="colorDepth">The color depth.</param>
      <param name="margins">The margins.</param>
      <param name="skipBlankPages">if set to <c>true</c> need to skip blank pages.</param>
      <param name="shapeType">Type of the shape.</param>
    </member>
    <member name="M:Aspose.Pdf.Devices.TiffSettings.#ctor(System.Boolean)">
      <summary>
            Initializes a new instance of the <see cref="T:Aspose.Pdf.Devices.TiffSettings" /> class.
            </summary>
      <param name="skipBlankPages">if set to <c>true</c> [skip blank pages].</param>
    </member>
    <member name="P:Aspose.Pdf.Devices.TiffSettings.Margins">
      <summary>
            Gets the margins.
            </summary>
    </member>
    <member name="P:Aspose.Pdf.Devices.TiffSettings.SkipBlankPages">
      <summary>
            Gets or sets a value indicating whether to skip blank pages.
            </summary>
      <remarks>
            Default value is false
            </remarks>
      <value>
        <c>true</c> if need to skip blank pages; otherwise, <c>false</c>.</value>
    </member>
    <member name="P:Aspose.Pdf.Devices.TiffSettings.Compression">
      <summary>
            Gets or sets the type of the compression.
            </summary>
      <remarks>
            Default value is CompressionType.LZW
            </remarks>
      <value>The type of the compression.</value>
    </member>
    <member name="P:Aspose.Pdf.Devices.TiffSettings.Depth">
      <summary>
            Gets or sets the color depth.
            </summary>
      <remarks>
            Default value is ColorDepth.Default
            </remarks>
      <value>The color depth.</value>
    </member>
    <member name="P:Aspose.Pdf.Devices.TiffSettings.Shape">
      <summary>
            Gets or sets the type of the shape.
            </summary>
      <remarks>
            Default value is ShapeType.None
            </remarks>
      <value>The type of the shape.</value>
    </member>
    <member name="P:Aspose.Pdf.Devices.TiffSettings.Brightness">
      <summary>
            Get or sets a value boundary of the transformation of colors in white and black.
            This parameter can be applied with EncoderValue.CompressionCCITT4, EncoderValue.CompressionCCITT3, EncoderValue.CompressionRle or ColorDepth.Format1bpp == 1
            </summary>
      <value>Value of brightness should be in the range from 0 to 1. By default value is equal to 0.33f</value>
    </member>
    <member name="P:Aspose.Pdf.Devices.TiffSettings.CoordinateType">
      <summary>
            Get or sets the page coordinate type (Media/Crop boxes). CropBox value is used by default.        
            </summary>
    </member>
    <member name="T:Aspose.Pdf.Direction">
      <summary>
            Text direction.
            </summary>
    </member>
    <member name="F:Aspose.Pdf.Direction.L2R">
      <summary>
            Left to right direction.
            </summary>
    </member>
    <member name="F:Aspose.Pdf.Direction.R2L">
      <summary>
            Right to left direction.
            </summary>
    </member>
    <member name="T:Aspose.Pdf.Document">
      <summary>
            Class representing PDF document
            </summary>
    </member>
    <member name="M:Aspose.Pdf.Document.#ctor(System.IO.Stream)">
      <summary>
            Initialize new Document instance from the <paramref name="input" /> stream.
            </summary>
      <param name="input">Stream with pdf document. </param>
    </member>
    <member name="M:Aspose.Pdf.Document.#ctor(System.IO.Stream,System.String,System.Boolean)">
      <summary>
            Initialize new Document instance from the <paramref name="input" /> stream.
            </summary>
      <param name="input">Stream with pdf document. </param>
      <param name="password">User or owner password.</param>
      <param name="isManagedStream">if set to <c>true</c> inner stream is closed before exit; otherwise, is not.</param>
    </member>
    <member name="M:Aspose.Pdf.Document.#ctor(System.IO.Stream,System.Boolean)">
      <summary>
            Initialize new Document instance from the <paramref name="input" /> stream.
            </summary>
      <param name="input">Stream with pdf document. </param>
      <param name="isManagedStream">if set to <c>true</c> inner stream is closed before exit; otherwise, is not.</param>
    </member>
    <member name="M:Aspose.Pdf.Document.#ctor(System.String)">
      <summary>
            Just init Document using <paramref name="filename" />. The same as <see cref="M:Aspose.Pdf.Document.#ctor(System.IO.Stream)" />.
            </summary>
      <param name="filename">The name of the pdf document file. </param>
    </member>
    <member name="M:Aspose.Pdf.Document.Save(System.IO.Stream)">
      <summary>
            Stores document into stream.
            </summary>
      <param name="output">Stream where document shell be stored.</param>
    </member>
    <member name="M:Aspose.Pdf.Document.#ctor(System.IO.Stream,System.String)">
      <summary>
            This metod will be implemented in the next release.
            </summary>
    </member>
    <member name="M:Aspose.Pdf.Document.Save(System.String)">
      <summary>
            Saves document into the specified file.
            </summary>
      <param name="outputFileName">Path to file where the document will be stored.</param>
    </member>
    <member name="M:Aspose.Pdf.Document.ExportAnnotationsToXfdf(System.String)">
      <summary>
            Exports all document annotations to XFDF file
            </summary>
      <param name="fileName">XFDF file name</param>
    </member>
    <member name="M:Aspose.Pdf.Document.SendTo(Aspose.Pdf.Devices.DocumentDevice,System.IO.Stream)">
      <summary>
            Sends the whole document to the document device for processing.
            </summary>
      <param name="device">
            Document device which is used to process the document.
            </param>
      <param name="output">
            Output stream contains the results of the document processing with given device.
            </param>
    </member>
    <member name="M:Aspose.Pdf.Document.SendTo(Aspose.Pdf.Devices.DocumentDevice,System.Int32,System.Int32,System.IO.Stream)">
      <summary>
            Sends the certain pages of the document to the document device for processing.
            </summary>
      <param name="device">
            Document device which is used to process the document.
            </param>
      <param name="fromPage">
            The first page for processing.
            </param>
      <param name="toPage">
            The last page for processing.
            </param>
      <param name="output">
            Output stream contains the results of the document pages processing with given device.
            </param>
    </member>
    <member name="M:Aspose.Pdf.Document.SendTo(Aspose.Pdf.Devices.DocumentDevice,System.String)">
      <summary>
            Sends the whole document to the document device for processing.
            </summary>
      <param name="device">
            Document device which is used to process the document.
            </param>
      <param name="outputFileName">
            Output file name with the results of processing.
            </param>
    </member>
    <member name="M:Aspose.Pdf.Document.SendTo(Aspose.Pdf.Devices.DocumentDevice,System.Int32,System.Int32,System.String)">
      <summary>
            Sends the whole document to the document device for processing.
            </summary>
      <param name="device">
            Document device which is used to process the document.
            </param>
      <param name="fromPage">
            The first page for processing.
            </param>
      <param name="toPage">
            The last page for processing.
            </param>
      <param name="outputFileName">
            Output file name with the results of processing.
            </param>
    </member>
    <member name="M:Aspose.Pdf.Document.RemoveMetadata">
      <summary>
            Removes metadata from the document.
            </summary>
    </member>
    <member name="M:Aspose.Pdf.Document.ImportAnnotationsFromXfdf(System.String)">
      <summary>
            Imports annotations from XFDF file to document.
            </summary>
      <param name="fileName">XFDF file name</param>
    </member>
    <member name="M:Aspose.Pdf.Document.Validate(System.String,Aspose.Pdf.PdfFormat)">
      <summary>
            Validate document into the specified file.
            </summary>
      <param name="outputLogFileName">Path to file where the comments will be stored.</param>
      <param name="format">Pdf format.</param>
    </member>
    <member name="M:Aspose.Pdf.Document.Convert(System.String,Aspose.Pdf.PdfFormat,Aspose.Pdf.ConvertErrorAction)">
      <summary>
            Convert document and save errors into the specified file.
            </summary>
      <param name="outputLogFileName">Path to file where the comments will be stored.</param>
      <param name="format">Pdf format.</param>
      <param name="action">Action for objects that can not be converted</param>
    </member>
    <member name="M:Aspose.Pdf.Document.Validate(System.IO.Stream,Aspose.Pdf.PdfFormat)">
      <summary>
            Validate document into the specified file.
            </summary>
      <param name="outputLogStream">Stream where the comments will be stored.</param>
      <param name="format">Pdf format.</param>
    </member>
    <member name="M:Aspose.Pdf.Document.Convert(Aspose.Pdf.Document.CallBackGetHocr)">
      <summary>
            Convert document and save errors into the specified file.
            </summary>
      <param name="callback">Action for objects that can not be converted</param>
    </member>
    <member name="M:Aspose.Pdf.Document.Convert(System.IO.Stream,Aspose.Pdf.PdfFormat,Aspose.Pdf.ConvertErrorAction)">
      <summary>
            Convert document and save errors into the specified stream.
            </summary>
      <param name="outputLogStream">Stream where the comments will be stored.</param>
      <param name="format">Pdf format.</param>
      <param name="action">Action for objects that can not be converted</param>
    </member>
    <member name="M:Aspose.Pdf.Document.Convert(System.Xml.XmlTextWriter,Aspose.Pdf.PdfFormat,System.Boolean,Aspose.Pdf.ConvertErrorAction)">
      <summary>
            Convert the PDF Document and log results.
            </summary>
      <param name="xml">The log.</param>
      <param name="format">Pdf format.</param>
      <param name="onlyValidation">Only document validation.</param>
      <param name="action">Action for objects that can not be converted</param>
    </member>
    <member name="M:Aspose.Pdf.Document.#ctor">
      <summary>
            Initializes empty document.
            </summary>
    </member>
    <member name="M:Aspose.Pdf.Document.#ctor(System.String,Aspose.Pdf.LoadOptions)">
      <summary>
            Opens an existing document from a file providing necessary converting to get pdf document.
            </summary>
      <param name="filename">
            Input file to convert into pdf document.
            </param>
      <param name="options">
            Represents properties for converting <paramref name="filename" /> into pdf document.
            </param>
    </member>
    <member name="M:Aspose.Pdf.Document.#ctor(System.IO.Stream,Aspose.Pdf.LoadOptions)">
      <summary>
            Opens an existing document from a stream providing necessary converting to get pdf document.
            </summary>
      <param name="input">
            Input stream to convert into pdf document.
            </param>
      <param name="options">
            Represents properties for converting <paramref name="input" /> into pdf document.
            </param>
    </member>
    <member name="M:Aspose.Pdf.Document.Flatten">
      <summary>
            Removes all fields from the document and place their values instead.
            </summary>
    </member>
    <member name="M:Aspose.Pdf.Document.Encrypt(System.String,System.String,Aspose.Pdf.Facades.DocumentPrivilege,Aspose.Pdf.CryptoAlgorithm,System.Boolean)">
      <summary>
            Encrypts the document. Call then Save to get encrypted version of the document.
            </summary>
      <param name="userPassword">User password.</param>
      <param name="ownerPassword">Owner password.</param>
      <param name="privileges">Document permissions, see <see cref="P:Aspose.Pdf.Document.Permissions" /> for details.</param>
      <param name="cryptoAlgorithm">Cryptographic algorithm, see <see cref="P:Aspose.Pdf.Document.CryptoAlgorithm" /> for details.</param>
      <param name="usePdf20">Support for revision 6 (Extension 8).</param>
    </member>
    <member name="M:Aspose.Pdf.Document.Encrypt(System.String,System.String,Aspose.Pdf.Permissions,Aspose.Pdf.CryptoAlgorithm)">
      <summary>
            Encrypts the document. Call then Save to get encrypted version of the document.
            </summary>
      <param name="userPassword">User password.</param>
      <param name="ownerPassword">Owner password.</param>
      <param name="permissions">Document permissions, see <see cref="P:Aspose.Pdf.Document.Permissions" /> for details.</param>
      <param name="cryptoAlgorithm">Cryptographic algorithm, see <see cref="P:Aspose.Pdf.Document.CryptoAlgorithm" /> for details.</param>
    </member>
    <member name="M:Aspose.Pdf.Document.Encrypt(System.String,System.String,Aspose.Pdf.Permissions,Aspose.Pdf.CryptoAlgorithm,System.Boolean)">
      <summary>
            Encrypts the document. Call then Save to get encrypted version of the document.
            </summary>
      <param name="userPassword">User password.</param>
      <param name="ownerPassword">Owner password.</param>
      <param name="permissions">Document permissions, see <see cref="P:Aspose.Pdf.Document.Permissions" /> for details.</param>
      <param name="cryptoAlgorithm">Cryptographic algorithm, see <see cref="P:Aspose.Pdf.Document.CryptoAlgorithm" /> for details.</param>
      <param name="usePdf20">Support for revision 6 (Extension 8).</param>
    </member>
    <member name="M:Aspose.Pdf.Document.ChangePasswords(System.String,System.String,System.String)">
      <summary>
            Changes document passwords. This action can be done only using owner password/&gt;.
            </summary>
      <param name="ownerPassword">Owner password.</param>
      <param name="newUserPassword">New user password.</param>
      <param name="newOwnerPassword">New owner password.</param>
    </member>
    <member name="M:Aspose.Pdf.Document.#ctor(System.String,System.String)">
      <summary>
            Initializes new instance of the <see cref="T:Aspose.Pdf.Document" /> class for working with encrypted document. 
            </summary>
      <param name="filename">Document file name.</param>
      <param name="password">User or owner password.</param>
    </member>
    <member name="M:Aspose.Pdf.Document.#ctor(System.String,System.String,System.Boolean)">
      <summary>
            Initializes new instance of the <see cref="T:Aspose.Pdf.Document" /> class for working with encrypted document. 
            </summary>
      <param name="filename">Document file name.</param>
      <param name="password">User or owner password.</param>
      <param name="isManagedStream">if set to <c>true</c> inner stream is closed before exit; otherwise, is not.</param>
    </member>
    <member name="M:Aspose.Pdf.Document.#ctor(Aspose.Pdf.Generator.Pdf)">
      <summary>
            Initialize new Document instance from the <paramref name="pdf" /> stream.
            </summary>
      <param name="pdf">Pdf document which came from Aspose.Pdf.Generator.</param>
    </member>
    <member name="M:Aspose.Pdf.Document.Decrypt">
      <summary>
            Decrypts the document. Call then Save to obtain decrypted version of the document.
            </summary>
    </member>
    <member name="M:Aspose.Pdf.Document.Optimize">
      <summary>
            Linearize document in order to
            - open the first page as quickly as possible;
            - display next page or follow by link to the next page as quickly as possible;
            - display the page incrementally as it arrives when data for a page is delivered over a slow channel (display the most useful data first);
            - permit user interaction, such as following a link, to be performed even before the entire page has been received and displayed.
            Invoking this method doesn't actually saves the document. On the contrary the document only is prepared to have optimized structure,
            call then Save to get optimized document.
            </summary>
    </member>
    <member name="M:Aspose.Pdf.Document.Save">
      <summary>
            Save document incrementally (i.e. using incremental update technque).
            </summary>
      <remarks>
            In order to save document incremetally we should open the document file for writing. 
            Therefore Document must be initialized with writable stream like in the next code snippet:
            Document doc = new Document(new FileStream("document.pdf", FileMode.Open, FileAccess.ReadWrite));
            // make some changes and save the document incrementally
            doc.Save();
            </remarks>
    </member>
    <member name="M:Aspose.Pdf.Document.Save(System.String,Aspose.Pdf.SaveFormat)">
      <summary>
            Saves the document with a new name along with a file format.
            </summary>
      <param name="outputFileName">Path to file where the document will be stored.</param>
      <param name="format">Format options.</param>
    </member>
    <member name="M:Aspose.Pdf.Document.Save(System.IO.Stream,Aspose.Pdf.SaveFormat)">
      <summary>
            Saves the document with a new name along with a file format.
            </summary>
      <exception cref="T:System.ArgumentException">
        <see cref="T:System.ArgumentException" /> when <see cref="T:Aspose.Pdf.HtmlSaveOptions" /> is passed to a method. Save a document to the html stream is not supported. Please use method save to the file.</exception>
      <param name="outputStream">Stream where the document will be stored.</param>
      <param name="format">Format options.</param>
    </member>
    <member name="M:Aspose.Pdf.Document.Save(System.String,Aspose.Pdf.SaveOptions)">
      <summary>
            Saves the document with a new name setting its save options.
            </summary>
      <param name="outputFileName">Path to file where the document will be stored.</param>
      <param name="options">Save options.</param>
    </member>
    <member name="M:Aspose.Pdf.Document.Save(System.IO.Stream,Aspose.Pdf.SaveOptions)">
      <summary>
            Saves the document to a stream with a save options.
            </summary>
      <exception cref="T:System.ArgumentException">
        <see cref="T:System.ArgumentException" /> when <see cref="T:Aspose.Pdf.HtmlSaveOptions" /> is passed to a method. Save a document to the html stream is not supported. Please use method save to the file.</exception>
      <param name="outputStream">Stream where the document will be stored.</param>
      <param name="options">Save options.</param>
    </member>
    <member name="M:Aspose.Pdf.Document.Dispose">
      <summary>
            Closes all resources used by this document.
            </summary>
    </member>
    <member name="M:Aspose.Pdf.Document.OptimizeResources">
      <summary>
            Optimize resources in the document:
            1. Resources which are not used on the document pages are removed;
            2. Equal resources are joined into one object; 
            3. Unused objects are deleted.
            </summary>
    </member>
    <member name="M:Aspose.Pdf.Document.OptimizeResources(Aspose.Pdf.Document.OptimizationOptions)">
      <summary>
            Optimize resources in the document according to defined optimization strategy.
            </summary>
      <param name="strategy">Optimization strategy.</param>
    </member>
    <member name="M:Aspose.Pdf.Document.FreeMemory">
      <summary>
            Clears memory
            </summary>
    </member>
    <member name="P:Aspose.Pdf.Document.PageInfo">
      <summary>
            Gets or sets the page info.(for generator only)
            </summary>
      <value>The page info.</value>
    </member>
    <member name="P:Aspose.Pdf.Document.Collection">
      <summary>
            Gets collection of document. 
            </summary>
    </member>
    <member name="P:Aspose.Pdf.Document.Version">
      <summary>
            Gets a version of Pdf from Pdf file header.
            </summary>
    </member>
    <member name="P:Aspose.Pdf.Document.OpenAction">
      <summary>
            Gets or sets action performed at document opening. 
            </summary>
      <example>
            Example demonstrates how to get CenterWindow flag:
            <code lang="C#">
            Document document = new Document("sample.pdf");
            IAppointment value = document.OpenAction;
            </code></example>
    </member>
    <member name="P:Aspose.Pdf.Document.HideToolBar">
      <summary>
            Gets or sets flag specifying whether toolbar should be hidden when document is active. 
            </summary>
      <example>
            Example demonstrates how to get HideToolBar flag:
            <code lang="C#">
            Document document = new Document("sample.pdf");
            bool value = document.HideToolBar;
            </code></example>
    </member>
    <member name="P:Aspose.Pdf.Document.HideMenubar">
      <summary>
            Gets or sets flag specifying whether menu bar should be hidden when document is active. 
            </summary>
      <example>
            Example demonstrates how to get HideMenubar flag:
            <code lang="C#">
            Document document = new Document("sample.pdf");
            bool value = document.HideMenubar;
            </code></example>
    </member>
    <member name="P:Aspose.Pdf.Document.HideWindowUI">
      <summary>
            Gets or sets flag specifying whether user interface elements should be hidden when document is active. 
            </summary>
      <example>
            Example demonstrates how to get HideWindowUI flag:
            <code lang="C#">
            Document document = new Document("sample.pdf");
            bool value = document.HideWindowUI;
            </code></example>
    </member>
    <member name="P:Aspose.Pdf.Document.FitWindow">
      <summary>
            Gets or sets flag specifying whether document window must be resized to fit the first displayed page. 
            </summary>
      <example>
            Example demonstrates how to get FitWindow flag:
            <code lang="C#">
            Document document = new Document("sample.pdf");
            bool value = document.FitWindow;
            </code></example>
    </member>
    <member name="P:Aspose.Pdf.Document.CenterWindow">
      <summary>
            Gets or sets flag specifying whether position of the document's window will be centerd on the screen.
            </summary>
      <example>
            Example demonstrates how to get CenterWindow flag:
            <code lang="C#">
            Document document = new Document("sample.pdf");
            bool value = document.CenterWindow;
            </code></example>
    </member>
    <member name="P:Aspose.Pdf.Document.DisplayDocTitle">
      <summary>
            Gets or sets flag specifying whether document's window title bar should display document title.
            </summary>
      <example>
            Example demonstrates how to get DisplayDocTitle flag:
            <code lang="C#">
            Document document = new Document("sample.pdf");
            bool value = document.DisplayDocTitle;
            </code></example>
    </member>
    <member name="P:Aspose.Pdf.Document.Pages">
      <summary>
            Gets or sets collection of document pages.
            Note that pages are numbered from 1 in collection.
            </summary>
      <example>
            Example below demonstrates how to operate with the document pages:
            How to obtain number of pages and how to obtain rectangle of starting page of the document. 
            <code lang="C#">
            Document document = new Document("sample.pdf");
            Pages pages = document.Pages;
            Console.WriteLine("Document contains " + pages.Count);
            Page page = Pages[1];
            Rectangle rect = page.Rect;
            </code></example>
    </member>
    <member name="P:Aspose.Pdf.Document.Outlines">
      <summary>
            Gets document outlines.
            </summary>
    </member>
    <member name="P:Aspose.Pdf.Document.Actions">
      <summary>
            Gets document actions. This property is instance of DocumentActions class which allows to get/set BeforClosing, BeforSaving, etc. actions. 
            </summary>
      <example>
            This example demonstrates how to obtain after open action of the document:
            <code lang="C#">
            Document document = new Document("d:\\work\\aspose\\aspose.pdf.kit.net.new\\trunk\\testdata\\Aspose.Pdf\\PdfWithOpenAction.pdf");
            DocumentActions actions = document.Actions;
            Aspose.Pdf.InteractiveFeature.Action afterSavingAction = actions.AfterSaving;
            </code></example>
    </member>
    <member name="P:Aspose.Pdf.Document.Form">
      <summary>
            Gets Acro Form of the document.
            </summary>
    </member>
    <member name="P:Aspose.Pdf.Document.EmbeddedFiles">
      <summary>
            Gets collection of files embedded to document. 
            </summary>
    </member>
    <member name="P:Aspose.Pdf.Document.Direction">
      <summary>
            Gets or sets reading order of text: L2R (left to right) or R2L (right to left).
            </summary>
    </member>
    <member name="P:Aspose.Pdf.Document.PageMode">
      <summary>
            Gets or sets page mode, specifying how document should be displayed when opened. 
            </summary>
    </member>
    <member name="P:Aspose.Pdf.Document.NonFullScreenPageMode">
      <summary>
            Gets or sets page mode, specifying how to display the document on exiting full-screen mode.
            </summary>
    </member>
    <member name="P:Aspose.Pdf.Document.PageLayout">
      <summary>
            Gets or sets page layout which shall be used when the document is opened.
            </summary>
    </member>
    <member name="P:Aspose.Pdf.Document.FileName">
      <summary>
            Name of the PDF file that caused this document
            </summary>
    </member>
    <member name="P:Aspose.Pdf.Document.Info">
      <summary>
            Gets document info.
            </summary>
    </member>
    <member name="P:Aspose.Pdf.Document.Metadata">
      <summary>
            Document metadata.
            (A PDF document may include general information,
             such as the document�s title, author, and creation and modification dates.
             Such global information about the document (as opposed to its content or structure) is called metadata
             and is intended to assist in cataloguing and searching for documents in external databases.)
            </summary>
    </member>
    <member name="P:Aspose.Pdf.Document.LogicalStructure">
      <summary>
            Gets logical structure of the document. 
            </summary>
    </member>
    <member name="P:Aspose.Pdf.Document.CryptoAlgorithm">
      <summary>
            Gets security settings if document is encrypted. 
            If document is not encrypted then corresponding exception will be raised in .net 1.1
            or CryptoAlgorithm will be null for other .net versions.
            </summary>
    </member>
    <member name="P:Aspose.Pdf.Document.IsLinearized">
      <summary>
            Gets or sets a value indicating whether document is linearized.
            </summary>
    </member>
    <member name="P:Aspose.Pdf.Document.Permissions">
      <summary>
            Gets permissions of the document.
            </summary>
    </member>
    <member name="P:Aspose.Pdf.Document.IsEncrypted">
      <summary>
            Gets encrypted status of the document. True if document is encrypted.
            </summary>
    </member>
    <member name="P:Aspose.Pdf.Document.Id">
      <summary>
            Gets the ID.
            </summary>
    </member>
    <member name="P:Aspose.Pdf.Document.Background">
      <summary>
            Gets or sets the background color of the document.
            </summary>
    </member>
    <member name="P:Aspose.Pdf.Document.OptimizeSize">
      <summary>
            Gets or sets optimization flag. When pages are added to document, equal resource streams in resultant file are
            merged into one PDF object if this flag set. 
            This allows to decrease resultant file size but may cause slower execution and larger memory requirements.
            Default value: false.
            </summary>
    </member>
    <member name="P:Aspose.Pdf.Document.IgnoreCorruptedObjects">
      <summary>
            Gets or sets flag of ignoring errors in source files. 
            When pages from source document copied into destination document, copying process is stopped with exception 
            if some objects in source files are corrupted when this flag is false. 
            example: dest.Pages.Add(src.Pages);
            If this flag is set to true then corrupted objects will be replaced with empty values.
            By default: true.
            </summary>
    </member>
    <member name="P:Aspose.Pdf.Document.PageLabels">
      <summary>
            Gets page labels in the document. 
            </summary>
    </member>
    <member name="T:Aspose.Pdf.DocumentInfo">
      <summary>
            Represents meta information of PDF document.
            </summary>
    </member>
    <member name="M:Aspose.Pdf.DocumentInfo.#ctor(Aspose.Pdf.Document)">
      <summary>
            Initialize DocumentInfo instance.
            </summary>
      <param name="document">The info of this document will be used for initialization.</param>
    </member>
    <member name="M:Aspose.Pdf.DocumentInfo.Clear">
      <summary>
            Clears the document info.
            </summary>
    </member>
    <member name="M:Aspose.Pdf.DocumentInfo.Add(System.Object,System.Object)">
      <summary>
            Adds an element with the specified key and value into the collection.
            </summary>
      <param name="key">The key of the element to add.</param>
      <param name="value">The value of the element to add. The value can be null.</param>
    </member>
    <member name="M:Aspose.Pdf.DocumentInfo.Remove(System.Object)">
      <summary>
            Removes the element with the specified key from the collection.
            </summary>
      <param name="key">The key of the element to remove.</param>
    </member>
    <member name="M:Aspose.Pdf.DocumentInfo.ClearCustomData">
      <summary>
            Clears custom data only, leaves all other predefined values (Title, Author, etc.).
            </summary>
    </member>
    <member name="M:Aspose.Pdf.DocumentInfo.IsPredefinedKey(System.String)">
      <summary>
            Determines if the key is predefined (Title, Author, etc.), not custom.
            </summary>
      <param name="key">
      </param>
      <returns>
      </returns>
    </member>
    <member name="P:Aspose.Pdf.DocumentInfo.Title">
      <summary>
            Gets or sets document title.
            </summary>
    </member>
    <member name="P:Aspose.Pdf.DocumentInfo.Creator">
      <summary>
            Gets or sets document creator.
            </summary>
    </member>
    <member name="P:Aspose.Pdf.DocumentInfo.Author">
      <summary>
            Gets or sets document author.
            </summary>
    </member>
    <member name="P:Aspose.Pdf.DocumentInfo.Subject">
      <summary>
            Gets or sets the subject of the document.
            </summary>
    </member>
    <member name="P:Aspose.Pdf.DocumentInfo.Keywords">
      <summary>
            Gets or set the keywords of the document.
            </summary>
    </member>
    <member name="P:Aspose.Pdf.DocumentInfo.Producer">
      <summary>
            Gets or sets the document producer.
            </summary>
    </member>
    <member name="P:Aspose.Pdf.DocumentInfo.CreationDate">
      <summary>
            Gets or sets the date of document creation.
            </summary>
    </member>
    <member name="P:Aspose.Pdf.DocumentInfo.ModDate">
      <summary>
            Gets or sets the date of document modification.
            </summary>
    </member>
    <member name="P:Aspose.Pdf.DocumentInfo.Item(System.Object)">
      <summary>
            Gets or sets the value associated with the specified key.
            </summary>
      <param name="key">The key whose value to get or set.</param>
      <returns>
      </returns>
    </member>
    <member name="T:Aspose.Pdf.DOM.Matrix">
      <summary>
            Class represents transformation matrix. 
            </summary>
    </member>
    <member name="M:Aspose.Pdf.DOM.Matrix.#ctor">
      <summary>
            Constructor
            creates stanrard 1 to 1 matrix:
            [ A B C D E F ] = [ 1, 0, 0, 1, 0, 0]
            </summary>
      <example>
        <code lang="C#">
            Matrix m = new Matrix();
            </code>
      </example>
    </member>
    <member name="M:Aspose.Pdf.DOM.Matrix.#ctor(System.Double[])">
      <summary>
            Constructor
            accepts a matrix with following array representation:
            [ A B C D E F ]
            </summary>
      <param name="matrixArray">
      </param>
      <example>
        <code lang="C#">
            double[] c = new double[] { 1, 0, 0, 1, 10, 20 };
            Matrix m = new Matrix(c);
            </code>
      </example>
    </member>
    <member name="M:Aspose.Pdf.DOM.Matrix.#ctor(Aspose.Pdf.DOM.Matrix)">
      <summary>
            Constructor
            accepts a matrix to create a copy
            </summary>
      <param name="matrix">
      </param>
    </member>
    <member name="M:Aspose.Pdf.DOM.Matrix.ToString">
      <summary>
            Returns text reporesentation of the matrix. 
            </summary>
    </member>
    <member name="M:Aspose.Pdf.DOM.Matrix.Equals(System.Object)">
      <summary>
            Compares matrix agains other object.
            </summary>
      <param name="obj">
      </param>
      <returns>Returns true is other object is Matrix and all matrix member are equal to correspondim members of the matrix</returns>
    </member>
    <member name="M:Aspose.Pdf.DOM.Matrix.Rotation(System.Double)">
      <summary>
            Creates matrix for given rotation angle. 
            </summary>
      <param name="alpha">Rotation angle in radians.</param>
      <returns>Transformation matrix.</returns>
      <example>
        <code lang="C#">
            Matrix m = Matrix.Rotation(Math.PI / 2);
            </code>
      </example>
    </member>
    <member name="M:Aspose.Pdf.DOM.Matrix.GetAngle(Aspose.Pdf.Rotation)">
      <summary>
            Transaltes rotation into angle (degrees)
            </summary>
      <param name="rotation">
      </param>
      <returns>
      </returns>
      <example>
        <code lang="C#">
            double angle = Matrix.GetAngle(Rotation.on90);
            Matrix m = Matrix.Rotation(angle);
            </code>
      </example>
    </member>
    <member name="M:Aspose.Pdf.DOM.Matrix.Multiply(Aspose.Pdf.DOM.Matrix)">
      <summary>
            Multiplies the matrix by other matrix.
            </summary>
      <param name="other">Multiplier matrix.</param>
      <returns>Result of multiplication.</returns>
      <example>
        <code lang="C#">
            Matrix a = new Matrix(new double[] { 1, 0, 0, 1, 10, 20 });
            Matrix b = new Matrix(new double[] { 0, -1, 1, 0, 0, 0 } );
            Matrix c= a.Multiply(b);
            </code>
      </example>
    </member>
    <member name="M:Aspose.Pdf.DOM.Matrix.Add(Aspose.Pdf.DOM.Matrix)">
      <summary>
            Adds matrix to other matrix.
            </summary>
      <param name="other">Matrix to be added.</param>
      <returns>Result of matrix add.</returns>
    </member>
    <member name="M:Aspose.Pdf.DOM.Matrix.Transform(Aspose.Pdf.Point)">
      <summary>
            Transforms point using this matrix.
            </summary>
      <param name="p">Point which will be transformed.</param>
      <returns>Transformation result.</returns>
      <example>
        <code lang="C#">
            Matrix m = new Matrix(new double[] { 1, 0, 0, 1, 10, 20 } );
            Point p = new Point(5, 5);
            Point p1 = m.Transform(p);
            </code>
      </example>
    </member>
    <member name="M:Aspose.Pdf.DOM.Matrix.Transform(Aspose.Pdf.Rectangle)">
      <summary>
            Transformes rectangle.
            If angle is not 90 * N degrees then bounding rectangle is returned.
            </summary>
      <param name="rect">Rectangle to be transformed.</param>
      <returns>Transformed rectangle.</returns>
      <example>
        <code lang="C#">
            Matrix m = new Matrix(new double[] { 1, 0, 0, 1, 10, 20 } );
            Rectangle r = new Rectangle(0, 0, 100, 100);
            Rectangle r1 = m.Transform(r1);
            </code>
      </example>
    </member>
    <member name="M:Aspose.Pdf.DOM.Matrix.#ctor(System.Double,System.Double,System.Double,System.Double,System.Double,System.Double)">
      <summary>
            Initializes transformation matrix with specified coefficients.
            </summary>
      <param name="a">A</param>
      <param name="b">B</param>
      <param name="c">C</param>
      <param name="d">D</param>
      <param name="e">E</param>
      <param name="f">F</param>
      <example>
        <code lang="C#">
            Matrix m = new Matrix(1, 0, 0, 1, 3, 3);
            </code>
      </example>
    </member>
    <member name="M:Aspose.Pdf.DOM.Matrix.Reverse">
      <summary>
            Calculates reverse matrix.
            </summary>
      <returns>Reverse matrix.</returns>
      <example>
        <code lang="C#">
            Matrix m = Matrix.Rotation(Math.PI / 2);
            Matrix m1 = m.Reverse();
            </code>
      </example>
    </member>
    <member name="M:Aspose.Pdf.DOM.Matrix.GetHashCode">
      <summary>
            Hash-code for object.
            </summary>
      <returns>Hash-code.</returns>
    </member>
    <member name="P:Aspose.Pdf.DOM.Matrix.A">
      <summary>
            A member of the transformation matrix.
            </summary>
    </member>
    <member name="P:Aspose.Pdf.DOM.Matrix.B">
      <summary>
            B member of the transformation matrix.
            </summary>
    </member>
    <member name="P:Aspose.Pdf.DOM.Matrix.C">
      <summary>
            C member of the transformation matrix.
            </summary>
    </member>
    <member name="P:Aspose.Pdf.DOM.Matrix.D">
      <summary>
            D member of the transformation matrix.
            </summary>
    </member>
    <member name="P:Aspose.Pdf.DOM.Matrix.E">
      <summary>
            E member of the transformation matrix.
            </summary>
    </member>
    <member name="P:Aspose.Pdf.DOM.Matrix.F">
      <summary>
            F member of the transformation matrix.
            </summary>
    </member>
    <member name="T:Aspose.Pdf.DOM.PageMode">
      <summary>
            Class descibes used components of the document page.
            </summary>
    </member>
    <member name="F:Aspose.Pdf.DOM.PageMode.UseNone">
      <summary>
            Dont use any components.
            </summary>
    </member>
    <member name="F:Aspose.Pdf.DOM.PageMode.UseOutlines">
      <summary>
            Document outline visible.
            </summary>
    </member>
    <member name="F:Aspose.Pdf.DOM.PageMode.UseThumbs">
      <summary>
            Thumbnail images visible.
            </summary>
    </member>
    <member name="F:Aspose.Pdf.DOM.PageMode.FullScreen">
      <summary>
            FullScreenFull-screen mode, with no menu bar, window controls, or any other window visible.
            </summary>
    </member>
    <member name="F:Aspose.Pdf.DOM.PageMode.UseOC">
      <summary>
            Optional content group panel visible.
            </summary>
    </member>
    <member name="F:Aspose.Pdf.DOM.PageMode.UseAttachments">
      <summary>
            Attachments panel visible.
            </summary>
    </member>
    <member name="T:Aspose.Pdf.EmbeddedFileCollection">
      <summary>
            Class representing embedded files collection. 
            </summary>
    </member>
    <member name="M:Aspose.Pdf.EmbeddedFileCollection.CopyTo(System.Array,System.Int32)">
      <summary>
            Copies array of FileSpecification object into colleciton. 
            </summary>
      <param name="array">Array of objects which will be copied.</param>
      <param name="index">Starting index from which copying will be started.</param>
    </member>
    <member name="M:Aspose.Pdf.EmbeddedFileCollection.GetEnumerator">
      <summary>
            Returns colleciton enumerator.
            </summary>
      <returns>Enumerator of colleciton.</returns>
    </member>
    <member name="M:Aspose.Pdf.EmbeddedFileCollection.Add(Aspose.Pdf.FileSpecification)">
      <summary>
            Adds embedded file specification into collection.
            </summary>
      <param name="file">FileSpecification which should be added into colleciton.</param>
    </member>
    <member name="M:Aspose.Pdf.EmbeddedFileCollection.Delete(System.String)">
      <summary>
            Delete embedded file by name.
            </summary>
    </member>
    <member name="M:Aspose.Pdf.EmbeddedFileCollection.Delete">
      <summary>
            Remove all embedded files from document.
            </summary>
    </member>
    <member name="P:Aspose.Pdf.EmbeddedFileCollection.IsSynchronized">
      <summary>
             Gets a value indicating whether access to this collection is synchronized (thread safe).
             </summary>
    </member>
    <member name="P:Aspose.Pdf.EmbeddedFileCollection.SyncRoot">
      <summary>
             Gets an object that can be used to synchronize access to this collection.
             </summary>
    </member>
    <member name="P:Aspose.Pdf.EmbeddedFileCollection.Count">
      <summary>
            Gets number of embedded files in collection.
            </summary>
    </member>
    <member name="P:Aspose.Pdf.EmbeddedFileCollection.Item(System.Int32)">
      <summary>
            Gets embedded file by its index.
            </summary>
      <param name="index">Index of embedded file. Numbering is started from 1.</param>
      <returns>Retreived embedded file specification</returns>
    </member>
    <member name="P:Aspose.Pdf.EmbeddedFileCollection.Item(System.String)">
      <summary>
            Gets embedded file by its name.
            </summary>
      <param name="name">Embedded file name.</param>
      <returns>Retreived embedded file specification.</returns>
    </member>
    <member name="T:Aspose.Pdf.Facades.Algorithm">
      <summary>
            Represents algorithms which can be used to encrypt pdf document.
            </summary>
    </member>
    <member name="F:Aspose.Pdf.Facades.Algorithm.RC4">
      <summary>
            RC4 algorithm.
            </summary>
    </member>
    <member name="F:Aspose.Pdf.Facades.Algorithm.AES">
      <summary>
            AES algorithm.
            </summary>
    </member>
    <member name="T:Aspose.Pdf.Facades.AlignmentType">
      <summary>
            Class contains possibly alignment types.
            </summary>
    </member>
    <member name="M:Aspose.Pdf.Facades.AlignmentType.#ctor(System.String)">
      <summary>
            Constructor of AlignmentType.
            </summary>
      <param name="name">
      </param>
    </member>
    <member name="F:Aspose.Pdf.Facades.AlignmentType.Center">
      <summary>
            Center alignment.
            </summary>
    </member>
    <member name="F:Aspose.Pdf.Facades.AlignmentType.Left">
      <summary>
            Left alignment.
            </summary>
    </member>
    <member name="F:Aspose.Pdf.Facades.AlignmentType.Right">
      <summary>
            Right alignment.
            </summary>
    </member>
    <member name="T:Aspose.Pdf.Facades.AutoFiller">
      <summary>
             Represents a class to receive data from database or other datasource, fills them into the designed fields of the template pdf and at last generates new pdf file or stream.
             It has two template file input modes:input as a stream or a pdf file.
             It has four types of output modes:one merged stream, one merged file, many small streams, many small files.
             It can recieve literal data contained in a System.Data.DataTable.
             </summary>
      <example>
        <code>
            	[C#]
             //Note: mail.pdf is a template pdf which has seven text fields. NorthWind.mdb is the microsoft access db.
             ////Common part: Get the data from the database NorthWind.mdb fill it into the DataTable.
            				
            	OleDbCommand mQueryCommand;
            	OleDbDataAdapter mDbDataAdapter;
            	OleDbConnection mDbConnection;
            
            	//Construct the data table.
            	DataTable mDataTable = new DataTable("MailMerge");
            	DataColumnCollection columns = mDataTable.Columns;
            	columns.Add("CompanyName",typeof(string));
            	columns.Add("ContactName",typeof(string));
            	columns.Add("Address",typeof(string));
            	columns.Add("PostalCode",typeof(string));
            	columns.Add("City",typeof(string));
            	columns.Add("Country",typeof(string));
            	columns.Add("Heading",typeof(string));
            
            
            	//Connect to the database source and query the data.
            	mDbConnection = new OleDbConnection();
            	mDbConnection.ConnectionString = "Provider=Microsoft.Jet.OLEDB.4.0;Data Source=" + 
            	DbPath + "NorthWind.mdb";
            	mQueryCommand = new OleDbCommand();
            	mQueryCommand.Connection = mDbConnection;
            	mDbConnection.Open();
            
            
            	mQueryCommand.CommandText = "select CompanyName, ContactName, Address, PostalCode, City, Country from Customers;";
            	mDbDataAdapter = new OleDbDataAdapter(mQueryCommand);
            			
            	mDbDataAdapter.Fill(mDataTable);
            	
            	for (int i = 0; i&lt;mDataTable.Rows.Count;i++)
            	{
            		mDataTable.Rows[i][mDataTable.Columns.Count - 1] = "Dear " + mDataTable.Rows[i][0].ToString() + ",";
            		System.Console.WriteLine("postalCode:" + mDataTable.Rows[i][3].ToString());
            		System.Console.WriteLine("Heading:" + mDataTable.Rows[i][mDataTable.Columns.Count - 1].ToString());
            	}
            
            	mDbDataAdapter.Dispose();
            	mDbConnection.Close();
            	////End of Common part.
            
            	////case one:
            	////Input template pdf is a pdf file and output is a big merged stream.		
              
            	AutoFiller autoFiller = new AutoFiller();
            			
            	autoFiller.InputFileName = "mail.pdf";
            	autoFiller.OutputStream = Response.OutputStream;
            
            	autoFiller.ImportDataTable(mDataTable);
            	autoFiller.Save();
            
            	////case two:
            	////Input template pdf is a pdf file and output is a lot of small files.
            	AutoFiller autoFiller = new AutoFiller();
            			
            	autoFiller.InputFileName = "mail.pdf";
            	autoFiller.GeneratingPath = ".\\";
            	autoFiller.BasicFileName = "outputFile";
            
            	autoFiller.ImportDataTable(mDataTable);
            	autoFiller.Save();
            
            	[Visual Basic]
            	'Note: mail.pdf is a template pdf which has seven text fields. NorthWind.mdb is the microsoft access db.
            	'Common part: Get the data from the database NorthWind.mdb fill it into the DataTable. 
            	mQueryCommand As OleDbCommand = Nothing
            	mDbDataAdapter As OleDbDataAdapter = Nothing
            	mDbConnection As OleDbConnection = Nothing
            
            	mDataTable As DataTable = Nothing
            
            	mPath As String = Nothing
            	mTemplatePdf As String = Nothing
            
            	'Construct the data table.
            	mDataTable = New DataTable("MailMerge")
            	Dim columns As DataColumnCollection = mDataTable.Columns
            	'Create columns for the datatable. 
            	'Every column's  name should be the same as one field's name of the templatePdf.
            	columns.Add("CompanyName", Type.GetType("System.String"))
            
            	columns.Add("ContactName", Type.GetType("System.String"))
            	columns.Add("Address", Type.GetType("System.String"))
            	columns.Add("PostalCode", Type.GetType("System.String"))
            	columns.Add("City", Type.GetType("System.String"))
            	columns.Add("Country", Type.GetType("System.String"))
            	columns.Add("Heading", Type.GetType("System.String"))
            
            
            	'Connect to the database source and query the data.
            	mDbConnection = New OleDbConnection
            	mDbConnection.ConnectionString = "Provider=Microsoft.Jet.OLEDB.4.0;Data Source=" + DbPath + "NorthWind.mdb"
            	mQueryCommand = New OleDbCommand
            	mQueryCommand.Connection = mDbConnection
            	mDbConnection.Open()
            
            	'Query the data and insert into the datatable.
            	mQueryCommand.CommandText = "select CompanyName, ContactName, Address, PostalCode, City, Country from Customers;"
            	mDbDataAdapter = New OleDbDataAdapter(mQueryCommand)
            	mDbDataAdapter.Fill(mDataTable)
            
            	'Construct the last column  of the Datatable.
            	Dim i As Integer
            	For i = 0 To mDataTable.Rows.Count - 1 Step i + 1
            		mDataTable.Rows(i)(mDataTable.Columns.Count - 1) = "Dear " + mDataTable.Rows(i)(0).ToString() + ","
            		System.Console.WriteLine("postalCode:" + mDataTable.Rows(i)(3).ToString())
            		System.Console.WriteLine("Heading:" + mDataTable.Rows(i)(mDataTable.Columns.Count - 1).ToString())
            	Next
            
            	mDbDataAdapter.Dispose()
            	mDbConnection.Close()
            	'End of Common part.
            
            	'case one:
            	'Input template pdf is a pdf file and output is a big merged stream.
            	Dim autoFiller As AutoFiller = New AutoFiller
            
            	autoFiller.InputFileName = "mail.pdf"
            	autoFiller..OutputStream = Response.OutputStream
            
            	autoFiller.ImportDataTable(mDataTable)
            	autoFiller.Save()
            
            	'case two:
            	'Input template pdf is a pdf file and output is a lot of small files.
            	Dim autoFiller As AutoFiller = New AutoFiller
            
            	autoFiller.InputFileName = "mail.pdf"
            	autoFiller.GeneratingPath = ".\";
            	autoFiller.BasicFileName = "outputFile"
            
            	autoFiller.ImportDataTable(mDataTable)
            	autoFiller.Save()
             </code>
      </example>
    </member>
    <member name="T:Aspose.Pdf.Facades.ISaveableFacade">
      <summary>
            Facade interface that defines methods common for all saveable facades.
            </summary>
    </member>
    <member name="T:Aspose.Pdf.Facades.IFacade">
      <summary>
            General facade interface that defines common facades methods.
            </summary>
    </member>
    <member name="M:Aspose.Pdf.Facades.IFacade.BindPdf(System.String)">
      <summary>
            Binds PDF document for editing.
            </summary>
      <param name="srcFile">The path of input PDF document.</param>
    </member>
    <member name="M:Aspose.Pdf.Facades.IFacade.BindPdf(System.IO.Stream)">
      <summary>
            Binds PDF document for editing.
            </summary>
      <param name="srcStream">The stream of input PDF document.</param>
    </member>
    <member name="M:Aspose.Pdf.Facades.IFacade.BindPdf(Aspose.Pdf.Document)">
      <summary>
            Binds PDF document for editing.
            </summary>
      <param name="srcDoc">Input PDF document.</param>
    </member>
    <member name="M:Aspose.Pdf.Facades.IFacade.Close">
      <summary>
            Releases any resources associates with the current facade.
            </summary>
    </member>
    <member name="M:Aspose.Pdf.Facades.ISaveableFacade.Save(System.String)">
      <summary>
            Saves the result PDF document to file.
            </summary>
      <param name="destFile">The path of output PDF document.</param>
    </member>
    <member name="M:Aspose.Pdf.Facades.ISaveableFacade.Save(System.IO.Stream)">
      <summary>
            Saves the result PDF document to stream.
            </summary>
      <param name="destStream">The stream of output PDF document.</param>
    </member>
    <member name="M:Aspose.Pdf.Facades.AutoFiller.Save">
      <summary>
            Saves all the pdfs.
            </summary>
    </member>
    <member name="M:Aspose.Pdf.Facades.AutoFiller.ImportDataTable(System.Data.DataTable)">
      <summary>
            Imports data of DataTable type. Every column's name of the  dataTable must be the same as
            one field name of the template pdf in case sensitive.
            </summary>
      <param name="dataTable">The dataTable which contains all the data from database or other data source.</param>
    </member>
    <member name="P:Aspose.Pdf.Facades.AutoFiller.UnFlattenFields">
      <summary>
            Sets the fields which will not be flattened.
            If this property is not set, all the fields will be flattened.
            </summary>
    </member>
    <member name="P:Aspose.Pdf.Facades.AutoFiller.OutputStream">
      <summary>
            Gets or sets the OutputStream. One of four output modes. Its classical use case is Response.OutputStream.
            Please refer to the online demo.
            </summary>
    </member>
    <member name="P:Aspose.Pdf.Facades.AutoFiller.OutputStreams">
      <summary>
            Gets or sets the many Output Streams. One of four output modes.
            </summary>
    </member>
    <member name="P:Aspose.Pdf.Facades.AutoFiller.InputStream">
      <summary>
            Gets or sets the input template stream. One of two input modes.
            </summary>
    </member>
    <member name="P:Aspose.Pdf.Facades.AutoFiller.InputFileName">
      <summary>
            Gets or sets the input template file. One of two input modes.
            </summary>
    </member>
    <member name="P:Aspose.Pdf.Facades.AutoFiller.OutputFileName">
      <summary>
            Gets or sets the one big merged output file. One of the four output modes.
            </summary>
    </member>
    <member name="P:Aspose.Pdf.Facades.AutoFiller.GeneratingPath">
      <summary>
            Gets or sets the Generating Path of the small pdf files if many small pdf files to be generated. It works with another property <see cref="P:Aspose.Pdf.Facades.AutoFiller.BasicFileName" />BasicFileName.
            One of the four output modes.
            </summary>
    </member>
    <member name="P:Aspose.Pdf.Facades.AutoFiller.BasicFileName">
      <summary>
            Gets or sets the basic file name if many small files will be generated. The generated file will be like "BasicFileName0","BasicFileName1",...
            It works with another property <see cref="P:Aspose.Pdf.Facades.AutoFiller.GeneratingPath" />GeneratingPath.
            </summary>
    </member>
    <member name="T:Aspose.Pdf.Facades.BlendingColorSpace">
      <summary>
            Class represents blending color space.
            </summary>
    </member>
    <member name="F:Aspose.Pdf.Facades.BlendingColorSpace.DontChange">
      <summary>
            The blending color space is not changed.
            </summary>
    </member>
    <member name="F:Aspose.Pdf.Facades.BlendingColorSpace.Auto">
      <summary>
            The blending color space is determined automatically.
            </summary>
    </member>
    <member name="F:Aspose.Pdf.Facades.BlendingColorSpace.DeviceRGB">
      <summary>
            Blending color space is set to DeviceRGB.
            </summary>
    </member>
    <member name="F:Aspose.Pdf.Facades.BlendingColorSpace.DeviceCMYK">
      <summary>
            Blending color space is set to DeviceCMYK.
            </summary>
    </member>
    <member name="T:Aspose.Pdf.Facades.Bookmark">
      <summary>
            Represents a bookmark.
            </summary>
    </member>
    <member name="M:Aspose.Pdf.Facades.Bookmark.#ctor">
      <summary>
            Initializes a new instance of the <see cref="T:Aspose.Pdf.Facades.Bookmark" /> class.
            </summary>
    </member>
    <member name="P:Aspose.Pdf.Facades.Bookmark.Action">
      <summary>
            Gets or sets the action bound with the bookmark.
            If PageNumber is presented the action can not be specified.
            The action type includes: "GoTo", "GoToR", "Launch", "Named".
            </summary>
    </member>
    <member name="P:Aspose.Pdf.Facades.Bookmark.BoldFlag">
      <summary>
            Gets or sets the bold flag of bookmark's title.
            </summary>
    </member>
    <member name="P:Aspose.Pdf.Facades.Bookmark.ChildItem">
      <summary>
            Gets or sets bookmark's children.
            </summary>
    </member>
    <member name="P:Aspose.Pdf.Facades.Bookmark.ChildItems">
      <summary>
            Gets or sets bookmark's children.
            </summary>
    </member>
    <member name="P:Aspose.Pdf.Facades.Bookmark.CustomAcorbatViewerMenuActionName">
      <summary>
            The action name corresponding to execute a menu item in Acrobat viewer.
            </summary>
    </member>
    <member name="P:Aspose.Pdf.Facades.Bookmark.Destination">
      <summary>
            Gets or sets bookmark's destination page. Required if action is set as "".
            </summary>
    </member>
    <member name="P:Aspose.Pdf.Facades.Bookmark.ItalicFlag">
      <summary>
            Gets or sets the italic flag of bookmark's title.
            </summary>
    </member>
    <member name="P:Aspose.Pdf.Facades.Bookmark.Level">
      <summary>
            Gets or sets bookmark's hierarchy level.
            </summary>
    </member>
    <member name="P:Aspose.Pdf.Facades.Bookmark.PageDisplay">
      <summary>
            Gets or sets the type of display bookmark's destination page.
            </summary>
    </member>
    <member name="P:Aspose.Pdf.Facades.Bookmark.PageDisplay_Bottom">
      <summary>
            Gets or sets the bottom coordinate of page display.
            </summary>
    </member>
    <member name="P:Aspose.Pdf.Facades.Bookmark.PageDisplay_Left">
      <summary>
            Gets or sets the left coordinate of page display.
            </summary>
    </member>
    <member name="P:Aspose.Pdf.Facades.Bookmark.PageDisplay_Right">
      <summary>
            Gets or sets the right coordinate of page display.
            </summary>
    </member>
    <member name="P:Aspose.Pdf.Facades.Bookmark.PageDisplay_Top">
      <summary>
            Gets or sets the top coordinate of page display.
            </summary>
    </member>
    <member name="P:Aspose.Pdf.Facades.Bookmark.PageDisplay_Zoom">
      <summary>
            Gets or sets the zoom factor of page display.
            </summary>
    </member>
    <member name="P:Aspose.Pdf.Facades.Bookmark.PageNumber">
      <summary>
            Gets or sets the number of bookmark's destination page. 
            </summary>
    </member>
    <member name="P:Aspose.Pdf.Facades.Bookmark.RemoteFile">
      <summary>
            Gets or sets the file (path) which is required for "GoToR" action of bookmark.
            </summary>
    </member>
    <member name="P:Aspose.Pdf.Facades.Bookmark.Title">
      <summary>
            Gets or sets bookmark's title.
            </summary>
    </member>
    <member name="P:Aspose.Pdf.Facades.Bookmark.TitleColor">
      <summary>
            Gets or sets the color of bookmark's title.
            </summary>
    </member>
    <member name="P:Aspose.Pdf.Facades.Bookmark.Open">
      <summary>
            Gets or sets bookmark state (open, close).
            </summary>
    </member>
    <member name="T:Aspose.Pdf.Facades.Bookmarks">
      <summary>
            Represents a collection of <see cref="T:Aspose.Pdf.Facades.Bookmark" /> objects.
            </summary>
    </member>
    <member name="M:Aspose.Pdf.Facades.Bookmarks.#ctor">
      <summary>
            Initializes a new instance of the <see cref="T:Aspose.Pdf.Facades.Bookmarks" /> class.
            </summary>
    </member>
    <member name="M:Aspose.Pdf.Facades.Bookmarks.Add(Aspose.Pdf.Facades.Bookmark)">
      <summary>
            Adds a new <see cref="T:Aspose.Pdf.Facades.Bookmark" /> object into the collection.
            </summary>
      <param name="bookMark">The <see cref="T:Aspose.Pdf.Facades.Bookmark" /> object to be added.</param>
    </member>
    <member name="M:Aspose.Pdf.Facades.Bookmarks.CopyTo(Aspose.Pdf.Facades.Bookmark[],System.Int32)">
      <summary>
            Copies the elements to a <see cref="T:Aspose.Pdf.Facades.Bookmark" /> object array, starting at a specified array index.
            </summary>
      <param name="bookMarkArray">The Bookmarks array.</param>
      <param name="index">The start index.</param>
    </member>
    <member name="M:Aspose.Pdf.Facades.Bookmarks.Remove(Aspose.Pdf.Facades.Bookmark)">
      <summary>
            Removes a <see cref="T:Aspose.Pdf.Facades.Bookmark" /> object from the collection.
            </summary>
      <param name="bookMark">The <see cref="T:Aspose.Pdf.Facades.Bookmark" /> object to be removed.</param>
    </member>
    <member name="P:Aspose.Pdf.Facades.Bookmarks.Item(System.Int32)">
      <summary>
            Gets or sets a <see cref="T:Aspose.Pdf.Facades.Bookmark" /> object from the collection according to bookmark index.
            </summary>
    </member>
    <member name="T:Aspose.Pdf.Facades.PdfProducer">
      <summary>
            Represents a class to produce PDF from other formats.
            <example>This sample shows how to produce Pdf file from CGM file.
            <code>
            string inputFile = "myImage.cgm";
            string outputFile = "myPdf.pdf";
            try
            {
                PdfProducer.Produce(inputFile, ImportFormat.Cgm, outputFile);
                // Success produced pdf file.
            }
            catch (InvalidCgmFileFormatException e)
            {
                //  Do something...
            }
            </code></example></summary>
    </member>
    <member name="M:Aspose.Pdf.Facades.PdfProducer.Produce(System.IO.Stream,Aspose.Pdf.ImportFormat,System.IO.Stream)">
      <summary>
            Produce the PDF stream using specified import format.
            <example>This sample shows how to produce Pdf stream from CGM stream.
            <code>
            string inputFile = "myImage.cgm";
            string outputFile = "myPdf.pdf";
            using (FileStream inputStream = File.OpenRead(inputFile))
            using (FileStream outputStream = File.Create(outputFile))
            {
                PdfProducer.Produce(inputStream, ImportFormat.Cgm, outputStream);
            }
            </code></example></summary>
      <param name="inputStream">Input stream.</param>
      <param name="format">Import format.</param>
      <param name="outputStream">Output PDF stream.</param>
      <exception cref="T:Aspose.Pdf.Exceptions.InvalidFileFormatException">The exception is thrown when a file is invalid.</exception>
      <exception cref="T:System.ArgumentNullException">Input or output stream is null</exception>
    </member>
    <member name="M:Aspose.Pdf.Facades.PdfProducer.Produce(System.String,Aspose.Pdf.ImportFormat,System.IO.Stream)">
      <summary>
            Produce the PDF stream using specified import format.
            <example>This sample shows how to produce Pdf stream from CGM file.
            <code>
            string inputFile = "myImage.cgm";
            string outputFile = "myPdf.pdf";
            using (FileStream outputStream = File.Create(outputFile))
            {
                PdfProducer.Produce(inputFile, ImportFormat.Cgm, outputStream);
            }
            </code></example></summary>
      <param name="inputFileName">Input file name.</param>
      <param name="format">Import format.</param>
      <param name="outputStream">Output PDF stream.</param>
      <exception cref="T:Aspose.Pdf.Exceptions.InvalidFileFormatException">The exception is thrown when a file is invalid.</exception>
      <exception cref="T:System.ArgumentNullException">Output stream is null</exception>
      <exception cref="T:System.ArgumentException">Input file name is an empty string</exception>
    </member>
    <member name="M:Aspose.Pdf.Facades.PdfProducer.Produce(System.IO.Stream,Aspose.Pdf.ImportFormat,System.String)">
      <summary>
            Produce the PDF file using specified import format.
            <example>This sample shows how to produce Pdf file from CGM stream.
            <code>
            string inputFile = "myImage.cgm";
            string outputFile = "myPdf.pdf";
            using (FileStream inputStream = File.OpenRead(inputFile))
            using (FileStream outputStream = File.Create(outputFile))
            {
                PdfProducer.Produce(inputStream, ImportFormat.Cgm, outputStream);
            }
            </code></example></summary>
      <param name="inputStream">Input stream.</param>
      <param name="format">Import format.</param>
      <param name="outputFileName">Output PDF file</param>
      <exception cref="T:Aspose.Pdf.Exceptions.InvalidFileFormatException">The exception is thrown when a file is invalid.</exception>
      <exception cref="T:System.ArgumentNullException">Input stream is null</exception>
      <exception cref="T:System.ArgumentException">Output file name is an empty string</exception>
    </member>
    <member name="M:Aspose.Pdf.Facades.PdfProducer.Produce(System.String,Aspose.Pdf.ImportFormat,System.String)">
      <summary>
            Produce the PDF file using specified import format.
            <example>This sample shows how to produce Pdf file from CGM file.
            <code>
            string inputFile = "myImage.cgm";
            string outputFile = "myPdf.pdf";
            PdfProducer.Produce(inputFile, ImportFormat.Cgm, outputFile);
            </code></example></summary>
      <param name="inputFileName">Input file name.</param>
      <param name="format">Import format.</param>
      <param name="outputFileName">Output PDF file</param>
      <exception cref="T:Aspose.Pdf.Exceptions.InvalidFileFormatException">The exception is thrown when a file is invalid.</exception>
      <exception cref="T:System.ArgumentException">Input or output file name is an empty string</exception>
    </member>
    <member name="M:Aspose.Pdf.Facades.PdfProducer.Produce(System.String,Aspose.Pdf.ImportOptions,System.IO.Stream)">
      <summary>
            Produce the PDF stream using specified import option.
            <example>This sample shows how to produce Pdf stream from CGM file.
            <code>
            string inputFile = "myImage.cgm";
            string outputFile = "myPdf.pdf";
            ImportOptions importOptions = new CgmImportOptions();
            using (FileStream outputStream = File.Create(outputFile))
            {
                PdfProducer.Produce(inputFile, importOptions, outputStream);
            }
            </code></example></summary>
      <param name="inputFileName">Input file name.</param>
      <param name="options">Import option.</param>
      <param name="outputStream">Output PDF stream.</param>
      <exception cref="T:Aspose.Pdf.Exceptions.InvalidFileFormatException">The exception is thrown when a file is invalid.</exception>
      <exception cref="T:System.ArgumentNullException">Output stream is null</exception>
      <exception cref="T:System.ArgumentException">Input file name is an empty string</exception>
    </member>
    <member name="M:Aspose.Pdf.Facades.PdfProducer.Produce(System.IO.Stream,Aspose.Pdf.ImportOptions,System.String)">
      <summary>
            Produce the PDF file using specified import option.
            <example>This sample shows how to produce Pdf file from CGM stream.
            <code>
            string inputFile = "myImage.cgm";
            string outputFile = "myPdf.pdf";
            ImportOptions importOptions = new CgmImportOptions();
            using (FileStream inputStream = File.OpenRead(inputFile))
            {
                PdfProducer.Produce(inputStream, importOptions, outputFile);
            }
            </code></example></summary>
      <param name="inputStream">Input stream.</param>
      <param name="options">Import option.</param>
      <param name="outputFileName">Output PDF file.</param>
      <exception cref="T:Aspose.Pdf.Exceptions.InvalidFileFormatException">The exception is thrown when a file is invalid.</exception>
      <exception cref="T:System.ArgumentNullException">Input stream is null</exception>
      <exception cref="T:System.ArgumentException">Output file name is an empty string</exception>
    </member>
    <member name="M:Aspose.Pdf.Facades.PdfProducer.Produce(System.String,Aspose.Pdf.ImportOptions,System.String)">
      <summary>
            Produce the PDF file using specified import option.
            <example>This sample shows how to produce Pdf file from CGM file.
            <code>
            string inputFile = "myImage.cgm";
            string outputFile = "myPdf.pdf";
            ImportOptions importOptions = new CgmImportOptions();
            PdfProducer.Produce(inputStream, importOptions, outputStream);
            </code></example></summary>
      <param name="inputFileName">Input file name.</param>
      <param name="options">Import option.</param>
      <param name="outputFileName">Output PDF stream.</param>
      <exception cref="T:Aspose.Pdf.Exceptions.InvalidFileFormatException">The exception is thrown when a file is invalid.</exception>
      <exception cref="T:System.ArgumentException">Input or output file name is an empty string</exception>
    </member>
    <member name="M:Aspose.Pdf.Facades.PdfProducer.Produce(System.IO.Stream,Aspose.Pdf.ImportOptions,System.IO.Stream)">
      <summary>
            Produce the PDF file using specified import option.
            <example>This sample shows how to produce Pdf stream from CGM stream.
            <code>
            string inputFile = "myImage.cgm";
            string outputFile = "myPdf.pdf";
            ImportOptions importOptions = new CgmImportOptions();
            using (FileStream inputStream = File.OpenRead(inputFile))
            using (FileStream outputStream = File.Create(outputFile))
            {
                PdfProducer.Produce(inputStream, importOptions, outputStream);
            }
            </code></example></summary>
      <param name="inputStream">Input stream.</param>
      <param name="options">Import option.</param>
      <param name="outputStream">Output PDF stream.</param>
      <exception cref="T:Aspose.Pdf.Exceptions.InvalidFileFormatException">The exception is thrown when a file is invalid.</exception>
      <exception cref="T:System.ArgumentNullException">Input or output stream is null.</exception>
    </member>
    <member name="M:Aspose.Pdf.Facades.PdfProducer.Produce(System.IO.Stream,System.IO.Stream)">
      <summary>
            Produce the PDF stream from specified stream.
            </summary>
      <param name="inputStream">Input stream.</param>
      <param name="outputStream">Output PDF stream.</param>
    </member>
    <member name="T:Aspose.Pdf.Facades.DataType">
      <summary>
            Enumerates field types definitions.
            </summary>
    </member>
    <member name="F:Aspose.Pdf.Facades.DataType.FDF">
      <summary>
            FDF stream.
            </summary>
    </member>
    <member name="F:Aspose.Pdf.Facades.DataType.XML">
      <summary>
            XML stream.
            </summary>
    </member>
    <member name="F:Aspose.Pdf.Facades.DataType.XFDF">
      <summary>
            XFDF stream.
            </summary>
    </member>
    <member name="F:Aspose.Pdf.Facades.DataType.PDF">
      <summary>
            PDF stream.
            </summary>
    </member>
    <member name="F:Aspose.Pdf.Facades.DataType.OLEDB">
      <summary>
            OLEDB database, such as MS Access.
            </summary>
    </member>
    <member name="F:Aspose.Pdf.Facades.DataType.ODBC">
      <summary>
            ODBC database, such as MS SQL Server.
            </summary>
    </member>
    <member name="T:Aspose.Pdf.Facades.DefaultMetadataProperties">
      <summary>
            Enumeration of standard XMP properties.
            </summary>
    </member>
    <member name="F:Aspose.Pdf.Facades.DefaultMetadataProperties.Advisory">
      <summary>
            xmp:Advisory property.
            An unordered array specifying properties that were edited outside the authoring application. Each item should contain a single          /// namespace and XPath separated by one ASCII space 
            </summary>
    </member>
    <member name="F:Aspose.Pdf.Facades.DefaultMetadataProperties.BaseURL">
      <summary>
            xmp:BaseURL property.
            The base URL for relative URLs in the document content. If this document contains Internet links, and those links are relative,          /// they are relative to this base URL. This property provides a standard way for embedded relative URLs to be interpreted by tools.        /// Web authoring tools should set the value based on their notion of where URLs will be interpreted
            </summary>
    </member>
    <member name="F:Aspose.Pdf.Facades.DefaultMetadataProperties.CreateDate">
      <summary>
            xmp:CreateDate property.
            The date and time the resource was originally created.
            </summary>
    </member>
    <member name="F:Aspose.Pdf.Facades.DefaultMetadataProperties.CreatorTool">
      <summary>
            xmp:CreatorTool property.
            The name of the first known tool used to create the resource.
            </summary>
    </member>
    <member name="F:Aspose.Pdf.Facades.DefaultMetadataProperties.Identifier">
      <summary>
            xmp:Identifier property.
            An unordered array of text strings that unambiguously 
            identify the resource within a given context
            </summary>
    </member>
    <member name="F:Aspose.Pdf.Facades.DefaultMetadataProperties.MetadataDate">
      <summary>
            xmp:MetadataDate property.
            The date and time that any metadata for this resource 
            was last changed
            </summary>
    </member>
    <member name="F:Aspose.Pdf.Facades.DefaultMetadataProperties.ModifyDate">
      <summary>
            xmp:ModifyDate property.
            The date and time the resource was last modified. 
            </summary>
    </member>
    <member name="F:Aspose.Pdf.Facades.DefaultMetadataProperties.Nickname">
      <summary>
            xmp:Nickname property.
            A short informal name for the resource.
            </summary>
    </member>
    <member name="F:Aspose.Pdf.Facades.DefaultMetadataProperties.Thumbnails">
      <summary>
            xmp:Thumbnails property.
            An alternative array of thumbnail images for a file, 
            which can differ in characteristics such as size or image 
            encoding.
            </summary>
    </member>
    <member name="T:Aspose.Pdf.Facades.DocumentPrivilege">
      <summary>
             Represents the privileges for accessing Pdf file. Refer to<see cref="T:Aspose.Pdf.Facades.PdfFileSecurity" />.
             There are 4 ways using this class:
             1.Using predefined privilege directly.
             2.Based on a predefined privilege and change some specifical permissions.
             3.Based on a predefined privilege and change some specifical Adobe Professional permissions combination.
             4.Mixes the way2 and way3.
             </summary>
      <example>
        <code>
             [C#]	
             //Way1: Using predefined privilege directly.
             DocumentPrivilege privilege = DocumentPrivilege.Print;
            
             //Way2: Based on a predefined privilege and change some specifical permissions.
             DocumentPrivilege privilege = DocumentPrivilege.AllowAll;
             privilege.AllowPrint = false;
             privilege.AllowModifyContents = false;
            
             //Way3: Based on a predefined privilege and change some specifical Adobe Professional permissions combination.
             DocumentPrivilege privilege = DocumentPrivilege.ForbidAll;
             privilege.ChangeAllowLevel = 1;
             privilege.PrintAllowLevel = 2;
            
             //Way4: Mixes the way2 and way3
             DocumentPrivilege privilege = DocumentPrivilege.ForbidAll;
             privilege.ChangeAllowLevel = 1;
             privilege.AllowPrint = true;
             
             [Visual Basic]
             'Way1: Using predefined privilege directly.
             Dim privilege As DocumentPrivilege =  DocumentPrivilege.Print 
             
             'Way2: Based on a predefined privilege and change some specifical permissions.
             Dim privilege As DocumentPrivilege =  DocumentPrivilege.AllowAll 
             privilege.AllowPrint = False
             privilege.AllowModifyContents = False
             
             'Way3: Based on a predefined privilege and change some specifical Adobe Professional permissions combination.
             Dim privilege As DocumentPrivilege =  DocumentPrivilege.ForbidAll 
             privilege.ChangeAllowLevel = 1
             privilege.PrintAllowLevel = 2
             
             'Way4: Mixes the way2 and way3
             Dim privilege As DocumentPrivilege =  DocumentPrivilege.ForbidAll 
             privilege.ChangeAllowLevel = 1
             privilege.AllowPrint = True
             </code>
      </example>
    </member>
    <member name="M:Aspose.Pdf.Facades.DocumentPrivilege.CompareTo(System.Object)">
      <summary>
            Compares two <see cref="T:Aspose.Pdf.Facades.DocumentPrivilege" /> objects.
            <param name="obj">
            The object to compare with.
            </param></summary>
    </member>
    <member name="P:Aspose.Pdf.Facades.DocumentPrivilege.AllowPrint">
      <summary>
            Sets the permission which allow print or not. 
            true is allow and false is forbidden.
            </summary>
    </member>
    <member name="P:Aspose.Pdf.Facades.DocumentPrivilege.AllowDegradedPrinting">
      <summary>
            Sets the permission which allow degraded printing or not. 
            true is allow and false is forbidden.
            </summary>
    </member>
    <member name="P:Aspose.Pdf.Facades.DocumentPrivilege.AllowModifyContents">
      <summary>
            Sets the permission which allow modify contents or not. 
            true is allow and false is forbidden.
            </summary>
    </member>
    <member name="P:Aspose.Pdf.Facades.DocumentPrivilege.AllowCopy">
      <summary>
            Sets the permission which allow copy or not. 
            true is allow and false is forbidden.
            </summary>
    </member>
    <member name="P:Aspose.Pdf.Facades.DocumentPrivilege.AllowModifyAnnotations">
      <summary>
            Sets the permission which allow modify annotations or not. 
            true is allow and false is forbidden.
            </summary>
    </member>
    <member name="P:Aspose.Pdf.Facades.DocumentPrivilege.AllowFillIn">
      <summary>
            Sets the permission which allow fill in forms or not. 
            true is allow and false is forbidden.
            </summary>
    </member>
    <member name="P:Aspose.Pdf.Facades.DocumentPrivilege.AllowScreenReaders">
      <summary>
            Sets the permission which allow screen readers or not. 
            true is allow and false is forbidden.
            </summary>
    </member>
    <member name="P:Aspose.Pdf.Facades.DocumentPrivilege.AllowAssembly">
      <summary>
            Sets the permission which allow assembly or not. 
            true is allow and false is forbidden.
            </summary>
    </member>
    <member name="P:Aspose.Pdf.Facades.DocumentPrivilege.PrintAllowLevel">
      <summary>
            Sets the print level of  document's privilege. Just as the Adobe Professional's Printing Allowed settings.
            0: None.
            1: Low Resolution (150 dpi).
            2: High Resolution.
            </summary>
    </member>
    <member name="P:Aspose.Pdf.Facades.DocumentPrivilege.ChangeAllowLevel">
      <summary>
            Sets the change level of  document's privilege. Just as the Adobe Professional's Changes Allowed settings.
            0: None.
            1: Inserting, Deleting and Rotating pages.
            2: Filling in form fields and signing existing signature fields.
            3: Commenting, filling in form fields, and signing existing signature fields.
            4: Any except extracting pages.
            </summary>
    </member>
    <member name="P:Aspose.Pdf.Facades.DocumentPrivilege.CopyAllowLevel">
      <summary>
            Sets the copy level of  document's privilege. Just as the Adobe Professional's permission settings.
            0: None.
            1: Enable text access for screen reader devices for the visually impaired.
            2: Enable copying of text, images and other content.
            </summary>
    </member>
    <member name="P:Aspose.Pdf.Facades.DocumentPrivilege.DegradedPrinting">
      <summary>
            Allows degraded printing.
            </summary>
    </member>
    <member name="P:Aspose.Pdf.Facades.DocumentPrivilege.Print">
      <summary>
            Allows printing file.
            </summary>
    </member>
    <member name="P:Aspose.Pdf.Facades.DocumentPrivilege.ModifyContents">
      <summary>
            Allows modifying file.
            </summary>
    </member>
    <member name="P:Aspose.Pdf.Facades.DocumentPrivilege.Copy">
      <summary>
            Allows copying file.
            </summary>
    </member>
    <member name="P:Aspose.Pdf.Facades.DocumentPrivilege.ModifyAnnotations">
      <summary>
            Allows modifying annotations of file.
            </summary>
    </member>
    <member name="P:Aspose.Pdf.Facades.DocumentPrivilege.FillIn">
      <summary>
            Allows filling forms in file. 
            </summary>
    </member>
    <member name="P:Aspose.Pdf.Facades.DocumentPrivilege.ScreenReaders">
      <summary>
            Allows to reader on screen only.
            </summary>
    </member>
    <member name="P:Aspose.Pdf.Facades.DocumentPrivilege.Assembly">
      <summary>
            Allows assemblying file.
            </summary>
    </member>
    <member name="P:Aspose.Pdf.Facades.DocumentPrivilege.AllowAll">
      <summary>
            All allowed.
            </summary>
    </member>
    <member name="P:Aspose.Pdf.Facades.DocumentPrivilege.ForbidAll">
      <summary>
            All Forbidded.
            </summary>
    </member>
    <member name="T:Aspose.Pdf.Facades.EncodingType">
      <summary>
            Enumerates encoding types of the text using.
            </summary>
    </member>
    <member name="F:Aspose.Pdf.Facades.EncodingType.Identity_h">
      <summary>
            The Unicode encoding with horizontal writing.
            </summary>
    </member>
    <member name="F:Aspose.Pdf.Facades.EncodingType.Identity_v">
      <summary>
            The Unicode encoding with vertical writing.
            </summary>
    </member>
    <member name="F:Aspose.Pdf.Facades.EncodingType.Cp1250">
      <summary>
            A windows text encoding name.
            </summary>
    </member>
    <member name="F:Aspose.Pdf.Facades.EncodingType.Cp1252">
      <summary>
            A windows text encoding name.
            </summary>
    </member>
    <member name="F:Aspose.Pdf.Facades.EncodingType.Cp1257">
      <summary>
            A windows text encoding name.
            </summary>
    </member>
    <member name="F:Aspose.Pdf.Facades.EncodingType.Winansi">
      <summary>
            Windows ansi encoding.
            </summary>
    </member>
    <member name="F:Aspose.Pdf.Facades.EncodingType.Macroman">
      <summary>
            Mac os standard encoding for Latin text.
            </summary>
    </member>
    <member name="T:Aspose.Pdf.Facades.FieldType">
      <summary>
            Enumeration of possible field types.
            </summary>
    </member>
    <member name="F:Aspose.Pdf.Facades.FieldType.Text">
      <summary>
            Text field.
            </summary>
    </member>
    <member name="F:Aspose.Pdf.Facades.FieldType.ComboBox">
      <summary>
            Combo box field.
            </summary>
    </member>
    <member name="F:Aspose.Pdf.Facades.FieldType.ListBox">
      <summary>
            List box field.
            </summary>
    </member>
    <member name="F:Aspose.Pdf.Facades.FieldType.Radio">
      <summary>
            Radio button field.
            </summary>
    </member>
    <member name="F:Aspose.Pdf.Facades.FieldType.CheckBox">
      <summary>
            Check box field.
            </summary>
    </member>
    <member name="F:Aspose.Pdf.Facades.FieldType.PushButton">
      <summary>
            Push button field.
            </summary>
    </member>
    <member name="F:Aspose.Pdf.Facades.FieldType.MultiLineText">
      <summary>
            Multiline text field.
            </summary>
    </member>
    <member name="F:Aspose.Pdf.Facades.FieldType.Barcode">
      <summary>
            Barcode field.
            </summary>
    </member>
    <member name="F:Aspose.Pdf.Facades.FieldType.InvalidNameOrType">
      <summary>
            Invalid field type.
            </summary>
    </member>
    <member name="F:Aspose.Pdf.Facades.FieldType.Signature">
      <summary>
            Signature field.
            </summary>
    </member>
    <member name="F:Aspose.Pdf.Facades.FieldType.Image">
      <summary>
            Image field.
            </summary>
    </member>
    <member name="T:Aspose.Pdf.Facades.FontColor">
      <summary>
            Class representing color of the text.
            </summary>
    </member>
    <member name="M:Aspose.Pdf.Facades.FontColor.#ctor(System.Int32,System.Int32,System.Int32)">
      <summary>
            Initializes color with specified color components.
            </summary>
      <param name="r">Red component.</param>
      <param name="g">Green component.</param>
      <param name="b">Blue component.</param>
    </member>
    <member name="M:Aspose.Pdf.Facades.FontColor.#ctor">
      <summary>
            Initializes color.
            </summary>
    </member>
    <member name="P:Aspose.Pdf.Facades.FontColor.Green">
      <summary>
            Green component of color.
            </summary>
    </member>
    <member name="P:Aspose.Pdf.Facades.FontColor.Red">
      <summary>
            Red component of color.
            </summary>
    </member>
    <member name="P:Aspose.Pdf.Facades.FontColor.Blue">
      <summary>
            Blue component of color.
            </summary>
    </member>
    <member name="T:Aspose.Pdf.Facades.FontStyle">
      <summary>
            Enumerates 14 types of font.
            </summary>
    </member>
    <member name="F:Aspose.Pdf.Facades.FontStyle.Courier">
      <summary>
            Courier font.
            </summary>
    </member>
    <member name="F:Aspose.Pdf.Facades.FontStyle.CourierBold">
      <summary>
            Bold Courier font.
            </summary>
    </member>
    <member name="F:Aspose.Pdf.Facades.FontStyle.CourierOblique">
      <summary>
            Oblique Curier font.
            </summary>
    </member>
    <member name="F:Aspose.Pdf.Facades.FontStyle.CourierBoldOblique">
      <summary>
            Bold oblique Courier font.
            </summary>
    </member>
    <member name="F:Aspose.Pdf.Facades.FontStyle.Helvetica">
      <summary>
            Helvetica font.
            </summary>
    </member>
    <member name="F:Aspose.Pdf.Facades.FontStyle.HelveticaBold">
      <summary>
            Bold Helvetica font.
            </summary>
    </member>
    <member name="F:Aspose.Pdf.Facades.FontStyle.HelveticaOblique">
      <summary>
            Oblique Helvetica font.
            </summary>
    </member>
    <member name="F:Aspose.Pdf.Facades.FontStyle.HelveticaBoldOblique">
      <summary>
            Bold oblique Helvetica font.
            </summary>
    </member>
    <member name="F:Aspose.Pdf.Facades.FontStyle.Symbol">
      <summary>
            Symbol font.
            </summary>
    </member>
    <member name="F:Aspose.Pdf.Facades.FontStyle.TimesRoman">
      <summary>
            Times-Roman font.
            </summary>
    </member>
    <member name="F:Aspose.Pdf.Facades.FontStyle.TimesBold">
      <summary>
            Bold Times font.
            </summary>
    </member>
    <member name="F:Aspose.Pdf.Facades.FontStyle.TimesItalic">
      <summary>
            Italic Times font.
            </summary>
    </member>
    <member name="F:Aspose.Pdf.Facades.FontStyle.TimesBoldItalic">
      <summary>
            Bold italic Times font.
            </summary>
    </member>
    <member name="F:Aspose.Pdf.Facades.FontStyle.ZapfDingbats">
      <summary>
            ZapfDingbats font.
            </summary>
    </member>
    <member name="F:Aspose.Pdf.Facades.FontStyle.Unknown">
      <summary>
            Unknown font. Standard font will be used.
            </summary>
    </member>
    <member name="F:Aspose.Pdf.Facades.FontStyle.CjkFont">
      <summary>
            True Type Font for CJK supporting ,default is MS PGothic font.
            </summary>
    </member>
    <member name="T:Aspose.Pdf.Facades.Form">
      <summary>
            Class representing Acro form object.
            </summary>
    </member>
    <member name="T:Aspose.Pdf.Facades.SaveableFacade">
      <summary>
            Base class for all saveable facades.
            </summary>
    </member>
    <member name="T:Aspose.Pdf.Facades.Facade">
      <summary>
            Base facade class.
            </summary>
    </member>
    <member name="M:Aspose.Pdf.Facades.Facade.BindPdf(System.String)">
      <summary>
            Initializes the facade.
            </summary>
      <param name="srcFile">The PDF file.</param>
    </member>
    <member name="M:Aspose.Pdf.Facades.Facade.BindPdf(System.IO.Stream)">
      <summary>
            Initializes the facade.
            </summary>
      <param name="srcStream">The stream of PDF file.</param>
    </member>
    <member name="M:Aspose.Pdf.Facades.Facade.BindPdf(Aspose.Pdf.Document)">
      <summary>
            Initializes the facade.
            </summary>
      <param name="srcDoc">The Aspose.Pdf.Document object.</param>
    </member>
    <member name="M:Aspose.Pdf.Facades.Facade.BindPdf(System.String,System.String)">
      <summary>
            Initializes the facade.
            </summary>
      <param name="srcFile">The PDF file.</param>
      <param name="password">The password of the PDF document.</param>
    </member>
    <member name="M:Aspose.Pdf.Facades.Facade.BindPdf(System.IO.Stream,System.String)">
      <summary>
            Initializes the facade.
            </summary>
      <param name="srcStream">The stream of PDF file.</param>
      <param name="password">The password of the PDF document.</param>
    </member>
    <member name="M:Aspose.Pdf.Facades.Facade.Close">
      <summary>
            Disposes Aspose.Pdf.Document bound with a facade.
            </summary>
    </member>
    <member name="M:Aspose.Pdf.Facades.Facade.Dispose">
      <summary>
            Disposes the facade.
            </summary>
    </member>
    <member name="P:Aspose.Pdf.Facades.Facade.Document">
      <summary>
            Gets the document facade is working on.
            </summary>
    </member>
    <member name="M:Aspose.Pdf.Facades.SaveableFacade.Save(System.String)">
      <summary>
            Saves the PDF document to the specified file.
            </summary>
      <param name="destFile">The destination file.</param>
    </member>
    <member name="M:Aspose.Pdf.Facades.SaveableFacade.Save(System.IO.Stream)">
      <summary>
            Saves the PDF document to the specified stream.
            </summary>
      <param name="destStream">The destination stream.</param>
    </member>
    <member name="M:Aspose.Pdf.Facades.Form.BindPdf(System.IO.Stream,System.String)">
      <summary>
            Initializes the facade.
            </summary>
      <param name="srcStream">The stream of PDF file.</param>
      <param name="password">The password of the PDF document.</param>
    </member>
    <member name="M:Aspose.Pdf.Facades.Form.BindPdf(System.String,System.String)">
      <summary>
            Initializes the facade.
            </summary>
      <param name="srcFile">The PDF file.</param>
      <param name="password">The password of the PDF document.</param>
    </member>
    <member name="M:Aspose.Pdf.Facades.Form.GetFieldFacade(System.String)">
      <summary>
            Returns FrofmFieldFacade object containing all appearance attributes.
            <example><code lang="C#">
            Aspose.Pdf.Facades.Form form = new Aspose.Pdf.Facades.Form("form.pdf"));
            FormFieldFacade field = form.GetFieldFacade("field1");
            Console.WriteLine("Color of field border: " + field.BorderColor);
            </code></example></summary>
      <param name="fieldName">Name of field to read.</param>
      <returns>FormFieldFacade object</returns>
    </member>
    <member name="M:Aspose.Pdf.Facades.Form.#ctor(System.IO.Stream,System.IO.Stream)">
      <summary>
            Constructor of Form with two stream parameters.
            Specify same source and destination stream for incremental update.
            </summary>
      <param name="srcStream">Source stream.</param>
      <param name="destStream">Destination stream.</param>
      <example>
        <code lang="C#">
            Form form = new Form(new FileStream(
            "InFile.pdf", FileMode.Open, FileAccess.Read, 
            "OutFile.pdf", FileMode.Create, FileAccess.Write);
            </code>
      </example>
    </member>
    <member name="M:Aspose.Pdf.Facades.Form.#ctor">
      <summary>
            Construtcor of Form without parameters.
            <example><code lang="C#">
              Form form = new Aspose.Pdf.Facades.Form();
              form.SrcFileName = "file.pdf";
            </code></example></summary>
    </member>
    <member name="M:Aspose.Pdf.Facades.Form.FillField(System.String,System.String)">
      <summary>
            Fills the field with a valid value according to a fully qualified field name.
            Before filling the fields, every field's names and its corresponding valid values must be known.
            Both the fields' name and values are case sensitive.
            Please note that Aspose.Pdf.Facades supports only full field names and does not work with partial 
            field names in contrast with Aspose.Pdf.Kit;
            For example if field has full name "Form.Subform.TextField" you should specify full name and not "TextField". 
            You can use FieldNames property to explore existing field names and search required field by its partial name.
            </summary>
      <param name="fieldName">The field's name to be filled.</param>
      <param name="fieldValue">The field's value which must be a valid value for some fields.</param>
      <example>
        <code lang="C#">
            Form form = new Form(TestSettings.GetInputFile("PdfForm.pdf"));
            form.FillField("FirstName", "John");
            form.FillField("LastName",  "Smith");
            </code>
        <code lang="C#">
            //how to search field by its partial name:
            Form form = new Form("input.pdf", "output.pdf"); 
            foreach(string fieldName in form.FieldNames)
            {
              if (fieldName.EndsWith("TextField"))<br />
              {
                Console.WritleLine("Full name is: " + fieldName);<br />
              }
            }
            </code>
      </example>
    </member>
    <member name="M:Aspose.Pdf.Facades.Form.FillField(System.String,System.Int32)">
      <summary>
            Fills the radio box field with a valid index value according to a fully qualified field name.
            Before filling the fields, only field's name must be known. While the value can be specified by its index.
            Notice: Only be applied to Radio Box, Combo Box and List Box fields.
            Please note that Aspose.Pdf.Facades supports only full field names and does not work with partial 
            field names in contrast with Aspose.Pdf.Kit;
            For example if field has full name "Form.Subform.ListBoxField" you should specify full name and not "ListBoxField". 
            You can use FieldNames property to explore existing field names and search required field by its partial name.
            </summary>
      <example lang="C#">
        <code lang="C#">
            Form form = new Form("PdfForm.pdf");
            form.FillField("listboxField", 2);
            form.FillField("comboboxField", 2);
            form.FillField("radiobuttonField", 2);
            </code>
        <code lang="C#">
            //how to search field by its partial name:
            Form form = new Form("input.pdf", "output.pdf"); 
            foreach(string fieldName in form.FieldNames)
            {
              if (fieldName.EndsWith("ListBoxField"))<br />
              {
                Console.WritleLine("Full name is: " + fieldName);<br />
              }
            }
            </code>
      </example>
      <param name="fieldName">The field's name to be filled.</param>
      <param name="index">The selected box's index in the whole radio box group.</param>
    </member>
    <member name="M:Aspose.Pdf.Facades.Form.FillField(System.String,System.Boolean)">
      <summary>
            Fills the check box field with a boolean value.
            Notice: Only be applied to Check Box.
            Please note that Aspose.Pdf.Facades supports only full field names and does not work with partial 
            field names in contrast with Aspose.Pdf.Kit;
            For example if field has full name "Form.Subform.CheckBoxField" you should specify full name and not "CheckBoxField". 
            You can use FieldNames property to explore existing field names and search required field by its partial name.
            </summary>
      <example>
        <code lang="C#">
            Form form = new Form("PdfForm.pdf");
            form.FillField("checkboxField", true);
            </code>
        <code lang="C#">
            //how to search field by its partial name:
            Form form = new Form("input.pdf", "output.pdf"); 
            foreach(string fieldName in form.FieldNames)
            {
              if (fieldName.EndsWith("CheckBoxField"))<br />
              {
                Console.WritleLine("Full name is: " + fieldName);<br />
              }
            }
            </code>
      </example>
      <param name="fieldName">The field's name to be filled.</param>
      <param name="beChecked">A boolean flag: true means to check the box, while false to uncheck it..</param>
    </member>
    <member name="M:Aspose.Pdf.Facades.Form.GetButtonOptionCurrentValue(System.String)">
      <summary>
            Returns the current value for radio button option fields.
            </summary>
      <param name="fieldName">Field Name</param>
      <returns>String value for the current radio group optino. See also <see cref="M:Aspose.Pdf.Facades.Form.GetButtonOptionValues(System.String)" /></returns>
      <example>
        <code lang="C#">
            Form form = new Form("PdfForm.pdf");
            Console.WriteLine(form.GetButtonOptionCurrentValue("btnField"));
            </code>
      </example>
    </member>
    <member name="M:Aspose.Pdf.Facades.Form.GetButtonOptionValues(System.String)">
      <summary>
            Gets the radio button option fields and related values based on the field name.
            This method has meaning for radio button groups.
            </summary>
      <param name="fieldName">Field Name</param>
      <returns>Hash table of option values keyed by form item name</returns>
      <example>
        <code lang="C#">
            Form form = new Form("PdfForm.pdf");
            Hashtable values = form.GetButtonOptionValues("Color");
            Console.WriteLine(values["White"].ToString());
            Console.WriteLine(values["Black"].ToString());
            </code>
      </example>
    </member>
    <member name="M:Aspose.Pdf.Facades.Form.GetField(System.String)">
      <summary>
            Gets the field's value according to its field name.
            </summary>
      <param name="fieldName">The fully qualified field name.</param>
      <returns>The field's value.</returns>
      <example>
        <code lang="C#">
            Form form = new Form("PdfForm.pdf");
            Console.WriteLine("Field value = " + form.GetField("Field1"));
            </code>
      </example>
    </member>
    <member name="M:Aspose.Pdf.Facades.Form.GetFullFieldName(System.String)">
      <summary>
            Gets the full field name according to its short field name.
            </summary>
      <param name="fieldName">The fully qualified field name.</param>
      <returns>The full field name.</returns>
      <example>
        <code lang="C#">
            Form form = new Form("PdfForm.pdf");
            Console.WriteLine("Full field name is : " + form.GetFullFieldName("textField"));
            </code>
      </example>
    </member>
    <member name="M:Aspose.Pdf.Facades.Form.GetFieldLimit(System.String)">
      <summary>
            Get the limitation of text field.
            </summary>
      <param name="fieldName">The qualified field name.</param>
      <returns>Return the limitation number of characters a text field can be filled. It not set, return 0.</returns>
      <example>
        <code lang="C#">
            Form form = new Form("PdfForm.pdf");
            Console.WriteLine(form.GetFieldLimit("textfieldBox"));
            </code>
      </example>
    </member>
    <member name="M:Aspose.Pdf.Facades.Form.Save">
      <summary>
            Saves the value of the filled fields and close the opened Pdf document.
            </summary>
      <example>
        <code lang="C#">
            Form form = new Form("PdfForm.pdf", "PdfForm_Changed.pdf");
            form.FillField("textField", "new value");
            form.Save();
            </code>
      </example>
    </member>
    <member name="M:Aspose.Pdf.Facades.Form.Save(System.String)">
      <summary>
            Saves document into specified file.
            </summary>
      <param name="destFile">File where document will be saved.</param>
    </member>
    <member name="M:Aspose.Pdf.Facades.Form.Save(System.IO.Stream)">
      <summary>
            Saves document into specified stream.
            </summary>
      <param name="destStream">Stream where document will be saved.</param>
    </member>
    <member name="M:Aspose.Pdf.Facades.Form.Close">
      <summary>
            Closes opened files without any changes.
            </summary>
    </member>
    <member name="M:Aspose.Pdf.Facades.Form.FlattenAllFields">
      <summary>
            Flattens all the fields.
            </summary>
      <example>
        <code lang="C#">
            Form form = new Form("PdfForm.pdf");
            form.FlattenAllFields();
            </code>
      </example>
    </member>
    <member name="M:Aspose.Pdf.Facades.Form.FlattenField(System.String)">
      <summary>
            Flattens a specified field with the fully qualified field name.
            Any other field will remain unchangable. If the fieldName is invalid, 
            all the fields will remain unchangable.
            </summary>
      <example>
        <code lang="C#">
            Form form = new Form("PdfForm.pdf");
            form.FlattenField("textField");
            </code>
      </example>
      <param name="fieldName">The name of the field to be flattened.</param>
    </member>
    <member name="M:Aspose.Pdf.Facades.Form.FillBarcodeField(System.String,System.String)">
      <summary>
            Fill a barcode field according to its fully qualified field name.
            </summary>
      <param name="fieldName">The fully qualified field name.</param>
      <param name="data">The new barcode value.</param>
      <returns>If filling succeed, return true; otherwise, false.</returns>
      <example>
        <code lang="C#">
            Form form = new Form("PdfForm.pdf");
            form.FillBarcodeField("textField", "42207252");
            </code>
      </example>
    </member>
    <member name="M:Aspose.Pdf.Facades.Form.ImportFdf(System.IO.Stream)">
      <summary>
            Imports the content of the fields from the fdf file and put them into the new pdf.
            </summary>
      <param name="inputFdfStream">The input fdf stream.</param>
      <example>
        <code lang="C#">
            Form form = new Form("PdfForm.pdf", "PdfForm_imported.pdf");
            form.ImportFdf(new FileStream("data.fdf", FileMode.Open, FileAccess.Read));
            form.Save();
            </code>
      </example>
    </member>
    <member name="M:Aspose.Pdf.Facades.Form.ExportFdf(System.IO.Stream)">
      <summary>
            Exports the content of the fields of the pdf into the fdf stream.
            </summary>
      <param name="outputFdfStream">The output fdf stream.</param>
      <example>
        <code lang="C#">
            Form form = new Form("PdfForm.pdf");
            Stream stream = new FileStream("export.fdf", FileMode.Create, FileAccess.Write);
            form.ExportFdf(stream);
            stream.Close();
            </code>
      </example>
    </member>
    <member name="M:Aspose.Pdf.Facades.Form.ImportXml(System.IO.Stream)">
      <summary>
            Imports the content of the fields from the xml file and put them into the new pdf.
            </summary>
      <example>
        <code lang="C#">
            Form form = new Form("PdfForm.pdf", "Form_Imported.pdf");
            FileStream fs = new FileStream(TestSettings.GetInputFile("import.xml"), FileMode.Open, FileAccess.Read);
            form.ImportXml(fs);
            form.Save();
            </code>
      </example>
    </member>
    <member name="M:Aspose.Pdf.Facades.Form.ExportXml(System.IO.Stream)">
      <summary>
            Exports the content of the fields of the pdf into the xml stream.
            The button field's value will not be exported.
            </summary>
      <example>
        <code lang="C#">
            Form form = new Form("PdfForm.pdf"));
            FileStream fs = new FileStream("export.xml", FileMode.Create, FileAccess.Write);
            form.ExportXml(fs);
            fs.Close();
            </code>
      </example>
    </member>
    <member name="M:Aspose.Pdf.Facades.Form.ImportXfdf(System.IO.Stream)">
      <summary>
            Imports the content of the fields from the xfdf(xml) file and put them into the new pdf.
            </summary>
      <param name="inputXfdfStream">The input xfdf(xml) stream.</param>
      <example>
        <code lang="C#">
            Form form = new Form("PdfForm.pdf", "Form_ImportXfdf.pdf");
            Stream fs = new FileStream("export_old.xfdf", FileMode.Open, FileAccess.Read);
            form.ImportXfdf(fs);
            fs.Close();
            form.Save();
            </code>
      </example>
    </member>
    <member name="M:Aspose.Pdf.Facades.Form.ExportXfdf(System.IO.Stream)">
      <summary>
            Exports the content of the fields of the pdf into the xml stream.
            The button field's value will not be exported.
            </summary>
      <param name="outputXfdfStream">The output xml stream.</param>
      <example>
        <code lang="C#">
             Form form = new Form("PdfForm.pdf");
             FileStream fs = new FileStream("export.xfdf", FileMode.Create, FileAccess.Write);
             form.ExportXfdf(fs);
             fs.Close();
            </code>
      </example>
    </member>
    <member name="M:Aspose.Pdf.Facades.Form.FillField(System.String,System.String[])">
      <summary>
            Fill a field with multiple selections.Note: only for AcroForm List Box Field.
            </summary>
      <param name="fieldName">The fully qualified field name.</param>
      <param name="fieldValues">A string array which contains several items to be selected.</param>
      <example>
        <code lang="C#">
            Form form = new Aspose.Pdf.Facades.Form("PdfForm.pdf", "Form_Updated.pdf");
            form.FillField("ListBox1", new String[] { "Three", "One" });
            form.Save();
            </code>
      </example>
    </member>
    <member name="M:Aspose.Pdf.Facades.Form.RenameField(System.String,System.String)">
      <summary> Renames a field. Either AcroForm field or XFA field is OK.
            </summary>
      <param name="fieldName">the old field name
            </param>
      <param name="newFieldName">the new field name
            </param>
      <example>
        <code lang="C#">
            Form form = new Form("PdfForm.pdf", "PdfFormUpdated.pdf");
            form.RenameField("field", "field1");
            form.Save();
            </code>
      </example>
    </member>
    <member name="M:Aspose.Pdf.Facades.Form.GetRichText(System.String)">
      <summary>
            Get a Rich Text field's value, including the formattinf information of every character.
            </summary>
      <param name="fieldName">The fully qualified field name of the Rich Text field.</param>
      <returns>Return a string containing formatting information of the Rich Text field.</returns>
      <example>
        <code lang="C#">
            Form form = new Form("PdfForm.pdf");
            Console.WriteLine(form.GetRichText("txtDescriptionRTF"));
            </code>
      </example>
    </member>
    <member name="M:Aspose.Pdf.Facades.Form.GetSubmitFlags(System.String)">
      <summary>
            Returns the submit button's submission flags
            </summary>
      <param name="fieldName">The qualified field name.</param>
      <example>
        <code lang="C#">
            Form form = new Form("PdfForm.pdf");
            Console.WriteLine( ( form.GetSubmitFlags("btnSubmit") | SubmitFormFlag.Xfdf != 0) ? " XFDF" : " ");
            /// Console.WriteLine( ( form.GetSubmitFlags("btnSubmit") | SubmitFormFlag.Fdf != 0) ? " FDF" : " ");
            Console.WriteLine( ( form.GetSubmitFlags("btnSubmit") | SubmitFormFlag.Pdf != 0) ? " PDF" : " ");
            </code>
      </example>
    </member>
    <member name="M:Aspose.Pdf.Facades.Form.#ctor(System.String)">
      <summary>
            Constructor of Form.
            </summary>
      <param name="srcFileName">Source file path.</param>
      <example>
        <code lang="C#">
            Form form = new Form("PdfForm.pdf");
            </code>
      </example>
    </member>
    <member name="M:Aspose.Pdf.Facades.Form.#ctor(System.IO.Stream)">
      <summary>
            Constructor for form.
            </summary>
      <param name="srcStream">source stream.</param>
      <example>
        <code lang="C#">
            Form form = new Form(new FileStream("PdfForm.pdf", FileMode.Open, FileAccess.Read);
            </code>
      </example>
    </member>
    <member name="M:Aspose.Pdf.Facades.Form.#ctor(System.String,System.String)">
      <summary>
            Constructor of Form class.
            Specify same source file name and destination file name to perform incremental update.
            </summary>
      <param name="srcFileName">Path of the source file.</param>
      <param name="destFileName">Path of the destination file.</param>
      <example>
        <code lang="C#">
            Form form = new Form("PdfForm.pdf", "PdfForm_Updated.pdf");
            </code>
      </example>
    </member>
    <member name="M:Aspose.Pdf.Facades.Form.#ctor(System.String,System.IO.Stream)">
      <summary>
            Constructor of Form.
            </summary>
      <param name="srcFileName">Source file path.</param>
      <param name="destStream">Destination file path.</param>
      <example>
        <code lang="C#">
            Form form = new Form("PdfForm.pdf", "PdfForm_Updated.pdf");
            </code>
      </example>
    </member>
    <member name="M:Aspose.Pdf.Facades.Form.#ctor(System.IO.Stream,System.String)">
      <summary>
            Constructor of Form
            </summary>
      <param name="srcStream">Source stream.</param>
      <param name="destFileName">Destination file path.</param>
      <example>
        <code lang="C#">
            Form form = new Form(new FileStream("PdfForm.pdf", FileMode.Open, FileAccess.Read), "PdfForm_Updated.pdf");
            </code>
      </example>
    </member>
    <member name="M:Aspose.Pdf.Facades.Form.GetFieldType(System.String)">
      <summary>
            Returns type of field. 
            </summary>
      <param name="fieldName">Field name.</param>
      <returns>Element of FileType enumeration corresponding to field type.</returns>
      <example>
        <code lang="C#">
            Form form = new Form("PdfForm.pdf");
            if (form.GetFieldType("textField") == FieldType.Text)
            {
               Console.WriteLine("Type of field is text");
            }
            </code>
      </example>
    </member>
    <member name="M:Aspose.Pdf.Facades.Form.GetFieldFlag(System.String)">
      <summary>
            Returns flags of the field.
            </summary>
      <param name="fieldName">Field name</param>
      <returns>Property flag (ReadOnly/ Required/NoExport</returns>
      <example>
        <code lang="C#">
            Form form = new Form("PdfForm.pdf");
            if (form.GetFieldFlag("textField") == ProptyFlag.ReadOnly)
            {
               Console.WriteLine("Field is read-only");
            }
            </code>
      </example>
    </member>
    <member name="M:Aspose.Pdf.Facades.Form.FillImageField(System.String,System.String)">
      <summary>
            Pastes an image onto the existing button field as its appearance according to 
            its fully qualified field name.
            </summary>
      <param name="fieldName"> The fully qualified field name of the image button field.</param>
      <param name="imageFileName">The path of the image file, relative and absolute are both ok.</param>
      <example>
        <code lang="C#">
            Form form = new Form("PdfForm.pdf", "PdfForm_filled.pdf");
            form.FillImageField("fieldName", "file.jpg");
            form.Save();
            </code>
      </example>
    </member>
    <member name="M:Aspose.Pdf.Facades.Form.FillImageField(System.String,System.IO.Stream)">
      <summary>
            Overloads function of FillImageField.
            The input is a image stream.
            </summary>
      <param name="fieldName">The fully qualified field name.</param>
      <param name="imageStream">The image's stream.</param>
      <example>
        <code lang="C#">
            Form form = new Form("PdfForm.pdf", "PdfForm_filled.pdf");
            form.FillImageField("fieldName", new FileStream("file.jpg", FileMode.Open, FileAccess.Read));
            </code>
      </example>
    </member>
    <member name="M:Aspose.Pdf.Facades.Form.#ctor(Aspose.Pdf.Document)">
      <summary>
            Initializes new <see cref="T:Aspose.Pdf.Facades.Form" /> object on base of the <paramref name="document" />.
            </summary>
      <param name="document">
            Pdf document.
            </param>
    </member>
    <member name="M:Aspose.Pdf.Facades.Form.#ctor(Aspose.Pdf.Document,System.String)">
      <summary>
            Initializes new <see cref="T:Aspose.Pdf.Facades.Form" /> object on base of the <paramref name="document" />.
            </summary>
      <param name="document">
            Pdf document.
            </param>
      <param name="destFileName">
            Path of the destination file.
            </param>
    </member>
    <member name="M:Aspose.Pdf.Facades.Form.#ctor(Aspose.Pdf.Document,System.IO.Stream)">
      <summary>
            Initializes new <see cref="T:Aspose.Pdf.Facades.Form" /> object on base of the <paramref name="document" />.
            </summary>
      <param name="document">
            Pdf document.
            </param>
      <param name="destStream">
            Destination stream.
            </param>
    </member>
    <member name="M:Aspose.Pdf.Facades.Form.ImportXml(System.IO.Stream,System.Boolean)">
      <summary>
            Imports the content of the fields from the xml file and put them into the new pdf.
            </summary>
      <param name="inputXmlStream">The input xml stream.</param>
      <param name="IgnoreFormTemplateChanges">If this parameter is true then all changes of the XFA form template will not be saved</param>
    </member>
    <member name="M:Aspose.Pdf.Facades.Form.FillField(System.String,System.String,System.Boolean)">
      <summary>
            FillField
            </summary>
      <param name="fieldName">Name of field</param>
      <param name="value">New value of the field</param>
      <param name="fitFontSize">If true, the font size in the edit boxes will be fitted.</param>
      <returns>
      </returns>
    </member>
    <member name="P:Aspose.Pdf.Facades.Form.ImportResult">
      <summary>
            Result of last import operation. Array of objects which descibre result of import for each field.
            </summary>
    </member>
    <member name="P:Aspose.Pdf.Facades.Form.SrcFileName">
      <summary>
            Gets or sets source file name.
            <example><code lang="C#">
              Form form = new Aspose.Pdf.Facades.Form();
              form.SrcFileName = "file.pdf";
            </code></example></summary>
    </member>
    <member name="P:Aspose.Pdf.Facades.Form.ConvertTo">
      <summary>
            Sets PDF file format. Result file will be saved in specified file format. 
            If this property is not specified then file will be save in default PDF format without conversion.
            </summary>
    </member>
    <member name="P:Aspose.Pdf.Facades.Form.DestFileName">
      <summary>
            Gets or sets destiination file name.
            </summary>
      <example>
        <code lang="C#">
              Form form = new Aspose.Pdf.Facades.Form();
              form.DestFileName = "file.pdf";
            </code>
      </example>
    </member>
    <member name="P:Aspose.Pdf.Facades.Form.SrcStream">
      <summary>
            Gets or sets source stream.
            <example><code lang="C#">
             Form form = new Aspose.Pdf.Facades.Form();
             form.SrcStream = new FileStream("source.pdf"), FileMode.Open, FileAccess.Read);
            </code></example></summary>
    </member>
    <member name="P:Aspose.Pdf.Facades.Form.DestStream">
      <summary>
            Gets or sets destination stream.
            </summary>
      <example>
        <code lang="C#">
              Form form = new Aspose.Pdf.Facades.Form();
              form.DestStream = new FileStream("file.pdf", FileMode.Open, FileAccess.Read);
            </code>
      </example>
    </member>
    <member name="P:Aspose.Pdf.Facades.Form.FieldNames">
      <summary>
            Gets list of field names on the form.
            </summary>
      <example>
        <code lang="C#">
            Form form = new Form("PdfForm.pdf");
            string[] fields = form.FieldNames;
            foreach(string field in fields)
            {
              Console.WriteLine(field);
            }
            </code>
      </example>
    </member>
    <member name="P:Aspose.Pdf.Facades.Form.FormSubmitButtonNames">
      <summary>
            Gets all form submit button names.
            </summary>
      <example>
        <code lang="C#">
            Form form = new Form("PdfForm.pdf");
            string[] submits = form.FormSubmitButtonNames;
            foreach(string btn in submits)
            {
              Console.WriteLine(btn);
            }
            </code>
      </example>
    </member>
    <member name="T:Aspose.Pdf.Facades.FormattedText">
      <summary>
            Class which represents formatted text. Contains information about text and its color, size, style.
            </summary>
    </member>
    <member name="M:Aspose.Pdf.Facades.FormattedText.#ctor">
      <summary>
            Initializes FormattedText.
            </summary>
    </member>
    <member name="M:Aspose.Pdf.Facades.FormattedText.#ctor(System.String)">
      <summary>
            Initializes FormattedText.
            </summary>
      <param name="text">Text which contained in FormattedText.</param>
    </member>
    <member name="M:Aspose.Pdf.Facades.FormattedText.#ctor(System.String,Aspose.Pdf.Facades.FontColor,Aspose.Pdf.Facades.FontStyle,Aspose.Pdf.Facades.EncodingType,System.Boolean,System.Single)">
      <summary>
            Initializes FormattedText.
            </summary>
      <param name="text">Text content of the string.</param>
      <param name="fontColor">Color of the text.</param>
      <param name="fontStyle">Style of the text.</param>
      <param name="encodingType">Encoding type (value of EncodingType enumeration). </param>
      <param name="embedded">True if the font will be embedded.</param>
      <param name="textSize">Size of the text.</param>
    </member>
    <member name="M:Aspose.Pdf.Facades.FormattedText.#ctor(System.String,Aspose.Pdf.Facades.FontColor,Aspose.Pdf.Facades.FontStyle,Aspose.Pdf.Facades.EncodingType,System.Boolean,System.Single,System.Single)">
      <summary>
            Initialize FormattedText.
            </summary>
      <param name="text">Text content of the string.</param>
      <param name="fontColor">Color of the text.</param>
      <param name="textFont">Font of the text.</param>
      <param name="textEncoding">Encoding of the text.</param>
      <param name="embedded">True if text will be embedded.</param>
      <param name="textSize">Size of the text.</param>
      <param name="lineSpacing">Additional spacing.</param>
    </member>
    <member name="M:Aspose.Pdf.Facades.FormattedText.#ctor(System.String,System.Drawing.Color,Aspose.Pdf.Facades.FontStyle,Aspose.Pdf.Facades.EncodingType,System.Boolean,System.Single)">
      <summary>
            Initializes FormattedText.
            </summary>
      <param name="text">Text content of the string.</param>
      <param name="color">
      </param>
      <param name="textFont">
      </param>
      <param name="textEncoding">
      </param>
      <param name="embedded">
      </param>
      <param name="textSize">
      </param>
    </member>
    <member name="M:Aspose.Pdf.Facades.FormattedText.#ctor(System.String,System.Drawing.Color,Aspose.Pdf.Facades.FontStyle,Aspose.Pdf.Facades.EncodingType,System.Boolean,System.Single,System.Single)">
      <summary>
            Initializes FormattedText.
            </summary>
      <param name="text">Text contents of the string.</param>
      <param name="textColor">Color of the text.</param>
      <param name="textFont">Font of the text.</param>
      <param name="textEncoding">Encoding of the text.</param>
      <param name="embedded">If true font will be embedded.</param>
      <param name="textSize">Size of the text.</param>
      <param name="lineSpacing">Additional spacing.</param>
    </member>
    <member name="M:Aspose.Pdf.Facades.FormattedText.#ctor(System.String,Aspose.Pdf.Facades.FontColor,Aspose.Pdf.Facades.FontColor,Aspose.Pdf.Facades.FontStyle,Aspose.Pdf.Facades.EncodingType,System.Boolean,System.Single)">
      <summary>
            Initializes FormattedText.
            </summary>
      <param name="text">Text content of the string.</param>
      <param name="textColor">Color of the text.</param>
      <param name="backColor">Color of background.</param>
      <param name="textFont">Font of the text.</param>
      <param name="textEncoding">Encoding of the text.</param>
      <param name="embedded">If true font will be embedded.</param>
      <param name="textSize">Size of the text.</param>
    </member>
    <member name="M:Aspose.Pdf.Facades.FormattedText.#ctor(System.String,Aspose.Pdf.Facades.FontColor,Aspose.Pdf.Facades.FontColor,Aspose.Pdf.Facades.FontStyle,Aspose.Pdf.Facades.EncodingType,System.Boolean,System.Single,System.Single)">
      <summary>
            Initializes FormattedText.
            </summary>
      <param name="text">Text content.</param>
      <param name="textColor">Color of the text.</param>
      <param name="backColor">Color of background.</param>
      <param name="textFont">Font of the text.</param>
      <param name="textEncoding">Encoding of the text.</param>
      <param name="embedded">If true font will be embedded.</param>
      <param name="textSize">Size of the text.</param>
      <param name="lineSpacing">Additional spacing.</param>
    </member>
    <member name="M:Aspose.Pdf.Facades.FormattedText.#ctor(System.String,System.Drawing.Color,System.Drawing.Color,Aspose.Pdf.Facades.FontStyle,Aspose.Pdf.Facades.EncodingType,System.Boolean,System.Single)">
      <summary>
            Initializes FormattedText.
            </summary>
      <param name="text">Text content of the string.</param>
      <param name="textColor">Color of the text.</param>
      <param name="backColor">Color of background.</param>
      <param name="textFont">Font of the text.</param>
      <param name="encoding">Encoding of the text.</param>
      <param name="embedded">True if font will be embedded.</param>
      <param name="textSize">Size of the text.</param>
    </member>
    <member name="M:Aspose.Pdf.Facades.FormattedText.#ctor(System.String,System.Drawing.Color,System.Drawing.Color,Aspose.Pdf.Facades.FontStyle,Aspose.Pdf.Facades.EncodingType,System.Boolean,System.Single,System.Single)">
      <summary>
            Initializes FormattedText.
            </summary>
      <param name="text">Text contents of the string.</param>
      <param name="textColor">Color of the text.</param>
      <param name="backColor">Color of the background.</param>
      <param name="textFont">Font of the text.</param>
      <param name="textEncoding">Encoding of the text.</param>
      <param name="embedded">If true font is embedded.</param>
      <param name="textSize">Size of the text.</param>
      <param name="lineSpacing">Additional spacing.</param>
    </member>
    <member name="M:Aspose.Pdf.Facades.FormattedText.#ctor(System.String,System.Drawing.Color,System.Drawing.Color,System.String,Aspose.Pdf.Facades.EncodingType,System.Boolean,System.Single)">
      <summary>
            Initializes FormattedText.
            </summary>
      <param name="text">Text content.</param>
      <param name="textColor">Color of the text.</param>
      <param name="backColor">Color of background.</param>
      <param name="fontName">Font of the text.</param>
      <param name="textEncoding">Encoding of the text.</param>
      <param name="embedded">If true font will be embedded.</param>
      <param name="fontSize">Size of the text.</param>
    </member>
    <member name="M:Aspose.Pdf.Facades.FormattedText.#ctor(System.String,System.Drawing.Color,System.Drawing.Color)">
      <summary>
            Initializes FormattedText.
            </summary>
      <param name="text">Text content.</param>
      <param name="textColor">Color of the text.</param>
      <param name="backColor">Color of background.</param>
    </member>
    <member name="M:Aspose.Pdf.Facades.FormattedText.AddNewLineText(System.String)">
      <summary>
            Adds a new line to the FormattedText object and sets the newLineText to the next line's text.
            </summary>
      <param name="newLineText">Text of new added line.</param>
    </member>
    <member name="M:Aspose.Pdf.Facades.FormattedText.AddNewLineText(System.String,System.Single)">
      <summary>
            Adds a new line to the FormattedText object and sets the newLineText to the next line's text.
            </summary>
      <param name="newLineText">Text of new added line.</param>
      <param name="lineSpacing">Spacing of the line.</param>
    </member>
    <member name="M:Aspose.Pdf.Facades.FormattedText.#ctor(System.String,System.Drawing.Color,System.String,Aspose.Pdf.Facades.EncodingType,System.Boolean,System.Single)">
      <summary>
            Initializes FormattedText.
            </summary>
      <param name="text">Text content.</param>
      <param name="textColor">Color of the text.</param>
      <param name="fontName">Font of the text.</param>
      <param name="textEncoding">Encoding of the text.</param>
      <param name="embedded">If true font will be embedded.</param>
      <param name="fontSize">Size of the text.</param>
    </member>
    <member name="P:Aspose.Pdf.Facades.FormattedText.TextHeight">
      <summary>
            Gets height of text.
            </summary>
    </member>
    <member name="P:Aspose.Pdf.Facades.FormattedText.TextWidth">
      <summary>
            Gets width of text.
            </summary>
    </member>
    <member name="T:Aspose.Pdf.Facades.FormDataConverter">
      <summary>
            Represents a class to convert data from one format to another format.
            It can convert the data in fdf/xml/pdf/xfdf to the OLEDB/OdbcDB.
            It also can convert the data in the OLEDB/OdbcDB to the data in fdf/xml/xfdf.
            It can convert the fdf to the xml with "hard-named" tag.
            </summary>
    </member>
    <member name="M:Aspose.Pdf.Facades.FormDataConverter.ConvertXmlToFdf(System.IO.Stream,System.IO.Stream)">
      <summary>
            Convert XML  import/export form data file into FDF format.
            </summary>
      <param name="sourceXml">Source stream which contains XML file.</param>
      <param name="destFdf">Destination source where resultant FDF file will be stored.</param>
    </member>
    <member name="M:Aspose.Pdf.Facades.FormDataConverter.ConvertFdfToXml(System.IO.Stream,System.IO.Stream)">
      <summary>
            Convert FDF file into XML.
            </summary>
      <param name="sourceFdf">
      </param>
      <param name="destXml">
      </param>
      <example>
        <code lang="C#">
             src = new FileStream("test.fdf", FileMode.Open);
             dest = new FileStream("converted_fdf.xml", FileMode.Create);
             FormDataConverter.ConvertFdfToXml(src, dest);
             src.Close();
             dest.Close();
            </code>
      </example>
    </member>
    <member name="M:Aspose.Pdf.Facades.FormDataConverter.#ctor">
      <summary>
            Constructor for FormDataConverter class.
            </summary>
    </member>
    <member name="M:Aspose.Pdf.Facades.FormDataConverter.ConvertToDataTable(System.IO.Stream[],Aspose.Pdf.Facades.DataType)">
      <summary>
            Convert files of strems into table.
            </summary>
      <param name="sourceStreams">Array of source streams in specified format.</param>
      <param name="sourceType">Format of data in streams. Valid values are: PDF, FDF, XFDF, XML.</param>
      <example>
        <code lang="C#">
            DataTable table = new DataTable();
            table.Columns.Add("radiobuttonField");
            table.Columns.Add("textField");
            table.Columns.Add("checkboxField");
            table.Columns.Add("listboxField");
            table.Columns.Add("comboboxField");
            FormDataConverter fc = new FormDataConverter();
            Stream stream = new FileStream("PdfWithAcroForm.pdf", FileMode.Open);
            fc.Table = table;
            fc.ConvertToDataTable(new Stream[] { stream }, DataType.PDF);
            stream.Close();
            </code>
      </example>
    </member>
    <member name="M:Aspose.Pdf.Facades.FormDataConverter.ImportIntoDataBase(System.String,Aspose.Pdf.Facades.DataType)">
      <summary>
            Imports data from table into database.
            </summary>
      <param name="connectString">Connection string of database.</param>
      <param name="dbType">Type of database connection: OLEDB or ODBC.</param>
      <example>
        <code lang="C#">
             FormDataConverter fc = new FormDataConverter();
             DataTable table = new DataTable();
             table.TableName = "test";
             table.Columns.Add("TEXT_VALUE");
             table.Columns.Add("INT_VALUE");
             fc.Table = table;
             DataRow row = table.NewRow();
             row["TEXT_VALUE"] = "AAA";
             row["INT_VALUE"] = "123";
             table.Rows.Add(row);
             string connection = "Provider=Microsoft.Jet.OLEDB.4.0;Data Source=ConverterDatabase.mdb";
             fc.ImportIntoDataBase(connection, DataType.OLEDB);
            </code>
      </example>
    </member>
    <member name="M:Aspose.Pdf.Facades.FormDataConverter.ExportFromDataBase(System.String,Aspose.Pdf.Facades.DataType)">
      <summary>
            Exports data from database into table.
            </summary>
      <param name="connectString">Connection string for database.</param>
      <param name="dbType">Connection type: OLEDB or ODBC.</param>
      <example>
        <code lang="C#">
            FormDataConverter fc = new FormDataConverter();
            string connection = "Provider=Microsoft.Jet.OLEDB.4.0;Data Source=ConverterDatabase.mdb";
            DataTable table = new DataTable();
            table.TableName = "TestSource";
            table.Columns.Add("TEXT_VALUE");
            table.Columns.Add("INT_VALUE");
            fc.Table = table;
            fc.ExportFromDataBase(connection, DataType.OLEDB);
            </code>
      </example>
    </member>
    <member name="M:Aspose.Pdf.Facades.FormDataConverter.ConvertToStreams(System.IO.Stream[],Aspose.Pdf.Facades.DataType)">
      <summary>
            Convert data in table into streams.
            </summary>
      <param name="destStream">Streams where data will be stored.</param>
      <param name="destType">Type of stored data. Valid values are: XML, FDF, XFDF.</param>
      <example>
        <code lang="C#">
             DataTable table = new DataTable();
             table.Columns.Add("radiobuttonField");
             table.Columns.Add("textField");
             table.Columns.Add("checkboxField");
             table.Columns.Add("listboxField");
             table.Columns.Add("comboboxField");
             DataRow newrow = table.NewRow();
             newrow["textField"] = "NEW DATA";
             newrow["listboxField"] = "Item1";
             newrow["comboboxField"] = "Item1";
             newrow["checkboxField"] = "true";
             newrow["radiobuttonField"] = "true";
             table.Rows.Add(newrow);
             fc.Table = table;
             fc.ConvertToStreams(new Stream[] { stream }, DataType.XML);
            </code>
      </example>
    </member>
    <member name="M:Aspose.Pdf.Facades.FormDataConverter.ConverToStreams(System.IO.Stream[],Aspose.Pdf.Facades.DataType)">
      <summary>
            This method is obsolete. Please use ConvertToStreams() instead.
            </summary>
      <param name="destStream">
      </param>
      <param name="destType">
      </param>
    </member>
    <member name="P:Aspose.Pdf.Facades.FormDataConverter.Table">
      <summary>
            Gets or sets the middle data container, one DataTable.
            It must be defined before converting data from one format to another format.
            The Columns and TableName of the DataTable should be defined.
            The TableName is the name of the Table in the database.
            Every column's ColumnName is the qualified field name of the pdf. Every column's Caption
            is the column name of table in the database. If the field name is the same as the table column
            name, the Caption need not specified.
            </summary>
    </member>
    <member name="P:Aspose.Pdf.Facades.FormDataConverter.CreateMissingField">
      <summary>
            ConvertToDataTable will create required field if it does not exists in Table.
            </summary>
    </member>
    <member name="P:Aspose.Pdf.Facades.FormDataConverter.ReplaceExistingTable">
      <summary>
            ImportIntoDatabase will drop existing table and create new table if this property set to true.
            </summary>
    </member>
    <member name="P:Aspose.Pdf.Facades.FormDataConverter.ClearTableBeforeExport">
      <summary>
            ExportFromData will clear table before data export.
            </summary>
    </member>
    <member name="P:Aspose.Pdf.Facades.FormDataConverter.CreateMissingTable">
      <summary>
            ImportIntoDatabase will create table if it does not exists.
            </summary>
    </member>
    <member name="T:Aspose.Pdf.Facades.FormEditor">
      <summary>
            Class for editing forms (ading/deleting field etc)
            </summary>
    </member>
    <member name="M:Aspose.Pdf.Facades.FormEditor.#ctor(System.IO.Stream,System.IO.Stream)">
      <summary>
            Constructor for FormEditor.
            </summary>
      <param name="srcStream">Source stream.</param>
      <param name="destStream">Destination stream.</param>
      <example>
        <code lang="C#">
            FormEditor formEditor = new FormEditor(
              new FileStream(new FileStream("InFile.pdf", FileMode.Open, FileAccess.Read), 
              new FileStream("OutFile.pdf", FileMode.Create, FileAccess.Write));
            </code>
      </example>
    </member>
    <member name="M:Aspose.Pdf.Facades.FormEditor.#ctor(System.String,System.String)">
      <summary>
            Constructor for FormEditor 
            </summary>
      <param name="srcFileName">Name of source file.</param>
      <param name="destFileName">Name of destination file.</param>
      <example>
        <code lang="C#">
            FormEditor formEditor = new FormEditor("InFile.pdf", "OutFile.pdf");
            </code>
      </example>
    </member>
    <member name="M:Aspose.Pdf.Facades.FormEditor.#ctor">
      <summary>
            Constructor for FormEditor.
            </summary>
      <example>
        <code lang="C#">
            FormEditor formEditor = new FormEditor();
            </code>
      </example>
    </member>
    <member name="M:Aspose.Pdf.Facades.FormEditor.Save">
      <summary>
            Saves changes into destination file.
            </summary>
            FormEditor formEditor = new FormEditor("InFile.pdf", "OutFile.pdf");
            //make some changes... 
            formEditor.Save();
        </member>
    <member name="M:Aspose.Pdf.Facades.FormEditor.SetFieldAttribute(System.String,Aspose.Pdf.Facades.PropertyFlag)">
      <summary>
            Set attributes of field. 
            </summary>
      <param name="fieldName">Name of field which attributes should be set.</param>
      <param name="flag">Flag (NoExport/ReadOnly/Required)</param>
      <returns>true if attribute was set successfully.</returns>
      <example>
        <code lang="C#">
            FormEditor formEditor = new FormEditor("PdfForm.pdf",  "PdfForm_SetFieldAttribute.pdf");
            formEditor.SetFieldAttribute("listboxField", PropertyFlag.ReadOnly);
            formEditor.SetFieldAttribute("textField", PropertyFlag.NoExport);
            </code>
      </example>
    </member>
    <member name="M:Aspose.Pdf.Facades.FormEditor.SetFieldAppearance(System.String,Aspose.Pdf.InteractiveFeatures.Annotations.AnnotationFlags)">
      <summary>
            Set field flags
            </summary>
      <param name="fieldName">Name of field whose flags should be updated.</param>
      <param name="flags">Flag of the field.</param>
      <returns>true if flags were updated successfully.</returns>
      <example>
        <code lang="C#">
            FormEditor formEditor = new FormEditor("PdfForm1.pdf", "FormEditor_SetFieldAppearance.pdf");
            formEditor.SetFieldAppearance("Name", AnnotationFlags.Hidden);
            formEditor.SetFieldAppearance("Phone", AnnotationFlags.NoView | AnnotationFlags.Print);
            </code>
      </example>
    </member>
    <member name="M:Aspose.Pdf.Facades.FormEditor.GetFieldAppearance(System.String)">
      <summary>
            Get field flags. 
            </summary>
      <param name="fieldName">Name of the field.</param>
      <returns>Set of field flags</returns>
    </member>
    <member name="M:Aspose.Pdf.Facades.FormEditor.SetSubmitFlag(System.String,Aspose.Pdf.Facades.SubmitFormFlag)">
      <summary>
            Set submit flag of submit button. 
            </summary>
      <param name="fieldName">Name of submit button.</param>
      <param name="submitFormFlag">Submit flag.</param>
      <returns>
      </returns>
      <example>
        <code lang="C#">
            FormEditor formEditor = new FormEditor("PdfForm.pdf", "FormEditor_SetSubmitFlag.pdf");
            formEditor.SetSubmitFlag("btnSubmit", SubmitFormFlag.Fdf);
            </code>
      </example>
    </member>
    <member name="M:Aspose.Pdf.Facades.FormEditor.SetSubmitUrl(System.String,System.String)">
      <summary>
            Sets URL of the button.
            </summary>
      <param name="fieldName">Submit button name.</param>
      <param name="url">Fully qualified URL.</param>
      <returns>
      </returns>
      <example>
        <code lang="C#">
            FormEditor formEditor = new FormEditor("PdfForm.pdf", "FormEditor_SetSubmitUrl.pdf");
            formEditor.SetSubmitUrl("btnSubmit", "www.mysite.com");
            </code>
      </example>
    </member>
    <member name="M:Aspose.Pdf.Facades.FormEditor.SetFieldLimit(System.String,System.Int32)">
      <summary>
            Sets maximum character count of the text field.
            </summary>
      <param name="fieldName">Name of the text field.</param>
      <param name="fieldLimit">New value of limit for the field.</param>
      <returns>true if field limit was successfully set.</returns>
      <example>
        <code lang="C#">
            FormEditor formEditor = new FormEditor("PdfForm.pdf", "FormEditor_SetFieldLimit.pdf");
            formEditor.SetFieldLimit("textField", 15);
            </code>
      </example>
    </member>
    <member name="M:Aspose.Pdf.Facades.FormEditor.SetFieldCombNumber(System.String,System.Int32)">
      <summary>
            Sets number of combs for a regular single-line text field (the field is 
            automatically divided into as many equally spaced positions, or combs, 
            as the value of combNumber parameter).
            </summary>
      <param name="fieldName">The qualified field name.</param>
      <param name="combNumber">The number of combs to divide the field into.</param>
      <returns>If success, return true;else false.</returns>
      <example>
        <code lang="C#">
            FormEditor formEditor = new FormEditor("PdfWithAcroForm.pdf", "FormEditor_SetFieldComb.pdf"));
            formEditor.SetFieldCombNumber("textCombField", 5);
            </code>
      </example>
    </member>
    <member name="M:Aspose.Pdf.Facades.FormEditor.MoveField(System.String,System.Single,System.Single,System.Single,System.Single)">
      <summary>
            Set new position of field.
            </summary>
      <param name="fieldName">Name of field which must be moved.</param>
      <param name="llx">Abscissa of the lower-left corner of the field.</param>
      <param name="lly">Ordinate of the lower-left coerner of the field.</param>
      <param name="urx">Abscissa of the upper-right corner of the field.</param>
      <param name="ury">Ordinate of the upper-right corner of the field.</param>
      <returns>true if field position was changed successfully.</returns>
      <example>
        <code lang="C#">
            FormEditor formEditor = new FormEditor("PdfForm.pdf", "FormEditor_MoveField.pdf");
            formEditor.MoveField("textField", 20.5f, 20.3f, 120.6f, 40.8f);
            </code>
      </example>
    </member>
    <member name="M:Aspose.Pdf.Facades.FormEditor.AddField(Aspose.Pdf.Facades.FieldType,System.String,System.Int32,System.Single,System.Single,System.Single,System.Single)">
      <summary>
            Add field of specified type to the form.
            </summary>
      <param name="fieldType">Type of the field which must be added.</param>
      <param name="fieldName">Name of the field whic must be added.</param>
      <param name="pageNum">Page number where new field must be placed.</param>
      <param name="llx">Abscissa of the lower-left corner of the field.</param>
      <param name="lly">Ordinate of the lower-left corner of the field.</param>
      <param name="urx">Abscissa of the upper-right corner of the field.</param>
      <param name="ury">Ordinate of the upper-right corner of the field.</param>
      <returns>true if field was successfully added.</returns>
      <example>
        <code lang="C#">
            FormEditor formEditor = new Aspose.Pdf.Facades.FormEditor("PdfForm.pdf", "FormEditor_AddField_Text.pdf");
            formEditor.AddField(FieldType.Text, "AddedTextField",  1, 10, 30, 110, 46);
            formEditor.Save();
            </code>
      </example>
    </member>
    <member name="M:Aspose.Pdf.Facades.FormEditor.AddField(Aspose.Pdf.Facades.FieldType,System.String,System.String,System.Int32,System.Single,System.Single,System.Single,System.Single)">
      <summary>
            Add field of specified type to the form.
            </summary>
      <param name="fieldType">Type of the field which must be added.</param>
      <param name="fieldName">Name of the field whic must be added.</param>
      <param name="initValue">Initial value of the field.</param>
      <param name="pageNum">Page number where new field must be placed.</param>
      <param name="llx">Abscissa of the lower-left corner of the field.</param>
      <param name="lly">Ordinate of the lower-left corner of the field.</param>
      <param name="urx">Abscissa of the upper-right corner of the field.</param>
      <param name="ury">Ordinate of the upper-right corner of the field.</param>
      <returns>true if field was successfully added.</returns>
            /// <example><code lang="C#">
            FormEditor formEditor = new Aspose.Pdf.Facades.FormEditor("PdfForm.pdf", "FormEditor_AddField_Text.pdf");
            formEditor.AddField(FieldType.Text, "AddedTextField", "Text Value", 1, 10, 30, 110, 46);
            formEditor.Items = new string[] { "Item1", "Item2", Item3" };
            formEditor.AddField(FieldType.Radio, "RadioButtonField", 1, 265, 695, 365, 720);
            formEditor.Save();
            </code></example></member>
    <member name="M:Aspose.Pdf.Facades.FormEditor.RemoveField(System.String)">
      <summary>
            Remove field from the form.
            </summary>
      <param name="fieldName">Name of the field which must be removed.</param>
      <example>
        <code lang="C#">
            FormEditr formEditor = new FormEditor("PdfForm.pdf", "FormEditor_RemoveField.pdf");
            formEditor.RemoveField("listboxField");
            formEditor.RemoveField("textField");
            </code>
      </example>
    </member>
    <member name="M:Aspose.Pdf.Facades.FormEditor.ResetFacade">
      <summary>
            Reset all visual attribtues to empty value.
            </summary>
    </member>
    <member name="M:Aspose.Pdf.Facades.FormEditor.ResetInnerFacade">
      <summary>
            Reset all visual attribtues of inner facade to empty value.
            </summary>
    </member>
    <member name="M:Aspose.Pdf.Facades.FormEditor.CopyInnerField(System.String,System.String,System.Int32)">
      <summary>
            Copies an existing field to the same position in specified page number.
            A new document will be produced, which contains everything the source document has except for the newly copied field.
            </summary>
      <param name="fieldName">
      </param> The old fully qualified field name.
            <param name="newFieldName"></param> The new fully qualified field name. If null, it will be set as fieldName + "~".
            <param name="pageNum"></param> The number of page to hold the new field. If -1, new field will be copid to the same page as old one hosted.
            <example><code lang="C#">
            FormEditor formEditor = new FormEditor("PdfForm.pdf", "PdfForm_out.pdf");
            //Creates copy of text field on psecond page.
            formEditor.CopyInnerField("textField", "textFieldCopy", 2);
            </code></example></member>
    <member name="M:Aspose.Pdf.Facades.FormEditor.CopyInnerField(System.String,System.String,System.Int32,System.Single,System.Single)">
      <summary>
            Copies an existing field to a new position specified by both page number and ordinates.
            A new document will be produced, which contains everything the source document has except for the newly copied field.
            </summary>
      <param name="fieldName">
      </param> The old fully qualified field name.
            <param name="newFieldName"></param> The new fully qualified field name. If null, it will be set as fieldName + "~".
            <param name="pageNum"></param> The number of page to hold the new field. If -1, new field will be copid to the same page as old one hosted.
            <param name="abscissa"></param> The abscissa of the new field. If -1, the abscissa will be equaled to the original one.
            <param name="ordinate"></param> The ordinate of the new field. If -1, the ordinate will be equaled to the original one.
            <example><code lang="C#">
            FormEditor formEditor = new FormEditor("PdfForm.pdf", "PdfForm_out.pdf");
            //Creates copy of text field on psecond page.
            formEditor.CopyInnerField("textField", "textFieldCopy", 2, 100, 200);
            </code></example></member>
    <member name="M:Aspose.Pdf.Facades.FormEditor.CopyOuterField(System.String,System.String)">
      <summary>
            Copies an existing field from one PDF document to another document with original page number and ordinates.
            Notice: Only for AcroForm fields (excluding radio box).
            </summary>
      <param name="srcFileName">
      </param> The name of PDF document which containes the field to be copied.
            <param name="fieldName"></param> The original fully qualified field name.
            <example><code lang="C#">
            FormEditor formEditor = new FormEditor("PdfForm.pdf", "PdfForm_updated.pdf");
            //copies text field from source.pdf to PdfForm.pdf
            formEditor.CopyOuterField("source.pdf", "textField");
            formEditor.Save();
            </code></example></member>
    <member name="M:Aspose.Pdf.Facades.FormEditor.CopyOuterField(System.String,System.String,System.Int32)">
      <summary>
             Copies an existing field from one PDF document to another document with specified page number and original ordinates.
             Notice: Only for AcroForm fields (excluding radio box).
             </summary>
      <param name="srcFileName">
      </param> The name of PDF document which containes the field to be copied.
             <param name="fieldName"></param> The original fully qualified field name.
             <param name="pageNum"></param> The number of page to hold the new field. If -1, new field will be copid to the same page as old one hosted.
            <example><code lang="C#">
            FormEditor formEditor = new FormEditor("PdfForm.pdf", "PdfForm_updated.pdf");
            formEditor.CopyOuterField("source.pdf", "textField", 2);
            formEditor.Save();
            </code></example></member>
    <member name="M:Aspose.Pdf.Facades.FormEditor.CopyOuterField(System.String,System.String,System.Int32,System.Single,System.Single)">
      <summary>
            Copies an existing field from one PDF document to another document with specified page number and ordinates.
            Notice: Only for AcroForm fields (excluding radio box).
            </summary>
      <param name="srcFileName">
      </param> The name of PDF document which containes the field to be copied.
            <param name="fieldName"></param> The original fully qualified field name.
            <param name="pageNum"></param> The number of page to hold the new field. If -1, new field will be copid to the same page as old one hosted.
            <param name="abscissa"></param> The abscissa of the new field. If -1, the abscissa will be equaled to the original one.
            <param name="ordinate"></param> The ordinate of the new field. If -1, the ordinate will be equaled to the original one.
            <example><code lang="C#">
            FormEditor formEditor = new FormEditor("PdfForm.pdf", "PdfForm_updated.pdf");
            formEditor.CopyOuterField("source.pdf", "textField" , 2, 100, 200);
            </code></example></member>
    <member name="M:Aspose.Pdf.Facades.FormEditor.DecorateField(System.String)">
      <summary>
            Changes visual attributes of the specified field.
            </summary>
      <param name="fieldName"> The fully qualified field name.</param>
      <example>
        <code lang="C#">
            FormEditor fe = new FormEditor("PdfWithAcroForm.pdf", "FormEditor_DecorateField_text.pdf");
            fe.Facade = new FormFieldFacade();
            fe.Facade.BackgroundColor = System.Drawing.Color.Red;
            fe.Facade.TextColor = System.Drawing.Color.Blue;
            fe.Facade.BorderColor = System.Drawing.Color.Green;
            fe.Facade.Alignment = FormFieldFacade.AlignCenter;
            fe.DecorateField("textField");
            </code>
      </example>
    </member>
    <member name="M:Aspose.Pdf.Facades.FormEditor.DecorateField(Aspose.Pdf.Facades.FieldType)">
      <summary>
            Changes visual attributes of all fields with the specified field type.
            </summary>
      <param name="fieldType">Type of fields which will be decorated.</param>
      <example>
        <code lang="C#">
            FormEditor fe = new FormEditor("PdfForm.pdf", "FormEditor_DecorateField.pdf");
            fe.Facade = new FormFieldFacade();
            fe.Facade.BackgroundColor = System.Drawing.Color.Red;
            fe.Facade.TextColor = System.Drawing.Color.Blue;
            fe.Facade.BorderColor = System.Drawing.Color.Green;
            fe.Facade.Alignment = FormFieldFacade.AlignRight;
            //decorate all text fields.
            fe.DecorateField(FieldType.Text);
            </code>
      </example>
    </member>
    <member name="M:Aspose.Pdf.Facades.FormEditor.DecorateField">
      <summary>
            Changes visual attributes of all fields in the PDF document.
            </summary>
      <example>
        <code lang="C#">
            FormEditor fe = new FormEditor("PdfForm.pdf", "FormEditor_DecorateField.pdf");
            fe.Facade = new FormFieldFacade();
            fe.Facade.BackgroundColor = System.Drawing.Color.Red;
            fe.Facade.TextColor = System.Drawing.Color.Blue;
            fe.Facade.BorderColor = System.Drawing.Color.Green;
            fe.Facade.Alignment = FormFieldFacade.AlignRight;
            //decorate all fields.
            fe.DecorateField();
            </code>
      </example>
    </member>
    <member name="M:Aspose.Pdf.Facades.FormEditor.RenameField(System.String,System.String)">
      <summary>
            Change name of the field.
            </summary>
      <param name="fieldName">Old name of the field.</param>
      <param name="newFieldName">New name of the field.</param>
      <example>
        <code lang="C#">
            FormEditor formEditor = new FormEditor("PdfForm.pdf", "PdfForm_updated.pdf");
            formEditor.RenameField("textField", "textField_Renamed");
            </code>
      </example>
    </member>
    <member name="M:Aspose.Pdf.Facades.FormEditor.RemoveFieldAction(System.String)">
      <summary>
            Remove submit action of the field.
            </summary>
      <param name="fieldName">Name of the field.</param>
      <example>
        <code lang="C#">
            FormEditor formEditor = new FormEditor("PdfForm.pdf", "FormEditor_RemoveFieldAction.pdf");
            formEditor.RemoveFieldAction("btnSubmit");
            </code>
      </example>
    </member>
    <member name="M:Aspose.Pdf.Facades.FormEditor.AddSubmitBtn(System.String,System.Int32,System.String,System.String,System.Single,System.Single,System.Single,System.Single)">
      <summary>
            Add submit button on the form.
            </summary>
      <param name="fieldName">Name of new button. </param>
      <param name="page">Page where button will be placed.</param>
      <param name="label">Button caption.</param>
      <param name="url">URL of the submit button.</param>
      <param name="llx">Abscissa of the lower-left corner.</param>
      <param name="lly">Ordinate of the lower-left corner.</param>
      <param name="urx">Abscissa of the upper-right corner.</param>
      <param name="ury">Ordinate of the upper-right corner.</param>
      <example>
        <code lang="C#">
            FormEditor formEditor = new FormEditor("PdfForm.pdf", "FormEditor_AddSubmitBtn.pdf");
            formEditor.AddSubmitBtn("submit", 1, "Submit", "www.check.com", 10, 200, 70, 270);
            </code>
      </example>
    </member>
    <member name="M:Aspose.Pdf.Facades.FormEditor.AddListItem(System.String,System.String)">
      <summary>
            Adds new item to the list box. 
            </summary>
      <param name="fieldName">Name of the field ot which new item will be added.</param>
      <param name="itemName">Name if new item.</param>
      <example>
        <code lang="C#">
            FormEditor formEditor = new FormEditor("PdfForm.pdf", PdfForm_out.pdf");
            formEditor.AddListItem("listBoxField", "Item 4 (New Item)");
            </code>
      </example>
    </member>
    <member name="M:Aspose.Pdf.Facades.FormEditor.AddListItem(System.String,System.String[])">
      <summary>
            Add a new item with Export value to the existing list box field, only for AcroForm combo box field.
            </summary>
      <param name="fieldName">Name of field to which items will be added.</param>
      <param name="exportName">A string array denoting a new list item with Export Value, i.e. (Item Label, Export Value).</param>
      <example>
        <code lang="C#">
             FormEditor fe = new FormEditor("PdfForm.pdf", "FormEditor_AddListItem2.pdf");
             fe.AddListItem("listboxField", new string[] { "4", "Item4(Added)" });
            </code>
      </example>
    </member>
    <member name="M:Aspose.Pdf.Facades.FormEditor.DelListItem(System.String,System.String)">
      <summary>
            Delete item from the list field.
            </summary>
      <param name="fieldName">Name of the field.</param>
      <param name="itemName">Name of the item which must be deleted.</param>
      <example>
        <code lang="C#">
            formEditor = new Aspose.Pdf.Facades.FormEditor("PdfForm.pdf", "FormEditor_DelListItem.pdf");
            formEditor.DelListItem("listboxField", "item2");
            </code>
      </example>
    </member>
    <member name="M:Aspose.Pdf.Facades.FormEditor.SetFieldScript(System.String,System.String)">
      <summary>
            Set JavaScript for a PushButton field. If old JavaScript existed, it will be replaced by the new one.
            </summary>
      <param name="fieldName">The fully qualified field name.</param>
      <param name="script">The Java script to be added/placed into a push button field.</param>
    </member>
    <member name="M:Aspose.Pdf.Facades.FormEditor.AddFieldScript(System.String,System.String)">
      <summary>
            Add JavaScript for a PushButton field. If old event exists, new event is added after it. 
            </summary>
      <param name="fieldName">The fully qualified field name.</param>
      <param name="script">The Java script to be added/placed into a push button field.</param>
    </member>
    <member name="M:Aspose.Pdf.Facades.FormEditor.Single2Multiple(System.String)">
      <summary>
            Change a single-lined text field to a multiple-lined one.
            </summary>
      <param name="fieldName">The qualified field name.</param>
      <returns>If success, return true;else false.</returns>
      <example>
        <code lang="C#">
            FormEditor formEditor = new FormEditor("PdfForm.pdf", "PdfForm_updated.pdf");
            formEditor.Single2Multiple("textField");
            </code>
      </example>
    </member>
    <member name="M:Aspose.Pdf.Facades.FormEditor.SetFieldAlignment(System.String,System.Int32)">
      <summary>
            Set the alignment style of a text field.
            </summary>
      <param name="fieldName">The qualified field name.</param>
      <param name="alignment">The alignment style definition, including FormFieldFacade.AlignLeft,
            FormFieldFacade.AlignCenter and FormFieldFacade.AlignRight.</param>
      <example>
        <code lang="C#">
             FormEditor formEditor = new FormEditor("PdfForm.pdf", "FormEditor_updated.pdf"));
             formEditor.SetFieldAlignment(fieldName, FormFieldFacade.AlignCenter);
            </code>
      </example>
    </member>
    <member name="M:Aspose.Pdf.Facades.FormEditor.SetFieldAlignmentV(System.String,System.Int32)">
      <summary>
            Set the vertical alignment style of a text field.
            </summary>
      <param name="fieldName">The qualified field name.</param>
      <param name="alignment">The alignment style definition, including FormFieldFacade.AlignTop,
            FormFieldFacade.AlignMiddle and FormFieldFacade.AlignRight.</param>
      <example>
        <code lang="C#">
             FormEditor fe = new FormEditor("PdfStaticForm.pdf", "VerticalAlign.pdf");
             fe.SetFieldAlignmentV("form1[0].TextField[0]", FormFieldFacade.AlignBottom);
            </code>
      </example>
    </member>
    <member name="M:Aspose.Pdf.Facades.FormEditor.#ctor(Aspose.Pdf.Document)">
      <summary>
            Initializes new <see cref="T:Aspose.Pdf.Facades.FormEditor" /> object on base of the <paramref name="document" />.
            </summary>
      <param name="document">Pdf document.</param>
    </member>
    <member name="M:Aspose.Pdf.Facades.FormEditor.#ctor(Aspose.Pdf.Document,System.String)">
      <summary>
            Initializes new <see cref="T:Aspose.Pdf.Facades.FormEditor" /> object on base of the <paramref name="document" />.
            </summary>
      <param name="document">
            Pdf document.
            </param>
      <param name="destFileName">Path of the destination file.</param>
    </member>
    <member name="M:Aspose.Pdf.Facades.FormEditor.#ctor(Aspose.Pdf.Document,System.IO.Stream)">
      <summary>
            Initializes new <see cref="T:Aspose.Pdf.Facades.FormEditor" /> object on base of the <paramref name="document" />.
            </summary>
      <param name="document">
            Pdf document.
            </param>
      <param name="destStream">Destination stream.</param>
    </member>
    <member name="M:Aspose.Pdf.Facades.FormEditor.Close">
      <summary>
            Closes the facade.
            </summary>
    </member>
    <member name="P:Aspose.Pdf.Facades.FormEditor.SrcFileName">
      <summary>
            Gets or sets name of source file.
            </summary>
      <example>
        <code lang="C#">
            FormEditor editor = new FormEditor();
            editor.SrcFileName = "InputFile.pdf";
            </code>
      </example>
    </member>
    <member name="P:Aspose.Pdf.Facades.FormEditor.DestFileName">
      <summary>
            Gets or sets destination file name.
            </summary>
      <example>
        <code lang="C#">
            FormEditor editor = new FormEditor();
            editor.DestFileName = "OutFile.pdf";
            </code>
      </example>
    </member>
    <member name="P:Aspose.Pdf.Facades.FormEditor.SrcStream">
      <summary>
            Gets or sets source stream.
            </summary>
      <example>
        <code lang="C#">
            FormEditor editor = new FormEditor();
            editor.SrcStream = new FileStream("InFile.pdf", FileMode.Open, FileAccess.Read);
            </code>
      </example>
    </member>
    <member name="P:Aspose.Pdf.Facades.FormEditor.ConvertTo">
      <summary>
            Sets PDF file format. Result file will be saved in specified file format. 
            If this property is not specified then file will be save in default PDF format without conversion.
            </summary>
    </member>
    <member name="P:Aspose.Pdf.Facades.FormEditor.DestStream">
      <summary>
            Gets or sets destination stream.
            </summary>
      <example>
        <code lang="C#">
            FormEditor editor = new FormEditor();
            editor.DestStream = new FileStream("OutFile.pdf", FileMode.Create, FileAccess.Write);
            </code>
      </example>
    </member>
    <member name="P:Aspose.Pdf.Facades.FormEditor.Items">
      <summary>
            Sets items which will be added t onewly created list box or combo box. 
            <example><code lang="C#">
             formEditor = new Aspose.Pdf.Facades.FormEditor("input.pdf", "output.pdf");
             formEditor.Items = new string[] { "AAA", "BBB", "CCC" };
             formEditor.AddField(FieldType.ListBox, "AddedListBoxField", "BBB", 1, 10, 30, 110, 130);
             formEditor.Save();
            </code></example></summary>
    </member>
    <member name="P:Aspose.Pdf.Facades.FormEditor.ExportItems">
      <summary> Sets options for combo box with export values.</summary>
      <example>
        <code lang="C#">
            FormEditor formEditor = new FormEditor("PdfForm.pdf", "PdfForm_Updated.pdf"));
            formEditor.ExportItems = new string[][] 
            { 
                new string[] { "1", "Firs" }, 
                new string[] { "2", "Second" }, 
                new string[] { "3", "Third" } 
            };
            formEditor.AddField(FieldType.ListBox, "AddedListBoxField", "Second", 1, 10, 30, 110, 130);
            formEditor.Save();
            </code>
      </example>
    </member>
    <member name="P:Aspose.Pdf.Facades.FormEditor.Facade">
      <summary>
            Sets visual attributes of the field.
            </summary>
      <example>
        <code lang="C#">
            FormEditor fe = new FormEditor("PdfForm.pdf", "PdfForm_DecorateField_text.pdf");
            fe.Facade = new FormFieldFacade();
            fe.Facade.BackgroundColor = System.Drawing.Color.Red;
            fe.Facade.TextColor = System.Drawing.Color.Blue;
            fe.Facade.BorderColor = System.Drawing.Color.Green;
            fe.Facade.Alignment = FormFieldFacade.AlignCenter;
            fe.DecorateField("textField");
            fe.Save();
            </code>
      </example>
    </member>
    <member name="P:Aspose.Pdf.Facades.FormEditor.RadioGap">
      <summary>
            The member to record the gap between two neighboring radio buttons in pixels,default is 50.
            </summary>
      <example>
        <code lang="C#">
            formEditor = new Aspose.Pdf.Facades.FormEditor("PdfForm.pdf", "FormEditor_AddField_RadioButton.pdf");
            formEditor.RadioGap = 4;
            formEditor.RadioHoriz = false;
            formEditor.Items = new string[] { "First", "Second", "Third" };
            formEditor.AddField(FieldType.Radio, "AddedRadioButtonField", "Second", 1, 10, 30, 110, 130);
            formEditor.Save();
            </code>
      </example>
    </member>
    <member name="P:Aspose.Pdf.Facades.FormEditor.RadioHoriz">
      <summary>
            The flag to indicate whether the radios are arranged horizontally or vertically, default value is true.
            </summary>
      <example>
        <code lang="C#">
            formEditor = new Aspose.Pdf.Facades.FormEditor("PdfForm.pdf", "FormEditor_AddField_RadioButton.pdf");
            formEditor.RadioGap = 4;
            formEditor.RadioHoriz = false;
            formEditor.Items = new string[] { "First", "Second", "Third" };
            formEditor.AddField(FieldType.Radio, "AddedRadioButtonField", "Second", 1, 10, 30, 110, 130);
            formEditor.Save();
            </code>
      </example>
    </member>
    <member name="P:Aspose.Pdf.Facades.FormEditor.SubmitFlag">
      <summary>
            Set the submit button's submission flags
            </summary>
    </member>
    <member name="T:Aspose.Pdf.Facades.FormFieldFacade">
      <summary>
            Class for representing field properties.
            </summary>
    </member>
    <member name="F:Aspose.Pdf.Facades.FormFieldFacade.BorderWidthUndified">
      <summary>
            Undefined border width.
            </summary>
    </member>
    <member name="F:Aspose.Pdf.Facades.FormFieldFacade.BorderWidthThin">
      <summary>
            Defines a thin border width.
            </summary>
    </member>
    <member name="F:Aspose.Pdf.Facades.FormFieldFacade.BorderWidthMedium">
      <summary>
            Defines a medium border width.
            </summary>
    </member>
    <member name="F:Aspose.Pdf.Facades.FormFieldFacade.BorderWidthThick">
      <summary>
            Defines a thick border width.
            </summary>
    </member>
    <member name="F:Aspose.Pdf.Facades.FormFieldFacade.BorderStyleSolid">
      <summary>
            Defines a solid border style.
            </summary>
    </member>
    <member name="F:Aspose.Pdf.Facades.FormFieldFacade.BorderStyleDashed">
      <summary>
            Defines a dashed border style.
            </summary>
    </member>
    <member name="F:Aspose.Pdf.Facades.FormFieldFacade.BorderStyleBeveled">
      <summary>
            Defines a beveled border style.
            </summary>
    </member>
    <member name="F:Aspose.Pdf.Facades.FormFieldFacade.BorderStyleInset">
      <summary>
            Defines an inseted border style.
            </summary>
    </member>
    <member name="F:Aspose.Pdf.Facades.FormFieldFacade.BorderStyleUnderline">
      <summary>
            Defines an underlined border style.
            </summary>
    </member>
    <member name="F:Aspose.Pdf.Facades.FormFieldFacade.BorderStyleUndefined">
      <summary>
            Undefined border style.
            </summary>
    </member>
    <member name="F:Aspose.Pdf.Facades.FormFieldFacade.AlignLeft">
      <summary>
            Defines aglignment to left style.
            </summary>
    </member>
    <member name="F:Aspose.Pdf.Facades.FormFieldFacade.AlignCenter">
      <summary>
            Defines aglignment to center style.
            </summary>
    </member>
    <member name="F:Aspose.Pdf.Facades.FormFieldFacade.AlignRight">
      <summary>
            Defines aglignment to right style.
            </summary>
    </member>
    <member name="F:Aspose.Pdf.Facades.FormFieldFacade.AlignUndefined">
      <summary>
            Undefined aglignment style.
            </summary>
    </member>
    <member name="F:Aspose.Pdf.Facades.FormFieldFacade.AlignJustified">
      <summary>
            Defines text justification alignment style.
            </summary>
    </member>
    <member name="F:Aspose.Pdf.Facades.FormFieldFacade.AlignTop">
      <summary>
            Defines vertical aglignment as top style.
            </summary>
    </member>
    <member name="F:Aspose.Pdf.Facades.FormFieldFacade.AlignMiddle">
      <summary>
            Defines vertical aglignment as middle style.
            </summary>
    </member>
    <member name="F:Aspose.Pdf.Facades.FormFieldFacade.AlignBottom">
      <summary>
            Defines vertical aglignment as bottom style.
            </summary>
    </member>
    <member name="F:Aspose.Pdf.Facades.FormFieldFacade.CheckBoxStyleCircle">
      <summary>
            Defines a circle check box style.
            </summary>
    </member>
    <member name="F:Aspose.Pdf.Facades.FormFieldFacade.CheckBoxStyleCheck">
      <summary>
            Defines the shape of a check box field when it checked.
            </summary>
    </member>
    <member name="F:Aspose.Pdf.Facades.FormFieldFacade.CheckBoxStyleCross">
      <summary>
            Defines a cross check box style.
            </summary>
    </member>
    <member name="F:Aspose.Pdf.Facades.FormFieldFacade.CheckBoxStyleDiamond">
      <summary>
            Defines a diamond check box style.
            </summary>
    </member>
    <member name="F:Aspose.Pdf.Facades.FormFieldFacade.CheckBoxStyleStar">
      <summary>
            Defines a star check box style.
            </summary>
    </member>
    <member name="F:Aspose.Pdf.Facades.FormFieldFacade.CheckBoxStyleSquare">
      <summary>
            Defines a square check box style.
            </summary>
    </member>
    <member name="F:Aspose.Pdf.Facades.FormFieldFacade.CheckBoxStyleUndefined">
      <summary>
            Defines an undefined check box style.
            </summary>
    </member>
    <member name="M:Aspose.Pdf.Facades.FormFieldFacade.Reset">
      <summary>
            Reset all visual attribtues to empty value.
            </summary>
    </member>
    <member name="P:Aspose.Pdf.Facades.FormFieldFacade.BorderColor">
      <summary>
            The color of a field border. 
            </summary>
    </member>
    <member name="P:Aspose.Pdf.Facades.FormFieldFacade.BorderStyle">
      <summary>
            The style of a field border.
            </summary>
    </member>
    <member name="P:Aspose.Pdf.Facades.FormFieldFacade.BorderWidth">
      <summary>
            The width of a field border.
            </summary>
    </member>
    <member name="P:Aspose.Pdf.Facades.FormFieldFacade.Font">
      <summary>
            The font type of a field text.
            </summary>
    </member>
    <member name="P:Aspose.Pdf.Facades.FormFieldFacade.CustomFont">
      <summary>
            Gets or sets name of the font when this is non-standart (other then 14 standard fonts).
            </summary>
    </member>
    <member name="P:Aspose.Pdf.Facades.FormFieldFacade.FontSize">
      <summary>
            The size of a field text.
            </summary>
    </member>
    <member name="P:Aspose.Pdf.Facades.FormFieldFacade.TextColor">
      <summary>
            The color of the field text.
            </summary>
    </member>
    <member name="P:Aspose.Pdf.Facades.FormFieldFacade.TextEncoding">
      <summary>
            The text encoding type of the field text.
            </summary>
    </member>
    <member name="P:Aspose.Pdf.Facades.FormFieldFacade.Alignment">
      <summary>
            The alignment of a field text, default is left alignment.
            </summary>
    </member>
    <member name="P:Aspose.Pdf.Facades.FormFieldFacade.Rotation">
      <summary>
            The rotation of a field text.
            </summary>
    </member>
    <member name="P:Aspose.Pdf.Facades.FormFieldFacade.Caption">
      <summary>
            The normal caption of form field.
            </summary>
    </member>
    <member name="P:Aspose.Pdf.Facades.FormFieldFacade.ButtonStyle">
      <summary>
            The style of check box or radio box field, defined by FormFieldFacade.CheckBoxStyle*.
            </summary>
    </member>
    <member name="P:Aspose.Pdf.Facades.FormFieldFacade.Box">
      <summary>
            A rectangle object holding field's location.
            </summary>
    </member>
    <member name="P:Aspose.Pdf.Facades.FormFieldFacade.Position">
      <summary>
            A rectangle object holding field's location.
            </summary>
    </member>
    <member name="P:Aspose.Pdf.Facades.FormFieldFacade.PageNumber">
      <summary>
            An integer value holding the number of page on which field locates.
            </summary>
    </member>
    <member name="P:Aspose.Pdf.Facades.FormFieldFacade.Items">
      <summary>
            An array of string, each representing an option of a combo box/list/radio box field.
            </summary>
    </member>
    <member name="P:Aspose.Pdf.Facades.FormFieldFacade.ExportItems">
      <summary> The options for adding a list/combo/radio box</summary>
    </member>
    <member name="P:Aspose.Pdf.Facades.FormFieldFacade.BackgroundColor">
      <summary>
            The color of a field background, default is white.
            </summary>
    </member>
    <member name="P:Aspose.Pdf.Facades.FormFieldFacade.BackgroudColor">
      <summary>
            Obsolete property. Use BackgroundColor.
            </summary>
    </member>
    <member name="T:Aspose.Pdf.Facades.KeySize">
      <summary>
            Defines different key sizes which can be used to encrypt pdf documents.
            </summary>
    </member>
    <member name="F:Aspose.Pdf.Facades.KeySize.x40">
      <summary>
            40 bit key. Such key size is used with RC4 algorithm and provides low level of security. 
            Nevertheless old versions of pdf documents can be encrypted only with such keys (v. 1.3 and lower);
            </summary>
    </member>
    <member name="F:Aspose.Pdf.Facades.KeySize.x128">
      <summary>
            128 bit key. Both RC4 and AES algorithms can use such key size.
            </summary>
    </member>
    <member name="F:Aspose.Pdf.Facades.KeySize.x256">
      <summary>
            256 bit key. Such key size can be used only with AES and is recognized with the last Adobe Reader versions (starting from v.9).
            </summary>
    </member>
    <member name="T:Aspose.Pdf.Facades.LineInfo">
      <summary>
            Represents the information of line. 
            </summary>
    </member>
    <member name="P:Aspose.Pdf.Facades.LineInfo.VerticeCoordinate">
      <summary>
            Gets or sets an array of numbers representing the alternating horizontal and vertical,coordinates, respectively, of each vertex.
            </summary>
    </member>
    <member name="P:Aspose.Pdf.Facades.LineInfo.LineColor">
      <summary>
            Gets or sets the color of a line.
            </summary>
    </member>
    <member name="P:Aspose.Pdf.Facades.LineInfo.LineWidth">
      <summary>
            Gets or sets the width of a line. 
            </summary>
    </member>
    <member name="P:Aspose.Pdf.Facades.LineInfo.Visibility">
      <summary>
            Gets or sets the visibility of a line. 
            </summary>
    </member>
    <member name="P:Aspose.Pdf.Facades.LineInfo.LineDashPattern">
      <summary>
            Gets or sets the dash pattern of a line.
            </summary>
    </member>
    <member name="P:Aspose.Pdf.Facades.LineInfo.BorderStyle">
      <summary>
            Gets or sets the border style of a line, 0 represents solid, 1 represents dashed, 2 represents beleved, 3 represents insert, 4 represents underline.
            </summary>
    </member>
    <member name="T:Aspose.Pdf.Facades.PdfAnnotationEditor">
      <summary> 
            Represents a class for work with PDF document annotations (comments).
            </summary>
    </member>
    <member name="M:Aspose.Pdf.Facades.PdfAnnotationEditor.ImportAnnotationFromXfdf(System.String)">
      <summary>
            Imports all annotations from XFDF file.
            </summary>
      <param name="xfdfFile">The input XFDF file.</param>
      <example>
        <code lang="C#">
            PdfAnnotationEditor editor = new PdfAnnotationEditor();
            editor.BindPdf("example.pdf");
            editor.ImportAnnotationFromXfdf("annots.xfdf");
            editor.Save("example_out.pdf");
            </code>
      </example>
    </member>
    <member name="M:Aspose.Pdf.Facades.PdfAnnotationEditor.ImportAnnotationFromXfdf(System.String,System.Enum[])">
      <summary>
            Imports the specified annotations from XFDF file.
            </summary>
      <param name="xfdfFile">The input XFDF file.</param>
      <param name="annotType">The annotations array to be imported.</param>
      <example>
        <code lang="C#">
            PdfAnnotationEditor editor = new PdfAnnotationEditor();
            editor.BindPdf("example.pdf");
            Enum[] annotTypes = {AnnotationType.Highlight, AnnotationType.Text};
            editor.ImportAnnotationFromXfdf("annots.xfdf", annotTypes);
            editor.Save("example_out.pdf");
            </code>
      </example>
    </member>
    <member name="M:Aspose.Pdf.Facades.PdfAnnotationEditor.ImportAnnotationFromXfdf(System.IO.Stream,System.Enum[])">
      <summary>
            Imports the specified annotations from XFDF data stream.
            </summary>
      <param name="xfdfSteam">The input XFDF data stream.</param>
      <param name="annotType">The array of annotation types to be imported.</param>
      <example>
        <code lang="C#">
            PdfAnnotationEditor editor = new PdfAnnotationEditor();
            editor.BindPdf("example.pdf");
            Enum[] annotTypes ={ AnnotationType.Highlight, AnnotationType.Line };
            editor.ImportAnnotationFromXfdf(File.OpenRead("annots.xfdf"), annotTypes);
            editor.Save("example_out.pdf");
            </code>
      </example>
    </member>
    <member name="M:Aspose.Pdf.Facades.PdfAnnotationEditor.ImportAnnotationFromXfdf(System.IO.Stream)">
      <summary>
            Imports all annotations from XFDF data stream.
            </summary>
      <param name="xfdfSteam">The input XFDF data stream.</param>
      <example>
        <code lang="C#">
            PdfAnnotationEditor editor = new PdfAnnotationEditor();
            editor.BindPdf("example.pdf");
            editor.ImportAnnotationFromXfdf(File.OpenRead("annots.xfdf"));
            editor.Save("example_out.pdf");
            </code>
      </example>
    </member>
    <member name="M:Aspose.Pdf.Facades.PdfAnnotationEditor.ImportAnnotations(System.String[],System.Enum[])">
      <summary>
            Imports the specified annotations into document from array of another PDF documents.
            </summary>
      <param name="annotFile">The array of paths of PDF documents that contain source annotations.</param>
      <param name="annotType">The array of annotation types to be imported.</param>
      <example>
        <code lang="C#">
            PdfAnnotationEditor editor = new PdfAnnotationEditor();
            editor.BindPdf("example.pdf");
            string[] paths = new string[2] {"with_annots1.pdf", "with_annots2.pdf"};
            Enum[] annotTypes = {AnnotationType.Highlight, AnnotationType.Text};
            editor.ImportAnnotations(paths, annotTypes);
            editor.Save("example_out.pdf");
            </code>
      </example>
    </member>
    <member name="M:Aspose.Pdf.Facades.PdfAnnotationEditor.ImportAnnotations(System.String[])">
      <summary>
            Imports annotations into document from array of another PDF documents.
            </summary>
      <param name="annotFile">The array of paths of PDF documents that contain source annotations.</param>
      <example>
        <code lang="C#">
            PdfAnnotationEditor editor = new PdfAnnotationEditor();
            editor.BindPdf("example.pdf");
            string[] paths = new string[2] {"with_annots1.pdf", "with_annots2.pdf"};
            editor.ImportAnnotations(paths);
            editor.Save("example_out.pdf");
            </code>
      </example>
    </member>
    <member name="M:Aspose.Pdf.Facades.PdfAnnotationEditor.ImportAnnotations(System.IO.Stream[],System.Enum[])">
      <summary>
            Imports the specified annotations into document from array of another PDF document streams.
            </summary>
      <param name="annotFileStream">The array of streams of PDF documents that contain source annotations.</param>
      <param name="annotType">The annotation types to be imported.</param>
      <example>
        <code lang="C#">
            PdfAnnotationEditor editor = new PdfAnnotationEditor();
            editor.BindPdf("example.pdf");
            Stream[] streams = new FileStream[2];
            stream[0]= File.OpenRead("with_annots1.pdf");
            stream[1]= File.OpenRead("with_annots2.pdf");
            Enum[] annotTypes = {AnnotationType.Highlight, AnnotationType.Text};
            editor.ImportAnnotations(streams, annotTypes);
            editor.Save("example_out.pdf");
            stream[0].Close();
            stream[1].Close();
            </code>
      </example>
    </member>
    <member name="M:Aspose.Pdf.Facades.PdfAnnotationEditor.ImportAnnotations(System.IO.Stream[])">
      <summary>
            Imports annotations into document from array of another PDF document streams.
            </summary>
      <param name="annotFileStream">The array of streams of PDF documents that contain source annotations.</param>
      <example>
        <code lang="C#">
            PdfAnnotationEditor editor = new PdfAnnotationEditor();
            editor.BindPdf("example.pdf");
            Stream[] streams = new FileStream[2];
            streams[0]= File.OpenRead("with_annots1.pdf");
            streams[1]= File.OpenRead("with_annots2.pdf");
            editor.ImportAnnotations(streams);
            editor.Save("example_out.pdf");
            streams[0].Close();
            streams[1].Close();
            </code>
      </example>
    </member>
    <member name="M:Aspose.Pdf.Facades.PdfAnnotationEditor.ModifyAnnotations(System.Int32,System.Int32,System.Enum,Aspose.Pdf.InteractiveFeatures.Annotations.Annotation)">
      <summary>
            Modifies the annotations of the specifed type on the specified page range.
            It supports to modify next annotation properties: Modified, Title, Contents, Color, Subject and Open.
            </summary>
      <param name="start">The start page number.</param>
      <param name="end">The end page number.</param>
      <param name="annotType">The annotation type.</param>
      <param name="annotation">The annotation object contains new properties.</param>
      <example>
        <code lang="C#">
            PdfAnnotationEditor editor = new PdfAnnotationEditor();
            editor.BindPdf("example.pdf");
            TextAnnotation annot = new TextAnnotation();
            annot.Modified = DateTime.Now;
            annot.Title = "NEW AUTHOR";
            annot.Contents = "NEW CONTENTS";
            annot.Color = Color.Red;
            annot.Subject = "NEW SUBJECT";
            annot.Open = true;
            editor.ModifyAnnotations(1, 2, AnnotationType.Text, annot);
            editor.Save("example_out.pdf");
            </code>
      </example>
    </member>
    <member name="M:Aspose.Pdf.Facades.PdfAnnotationEditor.ModifyAnnotationsAuthor(System.Int32,System.Int32,System.String,System.String)">
      <summary>
            Modifies the author of annotations on the specified page range.
            </summary>
      <param name="start">The start page number.</param>
      <param name="end">The end page number.</param>
      <param name="srcAuthor">The author that must be modified.</param>
      <param name="desAuthor">The new author.</param>
      <example>
        <code lang="C#">
            PdfAnnotationEditor editor = new PdfAnnotationEditor();
            editor.BindPdf("example.pdf");
            editor.ModifyAnnotationsAuthor(1, 2, "PREV AUTHOR", "NEW AUTHOR");
            editor.Save("example_out.pdf");
            </code>
      </example>
    </member>
    <member name="M:Aspose.Pdf.Facades.PdfAnnotationEditor.FlatteningAnnotations">
      <summary>
            Flattens all annotations in the document.
            </summary>
      <example>
        <code lang="C#">
            PdfAnnotationEditor editor = new PdfAnnotationEditor();
            editor.BindPdf("example.pdf");
            editor.FlatteningAnnotations();
            editor.Save(example_out.pdf");
            </code>
      </example>
    </member>
    <member name="M:Aspose.Pdf.Facades.PdfAnnotationEditor.FlatteningAnnotations(System.Int32,System.Int32,System.Enum[])">
      <summary>
            Flattens the annotations of the specified types.
            </summary>
      <param name="start">The start page.</param>
      <param name="end">Then end page.</param>
      <param name="annotType">The annotation types should be flattened.</param>
      <example>
        <code lang="C#">
            PdfAnnotationEditor editor = new PdfAnnotationEditor();
            editor.BindPdf("example.pdf");
            Enum[] annotTypes ={AnnotationType.Line, AnnotationType.FreeText};
            editor.FlatteningAnnotations(1, 2, annotTypes);
            editor.Save("example_out.pdf");
            </code>
      </example>
    </member>
    <member name="M:Aspose.Pdf.Facades.PdfAnnotationEditor.DeleteAnnotations">
      <summary>
            Deletes all annotations in the document.
            </summary>
      <example>
        <code lang="C#">
            PdfAnnotationEditor editor = new PdfAnnotationEditor();
            editor.BindPdf("example.pdf");
            editor.DeleteAnnotations();
            editor.Save("example_out.pdf");
            </code>
      </example>
    </member>
    <member name="M:Aspose.Pdf.Facades.PdfAnnotationEditor.DeleteAnnotations(System.String)">
      <summary>
            Deletes all annotations of the specified type in the document.
            </summary>
      <param name="annotType">The type of annotation will be deleted.</param>
      <example>
        <code lang="C#">
            PdfAnnotationEditor editor = new PdfAnnotationEditor();
            editor.BindPdf("example.pdf");
            editor.DeleteAnnotations("Text");
            editor.Save("example_out.pdf");
            </code>
      </example>
    </member>
    <member name="M:Aspose.Pdf.Facades.PdfAnnotationEditor.DeleteAnnotation(System.String)">
      <summary>
            Deletes the annotation with specified annotation name.
            </summary>
      <param name="annotName">The annotation name</param>
      <example>
        <code lang="C#">
            PdfAnnotationEditor editor = new PdfAnnotationEditor();
            editor.BindPdf("example.pdf");
            editor.DeleteAnnotation("4cfa69cd-9bff-49e0-9005-e22a77cebf38");
            editor.Save("example_out.pdf");
            </code>
      </example>
    </member>
    <member name="M:Aspose.Pdf.Facades.PdfAnnotationEditor.ExportAnnotationsXfdf(System.IO.Stream,System.Int32,System.Int32,System.String[])">
      <summary>
            Exports the content of the specified annotation types into XFDF
            </summary>
      <param name="xmlOutputStream">The output XFDF stream.</param>
      <param name="start">Start page from which the annotations of the document will be exported.</param>
      <param name="end">End page to which the annotations of the document will be exported.</param>
      <param name="annotTypes">The array of annotation types need be exported.</param>
      <example>
        <code lang="C#">
            PdfAnnotationEditor editor = new PdfAnnotationEditor();
            editor.BindPdf("example.pdf");
            string[] annotTypes = new string[] {"Text", "Highlight"};
            using (Stream stream = File.Create("example.xfdf"))
            {
                editor.ExportAnnotationsXfdf(stream, 1, 2, annotTypes);
            }
            </code>
      </example>
    </member>
    <member name="M:Aspose.Pdf.Facades.PdfAnnotationEditor.ExportAnnotationsXfdf(System.IO.Stream,System.Int32,System.Int32,System.Enum[])">
      <summary>
            Exports the content of the specified annotation types into XFDF
            </summary>
      <param name="xmlOutputStream">The output XFDF stream.</param>
      <param name="start">Start page from which the annotations of the document will be exported.</param>
      <param name="end">End page to which the annotations of the document will be exported.</param>
      <param name="annotTypes">The array of annotation types need be exported.</param>
      <example>
        <code lang="C#">
            PdfAnnotationEditor editor = new PdfAnnotationEditor();
            editor.BindPdf("example.pdf");
            Enum[] annotTypes = new Enum[] {AnnotationType.Text, AnnotationType.Highlight};
            using (Stream stream = File.Create("example.xfdf"))
            {
                editor.ExportAnnotationsXfdf(stream, 1, 2, annotTypes);
            }
            </code>
      </example>
    </member>
    <member name="M:Aspose.Pdf.Facades.PdfAnnotationEditor.ExtractAnnotations(System.Int32,System.Int32,System.String[])">
      <summary>
            Gets the list of annotations of the specified types.
            </summary>
      <param name="start">Start page from which the annotations will be selected.</param>
      <param name="end">End page to which the annotations will be selected.</param>
      <param name="annotTypes">The array of needed annotation types.</param>
      <returns>Annotations list.</returns>
      <example>
        <code lang="C#">
            PdfAnnotationEditor editor = new PdfAnnotationEditor();
            editor.BindPdf("example.pdf");
            string[] annotTypes = new string[] {"Text", "Highlight"};
            IList annotList = editor.ExtractAnnotations(1, 2 , annotTypes);
            </code>
      </example>
    </member>
    <member name="M:Aspose.Pdf.Facades.PdfAnnotationEditor.ExtractAnnotations(System.Int32,System.Int32,System.Enum[])">
      <summary>
            Gets the list of annotations of the specified types.
            </summary>
      <param name="start">Start page from which the annotations will be selected.</param>
      <param name="end">End page to which the annotations will be selected.</param>
      <param name="annotTypes">The array of needed annotation types.</param>
      <returns>Annotations list.</returns>
      <example>
        <code lang="C#">
            PdfAnnotationEditor editor = new PdfAnnotationEditor();
            editor.BindPdf("example.pdf");
            Enum[] annotTypes = new Enum[] {AnnotationType.Text, AnnotationType.Highlight};
            IList annotList = editor.ExtractAnnotations(1, 2 , annotTypes);
            </code>
      </example>
    </member>
    <member name="M:Aspose.Pdf.Facades.PdfAnnotationEditor.BindPdf(Aspose.Pdf.Generator.Pdf)">
      <summary> 
            Binds a Pdf document for editing.
            </summary>
      <param name="pdf">Pdf document which came from Aspose.Pdf.Generator.</param>
    </member>
    <member name="M:Aspose.Pdf.Facades.PdfAnnotationEditor.#ctor">
      <summary>
            Initializes new <see cref="T:Aspose.Pdf.Facades.PdfAnnotationEditor" /> object.
            </summary>
    </member>
    <member name="M:Aspose.Pdf.Facades.PdfAnnotationEditor.#ctor(Aspose.Pdf.Document)">
      <summary>
            Initializes new <see cref="T:Aspose.Pdf.Facades.PdfAnnotationEditor" /> object on base of the <paramref name="document" />.
            </summary>
      <param name="document">
            Pdf document.
            </param>
    </member>
    <member name="M:Aspose.Pdf.Facades.PdfAnnotationEditor.ModifyAnnotations(System.Int32,System.Int32,Aspose.Pdf.InteractiveFeatures.Annotations.Annotation)">
      <summary>
            Modifies the annotations of the specifed type on the specified page range.
            It supports to modify next annotation properties: Modified, Title, Contents, Color, Subject and Open.
            </summary>
      <param name="start">The start page number.</param>
      <param name="end">The end page number.</param>
      <param name="annotation">The annotation object contains new properties.</param>
      <example>
        <code lang="C#">
            PdfAnnotationEditor editor = new PdfAnnotationEditor();
            editor.BindPdf("example.pdf");
            TextAnnotation annot = new TextAnnotation();
            annot.Modified = DateTime.Now;
            annot.Title = "NEW AUTHOR";
            annot.Contents = "NEW CONTENTS";
            annot.Color = Color.Red;
            annot.Subject = "NEW SUBJECT";
            annot.Open = true;
            editor.ModifyAnnotations(1, 2, annot);
            editor.Save("example_out.pdf");
            </code>
      </example>
    </member>
    <member name="T:Aspose.Pdf.Facades.PdfBookmarkEditor">
      <summary>
            Represents a class to work with PDF file's bookmarks including create, modify, export, import and delete.    
            </summary>
    </member>
    <member name="M:Aspose.Pdf.Facades.PdfBookmarkEditor.CreateBookmarks">
      <summary>
            Creates bookmarks for all pages.
            </summary>
      <example>
        <code lang="C#">
            PdfBookmarkEditor editor = new PdfBookmarkEditor();
            editor.BindPdf("example.pdf");
            editor.CreateBookmarks();
            editor.Save("example_out.pdf");
            </code>
      </example>
    </member>
    <member name="M:Aspose.Pdf.Facades.PdfBookmarkEditor.CreateBookmarkOfPage(System.String,System.Int32)">
      <summary>
            Creates bookmark for the specified page.
            </summary>
      <param name="bookmarkName">The specified bookmark name.</param>
      <param name="pageNumber">The specified desination page.</param>
      <example>
        <code lang="C#">
            PdfBookmarkEditor editor = new PdfBookmarkEditor();
            editor.BindPdf("example.pdf");
            editor.CreateBookmarkOfPage("bookmark for page 1", 1);
            editor.Save("example_out.pdf");
            </code>
      </example>
    </member>
    <member name="M:Aspose.Pdf.Facades.PdfBookmarkEditor.CreateBookmarks(Aspose.Pdf.Facades.Bookmark)">
      <summary>
            Creates the specified bookmark in the document. The method can be used for forming nested bookmarks hierarchy.
            </summary>
      <param name="bookmark">The bookmark will be added to the document.</param>
      <example>
        <code lang="C#">
            PdfBookmarkEditor editor = new PdfBookmarkEditor();
            editor.BindPdf("example.pdf");
            Bookmark bm1=new Bookmark();
            bm1.PageNumber=1;
            bm1.Title="First child";
            Bookmark bm2=new Bookmark();
            bm2.PageNumber=2;
            bm2.Title="Second child";
            Bookmark bm=new Bookmark();
            bm.Action="GoTo";
            bm.PageNumber=1;
            bm.Title="Parent";
            Bookmarks bms=new Bookmarks();
            bms.Add(bm1);
            bms.Add(bm2);
            bm.ChildItem=bms;
            editor.CreateBookmarks(bm);
            editor.Save("example_out.pdf");
            </code>
      </example>
    </member>
    <member name="M:Aspose.Pdf.Facades.PdfBookmarkEditor.CreateBookmarks(System.Drawing.Color,System.Boolean,System.Boolean)">
      <summary>
            Create bookmarks for all pages with specified color and style (bold, italic).
            </summary>
      <param name="color">The color of title.</param>
      <param name="boldFlag">The flag of bold attribution.</param>
      <param name="italicFlag">The flag of italic attribution.</param>
      <example>
        <code lang="C#">
            PdfBookmarkEditor editor = new PdfBookmarkEditor();
            editor.BindPdf("example.pdf");
            editor.CreateBookmarks(System.Drawing.Color.Red, true, true);
            editor.Save("example_out.pdf");
            </code>
      </example>
    </member>
    <member name="M:Aspose.Pdf.Facades.PdfBookmarkEditor.CreateBookmarkOfPage(System.String[],System.Int32[])">
      <summary>
            Creates bookmarks for the specified pages.
            </summary>
      <param name="bookmarkName">Bookmarks title array.</param>
      <param name="pageNumber">Bookmarks desination page array.</param>
      <example>
        <code lang="C#">
            PdfBookmarkEditor editor = new PdfBookmarkEditor();
            editor.BindPdf("example.pdf");
            editor.CreateBookmarkOfPage("bookmark for page 1", 1);
            editor.Save("example_out.pdf");
            </code>
      </example>
    </member>
    <member name="M:Aspose.Pdf.Facades.PdfBookmarkEditor.DeleteBookmarks">
      <summary>
            Deletes all bookmarks of the PDF document.
            </summary>
      <example>
        <code lang="C#">
            PdfBookmarkEditor editor = new PdfBookmarkEditor();
            editor.BindPdf("example.pdf");
            editor.DeleteBookmarks();
            editor.Save("example_out.pdf");
            </code>
      </example>
    </member>
    <member name="M:Aspose.Pdf.Facades.PdfBookmarkEditor.DeleteBookmarks(System.String)">
      <summary>
            Deletes the bookmark of the PDF document.
            </summary>
      <param name="title">The title of bookmark deleted.</param>
      <example>
        <code lang="C#">
            PdfBookmarkEditor editor = new PdfBookmarkEditor();
            editor.BindPdf("example.pdf");
            editor.DeleteBookmarks("existing bookmark title");
            editor.Save("example_out.pdf");
            </code>
      </example>
    </member>
    <member name="M:Aspose.Pdf.Facades.PdfBookmarkEditor.ModifyBookmarks(System.String,System.String)">
      <summary>
            Modifys bookmark title according to the specified bookmark title.
            </summary>
      <param name="sTitle">Source bookmark title.</param>
      <param name="dTitle">Modified bookmark title.</param>
      <example>
        <code lang="C#">
            PdfBookmarkEditor editor = new PdfBookmarkEditor();
            editor.BindPdf("example.pdf");
            editor.ModifyBookmarks("existing bookmark title", "new bookmark title");
            editor.Save("example_out.pdf");
            </code>
      </example>
    </member>
    <member name="M:Aspose.Pdf.Facades.PdfBookmarkEditor.ExtractBookmarks">
      <summary>
            Extracts bookmarks of all levels from the document.
            </summary>
      <returns>The bookmarks collection of all bookmarks that exist in the document.</returns>
      <example>
        <code lang="C#">
            PdfBookmarkEditor editor = new PdfBookmarkEditor();
            editor.BindPdf("example.pdf");
            Bookmarks bms = editor.ExtractBookmarks();
            foreach(Bookmark bm in bms)
                Console.WriteLine(bm.Title);
            </code>
      </example>
    </member>
    <member name="M:Aspose.Pdf.Facades.PdfBookmarkEditor.ExtractBookmarks(System.String)">
      <summary>
            Extracts the bookmarks with the specified title.
            </summary>
      <param name="title">Extracted item title.</param>
      <returns>Bookmark collection has items with the same title.</returns>
      <example>
        <code lang="C#">
            PdfBookmarkEditor editor = new PdfBookmarkEditor();
            editor.BindPdf("example.pdf");
            Bookmarks bms = editor.ExtractBookmarks("Title");
            foreach(Bookmark bm in bms)
                Console.WriteLine(bm.Title);
            </code>
      </example>
    </member>
    <member name="M:Aspose.Pdf.Facades.PdfBookmarkEditor.ExtractBookmarks(Aspose.Pdf.Facades.Bookmark)">
      <summary>
            Extracts the children of a bookmark with a title like in specified bookamrk.
            </summary>
      <param name="bookmark">The specified bookamrk.</param>
      <returns>Bookmark collection with child bookmarks.</returns>
      <example>
        <code lang="C#">
            PdfBookmarkEditor editor = new PdfBookmarkEditor();
            editor.BindPdf("example.pdf");
            Bookmark bookmark = new Bookmark();
            bookmark.Title = "Title";
            Bookmarks bms = editor.ExtractBookmarks(bookmark);
            foreach(Bookmark bm in bms)
                Console.WriteLine(bm.Title);
            </code>
      </example>
    </member>
    <member name="M:Aspose.Pdf.Facades.PdfBookmarkEditor.ExtractBookmarksToHTML(System.String,System.String)">
      <summary>
            Exports bookmarks to HTML file.
            </summary>
      <param name="pdfFile">The PDF file which bookmarks will be exported.</param>
      <param name="cssFile">The CSS file to display HTML file, can be null.</param>
      <example>
        <code lang="C#">
            PdfBookmarkEditor editor = new PdfBookmarkEditor();
            editor.ExtractBookmarksToHTML("example.pdf", null);
            </code>
      </example>
    </member>
    <member name="M:Aspose.Pdf.Facades.PdfBookmarkEditor.ExportBookmarksToXML(System.String)">
      <summary>
            Exports bookmarks to XML file.
            </summary>
      <param name="xmlFile">The output XML file.</param>
      <example>
        <code lang="C#">
            PdfBookmarkEditor editor = new PdfBookmarkEditor();
            editor.BindPdf("example.pdf");
            editor.ExportBookmarksToXML("bookmarks.xml");
            </code>
      </example>
    </member>
    <member name="M:Aspose.Pdf.Facades.PdfBookmarkEditor.ImportBookmarksWithXML(System.String)">
      <summary>
            Imports bookmarks to the document from XML file.
            </summary>
      <param name="xmlFile">The XML file containing bookmarks list.</param>
      <example>
        <code lang="C#">
            PdfBookmarkEditor editor = new PdfBookmarkEditor();
            editor.BindPdf("example.pdf");
            editor.ImportBookmarksWithXML("bookmarks.xml");
            editor.Save("example_out.pdf");
            </code>
      </example>
    </member>
    <member name="M:Aspose.Pdf.Facades.PdfBookmarkEditor.BindPdf(Aspose.Pdf.Generator.Pdf)">
      <summary> 
            Binds a Pdf document for editing.
            </summary>
      <param name="pdf">Pdf document which came from Aspose.Pdf.Generator.</param>
    </member>
    <member name="M:Aspose.Pdf.Facades.PdfBookmarkEditor.#ctor">
      <summary>
            Initializes new <see cref="T:Aspose.Pdf.Facades.PdfBookmarkEditor" /> object.
            </summary>
    </member>
    <member name="M:Aspose.Pdf.Facades.PdfBookmarkEditor.#ctor(Aspose.Pdf.Document)">
      <summary>
            Initializes new <see cref="T:Aspose.Pdf.Facades.PdfBookmarkEditor" /> object on base of the <paramref name="document" />.
            </summary>
      <param name="document">
            Pdf document.
            </param>
    </member>
    <member name="M:Aspose.Pdf.Facades.PdfBookmarkEditor.ExportBookmarksToHtml(System.String,System.String)">
      <summary>
            Exports bookmarks to HTML file.
            </summary>
      <param name="inPdfFile">Input PDF file which bookmarks will be exported.</param>
      <param name="outHtmlFile">Output HTML file</param>
      <example>
        <code lang="C#">
            PdfBookmarkEditor.ExtractBookmarksToHTML("example.pdf", "bookmarks.html");
            </code>
      </example>
    </member>
    <member name="T:Aspose.Pdf.Facades.PdfContentEditor">
      <summary>
            Represents a class to edit PDF file's content.
            </summary>
    </member>
    <member name="F:Aspose.Pdf.Facades.PdfContentEditor.DocumentOpen">
      <summary>
            A document event type. Opens a document.
            </summary>
    </member>
    <member name="F:Aspose.Pdf.Facades.PdfContentEditor.DocumentClose">
      <summary>
            A document event type. Closes a document.
            </summary>
    </member>
    <member name="F:Aspose.Pdf.Facades.PdfContentEditor.DocumentWillSave">
      <summary>
            A document event type. Excute a action before saving.
            </summary>
    </member>
    <member name="F:Aspose.Pdf.Facades.PdfContentEditor.DocumentSaved">
      <summary>
            A document event type. Excute a action after saving.
            </summary>
    </member>
    <member name="F:Aspose.Pdf.Facades.PdfContentEditor.DocumentWillPrint">
      <summary>
            A document event type. Excute a action before printing.
            </summary>
    </member>
    <member name="F:Aspose.Pdf.Facades.PdfContentEditor.DocumentPrinted">
      <summary>
            A document event type. Excute a action after printing.
            </summary>
    </member>
    <member name="M:Aspose.Pdf.Facades.PdfContentEditor.BindPdf(System.String)">
      <summary> 
            Binds a PDF file for editing.
            </summary>
      <param name="inputFile">A PDF file to be edited.</param>
    </member>
    <member name="M:Aspose.Pdf.Facades.PdfContentEditor.BindPdf(System.IO.Stream)">
      <summary> 
            Binds a PDF stream for editing.
            </summary>
      <param name="inputStream">A PDF stream to be edited.</param>
    </member>
    <member name="M:Aspose.Pdf.Facades.PdfContentEditor.ExtractLink">
      <summary>
            Extracts the collection of Link instances contained in PDF document.
            </summary>
      <example>
        <code lang="C#">
            PdfContentEditor editor = new PdfContentEditor();
            editor.BindPdf("example.pdf");
            IList links = editor.ExtractLink();
            foreach (object obj in links)
            {
                Link link = (Link)obj;
                // work with Link instance
            }
            </code>
      </example>
      <returns>The collection of Link objects</returns>
    </member>
    <member name="M:Aspose.Pdf.Facades.PdfContentEditor.CreateWebLink(System.Drawing.Rectangle,System.String,System.Int32,System.Drawing.Color,System.Enum[])">
      <summary>
            Creates a web link in PDF document.
            </summary>
      <param name="rect">The rectangle for active click.</param>
      <param name="url">The web link destination.</param>
      <param name="originalPage">The number of original page on which rectangle bound with web link will be created.</param>
      <param name="clr">The colour of rectangle for active click.</param>
      <param name="actionName">The array of actions (members of PredefinedAction enum) corresponding to executing menu items in Acrobat viewer.</param>
      <example>
        <code lang="C#">
            PdfContentEditor editor = new PdfContentEditor();
            editor.BindPdf("example.pdf");
            editor.CreateWebLink(new System.Drawing.Rectangle(0, 0, 100, 100),
                "http://www.aspose.com", 1, System.Drawing.Color.Red,
                new Enum[] { PredefinedAction.FirstPage, PredefinedAction.PrintDialog });
            editor.Save("example_out.pdf");
            </code>
      </example>
    </member>
    <member name="M:Aspose.Pdf.Facades.PdfContentEditor.CreateWebLink(System.Drawing.Rectangle,System.String,System.Int32,System.Drawing.Color)">
      <summary>
            Creates a web link in PDF document.
            </summary>
      <param name="rect">The rectangle for active click.</param>
      <param name="url">The web link destination.</param>
      <param name="originalPage">The number of original page where rectangle bound with web link will be created.</param>
      <param name="clr">The colour of rectangle for active click.</param>
      <example>
        <code lang="C#">
            PdfContentEditor editor = new PdfContentEditor();
            editor.BindPdf("example.pdf");
            editor.CreateWebLink(new System.Drawing.Rectangle(0, 0, 100, 100),
                "http://www.aspose.com", 1, System.Drawing.Color.Red });
            editor.Save("example_out.pdf");
            </code>
      </example>
    </member>
    <member name="M:Aspose.Pdf.Facades.PdfContentEditor.CreateWebLink(System.Drawing.Rectangle,System.String,System.Int32)">
      <summary>
            Creates a web link in PDF document.
            </summary>
      <param name="rect">The rectangle for active click.</param>
      <param name="url">The web link destination.</param>
      <param name="originalPage">The number of original page where rectangle bound with web link will be created.</param>
      <example>
        <code lang="C#">
            PdfContentEditor editor = new PdfContentEditor();
            editor.BindPdf("example.pdf");
            editor.CreateWebLink(new System.Drawing.Rectangle(0, 0, 100, 100), "http://www.aspose.com", 1 });
            editor.Save("example_out.pdf");
            </code>
      </example>
    </member>
    <member name="M:Aspose.Pdf.Facades.PdfContentEditor.CreateLocalLink(System.Drawing.Rectangle,System.Int32,System.Int32,System.Drawing.Color,System.Enum[])">
      <summary>
            Creates a local link in PDF document.
            </summary>
      <param name="rect">The rectangle for active click.</param>
      <param name="desPage">The destination page.</param>
      <param name="originalPage">The number of original page where rectangle bound with local link will be created.</param>
      <param name="clr">The colour of rectangle for active click.</param>
      <param name="actionName">The array of actions (members of PredefinedAction enum) corresponding to executing menu items in Acrobat viewer.</param>
      <example>
        <code lang="C#">
            PdfContentEditor editor = new PdfContentEditor();
            editor.BindPdf("example.pdf");
            editor.CreateLocalLink(new System.Drawing.Rectangle(0, 0, 100, 100),
                2, 1, System.Drawing.Color.Red,
                new Enum[] { PredefinedAction.FirstPage, PredefinedAction.PrintDialog });
            editor.Save("example_out.pdf");
            </code>
      </example>
    </member>
    <member name="M:Aspose.Pdf.Facades.PdfContentEditor.CreateLocalLink(System.Drawing.Rectangle,System.Int32,System.Int32,System.Drawing.Color)">
      <summary>
            Creates a local link in PDF document.
            </summary>
      <param name="rect">The rectangle for active click.</param>
      <param name="desPage">The destination page.</param>
      <param name="originalPage">The number of original page where rectangle bound with local link will be created.</param>
      <param name="clr">The colour of rectangle for active click.</param>
      <example>
        <code lang="C#">
            PdfContentEditor editor = new PdfContentEditor();
            editor.BindPdf("example.pdf");
            editor.CreateLocalLink(new System.Drawing.Rectangle(0, 0, 100, 100),
                2, 1, System.Drawing.Color.Red });
            editor.Save("example_out.pdf");
            </code>
      </example>
    </member>
    <member name="M:Aspose.Pdf.Facades.PdfContentEditor.CreatePdfDocumentLink(System.Drawing.Rectangle,System.String,System.Int32,System.Int32,System.Drawing.Color,System.Enum[])">
      <summary>
            Creates a link to another PDF document page.
            </summary>
      <param name="rect">The rectangle for active click.</param>
      <param name="remotePdf">The PDF document which page will be opened.</param>
      <param name="originalPage">The number of original page where rectangle bound with link will be created.</param>
      <param name="destinationPage">The destination page.</param>
      <param name="clr">The colour of rectangle for active click.</param>
      <param name="actionName">The array of actions (members of PredefinedAction enum) corresponding to executing menu items in Acrobat viewer.</param>
      <example>
        <code lang="C#">
            PdfContentEditor editor = new PdfContentEditor();
            editor.BindPdf("example.pdf");
            editor.CreatePdfDocumentLink(new System.Drawing.Rectangle(0, 0, 100, 100),
                "another_example.pdf", 1, 1, System.Drawing.Color.Red,
                new Enum[] { PredefinedAction.FirstPage, PredefinedAction.PrintDialog });
            editor.Save("example_out.pdf");
            </code>
      </example>
    </member>
    <member name="M:Aspose.Pdf.Facades.PdfContentEditor.CreatePdfDocumentLink(System.Drawing.Rectangle,System.String,System.Int32,System.Int32,System.Drawing.Color)">
      <summary>
            Creates a link to another PDF document page.
            </summary>
      <param name="rect">The rectangle for active click.</param>
      <param name="remotePdf">The PDF document which page will be opened.</param>
      <param name="originalPage">The number of original page where rectangle bound with link will be created.</param>
      <param name="destinationPage">The destination page.</param>
      <param name="clr">The colour of rectangle for active click.</param>
      <example>
        <code lang="C#">
            PdfContentEditor editor = new PdfContentEditor();
            editor.BindPdf("example.pdf");
            editor.CreatePdfDocumentLink(new System.Drawing.Rectangle(0, 0, 100, 100),
                "another_example.pdf", 1, 1, System.Drawing.Color.Red });
            editor.Save("example_out.pdf");
            </code>
      </example>
    </member>
    <member name="M:Aspose.Pdf.Facades.PdfContentEditor.CreatePdfDocumentLink(System.Drawing.Rectangle,System.String,System.Int32,System.Int32)">
      <summary>
            Creates a link to another PDF document page.
            </summary>
      <param name="rect">The rectangle for active click.</param>
      <param name="remotePdf">The PDF document which page will be opened.</param>
      <param name="originalPage">The number of original page where rectangle bound with link will be created.</param>
      <param name="destinationPage">The destination page.</param>
      <example>
        <code lang="C#">
            PdfContentEditor editor = new PdfContentEditor();
            editor.BindPdf("example.pdf");
            editor.CreatePdfDocumentLink(new System.Drawing.Rectangle(0, 0, 100, 100), "another_example.pdf", 1, 1 });
            editor.Save("example_out.pdf");
            </code>
      </example>
    </member>
    <member name="M:Aspose.Pdf.Facades.PdfContentEditor.CreateCustomActionLink(System.Drawing.Rectangle,System.Int32,System.Drawing.Color,System.Enum[])">
      <summary>
            Creates a link to custom actions in PDF document.
            </summary>
      <param name="rect">The rectangle for active click.</param>
      <param name="originalPage">The number of original page where rectangle bound with link will be created.</param>
      <param name="color">The colour of rectangle for active click.</param>
      <param name="actionName">The array of actions (members of PredefinedAction enum) corresponding to executing menu items in Acrobat viewer.</param>/// 
            <example><code lang="C#">
            PdfContentEditor editor = new PdfContentEditor();
            editor.BindPdf("example.pdf");
            editor.CreateCustomActionLink(new System.Drawing.Rectangle(0, 0, 100, 100),
                1, System.Drawing.Color.Red,
                new Enum[] { PredefinedAction.FirstPage, PredefinedAction.PrintDialog });
            editor.Save("example_out.pdf");
            </code></example></member>
    <member name="M:Aspose.Pdf.Facades.PdfContentEditor.CreateApplicationLink(System.Drawing.Rectangle,System.String,System.Int32,System.Drawing.Color,System.Enum[])">
      <summary>
            Creates a link to launch an application in PDF document.
            </summary>
      <param name="rect">The rectangle for active click.</param>
      <param name="application">The path of application to be launched.</param>
      <param name="page">The number of original page where rectangle bound with link will be created.</param>
      <param name="clr">The colour of rectangle for active click.</param>
      <param name="actionName">The array of actions (members of PredefinedAction enum) corresponding to executing menu items in Acrobat viewer.</param>/// 
            <example><code lang="C#">
            PdfContentEditor editor = new PdfContentEditor();
            editor.BindPdf("example.pdf");
            editor.CreateApplicationLink(new System.Drawing.Rectangle(0, 0, 100, 100),
                "explorer", 1, System.Drawing.Color.Red,
                new Enum[] { PredefinedAction.FirstPage, PredefinedAction.PrintDialog });
            editor.Save("example_out.pdf");
            </code></example></member>
    <member name="M:Aspose.Pdf.Facades.PdfContentEditor.CreateApplicationLink(System.Drawing.Rectangle,System.String,System.Int32,System.Drawing.Color)">
      <summary>
            Creates a link to launch an application in PDF document.
            </summary>
      <param name="rect">The rectangle for active click.</param>
      <param name="application">The path of application to be launched.</param>
      <param name="page">The number of original page where rectangle bound with link will be created.</param>
      <param name="clr">The colour of rectangle for active click.</param>
      <example>
        <code lang="C#">
            PdfContentEditor editor = new PdfContentEditor();
            editor.BindPdf("example.pdf");
            editor.CreateApplicationLink(new System.Drawing.Rectangle(0, 0, 100, 100),
                "explorer", 1, System.Drawing.Color.Red });
            editor.Save("example_out.pdf");
            </code>
      </example>
    </member>
    <member name="M:Aspose.Pdf.Facades.PdfContentEditor.CreateApplicationLink(System.Drawing.Rectangle,System.String,System.Int32)">
      <summary>
            Creates a link to launch an application in PDF document.
            </summary>
      <param name="rect">The rectangle for active click.</param>
      <param name="application">The path of application to be launched.</param>
      <param name="page">The number of original page where rectangle bound with link will be created.</param>
      <example>
        <code lang="C#">
            PdfContentEditor editor = new PdfContentEditor();
            editor.BindPdf("example.pdf");
            editor.CreateApplicationLink(new System.Drawing.Rectangle(0, 0, 100, 100), "explorer", 1 });
            editor.Save("example_out.pdf");
            </code>
      </example>
    </member>
    <member name="M:Aspose.Pdf.Facades.PdfContentEditor.CreateJavaScriptLink(System.String,System.Drawing.Rectangle,System.Int32,System.Drawing.Color)">
      <summary>
            Creates a link to JavaScript in PDF document.
            </summary>
      <param name="code">The JavaScript code.</param>
      <param name="rect">The rectangle for active click.</param>
      <param name="originalPage">The number of original page where rectangle bound with link will be created.</param>
      <param name="color">The colour of rectangle for active click.</param>
      <example>
        <code lang="C#">
            PdfContentEditor editor = new PdfContentEditor();
            editor.BindPdf("example.pdf");
            editor.CreateJavaScriptLink("app.alert('welcome to aspose!');",
                new System.Drawing.Rectangle(0, 0, 100, 100), 1, System.Drawing.Color.Red });
            editor.Save("example_out.pdf");
            </code>
      </example>
    </member>
    <member name="M:Aspose.Pdf.Facades.PdfContentEditor.CreateText(System.Drawing.Rectangle,System.String,System.String,System.Boolean,System.String,System.Int32)">
      <summary>
            Creates text annotation in PDF document
            </summary>
      <param name="rect">The annotation rectangle defining the location of the annotation on the page.</param>
      <param name="title">The title of the annotation.</param>
      <param name="contents">The contents of the annotation.</param>
      <param name="open">A flag specifying whether the annotation should initially be displayed open.</param>
      <param name="icon">The name of an icon will be used in displaying the annotation. 
            This value can be: "Comment", "Key", "Note", "Help", "NewParagraph", "Paragraph", "Insert"</param>
      <param name="page">The number of original page where the text annotation will be created.</param>
      <example>
        <code lang="C#">
            PdfContentEditor editor = new PdfContentEditor();
            editor.BindPdf("example.pdf");
            editor.CreateText(new System.Drawing.Rectangle(0, 0, 100, 100),
                "Welcome to Aspose", "You are welcome to Aspose!", true, "Key", 1);
            editor.Save("example_out.pdf");
            </code>
      </example>
    </member>
    <member name="M:Aspose.Pdf.Facades.PdfContentEditor.CreateFreeText(System.Drawing.Rectangle,System.String,System.Int32)">
      <summary>
            Creates free text annotation in PDF document
            </summary>
      <param name="rect">The annotation rectangle defining the location of the annotation on the page.</param>
      <param name="contents">The contents of the annotation.</param>
      <param name="page">The number of original page where the text annotation will be created.</param>
      <example>
        <code lang="C#">
            PdfContentEditor editor = new PdfContentEditor();
            editor.BindPdf("example.pdf");
            editor.CreateFreeText(new System.Drawing.Rectangle(0, 0, 100, 100), "Welcome to Aspose", 1);
            editor.Save("example_out.pdf");
            </code>
      </example>
    </member>
    <member name="M:Aspose.Pdf.Facades.PdfContentEditor.CreateMarkup(System.Drawing.Rectangle,System.String,System.Int32,System.Int32,System.Drawing.Color)">
      <summary>
            Creates markup annotation it PDF document.
            </summary>
      <param name="rect">The rectangle defining the location of the annotation on the page.</param>
      <param name="contents">The contents of the annotation.</param>
      <param name="type">The type of markup annotation. Can be 0 (Highlight), 1 (Underline), 2 (StrikeOut), 3 (Squiggly).</param>
      <param name="page">The number of original page where the annotation will be created.</param>
      <param name="clr">The color of markup.</param>
      <example>
        <code lang="C#">
            PdfContentEditor editor = new PdfContentEditor();
            editor.BindPdf("example.pdf");
            editor.CreateMarkup(new System.Drawing.Rectangle(0, 0, 100, 100),
                "Welcome to Aspose", 0, 1, System.Drawing.Color.Red);
            editor.Save("example_out.pdf");
            </code>
      </example>
    </member>
    <member name="M:Aspose.Pdf.Facades.PdfContentEditor.CreatePopup(System.Drawing.Rectangle,System.String,System.Boolean,System.Int32)">
      <summary>
            Creates popup annotation in PDF document.
            </summary>
      <param name="rect">The annotation rectangle defining the location of the annotation on the page.</param>
      <param name="contents">The contents of the annotation.</param>
      <param name="open">A flag specifying whether the pop-up annotation should initially be displayed open.</param>
      <param name="page">The number of original page where the annotation will be created.</param>
      <example>
        <code lang="C#">
            PdfContentEditor editor = new PdfContentEditor();
            editor.BindPdf("example.pdf");
            editor.CreatePopup(new System.Drawing.Rectangle(0, 0, 100, 100), "Welcome to Aspose", true, 1);
            editor.Save("example_out.pdf");
            </code>
      </example>
    </member>
    <member name="M:Aspose.Pdf.Facades.PdfContentEditor.CreateFileAttachment(System.Drawing.Rectangle,System.String,System.String,System.Int32,System.String)">
      <summary>
            Creates file attachment annotation.
            </summary>
      <param name="rect">The annotation rectangle defining the location of the annotation on the page.</param>
      <param name="contents">The contents of the annotation.</param>
      <param name="filePath">The path of the file will be attached.</param>
      <param name="page">The number of original page where the annotation will be created.</param>
      <param name="name">The name of an icon will be used in displaying the annotation.
            This value can be: "Graph", "PushPin", "Paperclip", "Tag".</param>
      <example>
        <code lang="C#">
            PdfContentEditor editor = new PdfContentEditor();
            editor.BindPdf("example.pdf");
            editor.CreateFileAttachment(new System.Drawing.Rectangle(0, 0, 100, 100),
                "Welcome to Aspose", "attachment_file.pdf", 1, "Graph");
            editor.Save("example_out.pdf");
            </code>
      </example>
    </member>
    <member name="M:Aspose.Pdf.Facades.PdfContentEditor.CreateFileAttachment(System.Drawing.Rectangle,System.String,System.String,System.Int32,System.String,System.Double)">
      <summary>
            Creates file attachment annotation.
            </summary>
      <param name="rect">The annotation rectangle defining the location of the annotation on the page.</param>
      <param name="contents">The contents of the annotation.</param>
      <param name="filePath">The path of the file will be attached.</param>
      <param name="page">The number of original page where the annotation will be created.</param>
      <param name="name">The name of an icon will be used in displaying the annotation.
            This value can be: "Graph", "PushPin", "Paperclip", "Tag".</param>
      <param name="opacity">Icon's opacity from 0 to 1: 0 - completely transparant, 1 - completely opaque.</param>
      <example>
        <code lang="C#">
            PdfContentEditor editor = new PdfContentEditor();
            editor.BindPdf("example.pdf");
            editor.CreateFileAttachment(new System.Drawing.Rectangle(0, 0, 100, 100),
                "Welcome to Aspose", "attachment_file.pdf", 1, "Graph", 0.5);
            editor.Save("example_out.pdf");
            </code>
      </example>
    </member>
    <member name="M:Aspose.Pdf.Facades.PdfContentEditor.CreateFileAttachment(System.Drawing.Rectangle,System.String,System.IO.Stream,System.String,System.Int32,System.String)">
      <summary>
            Creates file attachment annotation.
            </summary>
      <param name="rect">The annotation rectangle defining the location of the annotation on the page.</param>
      <param name="contents">The contents of the annotation.</param>
      <param name="attachmentStream">The attachment file stream.</param>
      <param name="attachmentName">The attachment name.</param>
      <param name="page">The number of original page where the annotation will be created.</param>
      <param name="name">The name of an icon will be used in displaying the annotation.
            This value can be: "Graph", "PushPin", "Paperclip", "Tag".</param>
      <example>
        <code lang="C#">
            PdfContentEditor editor = new PdfContentEditor();
            editor.BindPdf("example.pdf");
            using(System.IO.FileStream attStream = System.IO.File.OpenRead("attachment_file.pdf"))
            {
                editor.CreateFileAttachment(new System.Drawing.Rectangle(0, 0, 100, 100),
                    "Welcome to Aspose", attStream, "attachment_file.pdf", 1, "Graph");
                editor.Save("example_out.pdf");
            }
            </code>
      </example>
    </member>
    <member name="M:Aspose.Pdf.Facades.PdfContentEditor.CreateFileAttachment(System.Drawing.Rectangle,System.String,System.IO.Stream,System.String,System.Int32,System.String,System.Double)">
      <summary>
            Creates file attachment annotation.
            </summary>
      <param name="rect">The annotation rectangle defining the location of the annotation on the page.</param>
      <param name="contents">The contents of the annotation.</param>
      <param name="attachmentStream">The attachment file stream.</param>
      <param name="attachmentName">The attachment name.</param>
      <param name="page">The number of original page where the annotation will be created.</param>
      <param name="name">The name of an icon will be used in displaying the annotation.
            This value can be: "Graph", "PushPin", "Paperclip", "Tag".</param>
      <param name="opacity">Icon's opacity from 0 to 1: 0 - completely transparant, 1 - completely opaque.</param>
      <example>
        <code lang="C#">
            PdfContentEditor editor = new PdfContentEditor();
            editor.BindPdf("example.pdf");
            using(System.IO.FileStream attStream = System.IO.File.OpenRead("attachment_file.pdf"))
            {
                editor.CreateFileAttachment(new System.Drawing.Rectangle(0, 0, 100, 100),
                    "Welcome to Aspose", attStream, "attachment_file.pdf", 1, "Graph", 0.5);
                editor.Save("example_out.pdf");
            }
            </code>
      </example>
    </member>
    <member name="M:Aspose.Pdf.Facades.PdfContentEditor.AddDocumentAttachment(System.String,System.String)">
      <summary>
            Adds document attachment with no annotation.
            </summary>
      <param name="fileAttachmentPath">The path of the file will be attached.</param>
      <param name="description">The description information.</param>
      <example>
        <code lang="C#">
            PdfContentEditor editor = new PdfContentEditor();
            editor.BindPdf("example.pdf");
            editor.AddDocumentAttachment("attachment_file.pdf", "description of attachment_file");
            editor.Save("example_out.pdf");
            </code>
      </example>
    </member>
    <member name="M:Aspose.Pdf.Facades.PdfContentEditor.AddDocumentAttachment(System.IO.Stream,System.String,System.String)">
      <summary>
            Adds document attachment with no annotation.
            </summary>
      <param name="fileAttachmentStream">The stream of the file will be attached.</param>
      <param name="fileAttachmentName">The attachment name.</param>
      <param name="description">The description information.</param>
      <example>
        <code lang="C#">
            PdfContentEditor editor = new PdfContentEditor();
            editor.BindPdf("example.pdf");
            using(System.IO.FileStream attStream = System.IO.File.OpenRead("attachment_file.pdf"))
            {
                editor.AddDocumentAttachment(attStream, "attachment_file.pdf", "description of attachment_file");
                editor.Save("example_out.pdf");
            }    
            </code>
      </example>
    </member>
    <member name="M:Aspose.Pdf.Facades.PdfContentEditor.DeleteAttachments">
      <summary>
            Deletes all attachments in PDF document.
            </summary>
      <example>
        <code lang="C#">
            PdfContentEditor editor = new PdfContentEditor();
            editor.BindPdf("example.pdf");
            editor.DeleteAttachments();
            editor.Save("example_out.pdf");
            </code>
      </example>
    </member>
    <member name="M:Aspose.Pdf.Facades.PdfContentEditor.CreateLine(System.Drawing.Rectangle,System.String,System.Single,System.Single,System.Single,System.Single,System.Int32,System.Int32,System.Drawing.Color,System.String,System.Int32[],System.String[])">
      <summary>
            Creates line annotation.
            </summary>
      <param name="rect">The annotation rectangle defining the location of the annotation on the page.</param>
      <param name="contents">The contents of the annotation.</param>
      <param name="x1">The starting horizontal coordinate of the line.</param>
      <param name="y1">The starting vertical coordinate of the line.</param>
      <param name="x2">The ending horizontal coordinate of the line.</param>
      <param name="y2">The ending vertical coordinate of the line.</param>
      <param name="page">The number of original page where the annotation will be created.</param>
      <param name="border">The border width in points. If this value is 0 no border is drawn. Default value is 1.</param>
      <param name="clr">The color of line.</param>
      <param name="borderStyle">The border style specifying the width and dash pattern to be used in drawing the line.
            This value can be: "S" (Solid), "D" (Dashed), "B" (Beveled), "I" (Inset), "U" (Underline).</param>
      <param name="dashArray">A dash array defining a pattern of dashes and gaps to be used in drawing a dashed border.
            If it is used, borderSyle must be accordingly set to "D".</param>
      <param name="LEArray">An array of two values respectively specifying the beginning and ending style of the drawing line.
            The values can be: "Square", "Circle", "Diamond", "OpenArrow", "ClosedArrow", "None", "Butt", "ROpenArrow", "RClosedArrow", "Slash".</param>
      <example>
        <code lang="C#">
            PdfContentEditor editor = new PdfContentEditor();
            editor.BindPdf("example.pdf");
            editor.CreateLine(new System.Drawing.Rectangle(0, 0, 100, 100), "Welcome to Aspose", 0, 0, 100, 100,
                1, 1, System.Drawing.Color.Red, "D", new int[] {2, 3}, new string[] {"OpenArrow", "ClosedArrow"});
            editor.Save("example_out.pdf");
            </code>
      </example>
    </member>
    <member name="M:Aspose.Pdf.Facades.PdfContentEditor.CreateSquareCircle(System.Drawing.Rectangle,System.String,System.Drawing.Color,System.Boolean,System.Int32,System.Int32)">
      <summary>
            Creates square-circle annotation.
            </summary>
      <param name="rect">The annotation rectangle defining the location of the annotation on the page.</param>
      <param name="contents">The contents of the annotation.</param>
      <param name="clr">The colour of square or circle.</param>
      <param name="square">True (square), false (sircle).</param>
      <param name="page">The number of original page where the annotation will be created.</param>
      <param name="borderWidth">The border width of square or circle.</param>
      <example>
        <code lang="C#">
            PdfContentEditor editor = new PdfContentEditor();
            editor.BindPdf("example.pdf");
            editor.CreateSquareCircle(new System.Drawing.Rectangle(0, 0, 100, 100),
                "Welcome to Aspose", System.Drawing.Color.Red, false, 1, 5);
            editor.Save("example_out.pdf");
            </code>
      </example>
    </member>
    <member name="M:Aspose.Pdf.Facades.PdfContentEditor.DrawCurve(Aspose.Pdf.Facades.LineInfo,System.Int32,System.Drawing.Rectangle,System.String)">
      <summary>
            Creates curve annotation.
            </summary>
      <param name="lineInfo">The instance of LineInfo class.</param>
      <param name="page">The number of original page where the annotation will be created.</param>
      <param name="annotRect">The annotation rectangle defining the location of the annotation on the page.</param>
      <param name="annotContents">The contents of the annotation.</param>
      <example>
        <code lang="C#">
            PdfContentEditor editor = new PdfContentEditor();
            newApiEditor.BindPdf("example.pdf");
            LineInfo lineInfo = new LineInfo();
            lineInfo.VerticeCoordinate = new float[] { 0, 0, 100, 100 };  //x1, y1, x2, y2, .. xn, yn
            lineInfo.Visibility = true;
            editor.DrawCurve(lineInfo, 1, new System.Drawing.Rectangle(0, 0, 0, 0), "Welcome to Aspose");
            editor.Save("example_out.pdf");
            </code>
      </example>
    </member>
    <member name="M:Aspose.Pdf.Facades.PdfContentEditor.CreatePolygon(Aspose.Pdf.Facades.LineInfo,System.Int32,System.Drawing.Rectangle,System.String)">
      <summary>
            Creates polygon annotation.
            </summary>
      <param name="lineInfo">The instance of LineInfo class.</param>
      <param name="page">The number of original page where the annotation will be created.</param>
      <param name="annotRect">The annotation rectangle defining the location of the annotation on the page.</param>
      <param name="annotContents">The contents of the annotation.</param>
      <example>
        <code lang="C#"> 
            PdfContentEditor editor = new PdfContentEditor();
            editor.BindPdf("example.pdf");
            LineInfo lineInfo = new LineInfo();
            lineInfo.VerticeCoordinate = new float[] { 0, 0, 100, 100, 100, 50 };
            lineInfo.Visibility = true;
            editor.CreatePolygon(lineInfo, 1 , new System.Drawing.Rectangle(0, 0, 0, 0), "Welcome to Aspose");
            editor.Save("example_out.pdf");
            </code>
      </example>
    </member>
    <member name="M:Aspose.Pdf.Facades.PdfContentEditor.CreatePolyLine(Aspose.Pdf.Facades.LineInfo,System.Int32,System.Drawing.Rectangle,System.String)">
      <summary>
            Creates polyline annotation.
            </summary>
      <param name="lineInfo">The instance of LineInfo class.</param>
      <param name="page">The number of original page where the annotation will be created.</param>
      <param name="annotRect">The annotation rectangle defining the location of the annotation on the page.</param>
      <param name="annotContents">The contents of the annotation.</param>
      <example>
        <code lang="C#"> 
            PdfContentEditor editor = new PdfContentEditor();
            editor.BindPdf("example.pdf");
            LineInfo lineInfo = new LineInfo();
            lineInfo.VerticeCoordinate = new float[] { 0, 0, 100, 100, 100, 50 };
            lineInfo.Visibility = true;
            editor.CreatePolyLine(lineInfo, 1 , new System.Drawing.Rectangle(0, 0, 0, 0), "Welcome to Aspose");
            editor.Save("example_out.pdf");
            </code>
      </example>
    </member>
    <member name="M:Aspose.Pdf.Facades.PdfContentEditor.CreateCaret(System.Int32,System.Drawing.Rectangle,System.Drawing.Rectangle,System.String,System.String,System.Drawing.Color)">
      <summary>
            Creates caret annotation.
            </summary>
      <param name="page">The number of original page where the annotation will be created.</param>
      <param name="annotRect">The annotation rectangle defining the location of the annotation on the page.</param>
      <param name="caretRect">The actual boundaries of the underlying caret.</param>
      <param name="symbol">A symbol will be associated with the caret. Value can be: "P" (Paragraph), "None".</param>
      <param name="annotContents">The contents of the annotation.</param>
      <param name="color">The colour of the annotation.</param>
      <example>
        <code lang="C#">
            PdfContentEditor editor = new PdfContentEditor();
            editor.BindPdf("example.pdf");
            editor.CreateCaret(1,
                new System.Drawing.Rectangle(50, 50, 100, 100),
                new System.Drawing.Rectangle(60, 60, 70, 70),
                "None", "Welcome to Aspose", System.Drawing.Color.Red);
            editor.Save("example_out.pdf");
            </code>
      </example>
    </member>
    <member name="M:Aspose.Pdf.Facades.PdfContentEditor.CreateRubberStamp(System.Int32,System.Drawing.Rectangle,System.String,System.String,System.Drawing.Color)">
      <summary>
            Creates a rubber stamp annotation.
            </summary>
      <param name="page">The number of original page where the annotation will be created.</param>
      <param name="annotRect">The annotation rectangle defining the location of the annotation on the page.</param>
      <param name="icon">An icon is to be used in displaying the annotation. Default value: 'Draft'."</param>
      <param name="annotContents">The contents of the annotation.</param>
      <param name="color">The colour of the annotation.</param>
      <example>
        <code lang="C#">
            PdfContentEditor editor = new PdfContentEditor();
            editor.BindPdf("example.pdf");
            editor.CreateRubberStamp(1, System.Drawing.Rectangle(0, 0, 100, 100),
                "Welcome to Aspose", System.Drawing.Color.Red);
            editor.Save("example_out.pdf");
            </code>
      </example>
    </member>
    <member name="M:Aspose.Pdf.Facades.PdfContentEditor.CreateRubberStamp(System.Int32,System.Drawing.Rectangle,System.String,System.Drawing.Color,System.String)">
      <summary>
            Creates a rubber stamp annotation.
            </summary>
      <param name="page">The number of original page where the annotation will be created.</param>
      <param name="annotRect">The annotation rectangle defining the location of the annotation on the page.</param>
      <param name="annotContents">The contents of the annotation.</param>
      <param name="color">The colour of the annotation.</param>
      <param name="appearanceFile">The path of appearance file.</param>
      <example>
        <code lang="C#">
            PdfContentEditor editor = new PdfContentEditor();
            editor.BindPdf("example.pdf");
            editor.CreateRubberStamp(1, System.Drawing.Rectangle(0, 0, 100, 100),
                "Welcome to Aspose", System.Drawing.Color.Red, "appearance_file.pdf");
            editor.Save("example_out.pdf");
            </code>
      </example>
    </member>
    <member name="M:Aspose.Pdf.Facades.PdfContentEditor.CreateRubberStamp(System.Int32,System.Drawing.Rectangle,System.String,System.Drawing.Color,System.IO.Stream)">
      <summary>
            Creates a rubber stamp annotation.
            </summary>
      <param name="page">The number of original page where the annotation will be created.</param>
      <param name="annotRect">The annotation rectangle defining the location of the annotation on the page.</param>
      <param name="annotContents">The contents of the annotation.</param>
      <param name="color">The colour of the annotation.</param>
      <param name="appearanceStream">The stream of appearance file.</param>
      <example>
        <code lang="C#">
            PdfContentEditor editor = new PdfContentEditor();
            editor.BindPdf("example.pdf");
            using (System.IO.FileStream appStream = File.OpenRead("appearance_file.pdf"))
            {
                editor.CreateRubberStamp(1, System.Drawing.Rectangle(0, 0, 100, 100),
                    "Welcome to Aspose", System.Drawing.Color.Red, appStream);
                editor.Save("example_out.pdf");
            }    
            </code>
      </example>
    </member>
    <member name="M:Aspose.Pdf.Facades.PdfContentEditor.CreateBookmarksAction(System.String,System.Drawing.Color,System.Boolean,System.Boolean,System.String,System.String,System.String)">
      <summary>
            Creates a bookmark with the specified action.
            </summary>
      <param name="title">The title of the bookmark.</param>
      <param name="color">The colour of the bookmark's title.</param>
      <param name="boldFlag">The flag of bold attribution.</param>
      <param name="italicFlag">The flag of italic attribution.</param>
      <param name="file">Another file or application required when the action type is "GoToR" or "Launch".</param>
      <param name="actionType">The action type. The value can be: "GoToR", "Launch", "GoTo", "URI".</param>
      <param name="destination">The local destination or remote destination or URL.</param>
      <example>
        <code lang="C#">
            PdfContentEditor editor = new PdfContentEditor();
            editor.BindPdf("example.pdf");
            editor.CreateBookmarksAction("bookmark title",
                System.Drawing.Color.Red, true, true, null, "GoTo", 1/*page number*/);
            editor.Save("example_out.pdf");
            </code>
      </example>
    </member>
    <member name="M:Aspose.Pdf.Facades.PdfContentEditor.AddDocumentAdditionalAction(System.String,System.String)">
      <summary>
            Adds additional action for document event.
            </summary>
      <param name="eventType">The document event types.</param>
      <param name="code">The code of JavaScript.</param>
      <example>
        <code lang="C#">
            PdfContentEditor editor = new PdfContentEditor();
            editor.BindPdf("example.pdf");
            editor.AddDocumentAdditionalAction(PdfContentEditor.DocumentClose, "app.alert('Good-bye!');");
            editor.Save("example_out.pdf");
            </code>
      </example>
    </member>
    <member name="M:Aspose.Pdf.Facades.PdfContentEditor.RemoveDocumentOpenAction">
      <summary>
            Removes open action from the document. This operation is useful when concatenating multiple documents that use explicit 'GoTo' action on startup.
            </summary>
      <example>
        <code lang="C#">
            PdfContentEditor editor = new PdfContentEditor();
            editor.BindPdf("example.pdf");
            editor.RemoveDocumentOpenAction();
            editor.Save("example_out.pdf");
            </code>
      </example>
    </member>
    <member name="M:Aspose.Pdf.Facades.PdfContentEditor.ChangeViewerPreference(System.Int32)">
      <summary>
            Changes the view preference.
            </summary>
      <param name="viewerAttribution">The view attribution defined in the ViewerPreference class.</param>
      <example>
        <code lang="C#">
            PdfContentEditor editor = new PdfContentEditor();
            editor.BindPdf("example.pdf");
            editor.ChangeViewerPreference(ViewerPreference.HideMenubar);
            editor.ChangeViewerPreference(ViewerPreference.PageModeUseNone);
            editor.Save("example_out.pdf");
            </code>
      </example>
    </member>
    <member name="M:Aspose.Pdf.Facades.PdfContentEditor.GetViewerPreference">
      <summary>
            Returns the view preference.
            </summary>
      <example>
        <code lang="C#">
            PdfContentEditor editor = new PdfContentEditor();
            editor.BindPdf("example.pdf");
            int prefValue = editor.GetViewerPreference();
            if ((prefValue &amp; ViewerPreference.PageModeUseOutline) != 0)
            { // ... }
            </code>
      </example>
    </member>
    <member name="M:Aspose.Pdf.Facades.PdfContentEditor.ReplaceImage(System.Int32,System.Int32,System.String)">
      <summary>
            Replaces the specified image on the specified page of PDF document with another image.
            </summary>
      <param name="pageNumber">The number of page on which the image is replaced.</param>
      <param name="index">The index of the image object must be replaced.</param>
      <param name="imageFile">The image file will be used for replacing.</param>
      <example>
        <code lang="C#">
            PdfContentEditor editor = new PdfContentEditor();
            editor.BindPdf("example.pdf");
            editor.ReplaceImage(1, 1, "image.jpg");
            editor.Save("example_out.pdf");
            </code>
      </example>
    </member>
    <member name="M:Aspose.Pdf.Facades.PdfContentEditor.DeleteImage(System.Int32,System.Int32[])">
      <summary>
            Deletes the specified images on the specified page.
            </summary>
      <param name="pageNumber">The number of page on which images must be deleted.</param>
      <param name="index">An array repsents images' indexes.</param>
      <example>
        <code lang="C#">
            PdfContentEditor editor = new PdfContentEditor();
            editor.BindPdf("example.pdf");
            editor.DeleteImage(1, new int[] {1, 2});
            editor.Save("example_out.pdf");
            </code>
      </example>
    </member>
    <member name="M:Aspose.Pdf.Facades.PdfContentEditor.DeleteImage">
      <summary>
            Deletes all images from PDF document.
            </summary>
      <example>
        <code lang="C#">
            PdfContentEditor editor = new PdfContentEditor();
            editor.BindPdf("example.pdf");
            editor.DeleteImage();
            editor.Save("example_out.pdf");
            </code>
      </example>
    </member>
    <member name="M:Aspose.Pdf.Facades.PdfContentEditor.ReplaceText(System.String,System.Int32,System.String,Aspose.Pdf.Text.TextState)">
      <summary>
            Replaces text in the PDF file on the specified page. <see cref="T:Aspose.Pdf.Text.TextState" /> object (font family, color) can be specified to replaced text.
            </summary>
      <example>
            The example demonstrates how to replace text on the first page of the PDF document and set <see cref="T:Aspose.Pdf.Text.TextState" /> text properties for the new text.
            <code lang="C#">
            // open document
            Document doc = new Document(inFile);
            
            // Create font and mark it to be embedded
            Aspose.Pdf.Text.Font font = FontRepository.FindFont("Courier New");
            font.IsEmbedded = true;
            
            // create PdfContentEditor object to edit text
            PdfContentEditor editor = new PdfContentEditor();
            editor.BindPdf(doc);
            
            // create textState object
            TextState textState = new TextState();
            textState.Font = font;
            textState.FontSize = 17;
            textState.FontStyle = FontStyle.Bold | FontStyle.Italic;
            textState.ForegroundColor = Color.Red;
            
            // change text with specified font
            editor.ReplaceText("hello world", 1, "hi world", textState);
            
            // save document
            doc.Save(outFile);
            </code></example>
      <param name="srcString">The string to be replaced</param>
      <param name="thePage">Page number (0 means "all pages")</param>
      <param name="destString">The replaced string.</param>
      <param name="textState">Text state (Text Color, Font etc)</param>
      <returns>Returns true if replacement was made.</returns>
    </member>
    <member name="M:Aspose.Pdf.Facades.PdfContentEditor.ReplaceText(System.String,System.String)">
      <summary>
            Replaces text in the PDF file.
            </summary>
      <example>
            The example demonstrates how to replace text in PDF document.
            <code lang="C#">
            // open document
            Document doc = new Document(inFile);
            
            // create PdfContentEditor object to edit text
            PdfContentEditor editor = new PdfContentEditor();
            editor.BindPdf(doc);
            
            // change text 
            editor.ReplaceText("hello world", "hi world");
            
            // save document
            doc.Save(outFile);
            </code></example>
      <param name="srcString">The string to be replaced.</param>
      <param name="destString">Replacing string.</param>
      <returns>Returns true if replacement was made.</returns>
    </member>
    <member name="M:Aspose.Pdf.Facades.PdfContentEditor.ReplaceText(System.String,System.Int32,System.String)">
      <summary>
            Replaces text in the PDF file on the specified page.
            </summary>
      <example>
            The example demonstrates how to replace text in PDF document on the specified page.
            <code lang="C#">
            // open document
            Document doc = new Document(inFile);
            
            // create PdfContentEditor object to edit text
            PdfContentEditor editor = new PdfContentEditor();
            editor.BindPdf(doc);
            
            // change text 
            editor.ReplaceText("hello world", 1, "hi world");
            
            // save document
            doc.Save(outFile);
            </code></example>
      <param name="srcString">The sting to be replaced.</param>
      <param name="thePage">Page number (0 for all pages)</param>
      <param name="destString">Replacing string.</param>
      <returns>Returns true if replacement was made.</returns>
    </member>
    <member name="M:Aspose.Pdf.Facades.PdfContentEditor.ReplaceText(System.String,System.String,Aspose.Pdf.Text.TextState)">
      <summary>
            Replaces text in the PDF file using specified <see cref="T:Aspose.Pdf.Text.TextState" /> object.
            </summary>
      <example>
            The example demonstrates how to replace text and set <see cref="T:Aspose.Pdf.Text.TextState" /> text properties for the new text.
            <code lang="C#">
            // open document
            Document doc = new Document(inFile);
            
            // Create font and mark it to be embedded
            Aspose.Pdf.Text.Font font = FontRepository.FindFont("Courier New");
            font.IsEmbedded = true;
            
            // create PdfContentEditor object to edit text
            PdfContentEditor editor = new PdfContentEditor();
            editor.BindPdf(doc);
            
            // create textState object
            TextState textState = new TextState();
            textState.Font = font;
            textState.FontStyle = FontStyle.Bold | FontStyle.Italic;
            
            // change text with specified font
            editor.ReplaceText("hello world", "hi world", textState);
            
            // save document
            doc.Save(outFile);
            </code></example>
      <param name="srcString">String to be replaced</param>
      <param name="destString">Replacing string</param>
      <param name="textState">Text state (Text Color, Font etc)</param>
      <returns>Returns true if replacement was made.</returns>
    </member>
    <member name="M:Aspose.Pdf.Facades.PdfContentEditor.CreateMovie(System.Drawing.Rectangle,System.String,System.Int32)">
      <summary>
            Creates Movie Annotations.
            </summary>
      <param name="rect">The annotation rectangle defining the location of the annotation on the page.</param>
      <param name="filePath">The path of movie file to be played.</param>
      <param name="page">The page in which the Line annotation is created.</param>
    </member>
    <member name="M:Aspose.Pdf.Facades.PdfContentEditor.CreateSound(System.Drawing.Rectangle,System.String,System.String,System.Int32,System.String)">
      <summary>
            Creates Sound Annotations.
            </summary>
      <param name="rect">The annotation rectangle defining the location of the annotation on the page.</param>
      <param name="filePath">The file path of sound file.</param>
      <param name="name">The name of an icon to be used in displaying the annotation,include:Speaker and Mic.</param>
      <param name="page">The page in which the Sound annotation is created.</param>
      <param name="rate">The sampling rate, in samples per second.</param>
    </member>
    <member name="M:Aspose.Pdf.Facades.PdfContentEditor.DeleteStamp(System.Int32,System.Int32[])">
      <summary>
            Deletes multiple stamps on the specified page by stamp indexes.
            </summary>
      <param name="pageNumber">Page number where stamp will be deleted.</param>
      <param name="index">Stamp indexes.</param>
      <example>
        <code lang="C#">
            PdfContentEditor contentEditor = new PdfContentEditor();
            contentEditor.BindPdf("file.pdf");
            contentEditor.DeleteStamp(1, new int[] { 2, 3, 5} );
            contentEditor.Save("outfile.pdf");
            </code>
      </example>
    </member>
    <member name="M:Aspose.Pdf.Facades.PdfContentEditor.DeleteStampByIds(System.Int32[])">
      <summary>
            Deletes stamps with specified IDs from all pages of the document.
            </summary>
      <param name="stampIds">Array of stamp IDs.</param>
      <example>
        <code lang="C#">
            PdfContentEditor contentEditor = new PdfContentEditor();
            contentEditor.BindPdf("file.pdf");
            contentEditor.DeleteStampByIds(new int[] { 102, 103 } );
            contentEditor.Save("outfile.pdf");
            </code>
      </example>
    </member>
    <member name="M:Aspose.Pdf.Facades.PdfContentEditor.DeleteStampByIds(System.Int32,System.Int32[])">
      <summary>
            Deletes stamps on the specified page by multiple stamp IDs.
            </summary>
      <param name="pageNumber">Page number where stamps will be deleted.</param>
      <param name="stampIds">Array of stamp IDs.</param>
      <example>
        <code lang="C#">
            PdfContentEditor contentEditor = new PdfContentEditor();
            contentEditor.BindPdf("file.pdf");
            contentEditor.DeleteStampByIds(1, new int[] { 100, 101 } );
            contentEditor.Save("outfile.pdf");
            </code>
      </example>
    </member>
    <member name="M:Aspose.Pdf.Facades.PdfContentEditor.DeleteStampById(System.Int32,System.Int32)">
      <summary>
            Deletes stamp on the specified page by stamp ID.
            </summary>
      <param name="pageNumber">Page number where stamp will be deleted.</param>
      <param name="stampId">Stamp ID.</param>
      <example>
        <code lang="C#">
            PdfContentEditor contentEditor = new PdfContentEditor();
            contentEditor.BindPdf("file.pdf");
            contentEditor.DeleteStampById(1, 100);
            contentEditor.Save("outfile.pdf");
            </code>
      </example>
    </member>
    <member name="M:Aspose.Pdf.Facades.PdfContentEditor.HideStampById(System.Int32,System.Int32)">
      <summary>
            Hides the stamp. After hiding, stamp visibility may be restored with ShowStampById method.
            </summary>
      <param name="pageNumber">Number of the page.</param>
      <param name="stampId">Stamp ID.</param>
    </member>
    <member name="M:Aspose.Pdf.Facades.PdfContentEditor.ShowStampById(System.Int32,System.Int32)">
      <summary>
            Shows stamp which was hidden by HiddenStampById.
            </summary>
      <param name="pageNumber">Number of the page.</param>
      <param name="stampId">Stamp ID.</param>
    </member>
    <member name="M:Aspose.Pdf.Facades.PdfContentEditor.MoveStampById(System.Int32,System.Int32,System.Double,System.Double)">
      <summary>
            Changes position of the stamp on page. 
            </summary>
      <param name="pageNumber">Numer of page.</param>
      <param name="stampId">Stamp ID</param>
      <param name="x">New stamp horizontal pozition on the page.</param>
      <param name="y">New stamp vertical position on the page.</param>
    </member>
    <member name="M:Aspose.Pdf.Facades.PdfContentEditor.MoveStamp(System.Int32,System.Int32,System.Double,System.Double)">
      <summary>
            Changes position of the stamp on page.
            </summary>
      <param name="pageNumber">Number of page.</param>
      <param name="stampIndex">Index of stamp on the page.</param>
      <param name="x">New stamp horizontal position.</param>
      <param name="y">New stamp vertical position.</param>
    </member>
    <member name="M:Aspose.Pdf.Facades.PdfContentEditor.DeleteStampById(System.Int32)">
      <summary>
            Delete stamp by ID from all pages of the document.
            </summary>
      <param name="stampId">Stamp ID</param>
      <example>
        <code lang="C#">
            PdfContentEditor contentEditor = new PdfContentEditor();
            contentEditor.BindPdf("file.pdf");
            contentEditor.DeleteStampById(100);
            contentEditor.Save("outfile.pdf");
            </code>
      </example>
    </member>
    <member name="M:Aspose.Pdf.Facades.PdfContentEditor.#ctor">
      <summary> 
            The constructor of the PdfContentEditor object.
            </summary>
    </member>
    <member name="M:Aspose.Pdf.Facades.PdfContentEditor.BindPdf(Aspose.Pdf.Generator.Pdf)">
      <summary> 
            Binds a Pdf document for editing.
            </summary>
      <param name="pdf">Pdf document which came from Aspose.Pdf.Generator.</param>
    </member>
    <member name="M:Aspose.Pdf.Facades.PdfContentEditor.#ctor(Aspose.Pdf.Document)">
      <summary>
            Initializes new <see cref="T:Aspose.Pdf.Facades.PdfContentEditor" /> object on base of the <paramref name="document" />.
            </summary>
      <param name="document">
            Pdf document.
            </param>
    </member>
    <member name="M:Aspose.Pdf.Facades.PdfContentEditor.CreateLocalLink(System.Drawing.Rectangle,System.Int32,System.Int32)">
      <summary>
            Creates a local link in PDF document.
            </summary>
      <param name="rect">The rectangle for active click.</param>
      <param name="desPage">The destination page.</param>
      <param name="originalPage">The number of original page where rectangle bound with local link will be created.</param>
      <example>
        <code lang="C#">
            PdfContentEditor editor = new PdfContentEditor();
            editor.BindPdf("example.pdf");
            editor.CreateLocalLink(new System.Drawing.Rectangle(0, 0, 100, 100), 2, 1});
            editor.Save("example_out.pdf");
            </code>
      </example>
    </member>
    <member name="M:Aspose.Pdf.Facades.PdfContentEditor.ReplaceText(System.String,System.String,System.Int32)">
      <summary>
            Replaces text in the PDF file and sets font size.
            </summary>
      <example>
            The example demonstrates how to replace text and set font size for the new text.
            <code lang="C#">
            // open document
            Document doc = new Document(inFile);
            
            // Create font and mark it to be embedded
            Aspose.Pdf.Text.Font font = FontRepository.FindFont("Courier New");
            font.IsEmbedded = true;
            
            // create PdfContentEditor object to edit text
            PdfContentEditor editor = new PdfContentEditor();
            editor.BindPdf(doc);
            
            // change text with specified font
            editor.ReplaceText("hello world", "hi world", 14);
            
            // save document
            doc.Save(outFile);
            </code></example>
      <param name="srcString">String to be replaced</param>
      <param name="destString">Replacing string</param>
      <param name="fontSize">Font size</param>
      <returns>Returns true if replacement was made.</returns>
    </member>
    <member name="M:Aspose.Pdf.Facades.PdfContentEditor.GetStamps(System.Int32)">
      <summary>
            Returns array of stamps on the page.
            </summary>
      <param name="pageNumber">Page number where stamps will be searched.</param>
      <returns>Array of stamps.</returns>
    </member>
    <member name="M:Aspose.Pdf.Facades.PdfContentEditor.Close">
      <summary>
            Closes opened document.
            </summary>
    </member>
    <member name="P:Aspose.Pdf.Facades.PdfContentEditor.TextSearchOptions">
      <summary>
            Gets or sets text search options.
            </summary>
    </member>
    <member name="P:Aspose.Pdf.Facades.PdfContentEditor.TextEditOptions">
      <summary>
            Gets or sets text edit options. 
            </summary>
    </member>
    <member name="P:Aspose.Pdf.Facades.PdfContentEditor.TextReplaceOptions">
      <summary>
            Gets or sets text replace options. 
            </summary>
    </member>
    <member name="P:Aspose.Pdf.Facades.PdfContentEditor.ReplaceTextStrategy">
      <summary>
            A set of parameters for replace text operation
            </summary>
    </member>
    <member name="T:Aspose.Pdf.Facades.PdfConverter">
      <summary>
            Represents a class to convert a pdf file's each page to images, supporting BMP, JPEG, PNG and TIFF now.
            Supported content in pdfs: pictures, form, comment.
            </summary>
    </member>
    <member name="M:Aspose.Pdf.Facades.PdfConverter.DoConvert">
      <summary>
            Do some initial works for converting a pdf document to images.
            </summary>
      <example>
        <code>
            [C#]
            PdfConverter converter = new PdfConverter();
            converter.BindPdf(@"D:\Test\test.pdf");
            converter.DoConvert();
            String prefix = @"D:\Test\";
            String suffix = ".jpg";
            int imageCount = 1;
            while (converter.HasNextImage())
            {
            	converter.GetNextImage(prefix + imageCount + suffix);
            	imageCount++;
            }
            
            [Visual Basic]
            Dim converter As PdfConverter =  New PdfConverter() 
            converter.BindPdf("D:\Test\test.pdf")
            converter.DoConvert()
            Dim prefix As String =  "D:\Test\" 
            Dim suffix As String =  ".jpg" 
            Dim imageCount As Integer =  1 
            While converter.HasNextImage()
            	converter.GetNextImage(prefix + imageCount + suffix)
            	imageCount = imageCount + 1
            End While
            </code>
      </example>
    </member>
    <member name="M:Aspose.Pdf.Facades.PdfConverter.SaveAsTIFF(System.String)">
      <summary>
            Converts each pages of a pdf document to images and saves images to a single TIFF file.
            </summary>
      <param name="outputFile">The file to save the TIFF image.</param>
      <example>
        <code>
            [C#]
            PdfConverter converter = new PdfConverter();
            converter.BindPdf(@"D:\Test\test.pdf");
            converter.DoConvert();
            converter.SaveAsTIFF(@"D:\Test\test.tiff");	
            
            [Visual Basic]
            Dim converter As PdfConverter =  New PdfConverter() 
            converter.BindPdf("D:\Test\test.pdf")
            converter.DoConvert()
            converter.SaveAsTIFF(@"D:\Test\test.tiff")
            </code>
      </example>
    </member>
    <member name="M:Aspose.Pdf.Facades.PdfConverter.SaveAsTIFF(System.String,Aspose.Pdf.Devices.CompressionType)">
      <summary>
            Converts each pages of a pdf document to images and saves images to a single TIFF file.
            </summary>
      <param name="outputFile">The output file.</param>
      <param name="compressionType">Type of the compression.</param>
      <example>
        <code>
            [C#]
            PdfConverter converter = new PdfConverter();
            converter.BindPdf(@"D:\Test\test.pdf");
            converter.DoConvert();
            converter.SaveAsTIFF(@"D:\Test\test.tiff");
            [Visual Basic]
            Dim converter As PdfConverter =  New PdfConverter()
            converter.BindPdf("D:\Test\test.pdf")
            converter.DoConvert()
            converter.SaveAsTIFF(@"D:\Test\test.tiff")
            </code>
      </example>
    </member>
    <member name="M:Aspose.Pdf.Facades.PdfConverter.SaveAsTIFF(System.String,System.Int32,System.Int32)">
      <summary>
            Converts each pages of a pdf document to images with dimensions, and saves images to a single TIFF file.
            </summary>
      <param name="outputFile">The file name to save the TIFF image</param>
      <param name="imageWidth">The image width, the unit is pixel.</param>
      <param name="imageHeight">The image height, the unit is pixel.</param>
    </member>
    <member name="M:Aspose.Pdf.Facades.PdfConverter.SaveAsTIFF(System.String,Aspose.Pdf.PageSize)">
      <summary>
            Converts each pages of a pdf document to images with page size and saves images to a single TIFF file.
            </summary>
      <param name="outputFile">The file name to save the TIFF image</param>
      <param name="pageSize">The page size of the image.</param>
    </member>
    <member name="M:Aspose.Pdf.Facades.PdfConverter.SaveAsTIFF(System.String,Aspose.Pdf.PageSize,Aspose.Pdf.Devices.TiffSettings)">
      <summary>
            Converts each pages of a pdf document to images with page size and saves images to a single TIFF file.
            </summary>
      <param name="outputFile">The file name to save the TIFF image</param>
      <param name="pageSize">The page size of the image.</param>
      <param name="settings">Settings.</param>
    </member>
    <member name="M:Aspose.Pdf.Facades.PdfConverter.SaveAsTIFF(System.String,System.Int32,System.Int32,Aspose.Pdf.Devices.CompressionType)">
      <summary>
            Converts each pages of a pdf document to images with dimensions, and saves images to a single TIFF file.
            </summary>
      <param name="outputFile">The file name to save the TIFF image</param>
      <param name="imageWidth">The image width, the unit is pixel.</param>
      <param name="imageHeight">The image height, the unit is pixel.</param>
      <param name="compressionType">Type of the compression.</param>
    </member>
    <member name="M:Aspose.Pdf.Facades.PdfConverter.SaveAsTIFF(System.String,System.Int32,System.Int32,Aspose.Pdf.Devices.TiffSettings)">
      <summary>
            Converts each pages of a pdf document to images with dimensions, and saves images to a single TIFF file.
            </summary>
      <param name="outputFile">The file name to save the TIFF image</param>
      <param name="imageWidth">The image width, the unit is pixel.</param>
      <param name="imageHeight">The image height, the unit is pixel.</param>
      <param name="settings">Settings.</param>
    </member>
    <member name="M:Aspose.Pdf.Facades.PdfConverter.SaveAsTIFF(System.String,System.Int32,System.Int32,Aspose.Pdf.Devices.TiffSettings,Aspose.Pdf.IIndexBitmapConverter)">
      <summary>
            Converts each pages of a pdf document to images with dimensions, and saves images to a single TIFF file.
            </summary>
      <param name="outputFile">The file name to save the TIFF image</param>
      <param name="imageWidth">The image width, the unit is pixel.</param>
      <param name="imageHeight">The image height, the unit is pixel.</param>
      <param name="settings">Settings.</param>
      <param name="converter">External converter</param>
    </member>
    <member name="M:Aspose.Pdf.Facades.PdfConverter.SaveAsTIFFClassF(System.String,System.Int32,System.Int32)">
      <summary>
            Converts each pages of a pdf document to images and save images to a single TIFF ClassF file.
            </summary>
      <param name="outputFile">The stream to save the TIFF image.</param>
      <param name="imageWidth">The image width, the unit is pixel.</param>
      <param name="imageHeight">The image height, the unit is pixel.</param>
      <example>
        <code>
            [C#]
            PdfConverter converter = new PdfConverter();
            converter.BindPdf(@"D:\Test\test.pdf");
            converter.DoConvert();
            converter.SaveAsTIFFClassF(@"D:\Test\test.tiff",204,196);	
            
            [Visual Basic]
            Dim converter As PdfConverter =  New PdfConverter() 
            converter.BindPdf("D:\Test\test.pdf")
            converter.DoConvert()
            converter.SaveAsTIFFClassF(@"D:\Test\test.tiff",204,196)
            </code>
      </example>
    </member>
    <member name="M:Aspose.Pdf.Facades.PdfConverter.SaveAsTIFFClassF(System.String,Aspose.Pdf.PageSize)">
      <summary>
            Converts each pages of a pdf document to images and save images to a single TIFF ClassF file.
            </summary>
      <param name="outputFile">The stream to save the TIFF image.</param>
      <param name="pageSize">The page size of the image.</param>
    </member>
    <member name="M:Aspose.Pdf.Facades.PdfConverter.SaveAsTIFFClassF(System.IO.Stream,System.Int32,System.Int32)">
      <summary>
            Converts each pages of a pdf document to images and save images to a single TIFF ClassF stream.
            </summary>
      <param name="outputStream">The stream to save the TIFF image.</param>
      <param name="imageWidth">The image width, the unit is pixel.</param>
      <param name="imageHeight">The image height, the unit is pixel.</param>
    </member>
    <member name="M:Aspose.Pdf.Facades.PdfConverter.SaveAsTIFFClassF(System.IO.Stream,Aspose.Pdf.PageSize)">
      <summary>
            Converts each pages of a pdf document to images and save images to a single TIFF ClassF stream.
            </summary>
      <param name="outputStream">The stream to save the TIFF image.</param>
      <param name="pageSize">The page size of the image.</param>
    </member>
    <member name="M:Aspose.Pdf.Facades.PdfConverter.SaveAsTIFF(System.IO.Stream)">
      <summary>
            Converts each pages of a pdf document to images and saves images to a single TIFF stream.
            </summary>
      <param name="outputStream">The stream to save the TIFF image.</param>
    </member>
    <member name="M:Aspose.Pdf.Facades.PdfConverter.SaveAsTIFF(System.IO.Stream,Aspose.Pdf.Devices.CompressionType)">
      <summary>
            Converts each pages of a pdf document to images and saves images to a single TIFF file.
            </summary>
      <param name="outputStream">The output stream.</param>
      <param name="compressionType">Type of the compression.</param>
    </member>
    <member name="M:Aspose.Pdf.Facades.PdfConverter.SaveAsTIFF(System.IO.Stream,Aspose.Pdf.PageSize)">
      <summary>
            Converts each pages of a pdf document to images with page size and saves images to a single TIFF stream.
            </summary>
      <param name="outputStream">The stream to save the TIFF image.</param>
      <param name="pageSize">The page size of the image.</param>
    </member>
    <member name="M:Aspose.Pdf.Facades.PdfConverter.SaveAsTIFF(System.IO.Stream,Aspose.Pdf.PageSize,Aspose.Pdf.Devices.TiffSettings)">
      <summary>
            Converts each pages of a pdf document to images with page size and saves images to a single TIFF stream.
            </summary>
      <param name="outputStream">The stream to save the TIFF image.</param>
      <param name="pageSize">The page size of the image.</param>
      <param name="settings">Settings.</param>
    </member>
    <member name="M:Aspose.Pdf.Facades.PdfConverter.SaveAsTIFF(System.IO.Stream,System.Int32,System.Int32)">
      <summary>
            Converts each pages of a pdf document to images with dimensions, and saves images to a single TIFF stream.
            </summary>
      <param name="outputStream">The stream to save the TIFF image.</param>
      <param name="imageWidth">The image width, the unit is pixel.</param>
      <param name="imageHeight">The image height, the unit is pixel.</param>
    </member>
    <member name="M:Aspose.Pdf.Facades.PdfConverter.SaveAsTIFF(System.IO.Stream,System.Int32,System.Int32,Aspose.Pdf.Devices.CompressionType)">
      <summary>
            Converts each pages of a pdf document to images with dimensions, and saves images to a single TIFF stream.
            </summary>
      <param name="outputStream">The stream to save the TIFF image.</param>
      <param name="imageWidth">The image width, the unit is pixel.</param>
      <param name="imageHeight">The image height, the unit is pixel.</param>
      <param name="compressionType">Type of the compression.</param>
    </member>
    <member name="M:Aspose.Pdf.Facades.PdfConverter.SaveAsTIFF(System.IO.Stream,System.Int32,System.Int32,Aspose.Pdf.Devices.TiffSettings)">
      <summary>
            Converts each pages of a pdf document to images with dimensions, and saves images to a single TIFF stream.
            </summary>
      <param name="outputStream">The stream to save the TIFF image.</param>
      <param name="imageWidth">The image width, the unit is pixel.</param>
      <param name="imageHeight">The image height, the unit is pixel.</param>
      <param name="settings">Settings.</param>
    </member>
    <member name="M:Aspose.Pdf.Facades.PdfConverter.SaveAsTIFF(System.IO.Stream,System.Int32,System.Int32,Aspose.Pdf.Devices.TiffSettings,Aspose.Pdf.IIndexBitmapConverter)">
      <summary>
            Converts each pages of a pdf document to images with dimensions, and saves images to a single TIFF stream.
            </summary>
      <param name="outputStream">The stream to save the TIFF image.</param>
      <param name="imageWidth">The image width, the unit is pixel.</param>
      <param name="imageHeight">The image height, the unit is pixel.</param>
      <param name="settings">Settings.</param>
      <param name="converter">External converter</param>
    </member>
    <member name="M:Aspose.Pdf.Facades.PdfConverter.HasNextImage">
      <summary>
            Indicates whether the pdf file has more images or not.
            </summary>
      <returns>Can get more images or not, true if can, or false.</returns>
    </member>
    <member name="M:Aspose.Pdf.Facades.PdfConverter.GetNextImage(System.String)">
      <summary>
            Saves image to file with default image format - jpeg.
            </summary>
      <param name="outputFile">The file path and name to save the image.</param>
    </member>
    <member name="M:Aspose.Pdf.Facades.PdfConverter.GetNextImage(System.String,Aspose.Pdf.PageSize)">
      <summary>
            Saves image to file with ith given page size and default image format - jpeg.
            </summary>
      <param name="outputFile">The file path and name to save the image.</param>
      <param name="pageSize">The page size of the image.</param>
    </member>
    <member name="M:Aspose.Pdf.Facades.PdfConverter.GetNextImage(System.String,System.Drawing.Imaging.ImageFormat)">
      <summary>
            Saves image to file with the givin image format.
            </summary>
      <param name="outputFile">The file path and name to save the image.</param>
      <param name="format">The format of the image.</param>
      <example>
        <code>
            [C#]
            PdfConverter converter = new PdfConverter();
            converter.BindPdf(@"D:\Test\test.pdf");
            converter.DoConvert();
            String prefix = @"D:\Test\";
            String suffix = ".png";
            int imageCount = 1;
            while (converter.HasNextImage())
            {
            	converter.GetNextImage(prefix + imageCount + suffix, ImageFormat.Png);
            	imageCount++;
            }
            
            [Visual Basic]
            Dim converter As PdfConverter =  New PdfConverter() 
            converter.BindPdf("D:\Test\test.pdf")
            converter.DoConvert()
            Dim prefix As String =  "D:\Test\" 
            Dim suffix As String =  ".png" 
            Dim imageCount As Integer =  1 
            While converter.HasNextImage()
            	converter.GetNextImage(prefix + imageCount + suffix, ImageFormat.Png)
            	imageCount = imageCount + 1
            End While
            </code>
      </example>
    </member>
    <member name="M:Aspose.Pdf.Facades.PdfConverter.GetNextImage(System.String,Aspose.Pdf.PageSize,System.Drawing.Imaging.ImageFormat)">
      <summary>
            Saves image to file with given page size and image format.
            </summary>
      <param name="outputFile">The file path and name to save the image.</param>
      <param name="pageSize">The page size of the image.</param>
      <param name="format">The format of the image.</param>
    </member>
    <member name="M:Aspose.Pdf.Facades.PdfConverter.GetNextImage(System.IO.Stream)">
      <summary>
            Saves image to stream with default image format - jpeg.
            </summary>
      <param name="outputStream">The stream to save the image.</param>
    </member>
    <member name="M:Aspose.Pdf.Facades.PdfConverter.GetNextImage(System.IO.Stream,Aspose.Pdf.PageSize)">
      <summary>
            Saves image to stream with given page size.
            </summary>
      <param name="outputStream">The stream to save the image.</param>
      <param name="pageSize">The page size of the image.</param>
    </member>
    <member name="M:Aspose.Pdf.Facades.PdfConverter.GetNextImage(System.IO.Stream,System.Drawing.Imaging.ImageFormat)">
      <summary>
            Saves image to stream with given image format.
            </summary>
      <param name="outputStream">The stream to save the image.</param>
      <param name="format">The format of the image.</param>
    </member>
    <member name="M:Aspose.Pdf.Facades.PdfConverter.GetNextImage(System.IO.Stream,Aspose.Pdf.PageSize,System.Drawing.Imaging.ImageFormat)">
      <summary>
            Saves image to stream with given page size.
            </summary>
      <param name="outputStream">The stream to save the image.</param>
      <param name="pageSize">The page size of the image.</param>
      <param name="format">The format of the image.</param>
    </member>
    <member name="M:Aspose.Pdf.Facades.PdfConverter.GetNextImage(System.String,System.Drawing.Imaging.ImageFormat,System.Int32,System.Int32,System.Int32)">
      <summary>
            Saves image to file with the given image format, dimensions and quality.
            </summary>
      <param name="outputFile">The file path and name to save the image.</param>
      <param name="format">The format of the image.</param>
      <param name="imageWidth">The image width, the unit is pixel.</param>
      <param name="imageHeight">The image height, the unit is pixel.</param>
      <param name="quality">The Jpeg file's quality (0~100), 0 is lowest and 100 is highest</param>
      <example>
        <code>
            [C#]
            PdfConverter converter = new PdfConverter();
            converter.BindPdf(@"D:\Test\test.pdf");
            converter.DoConvert();
            String prefix = @"D:\Test\";
            String suffix = ".jpg";
            int imageCount = 1;
            while (converter.HasNextImage())
            {
            	converter.GetNextImage(prefix + imageCount + suffix, ImageFormat.Jpeg, 800, 1000, 50);
            	imageCount++;
            }
            
            [Visual Basic]
            Dim converter As PdfConverter =  New PdfConverter() 
            converter.BindPdf("D:\Test\test.pdf")
            converter.DoConvert()
            Dim prefix As String =  "D:\Test\" 
            Dim suffix As String =  ".jpg" 
            Dim imageCount As Integer =  1 
            While converter.HasNextImage()
            	converter.GetNextImage(prefix + imageCount + suffix, ImageFormat.Jpeg, 800, 1000, 50)
            	imageCount = imageCount + 1
            End While
            </code>
      </example>
    </member>
    <member name="M:Aspose.Pdf.Facades.PdfConverter.GetNextImage(System.IO.Stream,System.Drawing.Imaging.ImageFormat,System.Int32,System.Int32,System.Int32)">
      <summary>
            Saves image to stream with the givin image format, dimensions and quality.
            </summary>
      <param name="outputStream">The stream to save the image.</param>
      <param name="format">The format of the image.</param>
      <param name="imageWidth">The image width, the unit is pixel.</param>
      <param name="imageHeight">The image height, the unit is pixel.</param>
      <param name="quality">The Jpeg file's quality (0~100), 0 is lowest and 100 is highest</param>
    </member>
    <member name="M:Aspose.Pdf.Facades.PdfConverter.GetNextImage(System.String,System.Drawing.Imaging.ImageFormat,System.Double,System.Double,System.Int32)">
      <summary>
            Saves image to file with the givin image format, image size,  and quality.
            </summary>
      <param name="outputFile">The file path and name to save the image.</param>
      <param name="format">The format of the image.</param>
      <param name="imageWidth">The image width, the unit is pixels.</param>
      <param name="imageHeight">The image height, the unit is pixels..</param>
      <param name="quality">The Jpeg file's quality (0~100), 0 is lowest and 100 is highest</param>
      <example>
        <code>
            [C#]
            PdfConverter converter = new PdfConverter();
            converter.BindPdf(@"D:\Test\test.pdf");
            converter.DoConvert();
            String prefix = @"D:\Test\";
            String suffix = ".jpg";
            int imageCount = 1;
            float pixelX=800f;
            float pixelY=600f;
            while (converter.HasNextImage())
            {
            	converter.GetNextImage(prefix + imageCount + suffix, ImageFormat.Jpeg, pixelX, pixelY, 50);
            	imageCount++;
            }
            
            [Visual Basic]
            Dim converter As PdfConverter =  New PdfConverter() 
            converter.BindPdf("D:\Test\test.pdf")
            converter.DoConvert()
            Dim prefix As String =  "D:\Test\" 
            Dim suffix As String =  ".jpg" 
            Dim pixelX As float =800
            Dim pixelY As float=600
            Dim imageCount As Integer =  1 
            While converter.HasNextImage()
            	converter.GetNextImage(prefix + imageCount + suffix, ImageFormat.Jpeg, pixelX, pixelY, 50)
            	imageCount = imageCount + 1
            End While
            </code>
      </example>
    </member>
    <member name="M:Aspose.Pdf.Facades.PdfConverter.GetNextImage(System.IO.Stream,System.Drawing.Imaging.ImageFormat,System.Double,System.Double,System.Int32)">
      <summary>
            Saves image to stream with the givin image format, size and quality.
            </summary>
      <param name="outputStream">The stream to save the image.</param>
      <param name="format">The format of the image.</param>
      <param name="imageWidth">The image width, the unit is pixel.</param>
      <param name="imageHeight">The image height, the unit is pixel.</param>
      <param name="quality">The Jpeg file's quality (0~100), 0 is lowest and 100 is highest</param>
    </member>
    <member name="M:Aspose.Pdf.Facades.PdfConverter.BindPdf(System.String)">
      <summary>
            Binds a Pdf file for converting.
            </summary>
      <param name="inputFile">The pdf file.</param>
    </member>
    <member name="M:Aspose.Pdf.Facades.PdfConverter.BindPdf(System.IO.Stream)">
      <summary>
            Binds a Pdf Stream for convert.
            </summary>
      <param name="inputStream">The pdf Stream.</param>
    </member>
    <member name="M:Aspose.Pdf.Facades.PdfConverter.BindPdf(Aspose.Pdf.Generator.Pdf)">
      <summary> 
            Binds a Pdf document for editing.
            </summary>
      <param name="pdf">Pdf document which came from Aspose.Pdf.Generator.</param>
    </member>
    <member name="M:Aspose.Pdf.Facades.PdfConverter.#ctor">
      <summary>
            Initializes new <see cref="T:Aspose.Pdf.Facades.PdfConverter" /> object.
            </summary>
    </member>
    <member name="M:Aspose.Pdf.Facades.PdfConverter.#ctor(Aspose.Pdf.Document)">
      <summary>
            Initializes new <see cref="T:Aspose.Pdf.Facades.PdfConverter" /> object on base of the <paramref name="document" />.
            </summary>
      <param name="document">
            Pdf document.
            </param>
    </member>
    <member name="M:Aspose.Pdf.Facades.PdfConverter.Close">
      <summary>
             Close the instance of PdfConverter and release the resources.
            </summary>
    </member>
    <member name="M:Aspose.Pdf.Facades.PdfConverter.SaveAsTIFFClassF(System.String)">
      <summary>
            Converts each pages of a pdf document to images and save images to a single TIFF ClassF file.
            </summary>
      <param name="outputFile">The stream to save the TIFF image.</param>
      <example>
        <code>
            [C#]
            PdfConverter converter = new PdfConverter();
            converter.BindPdf(@"D:\Test\test.pdf");
            converter.DoConvert();
            converter.SaveAsTIFFClassF(@"D:\Test\test.tiff");	
            
            [Visual Basic]
            Dim converter As PdfConverter =  New PdfConverter() 
            converter.BindPdf("D:\Test\test.pdf")
            converter.DoConvert()
            converter.SaveAsTIFFClassF(@"D:\Test\test.tiff")
            </code>
      </example>
    </member>
    <member name="M:Aspose.Pdf.Facades.PdfConverter.SaveAsTIFFClassF(System.IO.Stream)">
      <summary>
            Converts each pages of a pdf document to images and save images to a single TIFF ClassF stream.
            </summary>
      <param name="outputStream">The stream to save the TIFF image.</param>
    </member>
    <member name="M:Aspose.Pdf.Facades.PdfConverter.SaveAsTIFF(System.String,Aspose.Pdf.Devices.TiffSettings)">
      <summary>
            Converts each pages of a pdf document to images with and saves images to a single TIFF file.
            </summary>
      <param name="outputFile">The file name to save the TIFF image</param>
      <param name="settings">Settings.</param>
    </member>
    <member name="M:Aspose.Pdf.Facades.PdfConverter.SaveAsTIFF(System.String,Aspose.Pdf.Devices.TiffSettings,Aspose.Pdf.IIndexBitmapConverter)">
      <summary>
            Converts each pages of a pdf document to images with and saves images to a single TIFF file.
            </summary>
      <param name="outputFile">The file name to save the TIFF image</param>
      <param name="settings">Settings.</param>
      <param name="converter">External converter</param>
    </member>
    <member name="M:Aspose.Pdf.Facades.PdfConverter.SaveAsTIFF(System.IO.Stream,Aspose.Pdf.Devices.TiffSettings)">
      <summary>
            Converts each pages of a pdf document to images and saves images to a single TIFF stream.
            </summary>
      <param name="outputStream">The stream to save the TIFF image.</param>
      <param name="settings">Settings.</param>
    </member>
    <member name="M:Aspose.Pdf.Facades.PdfConverter.SaveAsTIFF(System.IO.Stream,Aspose.Pdf.Devices.TiffSettings,Aspose.Pdf.IIndexBitmapConverter)">
      <summary>
            Converts each pages of a pdf document to images and saves images to a single TIFF stream.
            </summary>
      <param name="outputStream">The stream to save the TIFF image.</param>
      <param name="settings">Settings.</param>
      <param name="converter">External converter</param>
    </member>
    <member name="M:Aspose.Pdf.Facades.PdfConverter.GetNextImage(System.String,System.Drawing.Imaging.ImageFormat,System.Int32,System.Int32)">
      <summary>
            Saves image to file with the given image format and dimensions.
            </summary>
      <param name="outputFile">The file path and name to save the image.</param>
      <param name="format">The format of the image.</param>
      <param name="imageWidth">The image width, the unit is pixel.</param>
      <param name="imageHeight">The image height, the unit is pixel.</param>
      <example>
        <code>
            [C#]
            PdfConverter converter = new PdfConverter();
            converter.BindPdf(@"D:\Test\test.pdf");
            converter.DoConvert();
            String prefix = @"D:\Test\";
            String suffix = ".jpg";
            int imageCount = 1;
            while (converter.HasNextImage())
            {
            	converter.GetNextImage(prefix + imageCount + suffix, ImageFormat.Jpeg, 800, 1000);
            	imageCount++;
            }
            
            [Visual Basic]
            Dim converter As PdfConverter =  New PdfConverter() 
            converter.BindPdf("D:\Test\test.pdf")
            converter.DoConvert()
            Dim prefix As String =  "D:\Test\" 
            Dim suffix As String =  ".jpg" 
            Dim imageCount As Integer =  1 
            While converter.HasNextImage()
            	converter.GetNextImage(prefix + imageCount + suffix, ImageFormat.Jpeg, 800, 1000)
            	imageCount = imageCount + 1
            End While
            </code>
      </example>
    </member>
    <member name="M:Aspose.Pdf.Facades.PdfConverter.GetNextImage(System.IO.Stream,System.Drawing.Imaging.ImageFormat,System.Int32,System.Int32)">
      <summary>
            Saves image to stream with the givin image format, size and quality.
            </summary>
      <param name="outputStream">The stream to save the image.</param>
      <param name="format">The format of the image.</param>
      <param name="imageWidth">The image width, the unit is pixel.</param>
      <param name="imageHeight">The image height, the unit is pixel.</param>
    </member>
    <member name="M:Aspose.Pdf.Facades.PdfConverter.GetNextImage(System.IO.Stream,System.Drawing.Imaging.ImageFormat,System.Int32)">
      <summary>
            Saves image to stream with given image format and quality.
            </summary>
      <param name="outputStream">The stream to save the image.</param>
      <param name="format">The format of the image.</param>
      <param name="quality">The Jpeg file's quality (0~100), 0 is lowest and 100 is highest</param>
    </member>
    <member name="M:Aspose.Pdf.Facades.PdfConverter.GetNextImage(System.IO.Stream,Aspose.Pdf.PageSize,System.Drawing.Imaging.ImageFormat,System.Int32)">
      <summary>
            Saves image to stream with given page size, image format and quality.
            </summary>
      <param name="outputStream">The stream to save the image.</param>
      <param name="format">The format of the image.</param>
      <param name="pageSize">The page size of the image.</param>
      <param name="quality">The Jpeg file's quality (0~100), 0 is lowest and 100 is highest</param>
    </member>
    <member name="M:Aspose.Pdf.Facades.PdfConverter.GetNextImage(System.String,System.Drawing.Imaging.ImageFormat,System.Int32)">
      <summary>
            Saves image to file with given image format and quality.
            </summary>
      <param name="outputFile">The file path and name to save the image.</param>
      <param name="format">The format of the image.</param>
      <param name="quality">The Jpeg file's quality (0~100), 0 is lowest and 100 is highest</param>
    </member>
    <member name="M:Aspose.Pdf.Facades.PdfConverter.GetNextImage(System.String,Aspose.Pdf.PageSize,System.Drawing.Imaging.ImageFormat,System.Int32)">
      <summary>
            Saves image to file with given page size, image format and quality.
            </summary>
      <param name="outputFile">The file path and name to save the image.</param>
      <param name="pageSize">The page size of the image.</param>
      <param name="format">The format of the image.</param>
      <param name="quality">The Jpeg file's quality (0~100), 0 is lowest and 100 is highest</param>
    </member>
    <member name="M:Aspose.Pdf.Facades.PdfConverter.GetNextImage(System.Drawing.Graphics,System.Single,System.Single,System.Int32,System.Int32,System.Drawing.Rectangle,System.Single,System.Int32,System.Boolean,Aspose.Pdf.VerticalAlignment,Aspose.Pdf.HorizontalAlignment,System.Boolean)">
      <summary>
            draws page to graphics
            </summary>
    </member>
    <member name="P:Aspose.Pdf.Facades.PdfConverter.RenderingOptions">
      <summary>
            Gets or sets rendering options.
            </summary>
    </member>
    <member name="P:Aspose.Pdf.Facades.PdfConverter.FormPresentationMode">
      <summary>
            Gets or sets form presentation mode.
            </summary>
    </member>
    <member name="P:Aspose.Pdf.Facades.PdfConverter.Resolution">
      <summary>
            Gets or sets resolution during convertting. The higher resolution, the slower convertting speed. The default value is 150.
            </summary>
    </member>
    <member name="P:Aspose.Pdf.Facades.PdfConverter.StartPage">
      <summary>
            Gets or sets start position which you want to convert. The minimal value is 1.
            </summary>
    </member>
    <member name="P:Aspose.Pdf.Facades.PdfConverter.EndPage">
      <summary>
            Gets or sets end position which you want to convert.
            </summary>
    </member>
    <member name="P:Aspose.Pdf.Facades.PdfConverter.Password">
      <summary>
            Gets or sets document OwnerPassword.
            </summary>
    </member>
    <member name="P:Aspose.Pdf.Facades.PdfConverter.UserPassword">
      <summary>
            Gets or sets document UserPassword.
            </summary>
    </member>
    <member name="P:Aspose.Pdf.Facades.PdfConverter.PageCount">
      <summary>
            Gets the page count.
            </summary>
    </member>
    <member name="T:Aspose.Pdf.Facades.PdfExtractor">
      <summary>
            Class for extracting images and text from PDF document.
            </summary>
    </member>
    <member name="M:Aspose.Pdf.Facades.PdfExtractor.ExtractText">
      <summary>
            Extracts text from a Pdf document using Unicode encoding.
            </summary>
      <example>
            First example demonstratres how to extract all the text from PDF file.
            <code lang="C#">
            PdfExtractor extractor = new PdfExtractor();
            extractor.BindPdf(@"D:\Text\text.pdf");
            extractor.ExtractText();
            extractor.GetText(@"D:\Text\text.txt");
            </code><code lang="VB.NET">
            Dim extractor As PdfExtractor =  New PdfExtractor() 
            extractor.BindPdf("D:\Text\text.pdf")
            extractor.ExtractText()
            extractor.GetText("D:\Text\text.txt")
            </code>
            Second example demonstratres how to extract each page's text into one txt file.
            <code lang="C#">
            PdfExtractor extractor = new PdfExtractor();
            extractor.BindPdf(TestPath + @"Aspose.Pdf.Kit.Pdf");
            extractor.ExtractText();
            String prefix = TestPath + @"Aspose.Pdf.Kit";
            String suffix = ".txt";
            int pageCount = 1;
            while (extractor.HasNextPageText())
            {
                extractor.GetNextPageText(prefix + pageCount + suffix);
                pageCount++;
            }
            </code><code lang="VB.NET">		
            Dim extractor As PdfExtractor =  New PdfExtractor() 
            extractor.BindPdf(TestPath + "Aspose.Pdf.Kit.Pdf")
            extractor.ExtractText()
            Dim prefix As String =  TestPath + "Aspose.Pdf.Kit" 
            Dim suffix As String =  ".txt" 
            Dim pageCount As Integer =  1 
            While extractor.HasNextPageText()
                extractor.GetNextPageText(prefix + pageCount + suffix)
                pageCount = pageCount + 1
            End While
            </code></example>
    </member>
    <member name="M:Aspose.Pdf.Facades.PdfExtractor.ExtractText(System.Text.Encoding)">
      <summary>
            Extracts text from a Pdf document using specified encoding.
            </summary>
      <example>
            First example demonstratres how to extract all the text from PDF file.
            <code lang="C#">
            PdfExtractor extractor = new PdfExtractor();
            extractor.BindPdf(@"D:\Text\text.pdf");
            extractor.ExtractText(Encoding.Unicode);
            extractor.GetText(@"D:\Text\text.txt");
            </code><code lang="VB.NET">
            Dim extractor As PdfExtractor =  New PdfExtractor() 
            extractor.BindPdf("D:\Text\text.pdf")
            extractor.ExtractText(Encoding.Unicode)
            extractor.GetText("D:\Text\text.txt")
            </code>
            Second example demonstratres how to extract each page's text into one txt file.
            <code lang="C#">
            PdfExtractor extractor = new PdfExtractor();
            extractor.BindPdf(TestPath + @"Aspose.Pdf.Kit.Pdf");
            extractor.ExtractText(Encoding.Unicode);
            String prefix = TestPath + @"Aspose.Pdf.Kit";
            String suffix = ".txt";
            int pageCount = 1;
            while (extractor.HasNextPageText())
            {
                extractor.GetNextPageText(prefix + pageCount + suffix);
                pageCount++;
            }
            </code><code lang="VB.NET">		
            Dim extractor As PdfExtractor =  New PdfExtractor() 
            extractor.BindPdf(TestPath + "Aspose.Pdf.Kit.Pdf")
            extractor.ExtractText(Encoding.Unicode)
            Dim prefix As String =  TestPath + "Aspose.Pdf.Kit" 
            Dim suffix As String =  ".txt" 
            Dim pageCount As Integer =  1 
            While extractor.HasNextPageText()
                extractor.GetNextPageText(prefix + pageCount + suffix)
                pageCount = pageCount + 1
            End While
            </code></example>
      <param name="encoding">The encoding of the extracted text.</param>
    </member>
    <member name="M:Aspose.Pdf.Facades.PdfExtractor.GetText(System.String)">
      <summary>
            Saves text to file. see also:<see cref="M:Aspose.Pdf.Facades.PdfExtractor.ExtractText" /></summary>
      <param name="outputFile">The file path and name to save the text.</param>
    </member>
    <member name="M:Aspose.Pdf.Facades.PdfExtractor.GetText(System.IO.Stream)">
      <summary>
            Saves text to stream. see also:<see cref="M:Aspose.Pdf.Facades.PdfExtractor.ExtractText" /></summary>
      <param name="outputStream">The stream to save the text.</param>
    </member>
    <member name="M:Aspose.Pdf.Facades.PdfExtractor.BindPdf(System.String)">
      <summary>
            Bind input PDF file.
            </summary>
      <param name="inputFile">PDF fiel to bind</param>
      <example>
        <code lang="C#">
            PdfExtractor ext = new PdfExtractor();
            ext.BindPdf("sample.pdf");
            </code>
      </example>
    </member>
    <member name="M:Aspose.Pdf.Facades.PdfExtractor.BindPdf(System.IO.Stream)">
      <summary>
            Binds PDF document from stream.
            </summary>
      <param name="inputStream">Stream containing PDF document data</param>
      <example>
        <code lang="C#">
            PdfExtractor ext = new PdfExtractor();
            Stream stream = new FileStream("sample.pdf", FileMode.Open, FileAccess.Read);
            ext.BindPdf(stream);
            </code>
      </example>
    </member>
    <member name="M:Aspose.Pdf.Facades.PdfExtractor.ExtractImage">
      <summary>
            Extract images from PDF file.
            </summary>
      <example>
        <code lang="C#">
            PdfExtractor extractor = new PdfExtractor();
            extractor.BindPdf("sample.pdf");
            extractor.ExtractImage();
            int i = 1;
            while (extractor.HasNextImage())
            {
                extractor.GetNextImage("image-" + i +".pdf");
            }
            </code>
      </example>
    </member>
    <member name="M:Aspose.Pdf.Facades.PdfExtractor.HasNextImage">
      <summary>
            Checks if more images are accessible in PDF document. Note: ExtractImage must be called before using of this method.
            </summary>
      <returns>Trues if more images are accessible</returns>
      <example>
        <code lang="C#">
            PdfExtractor extractor = new PdfExtractor();
            extractor.BindPdf("sample.pdf");
            extractor.ExtractImage();
            int i = 1;
            while (extractor.HasNextImage())
            {
                extractor.GetNextImage("image-" + i +".pdf");
            }
            </code>
      </example>
    </member>
    <member name="M:Aspose.Pdf.Facades.PdfExtractor.GetNextImage(System.String)">
      <summary>
            Retreives next image from PDF document. Note: ExtractImage must be called before using of this method.
            </summary>
      <param name="outputFile">File where image will be stored</param>
      <returns>True is image is successfully extracted</returns>
      <example>
        <code lang="C#">
            PdfExtractor extractor = new PdfExtractor();
            extractor.BindPdf("sample.pdf");
            extractor.ExtractImage();
            int i = 1;
            while (extractor.HasNextImage())
            {
                extractor.GetNextImage("image-" + i +".pdf");
            }
            </code>
      </example>
    </member>
    <member name="M:Aspose.Pdf.Facades.PdfExtractor.GetNextImage(System.String,System.Drawing.Imaging.ImageFormat)">
      <summary>
            Retreives next image from PDF document with given image format. Note: ExtractImage must be called before using of this method.
            </summary>
      <param name="outputFile">File where image will be stored</param>
      <param name="format">The format of the image.</param>
      <returns>True is image is successfully extracted</returns>
    </member>
    <member name="M:Aspose.Pdf.Facades.PdfExtractor.GetNextImage(System.IO.Stream,System.Drawing.Imaging.ImageFormat)">
      <summary>
            Retreive next image from PDF file and stores it into stream with given image format.
            </summary>
      <param name="outputStream">Stream where image data will be saved</param>
      <param name="format">The format of the image.</param>
      <returns>
      </returns>
    </member>
    <member name="M:Aspose.Pdf.Facades.PdfExtractor.GetNextImage(System.IO.Stream)">
      <summary>
            Retreive next image from PDF file and stores it into stream.
            </summary>
      <param name="outputStream">Stream where image data will be saved</param>
      <returns>
      </returns>
    </member>
    <member name="M:Aspose.Pdf.Facades.PdfExtractor.GetAttachNames">
      <summary>
            Returns list of attachments in PDF file. Note: ExtractAttachments must be called befor using this method.
            </summary>
      <returns>List of attachments</returns>
      <example>
            Example demonstrates how to extract attachment names form PDF file.
            <code lang="C#">
            PdfExtractor extractor = new PdfExtractor();
            extractor.BindPdf(TestSettings.GetInputFile("sample.pdf"));
            extractor.ExtractAttachment();
            IList attachments = extractor.GetAttachNames();
            foreach (string name in attachments)
            	Console.WriteLine(name);
            </code></example>
    </member>
    <member name="M:Aspose.Pdf.Facades.PdfExtractor.ExtractAttachment">
      <summary>
            Extracts attachments from a Pdf document.
            </summary>
    </member>
    <member name="M:Aspose.Pdf.Facades.PdfExtractor.ExtractAttachment(System.String)">
      <summary>
            Extracts attachment to PDF file by attachment name.
            </summary>
      <param name="attachmentFileName">Name of attachment to extract</param>
    </member>
    <member name="M:Aspose.Pdf.Facades.PdfExtractor.GetAttachment(System.String)">
      <summary>
            Stores attachment into file.
            </summary>
      <param name="outputPath">
            Directory path where attachment(s) will be stored.
            Null or empty string means attachment(s) will be placed in the application directory.
            </param>
    </member>
    <member name="M:Aspose.Pdf.Facades.PdfExtractor.HasNextPageText">
      <summary>
            Indicates that whether can get more texts or not.
            </summary>
      <example>
            The example demonstratres the <see cref="M:Aspose.Pdf.Facades.PdfExtractor.HasNextPageText" /> property usage in text extraction scenario.
            <code lang="C#">
            PdfExtractor extractor = new PdfExtractor();
            extractor.BindPdf(TestPath + @"Aspose.Pdf.Kit.Pdf");
            extractor.ExtractText(Encoding.Unicode);
            String prefix = TestPath + @"Aspose.Pdf.Kit";
            String suffix = ".txt";
            int pageCount = 1;
            while (extractor.HasNextPageText())
            {
                extractor.GetNextPageText(prefix + pageCount + suffix);
                pageCount++;
            }
            </code><code lang="VB.NET">		
            Dim extractor As PdfExtractor =  New PdfExtractor() 
            extractor.BindPdf(TestPath + "Aspose.Pdf.Kit.Pdf")
            extractor.ExtractText(Encoding.Unicode)
            Dim prefix As String =  TestPath + "Aspose.Pdf.Kit" 
            Dim suffix As String =  ".txt" 
            Dim pageCount As Integer =  1 
            While extractor.HasNextPageText()
                extractor.GetNextPageText(prefix + pageCount + suffix)
                pageCount = pageCount + 1
            End While
            </code></example>
      <returns>Can get more texts or not, true is can, or false.</returns>
    </member>
    <member name="M:Aspose.Pdf.Facades.PdfExtractor.GetNextPageText(System.String)">
      <summary>
            Saves one page's text to file.
            </summary>
      <example>
            The example demonstratres the GetNextPageText method usage in text extraction scenario.
            <code lang="C#">
            PdfExtractor extractor = new PdfExtractor();
            extractor.BindPdf(TestPath + @"Aspose.Pdf.Kit.Pdf");
            extractor.ExtractText(Encoding.Unicode);
            String prefix = TestPath + @"Aspose.Pdf.Kit";
            String suffix = ".txt";
            int pageCount = 1;
            while (extractor.HasNextPageText())
            {
                extractor.GetNextPageText(prefix + pageCount + suffix);
                pageCount++;
            }
            </code><code lang="VB.NET">		
            Dim extractor As PdfExtractor =  New PdfExtractor() 
            extractor.BindPdf(TestPath + "Aspose.Pdf.Kit.Pdf")
            extractor.ExtractText(Encoding.Unicode)
            Dim prefix As String =  TestPath + "Aspose.Pdf.Kit" 
            Dim suffix As String =  ".txt" 
            Dim pageCount As Integer =  1 
            While extractor.HasNextPageText()
                extractor.GetNextPageText(prefix + pageCount + suffix)
                pageCount = pageCount + 1
            End While
            </code></example>
      <param name="outputFile">The file path and name to save the text.</param>
    </member>
    <member name="M:Aspose.Pdf.Facades.PdfExtractor.GetNextPageText(System.IO.Stream)">
      <summary>
            Saves one page's text to stream.
            </summary>
      <example>
            The example demonstratres the <see cref="M:Aspose.Pdf.Facades.PdfExtractor.GetNextPageText(System.String)" /> method usage in text extraction scenario.
            <code lang="C#">
            PdfExtractor extractor = new PdfExtractor();
            extractor.BindPdf(TestPath + @"Aspose.Pdf.Kit.Pdf");
            extractor.ExtractText(Encoding.Unicode);
            String prefix = TestPath + @"Aspose.Pdf.Kit";
            String suffix = ".txt";
            int pageCount = 1;
            while (extractor.HasNextPageText())
            {
                FileStream fs = new FileStream(prefix + pageCount + suffix, FileMode.Create);
                extractor.GetNextPageText(prefix + pageCount + suffix);
                fs.Close();
                pageCount++;
            }
            </code></example>
      <param name="outputStream">The stream to save the text.</param>
    </member>
    <member name="M:Aspose.Pdf.Facades.PdfExtractor.BindPdf(Aspose.Pdf.Generator.Pdf)">
      <summary> 
            Binds a Pdf document for editing.
            </summary>
      <param name="pdf">Pdf document which came from Aspose.Pdf.Generator.</param>
    </member>
    <member name="M:Aspose.Pdf.Facades.PdfExtractor.#ctor">
      <summary>
            Initializes new <see cref="T:Aspose.Pdf.Facades.PdfExtractor" /> object.
            </summary>
    </member>
    <member name="M:Aspose.Pdf.Facades.PdfExtractor.#ctor(Aspose.Pdf.Document)">
      <summary>
            Initializes new <see cref="T:Aspose.Pdf.Facades.PdfExtractor" /> object on base of the <paramref name="document" />.
            </summary>
      <param name="document">
            Pdf document.
            </param>
    </member>
    <member name="M:Aspose.Pdf.Facades.PdfExtractor.GetText(System.IO.Stream,System.Boolean)">
      <summary>
            Saves text to stream. see also:<see cref="M:Aspose.Pdf.Facades.PdfExtractor.ExtractText" /></summary>
      <param name="outputStream">The stream to save the text.</param>
      <param name="filterNotAscii">If this parameter is true all Not ASCII simbols will be removed</param>
    </member>
    <member name="M:Aspose.Pdf.Facades.PdfExtractor.GetAttachment">
      <summary>
             Saves all the attachment file to streams.
             </summary>
      <returns>The stream array of the attachment file in the pdf document.</returns>
      <example>
        <code>
             [C#]
             PdfExtractor extractor = new PdfExtractor();     
            	extractor.BindPdf(path + "Attach.pdf");
            	extractor.ExtractAttachment();
            	IList names = extractor.GetAttachNames();
            	MemoryStream[] tempStreams =  extractor.GetAttachment();
            	for (int i=0; i&lt;tempStreams.Length; i++)
            	{
            		string name = (string)names[i];
            		FileStream fs = new FileStream(path + name,System.IO.FileMode.Create);
            		byte[] tempBytes = new byte[4096];
            		tempStreams[i].Position = 0;
            
            		for (; ; )
            		{
            			int numOfBytes = tempStreams[i].Read(tempBytes, 0, 4096);
            			if (numOfBytes &lt; 1)
            			break;
            			fs.Write(tempBytes, 0, numOfBytes);
            		}
            		fs.Close();
            	}
            	
             [Visual Basic]
             Dim extractor As PdfExtractor =  New PdfExtractor() 
            	extractor.BindPdf(path + "Attach.pdf")
            	extractor.ExtractAttachment()
            	extractor.GetAttachment(path)
             Dim names As IList =  extractor.GetAttachNames() 
             Dim tempStreams() As MemoryStream =  extractor.GetAttachment() 
             for(Integer i = 0 i&lt;tempStreams.Length i++)
             {
             	Dim name As String = CType(names(i), String)
             	Dim fs As FileStream =  New FileStream(path + name,System.IO.FileMode.Create) 
             	Dim tempBytes() As Byte =  New Byte(4096) {} 
             	tempStreams(i).Position = 0
             
             	for()
             	{
             		Dim numOfBytes As Integer =  tempStreams(i).Read(tempBytes,0,4096) 
             		If numOfBytes &lt; 1 Then
             			break
             		End If
             		fs.Write(tempBytes, 0, numOfBytes)
             	}
             	fs.Close()
             }
             </code>
      </example>
    </member>
    <member name="M:Aspose.Pdf.Facades.PdfExtractor.GetAttachmentInfo">
      <summary>
            Gets the list of attachments.
            </summary>
      <returns>Returns an ArrayList.</returns>
    </member>
    <member name="P:Aspose.Pdf.Facades.PdfExtractor.StartPage">
      <summary>
            Gets or sets start page in the page range where extracting operation will be performed.
            <example><code lang="C#">
            PdfExtractor ext = new PdfExtractor();
            ext.BindBdf("sample.pdf");
            ext.StartPage = 2;
            ext.EndPage = 5;
            ext.ExtractText();
            </code></example></summary>
    </member>
    <member name="P:Aspose.Pdf.Facades.PdfExtractor.EndPage">
      <summary>
            Gets or sets end page in the page range where extracting operation will be performed.
            <example><code lang="C#">
            PdfExtractor ext = new PdfExtractor();
            ext.BindBdf("sample.pdf");
            ext.StartPage = 2;
            ext.EndPage = 3;
            ext.ExtractText();
            </code></example></summary>
    </member>
    <member name="P:Aspose.Pdf.Facades.PdfExtractor.ExtractTextMode">
      <summary>
            Sets the mode for extract text's result.
            </summary>
      <value>0 is pure text mode and 1 is raw ordering mode. Default is 0.</value>
      <example>
            The example demonstratres the <see cref="P:Aspose.Pdf.Facades.PdfExtractor.ExtractTextMode" /> property usage in text extraction scenario.
            <code lang="C#">
            PdfExtractor extractor = new PdfExtractor();
            extractor.BindPdf(@"D:\Text\text.pdf");
            extractor.ExtractTextMode = 1;
            extractor.ExtractText();
            extractor.GetText(@"D:\Text\text.txt");
            </code></example>
    </member>
    <member name="P:Aspose.Pdf.Facades.PdfExtractor.TextSearchOptions">
      <summary>
            Gets or sets text search options.
            </summary>
    </member>
    <member name="P:Aspose.Pdf.Facades.PdfExtractor.ExtractImageMode">
      <summary>
            Sets the mode for extract images process.
            </summary>
      <remarks>
            Default value is ExtractImageMode.DefinedInResources that extracts all images defined in resources.
            
            To extract actually shown images ExtractImageMode.ActuallyUsed mode should be used.
            </remarks>
    </member>
    <member name="P:Aspose.Pdf.Facades.PdfExtractor.IsBidi">
      <summary>
            Is true when text has hebriew or arabic symbols. This case must be specially considered because
            string functions change their behaviour and start process text from right to left (except numbers 
            and other non text chars).
            </summary>
    </member>
    <member name="P:Aspose.Pdf.Facades.PdfExtractor.Resolution">
      <summary>
            Set or gets resolution for extracted images.
            Default value is 150.
            Images which have greater resolution value are more clear.
            However increasing resolution value results in increasing time and memory needed to extract images.
            Usually to get clear image it's enough to set resolution to 150 or 300.
            </summary>
    </member>
    <member name="P:Aspose.Pdf.Facades.PdfExtractor.Password">
      <summary>
            Gets or sets input file's password.
            </summary>
    </member>
    <member name="T:Aspose.Pdf.Facades.PdfFileEditor">
      <summary>
            Implements operations with PDF file: concatenation, splitting, extracting pages, making booklet, etc.
            </summary>
    </member>
    <member name="M:Aspose.Pdf.Facades.PdfFileEditor.#ctor">
      <summary>
            PdfFileEditor constructor.
            </summary>
    </member>
    <member name="M:Aspose.Pdf.Facades.PdfFileEditor.Concatenate(System.String,System.String,System.String)">
      <summary>
            Concatentates two files.
            </summary>
      <param name="firstInputFile">First file to concatenate.</param>
      <param name="secInputFile">Second file to concatenate.</param>
      <param name="outputFile">Output file.</param>
      <example>
        <code lang="C#">
            PdfFileEditor fileEditor = new PdfFileEditor();
            fileEditor.Concatenate("file1.pdf", "file2.pdf", "outfile.pdf");
            </code>
      </example>
      <returns>True if operation was succeeded.</returns>
    </member>
    <member name="M:Aspose.Pdf.Facades.PdfFileEditor.Concatenate(System.IO.Stream,System.IO.Stream,System.IO.Stream)">
      <summary>
            Concatenates two files.
            </summary>
      <param name="firstInputStream">Stream of first file.</param>
      <param name="secInputStream">Stream of second file.</param>
      <param name="outputStream">Stream where result file will be stored.</param>
      <returns>True if operation was succeeded.</returns>
      <example>
        <code lang="C#">
            PdfFileEditor fileEditor = new PdfFileEditor();
            Stream stream1 = new FileStream("file1.pdf", FileMode.Open, FileAccess.Read);
            Stream stream2 = new FileStream("file2.pdf", FileMode.Open, FileAccess.Read);
            Stream outstream = new FileStream("outfile.pdf", FileMode.Create, FileAccess.Write);
            fileEditor.Concatenate(stream1, stream2, outstream);
            </code>
      </example>
      <returns>True if operation was succeeded.</returns>
    </member>
    <member name="M:Aspose.Pdf.Facades.PdfFileEditor.Concatenate(Aspose.Pdf.Document[],Aspose.Pdf.Document)">
      <summary>
            Concatenates documents.
            </summary>
      <param name="src">Array of source documents.</param>
      <param name="dest">Destination document.</param>
      <returns>True if concatenation is successful. </returns>
    </member>
    <member name="M:Aspose.Pdf.Facades.PdfFileEditor.Concatenate(System.String[],System.String)">
      <summary>
            Concatenates files into one file. 
            </summary>
      <param name="inputFiles">Array of files to concatenate.</param>
      <param name="outputFile">Name of output file.</param>
      <returns>True if operation was succeeded.</returns>
      <example>
        <code lang="C#">
             PdfFileEditor pfe = new PdfFileEditor();
             pfe.Concatenate(new string[]  { "src1.pdf", "src2.pdf" }, "dest.pdf");
            </code>
      </example>
    </member>
    <member name="M:Aspose.Pdf.Facades.PdfFileEditor.Concatenate(System.IO.Stream[],System.IO.Stream)">
      <summary>
            Concatenates files 
            </summary>
      <param name="inputStream">Array of streams to be concatenated.</param>
      <param name="outputStream">Stream where result file will be stored.</param>
      <returns>True if operation was succeeded.</returns>
      <example>
        <code lang="C#">
            PdfFileEditor fileEditor = new PdfFileEditor();
            Stream stream1 = new FileStream("file1.pdf", FileMode.Open, FileAccess.Read);
            Stream stream2 = new FileStream("file2.pdf", FileMode.Open, FileAccess.Read);
            Stream outstream = new FileStream("outfile.pdf", FileMode.Create, FileAccess.Write);
            fileEditor.Concatenate(new Stream[] { stream1, stream2 } , outstream);
            </code>
      </example>
    </member>
    <member name="M:Aspose.Pdf.Facades.PdfFileEditor.Concatenate(System.String,System.String,System.String,System.String)">
      <summary>
            Merges two Pdf documents into a new Pdf document with pages in alternate ways and fill the blank places with blank pages.
            e.g.: document1 has 5 pages: p1, p2, p3, p4, p5. document2 has 3 pages: p1', p2', p3'.
            Merging the two Pdf document will produce the result document with pages:p1, p1', p2, p2', p3, p3', p4, blankpage, p5, blankpage.
            </summary>
      <param name="firstInputFile">First file.</param>
      <param name="secInputFile">Second file.</param>
      <param name="blankPageFile">PDF file with blank page.</param>
      <param name="outputFile">Result file.</param>
      <returns>True if operation was succeeded.</returns>
      <example>
        <code lang="C#">
             PdfFileEditor pfe = new PdfFileEditor();
             pfe.Concatenate("src1.pdf", "src2.pdf", "blank.pdf", "dest.pdf");
            </code>
      </example>
    </member>
    <member name="M:Aspose.Pdf.Facades.PdfFileEditor.Concatenate(System.IO.Stream,System.IO.Stream,System.IO.Stream,System.IO.Stream)">
      <summary>
            Merges two Pdf documents into a new Pdf document with pages in alternate ways and fill the blank places with blank pages.
            e.g.: document1 has 5 pages: p1, p2, p3, p4, p5. document2 has 3 pages: p1', p2', p3'.
            Merging the two Pdf document will produce the result document with pages:p1, p1', p2, p2', p3, p3', p4, blankpage, p5, blankpage.
            </summary>
      <param name="firstInputStream">The first Pdf Stream.</param>
      <param name="secInputStream">The second Pdf Stream.</param>
      <param name="blankPageStream">The Pdf Stream with blank page</param>
      <param name="outputStream">Output Pdf Stream.</param>
      <returns> True if operation was succeeded.</returns>
      <example>
        <code lang="C#">
            PdfFileEditor fileEditor = new PdfFileEditor();
            Stream stream1 = new FileStream("file1.pdf", FileMode.Open, FileAccess.Read);
            Stream stream2 = new FileStream("file2.pdf", FileMode.Open, FileAccess.Read);
            Stream blank = new FileStream("blank.pdf", FileMode.Open, FileAccess.Read);
            Stream outstream = new FileStream("outfile.pdf", FileMode.Create, FileAccess.Write);
            fileEditor.Concatenate(new Stream[] { stream1, stream2, blank } , outstream);
            </code>
      </example>
    </member>
    <member name="M:Aspose.Pdf.Facades.PdfFileEditor.Append(Aspose.Pdf.Document,Aspose.Pdf.Document[],System.Int32,System.Int32)">
      <summary>
            Internal function to append documents to source document
            </summary>
      <param name="dest">
      </param>
      <param name="documents">
      </param>
      <param name="startPage">
      </param>
      <param name="endPage">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:Aspose.Pdf.Facades.PdfFileEditor.Append(System.IO.Stream,System.IO.Stream[],System.Int32,System.Int32,System.IO.Stream)">
      <summary>
            Appends pages, which are chosen from array of documents in portStreams.
            The result document includes firstInputFile and all portStreams documents pages in the range startPage to endPage.
            </summary>
      <param name="inputStream">Input Pdf stream.</param>
      <param name="portStreams">Documents to copy pages from.</param>
      <param name="startPage">Page starts in portStreams documents.</param>
      <param name="endPage">Page ends in portStreams documents .</param>
      <param name="outputStream">Output Pdf stream.</param>
      <returns>True for success, or false.</returns>
      <example>
        <code lang="C#">
            PdfFileEditor fileEditor = new PdfFileEditor();
            Stream instream = new FileStream("input.pdf", FileMode.Open, FileAccess.Read);
            Stream stream1 = new FileStream("file1.pdf", FileMode.Open, FileAccess.Read);
            Stream stream2 = new FileStream("file2.pdf", FileMode.Open, FileAccess.Read);
            Stream outstream = new FileStream("outfile.pdf", FileMode.Create, FileAccess.Write);
            fileEditor.Append(instream, new Stream[] { stream1, stream2}, 3, 5, outstream);
            </code>
      </example>
    </member>
    <member name="M:Aspose.Pdf.Facades.PdfFileEditor.Append(System.String,System.String[],System.Int32,System.Int32,System.String)">
      <summary>
            Appends pages, which are chosen from portFiles documents. 
            The result document includes firstInputFile and all portFiles documents pages in the range startPage to endPage.
            </summary>
      <param name="inputFile">Input Pdf file.</param>
      <param name="portFiles">Documents to copy pages from.</param>
      <param name="startPage">Page starts in portFiles documents.</param>
      <param name="endPage">Page ends in portFiles documents .</param>
      <param name="outputFile">Output Pdf document.</param>
      <returns>True if operation was succeeded.</returns>
      <example>
        <code lang="C#">
            PdfFileEditor fileEditor = new PdfFileEditor();
            fileEditor.Append("input.pdf", new string[] { "file1.pdf", "file2.pdf"}, 3, 5, "outfile.pdf");
            </code>
      </example>
    </member>
    <member name="M:Aspose.Pdf.Facades.PdfFileEditor.Append(System.String,System.String,System.Int32,System.Int32,System.String)">
      <summary>
            Appends pages, which are chosen from portFile within the range from startPage to endPage, in portFile at the end of firstInputFile.
            </summary>
      <param name="inputFile">Input Pdf file.</param>
      <param name="portFile">Pages from Pdf file.</param>
      <param name="startPage">Page starts in portFile.</param>
      <param name="endPage">Page ends in portFile.</param>
      <param name="outputFile">Output Pdf document.</param>
      <returns>True if operation was succeeded.</returns>
      <example>
        <code lang="C#">
            PdfFileEditor fileEditor = new PdfFileEditor();
            fileEditor.Append("input.pdf", "file1.pdf",  3, 5, "outfile.pdf");
            </code>
      </example>
    </member>
    <member name="M:Aspose.Pdf.Facades.PdfFileEditor.Append(System.IO.Stream,System.IO.Stream,System.Int32,System.Int32,System.IO.Stream)">
      <summary>
             Appends pages,which are chosen from portStream within the range from startPage to endPage, in portStream at the end of firstInputStream.
            </summary>
      <param name="inputStream">Input file Stream.</param>
      <param name="portStream">Pages from Pdf file Stream.</param>
      <param name="startPage">Page starts in portFile Stream.</param>
      <param name="endPage">Page ends in portFile Stream.</param>
      <param name="outputStream">Output Pdf file Stream.</param>
      <returns>True for success, or false.</returns>
      <example>
        <code lang="C#">
            PdfFileEditor fileEditor = new PdfFileEditor();
            Stream instream = new FileStream("input.pdf", FileMode.Open, FileAccess.Read);
            Stream stream1 = new FileStream("file1.pdf", FileMode.Open, FileAccess.Read);
            Stream outstream = new FileStream("outfile.pdf", FileMode.Create, FileAccess.Write);
            fileEditor.Append(instream, stream1,  3, 5, "outfile.pdf");
            </code>
      </example>
    </member>
    <member name="M:Aspose.Pdf.Facades.PdfFileEditor.Insert(System.String,System.Int32,System.String,System.Int32,System.Int32,System.String)">
      <summary>
            Inserts pages from an other file into the Pdf file at a position. 
            </summary>
      <param name="inputFile">Input Pdf file.</param>
      <param name="insertLocation">Position in input file.</param>
      <param name="portFile">The porting Pdf file.</param>
      <param name="startPage">Start position in portFile.</param>
      <param name="endPage">End position in portFile.</param>
      <param name="outputFile">Output Pdf file.</param>
      <returns>True for success, or false.</returns>
      <example>
        <code lang="C#">
            PdfFileEditor pfe = new PdfFileEditor();
            pfe.Insert("file1.pdf", 1, "file2.pdf", 2, 6, "out.pdf");
            </code>
      </example>
    </member>
    <member name="M:Aspose.Pdf.Facades.PdfFileEditor.Insert(System.IO.Stream,System.Int32,System.IO.Stream,System.Int32,System.Int32,System.IO.Stream)">
      <summary>
            Inserts pages from an other file into the input Pdf file.
            </summary>
      <param name="inputStream">Input Stream of  Pdf file. </param>
      <param name="insertLocation">Insert position in input file.</param>
      <param name="portStream">Stream of Pdf file for pages.</param>
      <param name="startPage">From which page to start.</param>
      <param name="endPage">To which page to end.</param>
      <param name="outputStream">Output Stream.</param>
      <returns>True for success, or false.</returns>
      <example>
        <code lang="C#">
            PdfFileEditor pfe = new PdfFileEditor();
            Stream sourceStream = new FileStream("file1.pdf", FileMode.Open, FileAccess.Read);
            Stream insertedStream = new FileStream("file2.pdf", FileMode.Open, FileAccess.Read);
            Stream outStream = new FileStream("out.pdf", FileMode.Create, FileAccess.Write);
            pfe.Insert(sourceStream, 1, insertedStream, 2, 6, outStream);
            </code>
      </example>
    </member>
    <member name="M:Aspose.Pdf.Facades.PdfFileEditor.Insert(System.String,System.Int32,System.String,System.Int32[],System.String)">
      <summary>
            Inserts pages from an other file into the input Pdf file.
            </summary>
      <param name="inputFile">Input Pdf file.</param>
      <param name="insertLocation">Insert position in input file.</param>
      <param name="portFile">Pages from the Pdf file.</param>
      <param name="pageNumber">The page number of the ported in portFile.</param>
      <param name="outputFile">Output Pdf file.</param>
      <returns>True for success, or false.</returns>
      <example>
        <code lang="C#">
            PdfFileEditor pfe = new PdfFileEditor();
            Stream sourceStream = new FileStream("file1.pdf", FileMode.Open, FileAccess.Read);
            Stream insertedStream = new FileStream("file2.pdf", FileMode.Open, FileAccess.Read);
            Stream outStream = new FileStream("out.pdf", FileMode.Create, FileAccess.Write);
            pfe.Insert(sourceStream, 1, insertedStream, 2, 6, outStream);
            </code>
      </example>
    </member>
    <member name="M:Aspose.Pdf.Facades.PdfFileEditor.Insert(System.IO.Stream,System.Int32,System.IO.Stream,System.Int32[],System.IO.Stream)">
      <summary>
            Inserts pages from an other file into the input Pdf file.
            </summary>
      <param name="inputStream">Input Stream of  Pdf file. </param>
      <param name="insertLocation">Insert position in input file.</param>
      <param name="portStream">Stream of Pdf file for pages.</param>
      <param name="pageNumber">The page number of the ported in portFile.</param>
      <param name="outputStream">Output Stream.</param>
      <returns>True if operation was succeeded.</returns>
      <example>
        <code lang="C#">
            PdfFileEditor pfe = new PdfFileEditor();
            Stream sourceStream = new FileStream("file1.pdf", FileMode.Open, FileAccess.Read);
            Stream insertedStream = new FileStream("file2.pdf", FileMode.Open, FileAccess.Read);
            Stream outStream = new FileStream("out.pdf", FileMode.Create, FileAccess.Write);
            pfe.Insert(sourceStream, 1, insertedStream, new int[] { 3, 4, 5}, outStream);
            </code>
      </example>
    </member>
    <member name="M:Aspose.Pdf.Facades.PdfFileEditor.Delete(System.String,System.Int32[],System.String)">
      <summary>
            Deletes pages specified by number array from input file, saves as a new Pdf file. 
             </summary>
      <param name="inputFile">Input file path.</param>
      <param name="pageNumber">Index of page out of the input file.</param>
      <param name="outputFile">Output file path.</param>
      <returns>True if operation was succeeded.</returns>
      <example>
        <code lang="C#">
             PdfFileEditor pfe = new PdfFileEditor();
             pfe.Delete("input.pdf", new int[] { 2, 3 }, "out.pdf");
             </code>
      </example>
    </member>
    <member name="M:Aspose.Pdf.Facades.PdfFileEditor.Delete(System.IO.Stream,System.Int32[],System.IO.Stream)">
      <summary>
            Deletes pages specified by number array from input file, saves as a new Pdf file. 
            </summary>
      <param name="inputStream">Input file Stream.</param>
      <param name="pageNumber">Index of page out of the input file.</param>
      <param name="outputStream">Output file stream.</param>
      <returns>True for success, or false.</returns>
      <example>
        <code lang="C#">
            PdfFileEditor pfe = new PdfFileEditor();
            Stream intputStream = new FileStream("input.pdf", FileMode.Open, FileAccess.Read);
            Stream outputStream = new FileStream("output.pdf", FileMode.Create, FileAccess.Write);
            pfe.Delete(inputStream, new int[] { 2, 3 }, outputStream);
            </code>
      </example>
    </member>
    <member name="M:Aspose.Pdf.Facades.PdfFileEditor.Extract(System.String,System.Int32,System.Int32,System.String)">
      <summary>
            Extracts pages from input file,saves as a new Pdf file.
            </summary>
      <param name="inputFile">Input Pdf file path.</param>
      <param name="startPage">Start page number.</param>
      <param name="endPage">End page number.</param>
      <param name="outputFile">Output Pdf file path.</param>
      <returns>True for success, or false.</returns>
      <example>
        <code lang="C#">
            PdfFileEditor pfe = new PdfFileEditor();
            pfe.Extract("input.pdf", 3, 7, "output.pdf");
            </code>
      </example>
    </member>
    <member name="M:Aspose.Pdf.Facades.PdfFileEditor.Extract(System.String,System.Int32[],System.String)">
      <summary>
            Extracts pages specified by number array, saves as a new PDF file. 
             </summary>
      <param name="inputFile">Input file path.</param>
      <param name="pageNumber">Index of page out of the input file.</param>
      <param name="outputFile">Output file path.</param>
      <returns>True if operation was succeeded.</returns>
      <example>
        <code lang="C#">
             PdfFileEditor pfe = new PdfFileEditor();
             pfe.Extract("input.pdf", new int[] { 3, 5, 7 }, "output.pdf");
             </code>
      </example>
    </member>
    <member name="M:Aspose.Pdf.Facades.PdfFileEditor.Extract(System.IO.Stream,System.Int32,System.Int32,System.IO.Stream)">
      <summary>
            Extracts pages from input file,saves as a new Pdf file.
            </summary>
      <param name="inputStream">Input file Stream.</param>
      <param name="startPage">Start page number.</param>
      <param name="endPage">End page number.</param>
      <param name="outputStream">Output Pdf file Stream.</param>
      <returns>True for success, or false.</returns>
      <example>
        <code lang="C#">
            PdfFileEditor pfe = new PdfFileEditor();
            Stream sourceStream = new FileStream("file1.pdf", FileMode.Open, FileAccess.Read);
            Stream outStream = new FileStream("out.pdf", FileMode.Create, FileAccess.Write);
            pfe.Extract(sourceStream, 1, 3, 6, outStream);
            </code>
      </example>
    </member>
    <member name="M:Aspose.Pdf.Facades.PdfFileEditor.Extract(System.IO.Stream,System.Int32[],System.IO.Stream)">
      <summary>
            Extracts pages specified by number array, saves as a new Pdf file. 
            </summary>
      <param name="inputStream">Input file Stream.</param>
      <param name="pageNumber">Index of page out of the input file.</param>
      <param name="outputStream">Output file stream.</param>
      <returns>True for success, or false.</returns>
      <example>
        <code lang="C#">
            PdfFileEditor pfe = new PdfFileEditor();
            Stream sourceStream = new FileStream("file1.pdf", FileMode.Open, FileAccess.Read);
            Stream outStream = new FileStream("out.pdf", FileMode.Create, FileAccess.Write);
            pfe.Extract(sourceStream, new int[] { 3, 5, 8 }, outStream);
            </code>
      </example>
    </member>
    <member name="M:Aspose.Pdf.Facades.PdfFileEditor.SplitFromFirst(System.String,System.Int32,System.String)">
      <summary>
            Splits Pdf file from first page to specified location,and saves the front part as a new file.
            </summary>
      <param name="inputFile">Source Pdf file.</param>
      <param name="location">The splitting point.</param>
      <param name="outputFile">Output Pdf file.</param>
      <returns>True for success, or false.</returns>
      <example>
        <code lang="C#">
            PdfFileEditor pfe = new PdfFileEditor();
            pfe.SplitFromFirst("input.pdf", 5, "out.pdf");
            </code>
      </example>
    </member>
    <member name="M:Aspose.Pdf.Facades.PdfFileEditor.SplitFromFirst(System.IO.Stream,System.Int32,System.IO.Stream)">
      <summary>
            Splits from start to specified location,and saves the front part in output Stream.
            </summary>
      <param name="inputStream">Source Pdf file Stream.</param>
      <param name="location">The splitting point.</param>
      <param name="outputStream">Output file Stream.</param>
      <returns>True for success, or false.</returns>
      <remarks>The streams are NOT closed after this operation.</remarks>
      <example>
        <code lang="C#">
            PdfFileEditor pfe = new PdfFileEditor();
            Stream sourceStream = new FileStream("file1.pdf", FileMode.Open, FileAccess.Read);
            Stream outStream = new FileStream("out.pdf", FileMode.Create, FileAccess.Write);
            pfe.SplitFromFirst(sourceStream, 5, outStream);
            </code>
      </example>
    </member>
    <member name="M:Aspose.Pdf.Facades.PdfFileEditor.SplitToEnd(System.String,System.Int32,System.String)">
      <summary>
            Splits from location, and saves the rear part as a new file.
            </summary>
      <param name="inputFile">Source Pdf file.</param>
      <param name="location">The splitting position.</param>
      <param name="outputFile">Output Pdf file path.</param>
      <returns>True for success, or false.</returns>
      <example>
        <code lang="C#">
            PdfFileEditor pfe = new PdfFileEditor();
            pfe.SplitToEnd("input.pdf", 5, "out.pdf");
            </code>
      </example>
    </member>
    <member name="M:Aspose.Pdf.Facades.PdfFileEditor.SplitToEnd(System.IO.Stream,System.Int32,System.IO.Stream)">
      <summary>
            Splits from specified location, and saves the rear part as a new file Stream.
            </summary>
      <param name="inputStream">Source Pdf file Stream.</param>
      <param name="location">The splitting position.</param>
      <param name="outputStream">Output Pdf file Stream.</param>
      <returns>True for success, or false.</returns>
      <remarks>The streams are NOT closed after this operation unless CloseConcatedStreams is specified.</remarks>
      <example>
        <code lang="C#">
            PdfFileEditor pfe = new PdfFileEditor();
            Stream sourceStream = new FileStream("file1.pdf", FileMode.Open, FileAccess.Read);
            Stream outStream = new FileStream("out.pdf", FileMode.Create, FileAccess.Write);
            pfe.SplitToEnd(sourceStream, 5, outStream);
            </code>
      </example>
    </member>
    <member name="M:Aspose.Pdf.Facades.PdfFileEditor.MakeBooklet(System.String,System.String)">
      <summary> Makes booklet from the input file to output file.
            </summary>
      <param name="inputFile">Input pdf file path and name.
            </param>
      <param name="outputFile">Output pdf file path and name.
            </param>
      <returns> boolean - True for success, or false.</returns>
      <example>
        <code lang="C#">
            PdfFileEditor pfe = new PdfFileEditor();
            pfe.MakeBooklet("input.pdf", "output.pdf");
            </code>
      </example>
    </member>
    <member name="M:Aspose.Pdf.Facades.PdfFileEditor.MakeBooklet(System.IO.Stream,System.IO.Stream)">
      <summary> Makes booklet from the InputStream to outputStream.
            </summary>
      <param name="inputStream">Input pdf stream.
            </param>
      <param name="outputStream">output pdf stream.
            </param>
      <returns> True if operation was succeeded.</returns>
      <example>
        <code lang="C#">
            PdfFileEditor pfe = new PdfFileEditor();
            Stream inputStream = new FileStream("input.pdf", FileMode.Open, FileAccess.Read);
            Stream outputStream = new FileStream("output.pdf", FileMode.Create, FileAccess.Write);
            pfe.MakeBooklet(inputStream, outputStream);
            </code>
      </example>
    </member>
    <member name="M:Aspose.Pdf.Facades.PdfFileEditor.MakeBooklet(System.String,System.String,Aspose.Pdf.PageSize)">
      <summary> Makes booklet from the inputFile to outputFile.
            </summary>
      <param name="inputFile">Input pdf file path and name.
            </param>
      <param name="outputFile">Output pdf file path and name.
            </param>
      <param name="pageSize">The page size of the output pdf file.
            </param>
      <returns>True if operation is succeeded.</returns>
      <example>
        <code lang="C#">
            PdfFileEditor pfe = new PdfFileEditor();
            pfe.MakeBooklet("input.pdf", "output.pdf", PageSize.A4);
            </code>
      </example>
    </member>
    <member name="M:Aspose.Pdf.Facades.PdfFileEditor.MakeBooklet(System.IO.Stream,System.IO.Stream,Aspose.Pdf.PageSize)">
      <summary> Makes booklet from the input stream and save result into output stream.
            </summary>
      <param name="inputStream">Input PDF stream.
            </param>
      <param name="outputStream">output pdf stream.
            </param>
      <param name="pageSize">The page size of the output pdf file.
            </param>
      <example>
        <code lang="C#">
            PdfFileEditor pfe = new PdfFileEditor();
            Stream inputStream = new FileStream("input.pdf", FileMode.Open, FileAccess.Read);
            Stream outputStream = new FileStream("output.pdf", FileMode.Create, FileAccess.Write);
            pfe.MakeBooklet(inputStream, outputStream, PageSize.A4);
            </code>
      </example>
      <returns>True if operation was succeeded.</returns>
    </member>
    <member name="M:Aspose.Pdf.Facades.PdfFileEditor.MakeBooklet(System.String,System.String,System.Int32[],System.Int32[])">
      <summary>
            Makes customized booklet from the firstInputFile to outputFile.
            </summary>
      <param name="inputFile">The input file.</param>
      <param name="outputFile">Output pdf file path and name.</param>
      <param name="leftPages">The left pages of the booklet.</param>
      <param name="rightPages">The right pages of the booklet.</param>
      <returns>boolean - True for success, or false.</returns>
      <example>
        <code lang="C#">
            PdfFileEditor pfe = new PdfFileEditor();
            pfe.MakeBooklet("input.pdf", "output.pdf", new int[] { 2, 4, 6 }, new int[] 1, 3, 5, 7 });
            </code>
      </example>
    </member>
    <member name="M:Aspose.Pdf.Facades.PdfFileEditor.MakeBooklet(System.IO.Stream,System.IO.Stream,System.Int32[],System.Int32[])">
      <summary>
            Makes customized booklet from the firstInputStream to outputStream.
            </summary>
      <param name="inputStream">The input stream.</param>
      <param name="outputStream">output pdf stream.</param>
      <param name="leftPages">The left pages.</param>
      <param name="rightPages">The right pages.</param>
      <returns>boolean - True for success, or false.</returns>
      <example>
        <code lang="C#">
            PdfFileEditor pfe = new PdfFileEditor();
            Stream inputStream = new FileStream("input.pdf", FileMode.Open, FileAccess.Read);
            Stream outputStream = new FileStream("output.pdf", FileMode.Create, FileAccess.Write);
            pfe.MakeBooklet(inputStream, outputStream, new int[] { 2, 4, 6 }, new int[] 1, 3, 5, 7 });
            </code>
      </example>
    </member>
    <member name="M:Aspose.Pdf.Facades.PdfFileEditor.MakeBooklet(System.String,System.String,Aspose.Pdf.PageSize,System.Int32[],System.Int32[])">
      <summary>
            Makes customized booklet from the firstInputFile to outputFile.
            </summary>
      <param name="inputFile">The input file.</param>
      <param name="outputFile">Output pdf file path and name.</param>
      <param name="pageSize">The page size of the output pdf file.</param>
      <param name="leftPages">The left pages.</param>
      <param name="rightPages">The right pages.</param>
      <returns>boolean - True for success, or false. </returns>
      <example>
        <code lang="C#">
            PdfFileEditor pfe = new PdfFileEditor();
            pfe.MakeBooklet("input.pdf", "output.pdf", PageSize.A4, new int[] { 2, 4, 6 }, new int[] 1, 3, 5, 7 });
            </code>
      </example>
    </member>
    <member name="M:Aspose.Pdf.Facades.PdfFileEditor.MakeBooklet(System.IO.Stream,System.IO.Stream,Aspose.Pdf.PageSize,System.Int32[],System.Int32[])">
      <summary>
            Makes booklet from the firstInputStream to outputStream.
            </summary>
      <param name="inputStream">The input stream.</param>
      <param name="outputStream">output pdf stream.</param>
      <param name="pageSize">The page size of the output pdf file.</param>
      <param name="leftPages">The left pages.</param>
      <param name="rightPages">The right pages.</param>
      <returns>boolean - True for success, or false.</returns>
      <example>
        <code lang="C#">
            PdfFileEditor pfe = new PdfFileEditor();
            Stream inputStream = new FileStream("input.pdf", FileMode.Open, FileAccess.Read);
            Stream outputStream = new FileStream("output.pdf", FileMode.Create, FileAccess.Write);
            pfe.MakeBooklet(inputStream, outputStream, PageSize.A4, new int[] { 2, 4, 6 }, new int[] 1, 3, 5, 7 });
            </code>
      </example>
    </member>
    <member name="M:Aspose.Pdf.Facades.PdfFileEditor.MakeNUp(System.String,System.String,System.Int32,System.Int32)">
      <summary> Makes N-Up document from the firstInputFile to outputFile.
            </summary>
      <param name="inputFile">Input pdf file path and name.
            </param>
      <param name="outputFile">Output pdf file path and name.
            </param>
      <param name="x">Number of columns.
            </param>
      <param name="y">Number of rows.
            </param>
      <returns> boolean - True for success, or false. </returns>
      <example>
        <code lang="C#">
            PdfFileEditor pfe = new PdfFileEditor();
            pfe.MakeNUp("input.pdf", "output.pdf", 3, 3);
            </code>
      </example>
    </member>
    <member name="M:Aspose.Pdf.Facades.PdfFileEditor.MakeNUp(System.IO.Stream,System.IO.Stream,System.Int32,System.Int32)">
      <summary> Makes N-Up document from the input stream and saves result into output stream.
            </summary>
      <param name="inputStream">Input pdf stream.
            </param>
      <param name="outputStream">Output pdf stream.
            </param>
      <param name="x">Number of columns.
            </param>
      <param name="y">Number of rows.
            </param>
      <returns> boolean - True for success, or false.</returns>
      <example>
        <code lang="C#">
            PdfFileEditor pfe = new PdfFileEditor();
            Stream inputStream = new FileStream("input.pdf", FileMode.Open, FileAccess.Read);
            Stream outputStream = new FileStream("output.pdf", FileMode.Create, FileAccess.Write);
            pfe.MakeNUp(inputStream, outputStream, 3, 3);
            </code>
      </example>
    </member>
    <member name="M:Aspose.Pdf.Facades.PdfFileEditor.MakeNUp(System.IO.Stream,System.IO.Stream,System.Int32,System.Int32,Aspose.Pdf.PageSize)">
      <summary> Makes N-Up document from the first input stream to output stream.
            </summary>
      <param name="inputStream">Input pdf stream.
            </param>
      <param name="outputStream">Output pdf stream.
            </param>
      <param name="x">Number of columns.
            </param>
      <param name="y">Number of rows.
            </param>
      <param name="pageSize">The page size of the output pdf file.
            </param>
      <returns>True if operation was succeeded.</returns>
      <example>
        <code lang="C#">
            PdfFileEditor pfe = new PdfFileEditor();
            Stream inputStream = new FileStream("input.pdf", FileMode.Open, FileAccess.Read);
            Stream outputStream = new FileStream("output.pdf", FileMode.Create, FileAccess.Write);
            pfe.MakeNUp(inputStream, outputStream, 3, 3, PageSize.A4);
            </code>
      </example>
    </member>
    <member name="M:Aspose.Pdf.Facades.PdfFileEditor.MakeNUp(System.String,System.String,System.String)">
      <summary> Makes N-Up document from the two input PDF files to outputFile. 
            Each page of outputFile will contain two pages, one page is from the first input file 
            and another is from the second input file. The two pages are piled up horizontally. 
            </summary>
      <param name="firstInputFile">first input file.
            </param>
      <param name="secondInputFile">second input file.
            </param>
      <param name="outputFile">Output pdf file path and name.
            </param>
      <returns> boolean - True for success, or false.</returns>
      <example>
        <code lang="C#">
            PdfFileEditor pfe = new PdfFileEditor();
            pfe.MakeNUp("input1.pdf", "input2.pdf", "output.pdf");
            </code>
      </example>
    </member>
    <member name="M:Aspose.Pdf.Facades.PdfFileEditor.MakeNUp(System.IO.Stream,System.IO.Stream,System.IO.Stream)">
      <summary> Makes N-Up document from the two input PDF streams to outputStream.
            </summary>
      <param name="firstInputStream">first input stream.
            </param>
      <param name="secondInputStream">second input stream.
            </param>
      <param name="outputStream">Output pdf stream.
            </param>
      <returns> boolean - True for success, or false.</returns>
      <example>
        <code lang="C#">
            PdfFileEditor pfe = new PdfFileEditor();
            Stream input1 = new FileStream("input1.pdf", FileMode.Open, FileAccess.Read);
            Stream input2 = new FileStream("input2.pdf", FileMode.Open, FileAccess.Read);
            Stream output = new FileStream("output.pdf");
            pfe.MakeNUp(input1, input2, output);
            </code>
      </example>
    </member>
    <member name="M:Aspose.Pdf.Facades.PdfFileEditor.MakeNUp(System.String[],System.String,System.Boolean)">
      <summary> Makes N-Up document from the multi input PDF files to outputFile. 
            Each page of outputFile will contain multi pages, which are combination with pages 
            in the input files of the same page number. The multi pages piled up horizontally 
            if isSidewise is true and piled up vertically if isSidewise is false. 
            </summary>
      <param name="inputFiles">Input Pdf files.</param>
      <param name="outputFile">Output pdf file path and name.
            </param>
      <param name="isSidewise">Piled up way, true for horizontally and flase for vertically.</param>
      <returns> boolean - True for success, or false.</returns>
      <example>
        <code lang="C#">
            PdfFileEditor pfe = new PdfFileEditor();
            pfe.MakeNUp(new string[] { "input1.pdf", "input2.pdf", "input3.pdf" }, "output.pdf", false);
            </code>
      </example>
    </member>
    <member name="M:Aspose.Pdf.Facades.PdfFileEditor.MakeNUp(System.IO.Stream[],System.IO.Stream,System.Boolean)">
      <summary> Makes N-Up document from the multi input PDF streams to outputStream.
            Each page of outputStream will contain multi pages, which are combination with pages 
            in the input streams of the same page number. The multi-pages piled up horizontally 
            if isSidewise is true and piled up vertically if isSidewise is false.
            </summary>
      <param name="inputStreams">Input Pdf streams.</param>
      <param name="outputStream">Output pdf stream.
            <param name="isSidewise">Piled up way, true for horizontally and flase for vertically</param></param>
      <returns> boolean - True for success, or false.</returns>
      <example>
        <code lang="C#">
            PdfFileEditor pfe = new PdfFileEditor();
            Stream stream1 = new FileStream("input1.pdf", FileMode.Open, FileAccess.Read);
            Stream stream2 = new FileStream("input2.pdf", FileMode.Open, FileAccess.Read);
            Stream stream3 = new FileStream("input3.pdf", FileMode.Open, FileAccess.Read);
            Stream output = new FileStream("output.pdf", FileMode.Create, FileAccess.Write);
            pfe.MakeNUp(new Stream[] { stream1, stream2, stream3 }, output, false);
            </code>
      </example>
    </member>
    <member name="M:Aspose.Pdf.Facades.PdfFileEditor.MakeNUp(System.String,System.String,System.Int32,System.Int32,Aspose.Pdf.PageSize)">
      <summary> Makes N-Up document from the input file to outputFile.
            </summary>
      <param name="inputFile">Input pdf file path and name.
            </param>
      <param name="outputFile">Output pdf file path and name.
            </param>
      <param name="x">Number of columns.
            </param>
      <param name="y">Number of rows.
            </param>
      <param name="pageSize">The page size of the output pdf file.
            </param>
      <returns> boolean - True for success, or false.</returns>
      <example>
        <code lang="C#">
            PdfFileEditor pfe = new PdfFileEditor();
            pfe.MakeNUp("input.pdf", "output.pdf", 3, 3, PageSize.A4);
            </code>
      </example>
    </member>
    <member name="M:Aspose.Pdf.Facades.PdfFileEditor.SplitToPages(System.String)">
      <summary>
            Splits the PDF file into single-page documents.
            </summary>
      <param name="inputFile">Input PDF file name.</param>
      <returns>Output PDF streams, each stream buffers a single-page PDF document.</returns>
    </member>
    <member name="M:Aspose.Pdf.Facades.PdfFileEditor.SplitToPages(System.IO.Stream)">
      <summary>
            Splits the Pdf file into single-page documents.
            </summary>
      <param name="inputStream">Input Pdf stream.</param>
    </member>
    <member name="M:Aspose.Pdf.Facades.PdfFileEditor.SplitToPages(System.String,System.String)">
      <summary>
            Split the Pdf file into single-page documents and saves it into specified path. Path is specifield by field name temaplate.
            </summary>
      <param name="inputFile">Input file name.</param>
      <param name="fileNameTemplate">Template of resultant file name. Must contain %NUM% which is replaced with page number. For example, if c:/dir/page%NUM%.pdf is specified, resultant files will have the following names: c:/dir/page1.pdf, c:/dir/page2.pdf etc.</param>
    </member>
    <member name="M:Aspose.Pdf.Facades.PdfFileEditor.SplitToPages(System.IO.Stream,System.String)">
      <summary>
            Split the Pdf file into single-page documents and saves it into specified path. Path is specifield by field name temaplate.
            </summary>
      <param name="inputStream">Stream of the soruce document.</param>
      <param name="fileNameTemplate">Template of resultant file name. Must contain %NUM% which is replaced with page number. For example, if c:/dir/page%NUM%.pdf is specified, resultant files will have the following names: c:/dir/page1.pdf, c:/dir/page2.pdf etc.</param>
    </member>
    <member name="M:Aspose.Pdf.Facades.PdfFileEditor.SplitToBulks(System.String,System.Int32[][])">
      <summary>
            Splits the Pdf file into several documents.The documents can be single-page or multi-pages.
            </summary>
      <param name="inputFile">Input PDF file.</param>
      <param name="numberOfPage">Array which contains array of double elements, which is start and end pages of document.</param>
      <returns>Output PDF streams, each stream buffers a PDF document.</returns>
    </member>
    <member name="M:Aspose.Pdf.Facades.PdfFileEditor.SplitToBulks(System.IO.Stream,System.Int32[][])">
      <summary>
            Splits the Pdf file into several documents.The documents can be single-page or multi-pages.
            </summary>
      <param name="inputStream">Input PDF stream.</param>
      <param name="numberOfPage">The start page and the end page of each document.</param>
      <returns>Output PDF streams, each stream buffers a PDF document.</returns>
    </member>
    <member name="M:Aspose.Pdf.Facades.PdfFileEditor.ResizeContents(System.IO.Stream,System.IO.Stream,System.Int32[],Aspose.Pdf.Facades.PdfFileEditor.ContentsResizeParameters)">
      <summary>
            Resizes contents of pages of the document.
            </summary>
      <param name="source">Stream with source document.</param>
      <param name="destination">Stream with the destination document.</param>
      <param name="pages">Array of page indexes.</param>
      <param name="parameters">Resize parameters.</param>
      <returns>Returns true if success.</returns>
      <example>
        <code lang="C#">
            PdfFileEditor fileEditor = new PdfFileEditor();
            Stream src = new Stream("input.pdf", FileMode.Open);
            Stream dest = new Stream("output.pdf", FileMode.Create);
            PdfFileEditor.ContentsResizeParameters parameters = new PdfFileEditor.ContentsResizeParameters(
                //left margin = 10% of page width
                PdfFileEditor.ContentsResizeValue.Percents(10),
                //new contents width calculated automatically as width - left margin - right margin (100% - 10% - 10% = 80%)
                null,
                //right margin is 10% of page 
                PdfFileEditor.ContentsResizeValue.Percents(10),
                //top margin = 10% of height
                PdfFileEditor.ContentsResizeValue.Percents(10),
                //new contents height is calculated automatically (similar to width)
                null,
                //bottom margin is 10%
                PdfFileEditor.ContentsResizeValue.Percents(10)
                   );
            fileEditor.ResizeContents(src, dest, new int[] { 1, 2,.3}, parameters);
            dest.Close();
            </code>
      </example>
    </member>
    <member name="M:Aspose.Pdf.Facades.PdfFileEditor.ResizeContents(System.IO.Stream,System.IO.Stream,System.Int32[],System.Double,System.Double)">
      <summary>
            Resizes contents of document pages. 
            Shrinks contents of page and adds margins.
            New size of contents is specified in default space units.
            </summary>
      <param name="source">Stream which contains source document.</param>
      <param name="destination">Stream where resultant document will be saved.</param>
      <param name="pages">Array of page indexes. If null then all document pages will be processed.</param>
      <param name="newWidth">New width of page contents in default space units.</param>
      <param name="newHeight">New height of page contents in default space units.</param>
      <returns>True if resize was successful.</returns>
      <example>
        <code lang="C#">
            PdfFileEditor fileEditor = new PdfFileEditor();
            Stream src = new Stream("input.pdf", FileMode.Open);
            Stream dest = new Stream("output.pdf", FileMode.Create);
            fileEditor.ResizeContents(src, dest, 
            //resize all pages of document
            null, 
            //new contents width = 200
            200, 
            //new contents height = 300
            300);
            // rest area of page will be empty
            </code>
      </example>
    </member>
    <member name="M:Aspose.Pdf.Facades.PdfFileEditor.ResizeContentsPct(System.IO.Stream,System.IO.Stream,System.Int32[],System.Double,System.Double)">
      <summary>
            Resizes contents of document pages.
            Shrinks contents of page and adds margins.
            New contents size is specified in percents.
            </summary>
      <param name="source">Stream which contains source document.</param>
      <param name="destination">Stream where resultant document will be saved.</param>
      <param name="pages">Array of page indexes. If null then all document pages will be processed.</param>
      <param name="newWidth">New width of page contents in percents.</param>
      <param name="newHeight">New height of page contents in percetns.</param>
      <returns>
      </returns>
      <example>
        <code lang="C#">
            PdfFileEditor fileEditor = new PdfFileEditor();
            Stream src = new Stream("input.pdf", FileMode.Open);
            Stream dest = new Stream("output.pdf", FileMode.Create);
            fileEditor.ResizePct(src, dest, 
            //resize all pages of document
            null, 
            //new contents width = 60% of initial size
            60, 
            //new contents height = 60% of initial size
            60);
            // Rest area of page will be empty (page margins).  Size of left and right margins is (100% - 60%) / 2 = 20%
            // The same for top and bottom margins.
            </code>
      </example>
    </member>
    <member name="M:Aspose.Pdf.Facades.PdfFileEditor.AddMargins(System.IO.Stream,System.IO.Stream,System.Int32[],System.Double,System.Double,System.Double,System.Double)">
      <summary>
            Resizes page contents and add specifed margins. 
            Margins are specified in default space units.
            </summary>
      <param name="source">Stream which contains source document.</param>
      <param name="destination">Stream where resultant document will be saved.</param>
      <param name="pages">Array of page indexes. If null then all document pages will be processed.</param>
      <param name="leftMargin">Left margin.</param>
      <param name="rightMargin">Right margin.</param>
      <param name="topMargin">Top margin.</param>
      <param name="bottomMargin">Bottom margin.</param>
      <returns>
      </returns>
      <example>
        <code lang="C#">
             PdfFileEditor fileEditor = new PdfFileEditor();
             Stream src = new Stream("input.pdf", FileMode.Open);
             Stream dest = new Stream("output.pdf", FileMode.Create);
             fileEditor.AddMargins(src, dest, 
                 //process pages 1, 2, 3
                 new int[] { 1, 2, 3}, 
                 //left margin is 10 units
                 10, 
                 //right margin is 5 units
                 5, 
                 //top margin is 5 units
                 5, 
                 //bottom margin is 5 units
                 5);
                 dest.Close();
            </code>
      </example>
    </member>
    <member name="M:Aspose.Pdf.Facades.PdfFileEditor.AddMarginsPct(System.IO.Stream,System.IO.Stream,System.Int32[],System.Double,System.Double,System.Double,System.Double)">
      <summary>
            Resizes page contents and add specified margins.
            Margins are specified in percents of intitial page size.
            </summary>
      <param name="source">Stream which contains source document.</param>
      <param name="destination">Stream where resultant document will be saved.</param>
      <param name="pages">Array of page indexes. If null then all document pages will be processed.</param>
      <param name="leftMargin">Left margin in percents of initial page size.</param>
      <param name="rightMargin">Right margin in percents of initial page size.</param>
      <param name="topMargin">Top margin in percents of initial page size.</param>
      <param name="bottomMargin">Bottom margin in percents of initial page size. </param>
      <returns>
      </returns>
      <example>
        <code lang="C#">
             PdfFileEditor fileEditor = new PdfFileEditor();
             Stream src = new Stream("input.pdf", FileMode.Open);
             Stream dest = new Stream("output.pdf", FileMode.Create);
             fileEditor.AddMarginsPct(src, dest, 
                 //process pages 1, 2, 3
                 new int[] { 1, 2, 3}, 
                 //left margin is 15% of page width 
                 15, 
                 //right margin is 10% of page width
                 10, 
                 //top margin is 20% of page width
                 20, 
                 //bottom margin is 5% of page width
                 5);
                 dest.Close();
            </code>
      </example>
    </member>
    <member name="M:Aspose.Pdf.Facades.PdfFileEditor.ResizeContents(System.String,System.String,System.Int32[],System.Double,System.Double)">
      <summary>
            Resizes contents of document pages. 
            Shrinks contents of page and adds margins.
            New size of contents is specified in default space units.
            </summary>
      <param name="source">Path to source document.</param>
      <param name="destination">Path where resultant document will be saved.</param>
      <param name="pages">Array of page indexes. If null then all document pages will be processed.</param>
      <param name="newWidth">New width of page contents in default space units.</param>
      <param name="newHeight">New height of page contents in default space units.</param>
      <returns>True if resize was successful.</returns>
      <example>
        <code lang="C#">
            PdfFileEditor fileEditor = new PdfFileEditor();
            fileEditor.ResizeContents("input.pdf", "output.pdf", 
            //resize all pages of document
            null, 
            //new contents width = 200
            200, 
            //new contents height = 300
            300);
            // rest area of page will be empty
            </code>
      </example>
    </member>
    <member name="M:Aspose.Pdf.Facades.PdfFileEditor.ResizeContentsPct(System.String,System.String,System.Int32[],System.Double,System.Double)">
      <summary>
            Resizes contents of document pages.
            Shrinks contents of page and adds margins.
            New contents size is specified in percents.
            </summary>
      <param name="source">Path to source document.</param>
      <param name="destination">Path where resultant document will be saved.</param>
      <param name="pages">Array of page indexes. If null then all document pages will be processed.</param>
      <param name="newWidth">New width of page contents in percents.</param>
      <param name="newHeight">New height of page contents in percetns.</param>
      <returns>true if resize was successful.</returns>
      <example>
        <code lang="C#">
            PdfFileEditor fileEditor = new PdfFileEditor();
            fileEditor.ResizePct("input.pdf", "output.pdf",
            //resize all pages of document
            null, 
            //new contents width = 60% of initial size
            60, 
            //new contents height = 60% of initial size
            60);
            // Rest area of page will be empty (page margins).  Size of left and right margins is (100% - 60%) / 2 = 20%
            // The same for top and bottom margins.
            </code>
      </example>
    </member>
    <member name="M:Aspose.Pdf.Facades.PdfFileEditor.AddMargins(System.String,System.String,System.Int32[],System.Double,System.Double,System.Double,System.Double)">
      <summary>
            Resizes page contents and add specifed margins. 
            Margins are specified in default space units.
            </summary>
      <param name="source">Path to source document.</param>
      <param name="destination">Path where resultant document will be saved.</param>
      <param name="pages">Array of page indexes. If null then all document pages will be processed.</param>
      <param name="leftMargin">Left margin.</param>
      <param name="rightMargin">Right margin.</param>
      <param name="topMargin">Top margin.</param>
      <param name="bottomMargin">Bottom margin.</param>
      <returns>true if resize was successful.</returns>
      <example>
        <code lang="C#">
             PdfFileEditor fileEditor = new PdfFileEditor();
             fileEditor.AddMargins("input.pdf", "output.pdf", 
                 //process pages 1, 2, 3
                 new int[] { 1, 2, 3}, 
                 //left margin is 10 units
                 10, 
                 //right margin is 5 units
                 5, 
                 //top margin is 5 units
                 5, 
                 //bottom margin is 5 units
                 5);
            </code>
      </example>
    </member>
    <member name="M:Aspose.Pdf.Facades.PdfFileEditor.AddMarginsPct(System.String,System.String,System.Int32[],System.Double,System.Double,System.Double,System.Double)">
      <summary>
            Resizes page contents and add specified margins.
            Margins are specified in percents of intitial page size.
            </summary>
      <param name="source">Path to source document.</param>
      <param name="destination">Path where resultant document will be saved.</param>
      <param name="pages">Array of page indexes. If null then all document pages will be processed.</param>
      <param name="leftMargin">Left margin in percents of initial page size.</param>
      <param name="rightMargin">Right margin in percents of initial page size.</param>
      <param name="topMargin">Top margin in percents of initial page size.</param>
      <param name="bottomMargin">Bottom margin in percents of initial page size. </param>
      <returns>true if resize was successful</returns>
      <example>
        <code lang="C#">
             PdfFileEditor fileEditor = new PdfFileEditor();
             fileEditor.AddMarginsPct("input.pdf", "output.pdf", 
                 //process pages 1, 2, 3
                 new int[] { 1, 2, 3}, 
                 //left margin is 15% of page width 
                 15, 
                 //right margin is 10% of page width
                 10, 
                 //top margin is 20% of page width
                 20, 
                 //bottom margin is 5% of page width
                 5);
            </code>
      </example>
    </member>
    <member name="M:Aspose.Pdf.Facades.PdfFileEditor.ResizeContents(System.String,System.String,System.Int32[],Aspose.Pdf.Facades.PdfFileEditor.ContentsResizeParameters)">
      <summary>
            Resizes contents of pages in document. If page is shrinked blank margins are added around the page.
            </summary>
      <param name="source">Source document path.</param>
      <param name="destination">Destination document path.</param>
      <param name="pages">Array of page indexes (page index starts from 1).</param>
      <param name="parameters">Parameters of page resize.</param>
      <returns>trure if resize was successful.</returns>
      <example>
        <code lang="C#">
            PdfFileEditor fileEditor = new PdfFileEditor();
            PdfFileEditor.ContentsResizeParameters parameters = new PdfFileEditor.ContentsResizeParameters(
                //left margin = 10% of page width
                PdfFileEditor.ContentsResizeValue.Percents(10),
                //new contents width calculated automatically as width - left margin - right margin (100% - 10% - 10% = 80%)
                null,
                //right margin is 10% of page 
                PdfFileEditor.ContentsResizeValue.Percents(10),
                //top margin = 10% of height
                PdfFileEditor.ContentsResizeValue.Percents(10),
                //new contents height is calculated automatically (similar to width)
                null,
                //bottom margin is 10%
                PdfFileEditor.ContentsResizeValue.Percents(10)
                   );
            fileEditor.ResizeContents("input.pdf", "output.pdf", new int[] { 1, 2,.3}, parameters);
            </code>
      </example>
    </member>
    <member name="M:Aspose.Pdf.Facades.PdfFileEditor.ResizeContents(Aspose.Pdf.Document,System.Int32[],Aspose.Pdf.Facades.PdfFileEditor.ContentsResizeParameters)">
      <summary>
            Resizes pages of document. Blank margins are added around of shrinked page.
            </summary>
      <param name="source">Source document.</param>
      <param name="pages">List of page indexes.</param>
      <param name="parameters">Resize parameters.</param>
      <returns>true if resizing was successful.</returns>
      <example>
        <code lang="C#">
            PdfFileEditor fileEditor = new PdfFileEditor();
            Document doc = new Document("input.pdf");
            PdfFileEditor.ContentsResizeParameters parameters = new PdfFileEditor.ContentsResizeParameters(
                //left margin = 10% of page width
                PdfFileEditor.ContentsResizeValue.Percents(10),
                //new contents width calculated automatically as width - left margin - right margin (100% - 10% - 10% = 80%)
                null,
                //right margin is 10% of page 
                PdfFileEditor.ContentsResizeValue.Percents(10),
                //top margin = 10% of height
                PdfFileEditor.ContentsResizeValue.Percents(10),
                //new contents height is calculated automatically (similar to width)
                null,
                //bottom margin is 10%
                PdfFileEditor.ContentsResizeValue.Percents(10)
                   );
            fileEditor.ResizeContents(doc, new int[] { 1, 2,.3}, parameters);
            doc.Save("output.pdf");
            </code>
      </example>
    </member>
    <member name="M:Aspose.Pdf.Facades.PdfFileEditor.ResizeContents(Aspose.Pdf.Document,Aspose.Pdf.Document,System.Int32[],Aspose.Pdf.Facades.PdfFileEditor.ContentsResizeParameters)">
      <summary>
            Resizes pages of document. Blank margins are added around of shrinked page.
            </summary>
      <param name="source">Source document.</param>
      <param name="dest">Destinalion document.</param>
      <param name="pages">List of page indexes.</param>
      <param name="parameters">Resize parameters.</param>
      <returns>true if resizing was successful.</returns>
      <example>
        <code lang="C#">
            PdfFileEditor fileEditor = new PdfFileEditor();
            Document src = new Document("input.pdf");
            Document dest = new Document();
            PdfFileEditor.ContentsResizeParameters parameters = new PdfFileEditor.ContentsResizeParameters(
                //left margin = 10% of page width
                PdfFileEditor.ContentsResizeValue.Percents(10),
                //new contents width calculated automatically as width - left margin - right margin (100% - 10% - 10% = 80%)
                null,
                //right margin is 10% of page 
                PdfFileEditor.ContentsResizeValue.Percents(10),
                //top margin = 10% of height
                PdfFileEditor.ContentsResizeValue.Percents(10),
                //new contents height is calculated automatically (similar to width)
                null,
                //bottom margin is 10%
                PdfFileEditor.ContentsResizeValue.Percents(10)
                   );
            fileEditor.ResizeContents(src, dest, new int[] { 1, 2,.3}, parameters);
            dest.Save("output.pdf");
            </code>
      </example>
    </member>
    <member name="P:Aspose.Pdf.Facades.PdfFileEditor.ConversionLog">
      <summary>
            Gets log of conversion process.
            </summary>
    </member>
    <member name="P:Aspose.Pdf.Facades.PdfFileEditor.MergeDuplicateLayers">
      <summary>
            Optional contents of concatentated documents with equal names will be merged into one layer in resulstant document if this property is true. 
            Else, layers with equal names will be save as different layers in resultant document.
            </summary>
    </member>
    <member name="P:Aspose.Pdf.Facades.PdfFileEditor.OptimizeSize">
      <summary>
            Gets or sets optimization flag. Equal resource streams in resultant file are merged into one PDF object if this flag set. 
            This allows to decrease resultant file size but may cause slower execution and larger memory requirements.
            Default value: false.
            </summary>
    </member>
    <member name="P:Aspose.Pdf.Facades.PdfFileEditor.CorruptedItems">
      <summary>
            Array of encountered problems when concatenation was performed. For every corrupted document from passed to Concatenate() 
            function new CorruptedItem entry is created.
            This property may be used only when CorruptedFileAction is ConcatenateIgnoringCorrupted.
            <example><code lang="C#">
            //concatenate documents and show information about corrupted documents
            PdfFileEditor pfe = new PdfFileEditor();
            pfe.CorruptedFileAction = PdfFileEditor.ConcatenateCorruptedFileActions.ConcatenateIgnoringCorrupted;
            if (pfe.CorruptedItems.Length &gt;0)
            {
              foreach(PdfFileEditor.CorruptedItem item in pfe.CorruptedItems)
              {
                 Console.WriteLine(item.Index + " reason: " + item.Exception);
              }
            }
            </code></example></summary>
    </member>
    <member name="P:Aspose.Pdf.Facades.PdfFileEditor.CorruptedFileAction">
      <summary>
            This property defines behavior when concatenating process met corrupted file.
            Possible values are: StopWithError and ConcatenateIgnoringCorrupted.
            </summary>
    </member>
    <member name="P:Aspose.Pdf.Facades.PdfFileEditor.OwnerPassword">
      <summary>
            Sets owner's password if the source input Pdf file is encrypted.
            This property is not implemented yet.
            </summary>
    </member>
    <member name="P:Aspose.Pdf.Facades.PdfFileEditor.AllowConcatenateExceptions">
      <summary>
            If set to true, exceptions are thrown if error occured. Else excetion are not thrown and methods return false if failed.
            </summary>
      <example>
        <code lang="C#">
             PdfFileEditor pfe = new PdfFileEditor();
             pfe.AllowConcatenatedException = true;
            </code>
      </example>
    </member>
    <member name="P:Aspose.Pdf.Facades.PdfFileEditor.ConvertTo">
      <summary>
            Sets PDF file format. Result file will be saved in specified file format. 
            If this property is not specified then file will be save in default PDF format without conversion.
            </summary>
    </member>
    <member name="P:Aspose.Pdf.Facades.PdfFileEditor.CloseConcatenatedStreams">
      <summary>
            If set to true, streams are closed after operation.
            </summary>
      <example>
        <code lang="C#">
             PdfFileEditor pfe = new PdfFileEditor();
             pfe.CloseConcatenatedStreams = true;
            </code>
      </example>
    </member>
    <member name="P:Aspose.Pdf.Facades.PdfFileEditor.UniqueSuffix">
      <summary>
            Format of the suffix which is added to field name to make it unique when forms are concatenated.
            This string must contain %NUM% substring which will be replaced with numbers.
            For example if UniqueSuffix = "ABC%NUM%" then for field "fieldName" names will be:
            fieldNameABC1, fieldNameABC2, fieldNameABC3 etc.
            </summary>
      <example>
        <code lang="C#">
              PdfFileEditor ed = new PdfFileEditor();
              ed.UniqueSuffix = "_%NUM%";
            </code>
      </example>
    </member>
    <member name="P:Aspose.Pdf.Facades.PdfFileEditor.KeepFieldsUnique">
      <summary>
            If true then field names will be made unique when forms are concatenated.
            Suffixes will be added to field names, suffix template may be specified in UniqueSuffix property.
            </summary>
    </member>
    <member name="P:Aspose.Pdf.Facades.PdfFileEditor.LastException">
      <summary>
            Gets last occured exception. May be used to check the reason of failure when AllowconcatenateExceptions = false.
            </summary>
      <example>
        <code lang="C#">
             PdfFileEditor pfe = new PdfFileEditor();
               pfe.AllowConcatenateExceptions = false;
               if (!pfe.Concatenate("file1.pdf", "file2.pdf", "file3.pdf"))
               {
                  Console.WriteLine("Error occured:");
                  if (pfe.LastException != null)
                  {
                     Console.WriteLine(pfe.LastException.Message);
                     if (pfe.LastException.InnerException != null)
                       Console.WriteLine(pfe.LastException.InnerException.Message);
                  }
               }
            </code>
      </example>
    </member>
    <member name="T:Aspose.Pdf.Facades.PdfFileInfo">
      <summary>
            Represents a class for accessing meta information of PDF document.
            </summary>
    </member>
    <member name="M:Aspose.Pdf.Facades.PdfFileInfo.BindPdf(System.IO.Stream,System.String)">
      <summary>
            Initializes the facade.
            </summary>
      <param name="srcStream">The stream of PDF file.</param>
      <param name="password">The password of the PDF document.</param>
    </member>
    <member name="M:Aspose.Pdf.Facades.PdfFileInfo.BindPdf(System.String,System.String)">
      <summary>
            Initializes the facade.
            </summary>
      <param name="srcFile">The PDF file.</param>
      <param name="password">The password of the PDF document.</param>
    </member>
    <member name="M:Aspose.Pdf.Facades.PdfFileInfo.#ctor">
      <summary>
            Initializes a new instance of the Aspose.Pdf.Facades.PdfFileInfo class with default values.
            </summary>
    </member>
    <member name="M:Aspose.Pdf.Facades.PdfFileInfo.#ctor(System.IO.Stream)">
      <summary>
            Initializes a new instance of the Aspose.Pdf.Facades.PdfFileInfo class.
            </summary>
    </member>
    <member name="M:Aspose.Pdf.Facades.PdfFileInfo.#ctor(System.IO.Stream,System.String)">
      <summary>
            Initializes a new instance of the Aspose.Pdf.Facades.PdfFileInfo class.
            </summary>
    </member>
    <member name="M:Aspose.Pdf.Facades.PdfFileInfo.#ctor(System.String)">
      <summary>
            Initializes a new instance of the Aspose.Pdf.Facades.PdfFileInfo class.
            </summary>
    </member>
    <member name="M:Aspose.Pdf.Facades.PdfFileInfo.#ctor(System.String,System.String)">
      <summary>
            Initializes a new instance of the Aspose.Pdf.Facades.PdfFileInfo class.
            </summary>
    </member>
    <member name="M:Aspose.Pdf.Facades.PdfFileInfo.ClearInfo">
      <summary>
            Clears all meta information of PDF document.
            </summary>
      <example>
        <code lang="C#">
        </code>
      </example>
    </member>
    <member name="M:Aspose.Pdf.Facades.PdfFileInfo.GetDocumentPrivilege">
      <summary>
            Gets the PDF document privilege settings.
            </summary>
      <returns>The PDF document privilege settings.</returns>
    </member>
    <member name="M:Aspose.Pdf.Facades.PdfFileInfo.GetMetaInfo(System.String)">
      <summary>
            Gets customized information of PDF document with property name. If there is no property match the name it will return a blank string.
            </summary>
      <param name="name">Custom meta property key.</param>
      <returns>Custom meta property value.</returns>
    </member>
    <member name="M:Aspose.Pdf.Facades.PdfFileInfo.GetPageHeight(System.Int32)">
      <summary>
            Gets the height of the specified page.
            </summary>
      <param name="pageNum">Page number.</param>
      <returns>The height of the page.</returns>
    </member>
    <member name="M:Aspose.Pdf.Facades.PdfFileInfo.GetPageRotation(System.Int32)">
      <summary>
            Gets the rotation of the specified page.
            </summary>
      <param name="pageNum">Page number.</param>
      <returns>The rotation of the page. The value may be 0,90,180,270.</returns>
    </member>
    <member name="M:Aspose.Pdf.Facades.PdfFileInfo.GetPageWidth(System.Int32)">
      <summary>
            Gets the width of the specified page.
            </summary>
      <param name="pageNum">Page number.</param>
      <returns>The width of the page.</returns>
    </member>
    <member name="M:Aspose.Pdf.Facades.PdfFileInfo.GetPageXOffset(System.Int32)">
      <summary>
            Gets the horizontal offset of the specified page display area.
            </summary>
      <param name="pageNum">Page number.</param>
      <returns>The horizontal offset from the left side of the page.</returns>
    </member>
    <member name="M:Aspose.Pdf.Facades.PdfFileInfo.GetPageYOffset(System.Int32)">
      <summary>
            Gets the vertical offset of the specified page display area.
            </summary>
      <param name="pageNum">Page number.</param>
      <returns>The vertical offset of the page display area.</returns>
    </member>
    <member name="M:Aspose.Pdf.Facades.PdfFileInfo.GetPdfVersion">
      <summary>
            Gets the version info of PDF document.
            </summary>
      <returns>The version string.</returns>
    </member>
    <member name="M:Aspose.Pdf.Facades.PdfFileInfo.SaveNewInfo(System.IO.Stream)">
      <summary>
            Save updated PDF document into specified stream.
            </summary>
      <param name="outputStream">Output stream.</param>
      <returns>True if success otherwise is false.</returns>
    </member>
    <member name="M:Aspose.Pdf.Facades.PdfFileInfo.SaveNewInfo(System.String)">
      <summary>
            Save updated PDF document into specified file.
            </summary>
      <param name="outputFile">Output file.</param>
      <returns>True if success otherwise is false.</returns>
    </member>
    <member name="M:Aspose.Pdf.Facades.PdfFileInfo.Save(System.IO.Stream)">
      <summary>
            Saves the PDF document to the specified file.
            </summary>
      <param name="destStream">The destination stream.</param>
    </member>
    <member name="M:Aspose.Pdf.Facades.PdfFileInfo.Save(System.String)">
      <summary>
            Saves the PDF document to the specified file.
            </summary>
      <param name="destFile">The destination file.</param>
    </member>
    <member name="M:Aspose.Pdf.Facades.PdfFileInfo.SetMetaInfo(System.String,System.String)">
      <summary>
            Sets customized information of PDF document.
            </summary>
      <param name="name">Custom meta property key.</param>
      <param name="value">Custom meta property value.</param>
    </member>
    <member name="M:Aspose.Pdf.Facades.PdfFileInfo.SaveNewInfoWithXmp(System.String)">
      <summary>
            Changes the properties specified explicitly by setting file information, other properties remain.
            </summary>
      <param name="outputFileName">Output file.</param>
      <returns>True for success, or false.</returns>
    </member>
    <member name="M:Aspose.Pdf.Facades.PdfFileInfo.#ctor(Aspose.Pdf.Document)">
      <summary>
            Initializes new <see cref="T:Aspose.Pdf.Facades.PdfFileInfo" /> object on base of the <paramref name="document" />.
            </summary>
      <param name="document">Pdf document.</param>
    </member>
    <member name="M:Aspose.Pdf.Facades.PdfFileInfo.Close">
      <summary>
            Deinitializes the instance.
            </summary>
    </member>
    <member name="P:Aspose.Pdf.Facades.PdfFileInfo.Author">
      <summary>
            Gets or sets the Author information of PDF document.
            </summary>
    </member>
    <member name="P:Aspose.Pdf.Facades.PdfFileInfo.IsEncrypted">
      <summary>
            Checkes whether the PDF document is encrypted.
            </summary>
    </member>
    <member name="P:Aspose.Pdf.Facades.PdfFileInfo.IsPdfFile">
      <summary>
            Checkes whether the source input is a valid PDF file.
            </summary>
    </member>
    <member name="P:Aspose.Pdf.Facades.PdfFileInfo.CreationDate">
      <summary>
            Gets or sets the CreationDate information of PDF document.
            </summary>
    </member>
    <member name="P:Aspose.Pdf.Facades.PdfFileInfo.Creator">
      <summary>
            Gets or sets the Creator information of PDF document.
            </summary>
    </member>
    <member name="P:Aspose.Pdf.Facades.PdfFileInfo.HasCollection">
      <summary>
            Returns true if the current input file is a 'Portfolio' file containing collection of PDF files in it.
            </summary>
    </member>
    <member name="P:Aspose.Pdf.Facades.PdfFileInfo.Header">
      <summary>
            Gets or sets the customized information of PDF document.
            </summary>
    </member>
    <member name="P:Aspose.Pdf.Facades.PdfFileInfo.InputFile">
      <summary>
            Gets or sets the input file.
            </summary>
    </member>
    <member name="P:Aspose.Pdf.Facades.PdfFileInfo.InputStream">
      <summary>
            Gets or sets the input stream.
            </summary>
    </member>
    <member name="P:Aspose.Pdf.Facades.PdfFileInfo.Keywords">
      <summary>
            Gets or sets the Keywords information of PDF document.
            </summary>
    </member>
    <member name="P:Aspose.Pdf.Facades.PdfFileInfo.ModDate">
      <summary>
            Gets or sets the ModDate date information of PDF document.
            </summary>
    </member>
    <member name="P:Aspose.Pdf.Facades.PdfFileInfo.NumberOfPages">
      <summary>
            Gets the number of document pages.
            </summary>
    </member>
    <member name="P:Aspose.Pdf.Facades.PdfFileInfo.Producer">
      <summary>
            Gets the Producer information of PDF document.
            </summary>
    </member>
    <member name="P:Aspose.Pdf.Facades.PdfFileInfo.Subject">
      <summary>
            Gets or sets the Subject information of PDF document.
            </summary>
    </member>
    <member name="P:Aspose.Pdf.Facades.PdfFileInfo.Title">
      <summary>
            Gets or sets the Title information of PDF document.
            </summary>
    </member>
    <member name="P:Aspose.Pdf.Facades.PdfFileInfo.PasswordType">
      <summary>
            Returns the type of password which was passed for creating PdfFileInfo instance. See possible values in <see cref="P:Aspose.Pdf.Facades.PdfFileInfo.PasswordType" />.
            Pay attention that pdf document can be opened using both user (or open) password and owner (or permissions, edit) password.
            </summary>
    </member>
    <member name="P:Aspose.Pdf.Facades.PdfFileInfo.HasOpenPassword">
      <summary>
            Returns true if password is needed to open password protected pdf document.
            </summary>
    </member>
    <member name="P:Aspose.Pdf.Facades.PdfFileInfo.HasEditPassword">
      <summary>
            Returns true if password is needed to modify permissions or document security property.
            Pay attention that this property can be read only if valid password was provided in <see cref="T:Aspose.Pdf.Facades.PdfFileInfo" /> constructor.
            In case PasswordType is Inaccessible (means that invalid password was provided) reading this property will fail with <see cref="T:Aspose.Pdf.Exceptions.InvalidPasswordException" />.
            </summary>
    </member>
    <member name="T:Aspose.Pdf.Facades.PdfFileMend">
      <summary>
            Represents a class for adding texts and images on the pages of existing PDF document.
            </summary>
    </member>
    <member name="M:Aspose.Pdf.Facades.PdfFileMend.AddImage(System.IO.Stream,System.Int32,System.Single,System.Single,System.Single,System.Single)">
      <summary>
            Adds image to the specified page of PDF document at specified coordinates.
            </summary>
      <param name="imageStream">Input image stream.</param>
      <param name="pageNum">The number of page that will receive the image.</param>
      <param name="lowerLeftX">The lower left x of image rectangle.</param>
      <param name="lowerLeftY">The lower left y of image rectangle.</param>
      <param name="upperRightX">The upper right x of image rectangle.</param>
      <param name="upperRightY">The upper right y of image rectangle.</param>
      <returns>True if success false otherwise.</returns>
      <example>
        <code lang="C#">
            PdfFileMend mendor = new PdfFileMend("example.pdf", "out_example.pdf");
            using (Stream stream = File.OpenRead("picture.jpg"))
            {
                mendor.AddImage(stream, 1, 10, 10, 100, 100);
            }
            mendor.Close();
            </code>
      </example>
    </member>
    <member name="M:Aspose.Pdf.Facades.PdfFileMend.AddImage(System.IO.Stream,System.Int32,System.Single,System.Single,System.Single,System.Single,Aspose.Pdf.CompositingParameters)">
      <summary>
            Adds image to the specified page of PDF document at specified coordinates.
            </summary>
      <param name="imageStream">Input image stream.</param>
      <param name="pageNum">The number of page that will receive the image.</param>
      <param name="lowerLeftX">The lower left x of image rectangle.</param>
      <param name="lowerLeftY">The lower left y of image rectangle.</param>
      <param name="upperRightX">The upper right x of image rectangle.</param>
      <param name="upperRightY">The upper right y of image rectangle.</param>
      <param name="compositingParameters">The graphics compositing parameters for the image.</param>
      <returns>True if success false otherwise.</returns>
      <example>
        <code lang="C#">
            PdfFileMend mendor = new PdfFileMend("example.pdf", "out_example.pdf");
            using (Stream stream = File.OpenRead("picture.jpg"))
            {
                mendor.AddImage(stream, 1, 10, 10, 100, 100, new CompositingParameters(BlendMode.Multiply);
            }
            mendor.Close();
            </code>
      </example>
    </member>
    <member name="M:Aspose.Pdf.Facades.PdfFileMend.AddImage(System.IO.Stream,System.Int32[],System.Single,System.Single,System.Single,System.Single)">
      <summary>
            Adds image to the specified pages of PDF document at specified coordinates.
            </summary>
      <param name="imageStream">Input image stream.</param>
      <param name="pageNums">The numbers of pages that will receive the image.</param>
      <param name="lowerLeftX">The lower left x of image rectangle.</param>
      <param name="lowerLeftY">The lower left y of image rectangle.</param>
      <param name="upperRightX">The upper right x of image rectangle.</param>
      <param name="upperRightY">The upper right y of image rectangle.</param>
      <returns>True if success false otherwise.</returns>
      <example>
        <code lang="C#">
            PdfFileMend mendor = new PdfFileMend("example.pdf", "out_example.pdf");
            using (Stream stream = File.OpenRead("picture.jpg"))
            {
                mendor.AddImage(stream, new int[]{1, 2}, 10, 10, 100, 100);
            }
            mendor.Close();
            </code>
      </example>
    </member>
    <member name="M:Aspose.Pdf.Facades.PdfFileMend.AddImage(System.IO.Stream,System.Int32[],System.Single,System.Single,System.Single,System.Single,Aspose.Pdf.CompositingParameters)">
      <summary>
            Adds image to the specified pages of PDF document at specified coordinates.
            </summary>
      <param name="imageStream">Input image stream.</param>
      <param name="pageNums">The numbers of pages that will receive the image.</param>
      <param name="lowerLeftX">The lower left x of image rectangle.</param>
      <param name="lowerLeftY">The lower left y of image rectangle.</param>
      <param name="upperRightX">The upper right x of image rectangle.</param>
      <param name="upperRightY">The upper right y of image rectangle.</param>
      <param name="compositingParameters">The graphics compositing parameters for the images.</param>
      <returns>True if success false otherwise.</returns>
      <example>
        <code lang="C#">
            PdfFileMend mendor = new PdfFileMend("example.pdf", "out_example.pdf");
            using (Stream stream = File.OpenRead("picture.jpg"))
            {
                mendor.AddImage(stream, new int[]{1, 2}, 10, 10, 100, 100, new CompositingParameters(BlendMode.Multiply);
            }
            mendor.Close();
            </code>
      </example>
    </member>
    <member name="M:Aspose.Pdf.Facades.PdfFileMend.AddImage(System.String,System.Int32,System.Single,System.Single,System.Single,System.Single)">
      <summary>
            Adds image to the specified page of PDF document at specified coordinates.
            </summary>
      <param name="imageName">The path of input image file.</param>
      <param name="pageNum">The number of page that will receive the image.</param>
      <param name="lowerLeftX">The lower left x of image rectangle.</param>
      <param name="lowerLeftY">The lower left y of image rectangle.</param>
      <param name="upperRightX">The upper right x of image rectangle.</param>
      <param name="upperRightY">The upper right y of image rectangle.</param>
      <returns>True if success false otherwise.</returns>
      <example>
        <code lang="C#">
            PdfFileMend mendor = new PdfFileMend("example.pdf", "out_example.pdf");
            mendor.AddImage("picture.jpg", 1, 10, 10, 100, 100);
            mendor.Close();
            </code>
      </example>
    </member>
    <member name="M:Aspose.Pdf.Facades.PdfFileMend.AddImage(System.String,System.Int32,System.Single,System.Single,System.Single,System.Single,Aspose.Pdf.CompositingParameters)">
      <summary>
            Adds image to the specified page of PDF document at specified coordinates.
            </summary>
      <param name="imageName">The path of input image file.</param>
      <param name="pageNum">The number of page that will receive the image.</param>
      <param name="lowerLeftX">The lower left x of image rectangle.</param>
      <param name="lowerLeftY">The lower left y of image rectangle.</param>
      <param name="upperRightX">The upper right x of image rectangle.</param>
      <param name="upperRightY">The upper right y of image rectangle.</param>
      <param name="compositingParameters">The graphics compositing parameters for the images.</param>
      <returns>True if success false otherwise.</returns>
      <example>
        <code lang="C#">
            PdfFileMend mendor = new PdfFileMend("example.pdf", "out_example.pdf");
            mendor.AddImage("picture.jpg", 1, 10, 10, 100, 100, new CompositingParameters(BlendMode.Multiply));
            mendor.Close();
            </code>
      </example>
    </member>
    <member name="M:Aspose.Pdf.Facades.PdfFileMend.AddImage(System.String,System.Int32[],System.Single,System.Single,System.Single,System.Single)">
      <summary>
            Adds image to the specified pages of PDF document at specified coordinates.
            </summary>
      <param name="imageName">The path of input image file.</param>
      <param name="pageNums">The numbers of pages that will receive the image.</param>
      <param name="lowerLeftX">The lower left x of image rectangle.</param>
      <param name="lowerLeftY">The lower left y of image rectangle.</param>
      <param name="upperRightX">The upper right x of image rectangle.</param>
      <param name="upperRightY">The upper right y of image rectangle.</param>
      <returns>True if success false otherwise.</returns>
      <example>
        <code lang="C#">
            PdfFileMend mendor = new PdfFileMend("example.pdf", "out_example.pdf");
            mendor.AddImage("picture.jpg", 1, 10, 10, 100, 100);
            mendor.Close();
            </code>
      </example>
    </member>
    <member name="M:Aspose.Pdf.Facades.PdfFileMend.AddImage(System.String,System.Int32[],System.Single,System.Single,System.Single,System.Single,Aspose.Pdf.CompositingParameters)">
      <summary>
            Adds image to the specified pages of PDF document at specified coordinates.
            </summary>
      <param name="imageName">The path of input image file.</param>
      <param name="pageNums">The numbers of pages that will receive the image.</param>
      <param name="lowerLeftX">The lower left x of image rectangle.</param>
      <param name="lowerLeftY">The lower left y of image rectangle.</param>
      <param name="upperRightX">The upper right x of image rectangle.</param>
      <param name="upperRightY">The upper right y of image rectangle.</param>
      <param name="compositingParameters">The graphics compositing parameters for the images.</param>
      <returns>True if success false otherwise.</returns>
      <example>
        <code lang="C#">
            PdfFileMend mendor = new PdfFileMend("example.pdf", "out_example.pdf");
            mendor.AddImage("picture.jpg", 1, 10, 10, 100, 100, new CompositingParameters(BlendMode.Multiply));
            mendor.Close();
            </code>
      </example>
    </member>
    <member name="M:Aspose.Pdf.Facades.PdfFileMend.AddText(Aspose.Pdf.Facades.FormattedText,System.Int32,System.Single,System.Single)">
      <summary>
            Not implemented.
            </summary>
      <param name="text">
      </param>
      <param name="pageNum">
      </param>
      <param name="lowerLeftX">
      </param>
      <param name="lowerLeftY">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:Aspose.Pdf.Facades.PdfFileMend.AddText(Aspose.Pdf.Facades.FormattedText,System.Int32,System.Single,System.Single,System.Single,System.Single)">
      <summary>
            Not implemented.
            </summary>
      <param name="text">
      </param>
      <param name="pageNum">
      </param>
      <param name="lowerLeftX">
      </param>
      <param name="lowerLeftY">
      </param>
      <param name="upperRightX">
      </param>
      <param name="upperRightY">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:Aspose.Pdf.Facades.PdfFileMend.AddText(Aspose.Pdf.Facades.FormattedText,System.Int32[],System.Single,System.Single,System.Single,System.Single)">
      <summary>
            Not implemented.
            </summary>
      <param name="text">
      </param>
      <param name="pageNums">
      </param>
      <param name="lowerLeftX">
      </param>
      <param name="lowerLeftY">
      </param>
      <param name="upperRightX">
      </param>
      <param name="upperRightY">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:Aspose.Pdf.Facades.PdfFileMend.Close">
      <summary>
            Closes PdfFileMend object.
            </summary>
    </member>
    <member name="M:Aspose.Pdf.Facades.PdfFileMend.#ctor">
      <summary>
            Constructor.
            </summary>
    </member>
    <member name="M:Aspose.Pdf.Facades.PdfFileMend.#ctor(System.String,System.String)">
      <summary>
            Constructor.
            </summary>
      <param name="inputFileName">Input PDF file name.</param>
      <param name="outputFileName">Output PDF file name.</param>
    </member>
    <member name="M:Aspose.Pdf.Facades.PdfFileMend.#ctor(System.IO.Stream,System.IO.Stream)">
      <summary>
            Constructor.
            </summary>
      <param name="inputStream">Input PDF stream.</param>
      <param name="outputStream">Output PDF stream.</param>
    </member>
    <member name="M:Aspose.Pdf.Facades.PdfFileMend.#ctor(Aspose.Pdf.Document)">
      <summary>
            Initializes new <see cref="T:Aspose.Pdf.Facades.PdfFileMend" /> object on base of the <paramref name="document" />.
            </summary>
      <param name="document">
            Pdf document.
            </param>
    </member>
    <member name="M:Aspose.Pdf.Facades.PdfFileMend.#ctor(Aspose.Pdf.Document,System.String)">
      <summary>
            Initializes new <see cref="T:Aspose.Pdf.Facades.PdfFileMend" /> object on base of the <paramref name="document" />.
            </summary>
      <param name="document">
            Pdf document.
            </param>
      <param name="outputFileName">
            Output PDF file name.
            </param>
    </member>
    <member name="M:Aspose.Pdf.Facades.PdfFileMend.#ctor(Aspose.Pdf.Document,System.IO.Stream)">
      <summary>
            Initializes new <see cref="T:Aspose.Pdf.Facades.PdfFileMend" /> object on base of the <paramref name="document" />.
            </summary>
      <param name="document">
            Pdf document.
            </param>
      <param name="destStream">
            Output PDF stream.
            </param>
    </member>
    <member name="M:Aspose.Pdf.Facades.PdfFileMend.Save(System.String)">
      <summary>
            Saves the PDF document to the specified file.
            </summary>
      <param name="destFile">The destination file.</param>
    </member>
    <member name="M:Aspose.Pdf.Facades.PdfFileMend.Save(System.IO.Stream)">
      <summary>
            Saves the PDF document to the specified stream.
            </summary>
      <param name="destStream">The destination stream.</param>
    </member>
    <member name="P:Aspose.Pdf.Facades.PdfFileMend.InputStream">
      <summary>
            Sets the input stream.
            </summary>
    </member>
    <member name="P:Aspose.Pdf.Facades.PdfFileMend.OutputStream">
      <summary>
            Sets the output stream.
            </summary>
    </member>
    <member name="P:Aspose.Pdf.Facades.PdfFileMend.InputFile">
      <summary>
            Sets the input file.
            </summary>
    </member>
    <member name="P:Aspose.Pdf.Facades.PdfFileMend.OutputFile">
      <summary>
            Sets the output file.
            </summary>
    </member>
    <member name="P:Aspose.Pdf.Facades.PdfFileMend.IsWordWrap">
      <summary>
            Sets a bool value that indicates word wrap in AddText methods.
            If the value is true, the text in FormattedText will word wrap.
            By defalt, the value is false.
            </summary>
    </member>
    <member name="P:Aspose.Pdf.Facades.PdfFileMend.WrapMode">
      <summary>
            Sets or gets word wrapping algorithm. See WordWrapMode and IsWordWrap.
            </summary>
    </member>
    <member name="P:Aspose.Pdf.Facades.PdfFileMend.TextPositioningMode">
      <summary>
            Sets or gets text positioning strategy. <see cref="T:Aspose.Pdf.Facades.PositioningMode" />
            Default mode is Legacy.
            </summary>
    </member>
    <member name="T:Aspose.Pdf.Facades.PdfFileSecurity">
      <summary>
            Represents encrypting or decrypting a Pdf file with owner or user password, changing the security setting and password.
            </summary>
    </member>
    <member name="M:Aspose.Pdf.Facades.PdfFileSecurity.#ctor(System.IO.Stream,System.IO.Stream)">
      <summary>
            Initialize the object of PdfFileSecurity with input and output stream.
            </summary>
      <param name="inputStream"> Input Pdf Stream.</param>
      <param name="outputStream">Output Pdf Stream.</param>
    </member>
    <member name="M:Aspose.Pdf.Facades.PdfFileSecurity.#ctor(System.String,System.String)">
      <summary>
             Initializes the object of PdfFileSecurity with input and output file.
            </summary>
      <param name="inputFile">Source input Pdf file.</param>
      <param name="outputFile">Output Pdf file.</param>
    </member>
    <member name="M:Aspose.Pdf.Facades.PdfFileSecurity.#ctor">
      <summary>
            Initialize the object of PdfFileSecurity.
            </summary>
    </member>
    <member name="M:Aspose.Pdf.Facades.PdfFileSecurity.EncryptFile(System.String,System.String,Aspose.Pdf.Facades.DocumentPrivilege,Aspose.Pdf.Facades.KeySize)">
      <summary>
            Encrypts Pdf file with userpassword and ownerpassword and sets the document's privileges to access.
            The user password and the owner password can be null or empty. The owner password will be replaced 
            with a random string if the input owner password is null or empty.
            </summary>
      <param name="userPassword">User password.</param>
      <param name="ownerPassword">Owner password.</param>
      <param name="privilege">Set privilege.</param>
      <param name="keySize">KeySize.x40 for 40 bits encryption, KeySize.x128 for 128 bits encryption and KeySize.x256 for 256 bits encryption.</param>
      <returns>True for success, or false.</returns>
      <example>
        <code>
            [C#]
            string inFile = "..\\AsposePdfKitExample\\example1.pdf"; //The TestPath may be re-assigned.
            string outFile = "..\\AsposePdfKitExample\\Kit0401.pdf"; //The TestPath may be re-assigned.	
            PdfFileSecurity fileSecurity = new PdfFileSecurity(inFile,outFile);		
            fileSecurity.EncryptFile("userpass", "ownerpass", DocumentPrivilege.Print, KeySize.x256);	
            
            [Visual Basic]
            Dim inFile As String =  "..\\AsposePdfKitExample\\example1.pdf"  'The TestPath may be re-assigned.'
            Dim outFile As String =  "..\\AsposePdfKitExample\\Kit0401.pdf"   'The TestPath may be re-assigned.'
            Dim fileSecurity As PdfFileSecurity = New PdfFileSecurity(inFile,outFile) 
            fileSecurity.EncryptFile("userpass", "ownerpass", DocumentPrivilege.Print, KeySize.x256)
            </code>
      </example>
    </member>
    <member name="M:Aspose.Pdf.Facades.PdfFileSecurity.EncryptFile(System.String,System.String,Aspose.Pdf.Facades.DocumentPrivilege,Aspose.Pdf.Facades.KeySize,Aspose.Pdf.Facades.Algorithm)">
      <summary>
            Encrypts Pdf file with userpassword and ownerpassword and sets the document's privileges to access.
            The user password and the owner password can be null or empty. The owner password will be replaced 
            with a random string if the input owner password is null or empty.
            There are 6 possible combinations of KeySize and Algorithm values. 
            However (KeySize.x40, Algorithm.AES) and (KeySize.x256, Algorithm.RC4) are invalid and corresponding 
            exception will be raised if kit encounters this combination.
            </summary>
      <param name="userPassword">User password.</param>
      <param name="ownerPassword">Owner password.</param>
      <param name="privilege">Set privilege.</param>
      <param name="keySize">KeySize.x40 for 40 bits encryption, KeySize.x128 for 128 bits encryption and KeySize.x256 for 256 bits encryption.</param>
      <param name="cipher">Algorithm.AES to encrypt using AES algorithm or Algorithm.RC4 for RC4 encryption.</param>
      <returns>True for success, or false.</returns>
      <example>
        <code>
            [C#]
            string inFile = "..\\AsposePdfKitExample\\example1.pdf"; //The TestPath may be re-assigned.
            string outFile = "..\\AsposePdfKitExample\\Kit0401.pdf"; //The TestPath may be re-assigned.	
            PdfFileSecurity fileSecurity = new PdfFileSecurity(inFile,outFile);		
            fileSecurity.EncryptFile("userpass","ownerpass",DocumentPrivilege.Print,KeySize.x256,Algorithm.AES);	
            
            [Visual Basic]
            Dim inFile As String =  "..\\AsposePdfKitExample\\example1.pdf"  'The TestPath may be re-assigned.'
            Dim outFile As String =  "..\\AsposePdfKitExample\\Kit0401.pdf"   'The TestPath may be re-assigned.'
            Dim fileSecurity As PdfFileSecurity =  New PdfFileSecurity(inFile,outFile) 
            fileSecurity.EncryptFile("userpass","ownerpass",DocumentPrivilege.Print,KeySize.x256,Algorithm.AES)
            </code>
      </example>
    </member>
    <member name="M:Aspose.Pdf.Facades.PdfFileSecurity.DecryptFile(System.String)">
      <summary>
            Decrypts an encrypted Pdf document by owner password. 
            If the document hasn't owner password, it is allow to use user password.
            </summary>
      <param name="ownerPassword">Owner password.</param>
      <returns>True for success,or false.</returns>
      <example>
        <code>
            [C#]
            string inFile = "..\\AsposePdfKitExample\\Kit0401.pdf"; //The TestPath may be re-assigned.
            string outFile = "..\\AsposePdfKitExample\\Kit0404.pdf"; //The TestPath may be re-assigned.	
            PdfFileSecurity fileSecurity = new PdfFileSecurity(inFile,outFile);		
            fileSecurity.DecryptFile("ownerpass");
            
            [Visual Basic]
            Dim inFile As String =  "..\\AsposePdfKitExample\\Kit0401.pdf"  'The TestPath may be re-assigned.'
            Dim outFile As String =  "..\\AsposePdfKitExample\\Kit0404.pdf"  'The TestPath may be re-assigned.'
            Dim fileSecurity As PdfFileSecurity =  New PdfFileSecurity(inFile,outFile) 
            fileSecurity.DecryptFile("ownerpass")
            </code>
      </example>
    </member>
    <member name="M:Aspose.Pdf.Facades.PdfFileSecurity.SetPrivilege(Aspose.Pdf.Facades.DocumentPrivilege)">
      <summary>
            Sets Pdf file security without being encrypted.
            The owner password will be added by a random string.
            </summary>
      <param name="privilege">Set privilege.</param>
      <returns>True for success, or false.</returns>
      <example>
        <code>
            [C#]
            string inFile = "..\\AsposePdfKitExample\\example1.pdf"; //The TestPath may be re-assigned.
            string outFile = "..\\AsposePdfKitExample\\Kit0405.pdf"; //The TestPath may be re-assigned.
            PdfFileSecurity fileSecurity = new PdfFileSecurity(inFile,outFile);		
            fileSecurity.SetPrivilege(DocumentPrivilege.Print);
            
            [Visual Basic]
            Dim inFile As String =  "..\\AsposePdfKitExample\\example1.pdf"  'The TestPath may be re-assigned.'
            Dim outFile As String =  "..1\\AsposePdfKitExample\\Kit0405.pdf"  'The TestPath may be re-assigned.'
            Dim fileSecurity As PdfFileSecurity =  New PdfFileSecurity(inFile,outFile) 
            fileSecurity.SetPrivilege(DocumentPrivilege.Print)
            </code>
      </example>
    </member>
    <member name="M:Aspose.Pdf.Facades.PdfFileSecurity.SetPrivilege(System.String,System.String,Aspose.Pdf.Facades.DocumentPrivilege)">
      <summary>
            Sets Pdf file security with original password.
            </summary>
      <param name="userPassword">Original user password.</param>
      <param name="ownerPassword">Original owner password.</param>
      <param name="privilege">Set privilege.</param>
      <returns>True for success, or false.</returns>
      <example>
        <code>
            [C#]
            string inFile = "..\\AsposePdfKitExample\\example1.pdf"; //The TestPath may be re-assigned.
            string outFile = "..\\AsposePdfKitExample\\Kit0405.pdf"; //The TestPath may be re-assigned.
            PdfFileSecurity fileSecurity = new PdfFileSecurity(inFile,outFile);		
            fileSecurity.SetPrivilege(userPassword, ownerPassword, DocumentPrivilege.Print);
            
            [Visual Basic]
            Dim inFile As String =  "..\\AsposePdfKitExample\\example1.pdf"  'The TestPath may be re-assigned.'
            Dim outFile As String =  "..1\\AsposePdfKitExample\\Kit0405.pdf"  'The TestPath may be re-assigned.'
            Dim fileSecurity As PdfFileSecurity =  New PdfFileSecurity(inFile,outFile) 
            fileSecurity.SetPrivilege(userPassword, ownerPassword, DocumentPrivilege.Print)
            </code>
      </example>
    </member>
    <member name="M:Aspose.Pdf.Facades.PdfFileSecurity.ChangePassword(System.String,System.String,System.String)">
      <summary>
             Changes the user password and owner password by owner password, keeps the original security settings.
             The new user password and the new owner password can be null or empty. The owner password will be replaced 
             with a random string if the new owner password is null or empty.
             </summary>
      <param name="ownerPassword">Original Owner password.</param>
      <param name="newUserPassword">New User password.</param>
      <param name="newOwnerPassword">New Owner password.</param>
      <returns>True for success,or false.</returns>
      <example>
        <code>
            [C#]
             string inFile = "..\\AsposePdfKitExample\\Kit0406.pdf"; //The TestPath may be re-assigned.
             string outFile = "..\\AsposePdfKitExample\\Kit0407.pdf";	//The TestPath may be re-assigned.
             PdfFileSecurity fileSecurity = new PdfFileSecurity(inFile,outFile);		
             fileSecurity.ChangePassword("owner","newuser","newowner");
            
            [Visual Basic]
             Dim inFile As String =  "..\\AsposePdfKitExample\\Kit0401.pdf"  'The TestPath may be re-assigned.'
             Dim outFile As String =  "..\\AsposePdfKitExample\\Kit0406.pdf"  'The TestPath may be re-assigned.'
             Dim fileSecurity As PdfFileSecurity =  New PdfFileSecurity(inFile,outFile) 
             fileSecurity.ChangePassword("owner","newuser","newowner")	
            </code>
      </example>
    </member>
    <member name="M:Aspose.Pdf.Facades.PdfFileSecurity.ChangePassword(System.String,System.String,System.String,Aspose.Pdf.Facades.DocumentPrivilege,Aspose.Pdf.Facades.KeySize)">
      <summary>
            Changes the user password and password by owner password, allows to reset Pdf documnent security.
            The new user password and the new owner password can be null or empty. The owner password will be replaced 
            with a random string if the new owner password is null or empty.
            </summary>
      <param name="ownerPassword">Original owner password.</param>
      <param name="newUserPassword">New User password.</param>
      <param name="newOwnerPassword">New Owner password.</param>
      <param name="privilege">Reset security.</param>
      <param name="keySize">KeySize.x40 for 40 bits encryption, KeySize.x128 for 128 bits encryption and KeySize.x256 for 256 bits encryption.</param>
      <returns>True for success, or false.</returns>
      <example>
        <code>
            [C#]
            string inFile = "..\\AsposePdfKitExample\\Kit0401.pdf"; //The TestPath may be re-assigned.
            string outFile = "..\\AsposePdfKitExample\\Kit0407.pdf";	//The TestPath may be re-assigned.
            PdfFileSecurity fileSecurity = new PdfFileSecurity(inFile,outFile);	
            fileSecurity.ChangePassword("owner","newuser","newowner", DocumentPrivilege.Print,KeySize.x256);
            
            [Visual Basic] 
            Dim inFile As String =  "..\\AsposePdfKitExample\\Kit0401.pdf"  'The TestPath may be re-assigned.'
            Dim outFile As String =  "..\\AsposePdfKitExample\\Kit0407.pdf"  'The TestPath may be re-assigned.'
            Dim fileSecurity As PdfFileSecurity =  New PdfFileSecurity(inFile,outFile) 
            fileSecurity.ChangePassword("owner","newuser","newowner", DocumentPrivilege.Print,KeySize.x256)
            </code>
      </example>
    </member>
    <member name="M:Aspose.Pdf.Facades.PdfFileSecurity.ChangePassword(System.String,System.String,System.String,Aspose.Pdf.Facades.DocumentPrivilege,Aspose.Pdf.Facades.KeySize,Aspose.Pdf.Facades.Algorithm)">
      <summary>
            Changes the user password and password by owner password, allows to reset Pdf documnent security.
            The new user password and the new owner password can be null or empty. The owner password will be replaced 
            with a random string if the new owner password is null or empty.
            There are 6 possible combinations of KeySize and Algorithm values. 
            However (KeySize.x40, Algorithm.AES) and (KeySize.x256, Algorithm.RC4) are invalid and corresponding 
            exception will be raised if kit encounters this combination.
            </summary>
      <param name="ownerPassword">Original owner password.</param>
      <param name="newUserPassword">New User password.</param>
      <param name="newOwnerPassword">New Owner password.</param>
      <param name="privilege">Reset security.</param>
      <param name="keySize">KeySize.x40 for 40 bits encryption, KeySize.x128 for 128 bits encryption and KeySize.x256 for 256 bits encryption.</param>
      <param name="cipher">Algorithm.AES to encrypt using AES algorithm or Algorithm.RC4 for RC4 encryption.</param>
      <returns>True for success, or false.</returns>
      <example>
        <code>
            [C#]
            string inFile = "..\\AsposePdfKitExample\\Kit0401.pdf"; //The TestPath may be re-assigned.
            string outFile = "..\\AsposePdfKitExample\\Kit0407.pdf";	//The TestPath may be re-assigned.
            PdfFileSecurity fileSecurity = new PdfFileSecurity(inFile,outFile);	
            fileSecurity.ChangePassword("owner","newuser","newowner", DocumentPrivilege.Print,KeySize.x256,Algorithm.AES);
            
            [Visual Basic] 
            Dim inFile As String =  "..\\AsposePdfKitExample\\Kit0401.pdf"  'The TestPath may be re-assigned.'
            Dim outFile As String =  "..\\AsposePdfKitExample\\Kit0407.pdf"  'The TestPath may be re-assigned.'
            Dim fileSecurity As PdfFileSecurity =  New PdfFileSecurity(inFile,outFile) 
            fileSecurity.ChangePassword("owner","newuser","newowner", DocumentPrivilege.Print,KeySize.x256,Algorithm.AES)
            </code>
      </example>
    </member>
    <member name="M:Aspose.Pdf.Facades.PdfFileSecurity.#ctor(Aspose.Pdf.Document)">
      <summary>
            Initializes new <see cref="T:Aspose.Pdf.Facades.PdfFileSecurity" /> object on base of the <paramref name="document" />.
            </summary>
      <param name="document">
            Pdf document.
            </param>
    </member>
    <member name="M:Aspose.Pdf.Facades.PdfFileSecurity.#ctor(Aspose.Pdf.Document,System.String)">
      <summary>
            Initializes new <see cref="T:Aspose.Pdf.Facades.PdfFileSecurity" /> object on base of the <paramref name="document" />.
            </summary>
      <param name="document">
            Pdf document.
            </param>
      <param name="outputFile">
            Output Pdf file.
            </param>
    </member>
    <member name="M:Aspose.Pdf.Facades.PdfFileSecurity.#ctor(Aspose.Pdf.Document,System.IO.Stream)">
      <summary>
            Initializes new <see cref="T:Aspose.Pdf.Facades.PdfFileSecurity" /> object on base of the <paramref name="document" />.
            </summary>
      <param name="document">
            Pdf document.
            </param>
      <param name="outputStream">
            Output Pdf Stream.
            </param>
    </member>
    <member name="M:Aspose.Pdf.Facades.PdfFileSecurity.BindPdf(System.String)">
      <summary>
            Initializes the facade.
            </summary>
      <param name="srcFile">The PDF file.</param>
    </member>
    <member name="M:Aspose.Pdf.Facades.PdfFileSecurity.BindPdf(System.IO.Stream)">
      <summary>
            Initializes the facade.
            </summary>
      <param name="srcStream">The stream of PDF file.</param>
    </member>
    <member name="M:Aspose.Pdf.Facades.PdfFileSecurity.Close">
      <summary>
            Closes the facade.
            </summary>
    </member>
    <member name="P:Aspose.Pdf.Facades.PdfFileSecurity.InputFile">
      <summary>
            Sets the input file.
            </summary>
    </member>
    <member name="P:Aspose.Pdf.Facades.PdfFileSecurity.InputStream">
      <summary>
            Sets the input stream.
            </summary>
    </member>
    <member name="P:Aspose.Pdf.Facades.PdfFileSecurity.OutputFile">
      <summary>
            Sets the output file.
            </summary>
    </member>
    <member name="P:Aspose.Pdf.Facades.PdfFileSecurity.OutputStream">
      <summary>
            Sets the output stream.
            </summary>
    </member>
    <member name="T:Aspose.Pdf.Facades.PdfFileSignature">
      <summary>
            Represents a class to sign a pdf file with a certificate.
            </summary>
    </member>
    <member name="M:Aspose.Pdf.Facades.PdfFileSignature.#ctor">
      <summary>
            The constructor of PdfFileSignature class. 
            </summary>
    </member>
    <member name="M:Aspose.Pdf.Facades.PdfFileSignature.#ctor(System.String)">
      <summary>
            The constructor of PdfFileSignature class.
            </summary>
      <param name="inputFile">The input file for signature.</param>
    </member>
    <member name="M:Aspose.Pdf.Facades.PdfFileSignature.#ctor(System.String,System.String)">
      <summary>
            The constructor of PdfFileSignature class.
            </summary>
      <param name="inputFile">The input file for signature.</param>
      <param name="outputFile">The output file.</param>
    </member>
    <member name="M:Aspose.Pdf.Facades.PdfFileSignature.BindPdf(System.String)">
      <summary> 
            Binds a Pdf file for editing.
            </summary>
      <param name="inputFile">The pdf file to be edited.</param>
    </member>
    <member name="M:Aspose.Pdf.Facades.PdfFileSignature.BindPdf(System.IO.Stream)">
      <summary> 
            Binds a Pdf stream for editing.
            </summary>
      <param name="inputStream">The pdf stream to be edited.</param>
    </member>
    <member name="M:Aspose.Pdf.Facades.PdfFileSignature.Save(System.String)">
      <summary>
            Saves the result PDF to file.
            </summary>
      <param name="outputFile">output pdf file</param>
    </member>
    <member name="M:Aspose.Pdf.Facades.PdfFileSignature.Save(System.IO.Stream)">
      <summary>
            Saves the result PDF to stream.
            </summary>
      <param name="outputStream">output pdf stream</param>
    </member>
    <member name="M:Aspose.Pdf.Facades.PdfFileSignature.Sign(System.Int32,System.String,System.String,System.String,System.Boolean,System.Drawing.Rectangle)">
      <summary>
             Make a signature on the pdf document.
            </summary>
      <param name="SigReason">The reason of signature.</param>
      <param name="SigContact">The contact of signature.</param>
      <param name="SigLocation">The location of signature.</param>
      <param name="visible">The visiblity of signature.</param>
      <param name="annotRect">The rect of signature.</param>
      <param name="page">The page on which signature is made.</param>
      <example>
        <code>
            [C#]
            string inFile = TestPath + "example1.pdf";
            string outFile = TestPath + "signature.pdf";
            PdfFileSignature pdfSign = new PdfFileSignature();
            pdfSign.BindPdf(inFile);
            System.Drawing.Rectangle rect = new System.Drawing.Rectangle(100, 100, 200, 200);
            pdfSign.SignatureAppearance = TestPath + "butterfly.jpg";
            pdfSign.SetCertificate("certificate.pfx", "password");
            pdfSign.Sign(2, "Allen", "success", "ChangSha", true, rect);
            pdfSign.Save(outFile);
            
            [Visual Basic]
            Dim pdfSign = new PdfFileSignature()
            pdfSign.BindPdf(inFile)
            Dim rect as System.Drawing.Rectangle = new System.Drawing.Rectangle(100, 100, 200, 200)
            pdfSign.SetCertificate("certificate.pfx", "password")
            pdfSign.Sign(2, "Allen", "success", "ChangSha", true, rect)
            pdfSign.SignatureAppearance = TestPath + "butterfly.jpg"
            pdfSign.Save(outFile)
            </code>
      </example>
    </member>
    <member name="M:Aspose.Pdf.Facades.PdfFileSignature.Sign(System.Int32,System.String,System.String,System.String,System.Boolean,System.Drawing.Rectangle,Aspose.Pdf.InteractiveFeatures.Forms.Signature)">
      <summary>
            Sign the document with the given type signature.
            </summary>
      <param name="page">The page on which signature is made.</param>
      <param name="SigReason">The reason of signature.</param>
      <param name="SigContact">The contact of signature.</param>
      <param name="SigLocation">The location of signature.</param>
      <param name="visible">The visiblity of signature.</param>
      <param name="annotRect">The rect of signature.</param>
      <param name="sig">The type of the signature, could be PKCS1, PKCS7 and PKCS7Detached. </param>
      <example>
        <code>
            [C#]
            string inFile = TestPath + "example1.pdf";
            string outFile = TestPath + "signature.pdf";
            PdfFileSignature pdfSign = new PdfFileSignature(inFile, outFile);
            System.Drawing.Rectangle rect = new System.Drawing.Rectangle(100, 100, 200, 100);
            pdfSign.SignatureAppearance = TestPath + "butterfly.jpg";
            pdfSign.Sign(2, "Allen", "success", "ChangSha", true, rect, new PKCS1("certificate.pfx", "password"));
            pdfSign.Save();
            
            [Visual Basic]
            Dim inFile As String = TestPath &amp; "example1.pdf"
            Dim outFile As String = TestPath &amp; "signature.pdf"
            Dim sig As PKCS1 = new PKCS1("certificate.pfx", "password")
            Dim pdfSign = new PdfFileSignature(inFile, outFile)
            Dim rect as System.Drawing.Rectangle = new System.Drawing.Rectangle(100, 100, 200, 100)
            pdfSign.SignatureAppearance = TestPath &amp; "butterfly.jpg"
            pdfSign.Sign(2, "Allen", "success", "ChangSha", true, rect, sig)
            pdfSign.Save()
            </code>
      </example>
    </member>
    <member name="M:Aspose.Pdf.Facades.PdfFileSignature.Sign(System.Int32,System.Boolean,System.Drawing.Rectangle,Aspose.Pdf.InteractiveFeatures.Forms.Signature)">
      <summary>
            Sign the document with the given type signature.
            </summary>
      <param name="page">The page on which signature is made.</param>
      <param name="visible">The visiblity of signature.</param>
      <param name="annotRect">The rect of signature.</param>
      <param name="sig">
            The type of the signature, could be PKCS1, PKCS7 and PKCS7Detached.
            Such data as signature reason, contact and location must be already present in this object (see corresponding properties).
            </param>
      <example>
        <code>
            [C#]
            string inFile = TestPath + "example1.pdf";
            string outFile = TestPath + "signature.pdf";
            PKCS1 sig = new PKCS1("certificate.pfx", "password");
            sig.Reason = "Some reason";
            sig.Contact = "Smith";
            sig.Location = "New York";
            PdfFileSignature pdfSign = new PdfFileSignature(inFile, outFile);
            System.Drawing.Rectangle rect = new System.Drawing.Rectangle(100, 100, 200, 100);
            pdfSign.SignatureAppearance = TestPath + "butterfly.jpg";
            pdfSign.Sign(2, true, rect, sig);
            pdfSign.Save();
            
            [Visual Basic]
            Dim inFile As String = TestPath &amp; "example1.pdf"
            Dim outFile As String = TestPath &amp; "signature.pdf"
            Dim sig As PKCS1 = new PKCS1("certificate.pfx", "password")
            sig.Reason = "Some reason"
            sig.Contact = "Smith"
            sig.Location = "New York"
            Dim pdfSign = new PdfFileSignature(inFile, outFile)
            Dim rect as System.Drawing.Rectangle = new System.Drawing.Rectangle(100, 100, 200, 100)
            pdfSign.SignatureAppearance = TestPath &amp; "butterfly.jpg"
            pdfSign.Sign(2, true, rect, sig)
            pdfSign.Save()
            </code>
      </example>
    </member>
    <member name="M:Aspose.Pdf.Facades.PdfFileSignature.Sign(System.String,System.String,System.String,System.String,Aspose.Pdf.InteractiveFeatures.Forms.Signature)">
      <summary>
            Sign the document with the given type signature which is placed in already presented signature field.
            Before signing signature field must be empty, i.e. field must not contain signature dictionary.
            Thus pdf document already has signature field, you should not supply the place to stamp the signature,
            corresponding page and rectangle are taken from signature field which is found by signature name (see SigName parameter).
            </summary>
      <param name="SigName">The name of the signature field.</param>
      <param name="SigReason">The reason of signature.</param>
      <param name="SigContact">The contact of signature.</param>
      <param name="SigLocation">The location of signature.</param>
      <param name="sig">The type of the signature, could be PKCS1, PKCS7 and PKCS7Detached.</param>
      <example>
        <code>
            [C#]
            string inFile = TestPath + "example1.pdf";
            string outFile = TestPath + "signature.pdf";
            PKCS1 sig = new PKCS1("certificate.pfx", "password");
            PdfFileSignature pdfSign = new PdfFileSignature(inFile, outFile);
            pdfSign.SignatureAppearance = TestPath + "butterfly.jpg";
            pdfSign.Sign("Signature1", "Allen", "success", "ChangSha", sig);
            pdfSign.Save();
            
            [Visual Basic]
            Dim inFile As String = TestPath &amp; "example1.pdf"
            Dim outFile As String = TestPath &amp; "signature.pdf"
            Dim sig As PKCS1 = new PKCS1("certificate.pfx", "password")
            Dim pdfSign = new PdfFileSignature(inFile, outFile)
            pdfSign.SignatureAppearance = TestPath &amp; "butterfly.jpg"
            pdfSign.Sign("Signature1", "Allen", "success", "ChangSha", sig)
            pdfSign.Save()
            </code>
      </example>
    </member>
    <member name="M:Aspose.Pdf.Facades.PdfFileSignature.Sign(System.Int32,System.String,System.String,System.String,System.String,System.Boolean,System.Drawing.Rectangle,Aspose.Pdf.InteractiveFeatures.Forms.Signature)">
      <summary>
            Sign the document with the given type signature which is placed in already presented signature field.
            Before signing pdf document should already has signature field, corresponding page and rectangle are taken from 
            signature field which is found by signature name (see SigName parameter).
            </summary>
      <param name="page">The page on which signature is made.</param>
      <param name="SigName">The name of the signature field.</param>
      <param name="SigReason">The reason of signature.</param>
      <param name="SigContact">The contact of signature.</param>
      <param name="SigLocation">The location of signature.</param>
      <param name="visible">The visiblity of signature.</param>
      <param name="annotRect">The rect of signature.</param>
      <param name="sig">The type of the signature, could be PKCS1, PKCS7 and PKCS7Detached.</param>
      <example>
        <code>
            [C#]
            string inFile = TestPath + "blankWithSignature.pdf";
            string outFile = TestPath + "signature.pdf";
            PKCS7 sig = new PKCS7("certificate.pfx", "password");
            PdfFileSignature pdfSign = new PdfFileSignature(inFile);
            System.Drawing.Rectangle rect = new System.Drawing.Rectangle(100, 100, 100, 100);
            pdfSign.SignatureAppearance = TestPath + "butterfly.jpg"
            pdfSign.Sign(1, "Signature1", "ReasonToTest", "ContactMe", "SomeLocation", true, rect, sig);                
            pdfSign.Save(outFile);                
            
            [Visual Basic]
            Dim inFile As String = TestPath &amp; "blankWithSignature.pdf"
            Dim outFile As String = TestPath &amp; "signature.pdf"
            Dim sig As PKCS7 = new PKCS7("certificate.pfx", "password")
            Dim pdfSign = new PdfFileSignature(inFile, outFile)
            pdfSign.SignatureAppearance = TestPath &amp; "butterfly.jpg"
            pdfSign.Sign("Signature1",  "ReasonToTest", "ContactMe", "SomeLocation", true, rect, sig)
            pdfSign.Save(outFile)
            </code>
      </example>
    </member>
    <member name="M:Aspose.Pdf.Facades.PdfFileSignature.Sign(System.String,Aspose.Pdf.InteractiveFeatures.Forms.Signature)">
      <summary>
            Sign the document with the given type signature which is placed in already presented signature field.
            Before signing signature field must be empty, i.e. field must not contain signature dictionary.
            Thus pdf document already has signature field, you should not supply the place to stamp the signature,
            corresponding page and rectangle are taken from signature field which is found by signature name (see SigName parameter).
            Such data as signature reason, contact and location must be provided by corresponding properties of the Signature object sig.
            </summary>
      <param name="SigName">The name of the signature field.</param>
      <param name="sig">The type of the signature, could be PKCS1 (Pkcs1Signature object), PKCS7 and PKCS7 detached (Pkcs7Signature object) </param>
      <example>
        <code>
            [C#]
            string inFile = TestPath + "example1.pdf";
            string outFile = TestPath + "signature.pdf";
            PKCS1 sig = new PKCS1("certificate.pfx", "password");
            sig.Reason = "Some reason";
            sig.Contact = "Smith";
            sig.Location = "New York";
            PdfFileSignature pdfSign = new PdfFileSignature(inFile, outFile);
            pdfSign.SignatureAppearance = TestPath + "butterfly.jpg";
            pdfSign.Sign("Signature1", sig);
            pdfSign.Save();
            
            [Visual Basic]
            Dim inFile As String = TestPath &amp; "example1.pdf"
            Dim outFile As String = TestPath &amp; "signature.pdf"
            Dim sig As PKCS1 = new PKCS1("certificate.pfx", "password")
            sig.Reason = "Some reason"
            sig.Contact = "Smith"
            sig.Location = "New York"
            Dim pdfSign = new PdfFileSignature(inFile, outFile)
            pdfSign.SignatureAppearance = TestPath &amp; "butterfly.jpg"
            pdfSign.Sign("Signature1", sig)
            pdfSign.Save()
            </code>
      </example>
    </member>
    <member name="M:Aspose.Pdf.Facades.PdfFileSignature.GetSignNames">
      <summary>
             Gets the names of all not empty signatures.
             </summary>
      <returns>Return a arrayList.</returns>
      <example>
        <code>
             [C#]
             string inFile=TestPath + "example1.pdf";
             PdfFileSignature pdfSign=new PdfFileSignature();
             pdfSign.BindPdf(inFile); 
             ArrayList names=pdfSign.GetSignNames();
            for(int i=0;i&lt;names.Count;i++)
            {
              Console.WriteLine("signature name:"+(string)names[i]);
              Console.WriteLine("coverswholedocument:"+pdfSign.IsCoversWholeDocument((string)names[i]));
              Console.WriteLine("revision:"+pdfSign.GetRevision((string)names[i]));	
              Console.WriteLine("verifysigned:"+pdfSign.VerifySigned((string)names[i]));
              Console.WriteLine("reason:"+pdfSign.GetReason((string)names[i]));
              Console.WriteLine("location:"+pdfSign.GetLocation((string)names[i]));
              Console.WriteLine("datatime:"+pdfSign.GetDateTime((string)names[i]));		
             }
             Console.WriteLine("totalvision:"+pdfSign.GetTotalRevision());
             [Visual Basic]
             Dim pdfSign as PdfFileSignature =new  PdfFileSignature
             pdfSign.BindPdf(inFile)
             Dim names as ArrayList
             names=pdfSign.GetSignNames()
             For i=0 To names.Count
            
            		Console.WriteLine("signature name:" + (string)names[i])
            		Console.WriteLine("coverswholedocument:" + pdfSign.IsCoversWholeDocument((string)names[i]))
            		Console.WriteLine("revision:" + pdfSign.GetRevision((string)names[i]))	
            		Console.WriteLine("verifysigned:" + pdfSign.VerifySigned((string)names[i]))
            		Console.WriteLine("reason:" + pdfSign.GetReason((string)names[i]))
            		Console.WriteLine("location:" + pdfSign.GetLocation((string)names[i]))
            		Console.WriteLine("datatime:" + pdfSign.GetDateTime((string)names[i]))	
             Next i
             Console.WriteLine("totalvision:"+pdfSign.GetTotalRevision())
             </code>
      </example>
    </member>
    <member name="M:Aspose.Pdf.Facades.PdfFileSignature.GetBlankSignNames">
      <summary>
            Gets the names of all empty signature fields.
            </summary>
      <returns>Return a arrayList.</returns>
    </member>
    <member name="M:Aspose.Pdf.Facades.PdfFileSignature.IsContainSignature">
      <summary>
            Checks if the pdf  has a digital signature or not.
            </summary>
      <returns>Return a  result of bool type.</returns>
    </member>
    <member name="M:Aspose.Pdf.Facades.PdfFileSignature.IsCoversWholeDocument(System.String)">
      <summary>
            Checks if the signature covers the whole document.
            </summary>
      <param name="signName">The name of signature.</param>
      <returns>Return a  result of bool type.</returns>
    </member>
    <member name="M:Aspose.Pdf.Facades.PdfFileSignature.GetRevision(System.String)">
      <summary>
            Gets the revision of a signature.
            </summary>
      <param name="signName">The name of signature.</param>
      <returns>Return the number of signature revision.</returns>
    </member>
    <member name="M:Aspose.Pdf.Facades.PdfFileSignature.GetTotalRevision">
      <summary>
            Gets the toltal revision.
            </summary>
      <returns>Return the total number of signature revision.</returns>
    </member>
    <member name="M:Aspose.Pdf.Facades.PdfFileSignature.RemoveSignature(System.String)">
      <summary>
            Remove the signature according to the name of the signature.
            </summary>
      <param name="signName">The name of signature.</param>
      <example>
        <code>
            [C#]
            string inFile = TestPath + "example1.pdf";
            PdfFileSignature pdfSign = new PdfFileSignature();
            pdfSign.BindPdf(inFile); 
            IList names = pdfSign.GetSignNames();
            for(int i = 0; i &lt; names.Count; i++)
            {
               pdfSign.RemoveSignature((string)names[i]);
            }
            pdfSign.Save(TestPath + "signed_removed.pdf");
            [Visual Basic]
            Dim pdfSign as PdfFileSignature = new PdfFileSignature
            pdfSign.BindPdf(inFile)
            Dim names as IList
            names = pdfSign.GetSignNames()
            For i = 0 To names.Count
             pdfSign.RemoveSignature((string)names[i])
            Next i
            pdfSign.Save(TestPath + "signed_removed.pdf")
            </code>
      </example>
    </member>
    <member name="M:Aspose.Pdf.Facades.PdfFileSignature.RemoveSignature(System.String,System.Boolean)">
      <summary>
            Removes the signature according to the name of the signature.
            </summary>
      <param name="signName">The name of signature.</param>
      <param name="removeField">If set to true, than removes both of signature and field from document; otherwise, signature only.</param>
      <example>
        <code>
            [C#]
            string inFile = TestPath + "example1.pdf";
            PdfFileSignature pdfSign = new PdfFileSignature();
            pdfSign.BindPdf(inFile); 
            IList names = pdfSign.GetSignNames();
            for(int i = 0; i &lt; names.Count; i++)
            {
               pdfSign.RemoveSignature((string)names[i], false);
            }
            pdfSign.Save(TestPath + "signed_removed.pdf");
            [Visual Basic]
            Dim pdfSign as PdfFileSignature = new PdfFileSignature
            pdfSign.BindPdf(inFile)
            Dim names as IList
            names = pdfSign.GetSignNames()
            For i = 0 To names.Count
             pdfSign.RemoveSignature((string)names[i], false)
            Next i
            pdfSign.Save(TestPath + "signed_removed.pdf")
            </code>
      </example>
    </member>
    <member name="M:Aspose.Pdf.Facades.PdfFileSignature.VerifySigned(System.String)">
      <summary>
            Checks the validity of a signature.
            </summary>
      <param name="signName">The name of signature.</param>
      <returns>Return a result of bool type.</returns>
    </member>
    <member name="M:Aspose.Pdf.Facades.PdfFileSignature.GetSignerName(System.String)">
      <summary>
            Gets the name of person or organization who signing the pdf document.
            </summary>
      <param name="signName">The name of signature.</param>
      <returns>Returns the result of the signer's name.</returns>
    </member>
    <member name="M:Aspose.Pdf.Facades.PdfFileSignature.GetDateTime(System.String)">
      <summary>
            Gets the signature's datetime.
            </summary>
      <param name="signName">The name of signature.</param>
      <returns>Return the result of DateTime type.</returns>
    </member>
    <member name="M:Aspose.Pdf.Facades.PdfFileSignature.GetReason(System.String)">
      <summary>
            Gets the reason of a signature.
            </summary>
      <param name="signName">The name of signature.</param>
      <returns>Returns a result of string type.</returns>
    </member>
    <member name="M:Aspose.Pdf.Facades.PdfFileSignature.GetLocation(System.String)">
      <summary>
            Gets the location of a signature.
            </summary>
      <param name="signName">The name of signature.</param>
      <returns>Returns a result of string type.</returns>
    </member>
    <member name="M:Aspose.Pdf.Facades.PdfFileSignature.GetContactInfo(System.String)">
      <summary>
            Gets the contact information of a signature.
            </summary>
      <param name="signName">The name of signature.</param>
      <returns>Returns a result of string type.</returns>
    </member>
    <member name="M:Aspose.Pdf.Facades.PdfFileSignature.VerifySignature(System.String)">
      <summary>
            Checks the validity of a signature.
            </summary>
      <param name="signName">The name of signature.</param>
      <returns>Return a result of bool type.</returns>
    </member>
    <member name="M:Aspose.Pdf.Facades.PdfFileSignature.Save">
      <summary> 
            Save signed pdf file. Output filename must be provided before with the help of coresponding PdfFileSignature constructor.
            </summary>
    </member>
    <member name="M:Aspose.Pdf.Facades.PdfFileSignature.BindPdf(Aspose.Pdf.Generator.Pdf)">
      <summary> 
            Binds a Pdf document for editing.
            </summary>
      <param name="pdf">Pdf document which came from Aspose.Pdf.Generator.</param>
    </member>
    <member name="M:Aspose.Pdf.Facades.PdfFileSignature.#ctor(Aspose.Pdf.Document)">
      <summary>
            Initializes new <see cref="T:Aspose.Pdf.Facades.PdfFileSignature" /> object on base of the <paramref name="document" />.
            </summary>
      <param name="document">
            Pdf document.
            </param>
    </member>
    <member name="M:Aspose.Pdf.Facades.PdfFileSignature.#ctor(Aspose.Pdf.Document,System.String)">
      <summary>
            Initializes new <see cref="T:Aspose.Pdf.Facades.PdfFileSignature" /> object on base of the <paramref name="document" />.
            </summary>
      <param name="document">
            Pdf document.
            </param>
      <param name="outputFile">
            The output file.
            </param>
    </member>
    <member name="M:Aspose.Pdf.Facades.PdfFileSignature.SetCertificate(System.String,System.String)">
      <summary>
            Set certificate file and password for signing routine.
            </summary>
      <param name="pfx">
            PKCS #12 certificate file.
            </param>
      <param name="pass">
            Password to get access for the certificate private key.
            </param>
    </member>
    <member name="M:Aspose.Pdf.Facades.PdfFileSignature.Close">
      <summary>
            Closes the facade.
            </summary>
    </member>
    <member name="P:Aspose.Pdf.Facades.PdfFileSignature.SignatureAppearance">
      <summary>
            Sets or gets a graphic appearance for the signature. Property value represents image file name.
            </summary>
    </member>
    <member name="P:Aspose.Pdf.Facades.PdfFileSignature.SignatureAppearanceStream">
      <summary>
            Sets or gets a graphic appearance for the signature. Property value represents image stream.
            </summary>
    </member>
    <member name="T:Aspose.Pdf.Facades.PdfFileStamp">
      <summary>
            Class for adding stamps (watermark or background) to PDF files.
            </summary>
    </member>
    <member name="F:Aspose.Pdf.Facades.PdfFileStamp.PosBottomMiddle">
      <summary>
            Bottom middle position.
            </summary>
    </member>
    <member name="F:Aspose.Pdf.Facades.PdfFileStamp.PosBottomRight">
      <summary>
            Bottom right position.
            </summary>
    </member>
    <member name="F:Aspose.Pdf.Facades.PdfFileStamp.PosUpperRight">
      <summary>
            Right upper position.
            </summary>
    </member>
    <member name="F:Aspose.Pdf.Facades.PdfFileStamp.PosSidesRight">
      <summary>
            Right position.
            </summary>
    </member>
    <member name="F:Aspose.Pdf.Facades.PdfFileStamp.PosUpperMiddle">
      <summary>
            Upper middle position.
            </summary>
    </member>
    <member name="F:Aspose.Pdf.Facades.PdfFileStamp.PosBottomLeft">
      <summary>
            Bottom left position.
            </summary>
    </member>
    <member name="F:Aspose.Pdf.Facades.PdfFileStamp.PosSidesLeft">
      <summary>
            Left position.
            </summary>
    </member>
    <member name="F:Aspose.Pdf.Facades.PdfFileStamp.PosUpperLeft">
      <summary>
            Upper let position.
            </summary>
    </member>
    <member name="M:Aspose.Pdf.Facades.PdfFileStamp.#ctor(System.String,System.String)">
      <summary>
            Constructor for PdfFileStamp.
            </summary>
      <param name="inputFile">Input file name and path.</param>
      <param name="outputFile">Output file name and path.</param>
      <example>
        <code lang="C#">
            PdfFileStamp stamp = new PdfFileStamp("input.pdf", "output.pdf");
            </code>
      </example>
    </member>
    <member name="M:Aspose.Pdf.Facades.PdfFileStamp.#ctor(System.IO.Stream,System.IO.Stream)">
      <summary>
            Constructor for PdfFileStamp.
            </summary>
      <param name="inputStream">Input stream.</param>
      <param name="outputStream">Output stream.</param>
      <example>
        <code lang="C#">
            Stream input = new FileStream("input.pdf", FileMode.Open, FileAccess.Read);
            Stream output = new FileStream("output.pdf", FileMode.Creat, FileAccess.Write);
            PdfFileStamp stamp = new PdfFileStamp(input, output);
            </code>
      </example>
    </member>
    <member name="M:Aspose.Pdf.Facades.PdfFileStamp.#ctor(System.String,System.String,System.Boolean)">
      <summary>
            Constructor for PdfFileStamp.
            </summary>
      <param name="inputFile">Input file name and path.</param>
      <param name="outputFile">Output file name and path.</param>
      <param name="keepSecurity">Keep security if true.</param>
    </member>
    <member name="M:Aspose.Pdf.Facades.PdfFileStamp.#ctor(System.IO.Stream,System.IO.Stream,System.Boolean)">
      <summary>
            Constructor of PdfFileStamp.
            </summary>
      <param name="inputStream">Input stream.</param>
      <param name="outputStream">Output stream.</param>
      <param name="keepSecurity">Keep security if true.</param>
    </member>
    <member name="M:Aspose.Pdf.Facades.PdfFileStamp.Close">
      <summary>
            Closes opened files and saves changes. 
            Warning. If input or output streams are specified they are not closed by Close() method. 
            </summary>
      <example>
        <code lang="C#">
            PdfFileStamp stamp = new PdfFileStamp("input.pdf", "output.pdf");
            //do some work... 
            stamp.Close();
            </code>
      </example>
    </member>
    <member name="M:Aspose.Pdf.Facades.PdfFileStamp.Save(System.String)">
      <summary>
            Saves result into specified file.
            </summary>
      <param name="destFile">Path to file where document will be saved.</param>
    </member>
    <member name="M:Aspose.Pdf.Facades.PdfFileStamp.Save(System.IO.Stream)">
      <summary>
            Saves document into specified stream.
            </summary>
      <param name="destStream">Stream where document will be saved.</param>
    </member>
    <member name="M:Aspose.Pdf.Facades.PdfFileStamp.AddStamp(Aspose.Pdf.Facades.Stamp)">
      <summary>
            Adds stamp to the file.
            </summary>
      <example>
        <code code="C#">
             PdfFileStamp fileStamp = new PdfFileStamp("input.pdf", "output.pdf");
             Stamp stamp = new Aspose.Pdf.Facades.Stamp();
             stamp.SetOrigin(140, 400);
             stamp.SetImageSize(50, 50);
             stamp.Opacity = 0.8f;
             stamp.IsBackground = true;
             stamp.BindImage("image.jpg");
             fileStamp.AddStamp(stamp);
             fileStamp.Close();
             </code>
      </example>
      <param name="stamp">Stamp object which.</param>
    </member>
    <member name="M:Aspose.Pdf.Facades.PdfFileStamp.AddPageNumber(System.String)">
      <summary>
            Add page number to file. Page number text may contain # sign which will be replaced with number of the page. 
            Page number is placed in the bottom of the page centered horizontally.
            </summary>
      <param name="formatString">Text of page number</param>
      <example>
        <code lang="C#">
             PdfFileStamp fileStamp = new PdfFileStamp("input.pdf", "output.pdf");
             fileStamp.AddPageNumber("Page #");
             fileStamp.Close();
             </code>
      </example>
    </member>
    <member name="M:Aspose.Pdf.Facades.PdfFileStamp.AddPageNumber(Aspose.Pdf.Facades.FormattedText)">
      <summary>
            Adds page number to the page. Page number may contain # sign which will be replaced with page number.
            Page number is placed in the bottom of the page centered horizontally.
            </summary>
      <example>
        <code lang="C#">
             PdfFileStamp fileStamp = new PdfFileStamp("input.pdf", "output.pdf");
             fileStamp.AddPageNumber(new FormattedText("Page #"));
             fileStamp.Close();
             </code>
      </example>
      <param name="formattedText">Format string for page number representes as FormattedText.</param>
    </member>
    <member name="M:Aspose.Pdf.Facades.PdfFileStamp.AddPageNumber(System.String,System.Int32,System.Single,System.Single,System.Single,System.Single)">
      <summary>
            Adds page number to the pages of document.
            </summary>
      <param name="formatString">Format string for page number.</param>
      <param name="position">Position where page number will be placed on the page.  0-bottom middle, 1-bottom right, 2-upper right, 
            3 - sides right, 4 - upper middle,5 - bottom left,6 - sides left,7 - upper left.
            You can use the following constants: 
            PosBottomMiddle = 0, PosBottomRight = 1, PosUpperRight = 2, PosSidesRight = 3, 
            PosUpperMiddle, PosBottomLeft = 5, PosSidesLeft, PosUpperLeft 
            </param>
      <param name="leftMargin">Margin on the left edge of the page. </param>
      <param name="rightMargin">Margin on the right edge of the page.</param>
      <param name="topMargin">Margin on the top edge of the page.</param>
      <param name="bottomMargin">Margin on the bottom edge of the page.</param>
      <example>
        <code code="C#">
             PdfFileStamp fileStamp = new PdfFileStamp("input.pdf", "output.pdf");
             fileStamp.AddPageNumber("Page #", PdfFileStamp.PosBottomLeft, 100, 100, 200, 200);
             fileStamp.Close();
             </code>
      </example>
    </member>
    <member name="M:Aspose.Pdf.Facades.PdfFileStamp.AddPageNumber(System.String,System.Single,System.Single)">
      <summary>
            Adds page number at the specified position on the page. 
            </summary>
      <param name="formatString">Format string. Format string can contain # sign which will be replaced with page number.</param>
      <param name="x">X coordinate of page number.</param>
      <param name="y">Y coordinate of page number.</param>
      <example>
        <code lang="C#">
            PdfFileStamp fileStamp = new PdfFileStamp("input.pdf", "output.pdf");
            fileStamp.AddPageNumber(new FormattedText("Page  #"), 123, 357);
            fileStamp.Close();
            </code>
      </example>
    </member>
    <member name="M:Aspose.Pdf.Facades.PdfFileStamp.AddPageNumber(Aspose.Pdf.Facades.FormattedText,System.Int32,System.Single,System.Single,System.Single,System.Single)">
      <summary>
            Adds page number to the pages of document.
            </summary>
      <param name="formattedText">FormattedText object which represents page number format and properties iof the text.</param>
      <param name="position">Position where page number will be placed on the page.  0-bottom middle, 1-bottom right, 2-upper right, 
            3 - sides right, 4 - upper middle,5 - bottom left,6 - sides left,7 - upper left.
            You can use the following constants: 
            PosBottomMiddle = 0, PosBottomRight = 1, PosUpperRight = 2, PosSidesRight = 3, 
            PosUpperMiddle, PosBottomLeft = 5, PosSidesLeft, PosUpperLeft 
            </param>
      <param name="leftMargin">Margin on the left edge of the page. </param>
      <param name="rightMargin">Margin on the right edge of the page.</param>
      <param name="topMargin">Margin on the top edge of the page.</param>
      <param name="bottomMargin">Margin on the bottom edge of the page.</param>
      <example>
        <code lang="C#">
             PdfFileStamp fileStamp = new PdfFileStamp("input.pdf", "output.pdf");
             fileStamp.AddPageNumber(new FormattedText("Page #"), PdfFileStamp.PosBottomLeft, 100, 100, 200, 200);
             fileStamp.Close();
             </code>
      </example>
    </member>
    <member name="M:Aspose.Pdf.Facades.PdfFileStamp.AddPageNumber(Aspose.Pdf.Facades.FormattedText,System.Single,System.Single)">
      <summary>
            Adds page number at the specified position on the page. 
            </summary>
      <param name="formattedText">Formatted text which represents page number format and properties of the text.
            Format string can contain # sign which will be replaced with page number.</param>
      <param name="x">X coordinate of page number.</param>
      <param name="y">Y coordinate of page number.</param>
      <example>
        <code lang="C#">
            PdfFileStamp fileStamp = new PdfFileStamp("input.pdf", "output.pdf");
            fileStamp.AddPageNumber(new FormattedText("Page  #"), 123, 357);
            fileStamp.Close();
            </code>
      </example>
    </member>
    <member name="M:Aspose.Pdf.Facades.PdfFileStamp.AddHeader(Aspose.Pdf.Facades.FormattedText,System.Single)">
      <summary>
            Adds header to the page.
            </summary>
      <param name="formattedText">Text for header and properties of the text.</param>
      <param name="topMargin">Margin on the top of page.</param>
      <example>
        <code lang="C#">
            PdfFileStamp fileStamp = new PdfFileStamp("input.pdf", "output.pdf");
            fileStamp.AddHeader(new FormattedText("Head of the page"), 50);
            fileStamp.Close();
            </code>
      </example>
    </member>
    <member name="M:Aspose.Pdf.Facades.PdfFileStamp.AddHeader(Aspose.Pdf.Facades.FormattedText,System.Single,System.Single,System.Single)">
      <summary>
            Adds header to the pages of file. 
            </summary>
      <param name="formattedText">Formatted text object which contains page text and its properties.</param>
      <param name="topMargin">Margin on the top of the page.</param>
      <param name="leftMargin">Margin on the left of the page.</param>
      <param name="rightMargin">Margin on the right of the page.</param>
      <example>
        <code lang="C#">
            PdfFileStamp stamp = new PdfFileStamp("input.pdf", "output.pdf");
            stamp.AddHeader(new FormattedText("Head of the page"), 10, 50, 50);
            </code>
      </example>
    </member>
    <member name="M:Aspose.Pdf.Facades.PdfFileStamp.AddHeader(System.String,System.Single)">
      <summary>
            Adds image as header to the pages of the file. 
            </summary>
      <param name="imageFile">Path to the image file.</param>
      <param name="topMargin">Margin at top of the page.</param>
      <example>
        <code lang="C#">
            PdfFileStamp fileStamp = new PdfFileStamp("input.pdf", output.pdf");
            Stream input = new FileStream(TestSettings.GetInputFile("test.jpg"), FileMode.Open, FileAccess.Read);
            fileStamp.AddHeader("image.jpg", 50);
            fileStamp.Close();
            </code>
      </example>
    </member>
    <member name="M:Aspose.Pdf.Facades.PdfFileStamp.AddHeader(System.String,System.Single,System.Single,System.Single)">
      <summary>
            Adds image as header on the pages.
            </summary>
      <param name="imageFile">Path to the image file.</param>
      <param name="topMargin">Margin at top of the page.</param>
      <param name="leftMargin">Margin at left side of the page.</param>
      <param name="rightMargin">Margin at right side of the page.</param>
      <example>
        <code lang="C#">
            PdfFileStamp fileStamp = new PdfFileStamp("input.pdf", output.pdf");
            Stream input = new FileStream(TestSettings.GetInputFile("test.jpg"), FileMode.Open, FileAccess.Read);
            fileStamp.AddHeader("image.jpg", 50, 100, 100);
            fileStamp.Close();
            </code>
      </example>
    </member>
    <member name="M:Aspose.Pdf.Facades.PdfFileStamp.AddHeader(System.IO.Stream,System.Single)">
      <summary>
            Adds image as header on the pages.
            </summary>
      <param name="imageStream">Stream of the image.</param>
      <param name="topMargin">Margin at top of the page.</param>
      <example>
        <code lang="C#">
            PdfFileStamp fileStamp = new PdfFileStamp("input.pdf", output.pdf");
            Stream input = new FileStream(TestSettings.GetInputFile("test.jpg"), FileMode.Open, FileAccess.Read);
            fileStamp.AddHeader(new FileStream("image.jpg", FileMode.Open, FileAccess.Read), 50);
            fileStamp.Close();
            </code>
      </example>
    </member>
    <member name="M:Aspose.Pdf.Facades.PdfFileStamp.AddHeader(System.IO.Stream,System.Single,System.Single,System.Single)">
      <summary>
            Adds image at the top of the page. 
            </summary>
      <param name="inputStream">Stream which contains image data.</param>
      <param name="topMargin">Margin at top of the page.</param>
      <param name="leftMargin">Margin at left side of the page.</param>
      <param name="rightMargin">Margin at right side of the page.</param>
      <example>
        <code lang="C#">
            PdfFileStamp fileStamp = new PdfFileStamp("input.pdf", output.pdf");
            Stream input = new FileStream(TestSettings.GetInputFile("test.jpg"), FileMode.Open, FileAccess.Read);
            fileStamp.AddHeader(new FileStream("image.jpg", FileMode.Open, FileAccess.Read), 50, 100, 100);
            fileStamp.Close();
            </code>
      </example>
    </member>
    <member name="M:Aspose.Pdf.Facades.PdfFileStamp.AddFooter(Aspose.Pdf.Facades.FormattedText,System.Single)">
      <summary>
            Adds footer to the pages of the document.
            </summary>
      <param name="formattedText">FormattedText object which contains text of the footer and text properties.</param>
      <param name="bottomMargin">Margin at the top of page.</param>
      <example>
        <code lang="C#">
            PdfFileStamp stamp = new PdfFileStamp("input.pdf", "output.pdf");
            stamp.AddFooter(new FormattedText("Foot of the page"), 10);
            </code>
      </example>
    </member>
    <member name="M:Aspose.Pdf.Facades.PdfFileStamp.AddFooter(Aspose.Pdf.Facades.FormattedText,System.Single,System.Single,System.Single)">
      <summary>
            Adds footer to the pages of the document.
            </summary>
      <param name="formattedText">FormattedText object which contains footer text and text properties.</param>
      <param name="bottomMargin">Margin at the bottom of the page.</param>
      <param name="leftMargin">Margin at the left side of the page.</param>
      <param name="rightMargin">Margin at the right side of the page.</param>
      <example>
        <code lang="C#">
            PdfFileStamp stamp = new PdfFileStamp("input.pdf", "output.pdf");
            stamp.AddFooter(new FormattedText("Foot of the page"), 10, 50, 50);
            </code>
      </example>
    </member>
    <member name="M:Aspose.Pdf.Facades.PdfFileStamp.AddFooter(System.String,System.Single)">
      <summary>
            Adds image as footer to the pages of the document.
            </summary>
      <param name="imageFile">Image file name and path.</param>
      <param name="bottomMargin">Margin at the bottom of the page.</param>
      <example>
        <code lang="C#">
            PdfFileStamp fileStamp = new PdfFileStamp("input.pdf", output.pdf");
            Stream input = new FileStream(TestSettings.GetInputFile("test.jpg"), FileMode.Open, FileAccess.Read);
            fileStamp.AddFooter("image.jpg", 50);
            fileStamp.Close();
            </code>
      </example>
    </member>
    <member name="M:Aspose.Pdf.Facades.PdfFileStamp.AddFooter(System.String,System.Single,System.Single,System.Single)">
      <summary>
            Adds image as footer of the pages.
            </summary>
      <param name="imageFile">Iamge file name and path.</param>
      <param name="bottomMargin">Margin at the bottom of the page.</param>
      <param name="leftMargin">Margin at the left side of the page.</param>
      <param name="rightMargin">Margin at the right side of the page.</param>
            /// <example><code lang="C#">
            PdfFileStamp fileStamp = new PdfFileStamp("input.pdf", output.pdf");
            Stream input = new FileStream(TestSettings.GetInputFile("test.jpg"), FileMode.Open, FileAccess.Read);
            fileStamp.AddFooter("image.jpg", 50, 100, 100);
            fileStamp.Close();
            </code></example></member>
    <member name="M:Aspose.Pdf.Facades.PdfFileStamp.AddFooter(System.IO.Stream,System.Single)">
      <summary>
            Adds image as footer of the page.
            </summary>
      <param name="imageStream">Stream contains image data.</param>
      <param name="bottomMargin">Margin at the bottom of the page.</param>
      <example>
        <code lang="C#">
            PdfFileStamp fileStamp = new PdfFileStamp("input.pdf", output.pdf");
            Stream input = new FileStream(TestSettings.GetInputFile("test.jpg"), FileMode.Open, FileAccess.Read);
            fileStamp.AddFooter(new FileStream("image.jpg", FileMode.Open, FileAccess.Read), 50);
            fileStamp.Close();
            </code>
      </example>
    </member>
    <member name="M:Aspose.Pdf.Facades.PdfFileStamp.AddFooter(System.IO.Stream,System.Single,System.Single,System.Single)">
      <summary>
            Adds image as footer of the page.
            </summary>
      <param name="imageStream">Stream contains image data.</param>
      <param name="bottomMargin">Margin at the bottom of the page.</param>
      <param name="leftMargin">Margin at the left side of the page.</param>
      <param name="rightMargin">Margin at the right side of the page.</param>
      <example>
        <code lang="C#">
            PdfFileStamp fileStamp = new PdfFileStamp("input.pdf", output.pdf");
            Stream input = new FileStream(TestSettings.GetInputFile("test.jpg"), FileMode.Open, FileAccess.Read);
            fileStamp.AddFooter(new FileStream("image.jpg", FileMode.Open, FileAccess.Read), 50, 50, 50);
            fileStamp.Close();
            </code>
      </example>
    </member>
    <member name="M:Aspose.Pdf.Facades.PdfFileStamp.AddPageNumber(System.String,System.Int32)">
      <summary>
            Adds page number to the pages.
            </summary>
      <param name="formatString">Format of the page number. This text may contain # which will be replaced with page number.</param>
      <param name="position">Position where page number will be placed on the page.  0-bottom middle, 1-bottom right, 2-upper right, 
            3 - sides right, 4 - upper middle,5 - bottom left,6 - sides left,7 - upper left.
            You can use the following constants: 
            PosBottomMiddle = 0, PosBottomRight = 1, PosUpperRight = 2, PosSidesRight = 3, 
            PosUpperMiddle, PosBottomLeft = 5, PosSidesLeft, PosUpperLeft 
            </param>
      <example>
        <code lang="C#">
             PdfFileStamp fileStamp = new PdfFileStamp("input.pdf", "output.pdf");
             fileStamp.AddPageNumber("Page #", PdfFileStamp.PosUpperRight);
             fileStamp.Close();
            </code>
      </example>
    </member>
    <member name="M:Aspose.Pdf.Facades.PdfFileStamp.AddPageNumber(Aspose.Pdf.Facades.FormattedText,System.Int32)">
      <summary>
            Adds page number to the pages.
            </summary>
      <param name="formattedText">FormattedText object which contains format of the page number and text properties. 
            This text may contain # which will be replaced with page number.</param>
      <param name="position">Position where page number will be placed on the page.  0-bottom middle, 1-bottom right, 2-upper right, 
            3 - sides right, 4 - upper middle,5 - bottom left,6 - sides left,7 - upper left.
            You can use the following constants: 
            PosBottomMiddle = 0, PosBottomRight = 1, PosUpperRight = 2, PosSidesRight = 3, 
            PosUpperMiddle, PosBottomLeft = 5, PosSidesLeft, PosUpperLeft 
            </param>
      <example>
        <code lang="C#">
             PdfFileStamp fileStamp = new PdfFileStamp("input.pdf", "output.pdf");
             fileStamp.AddPageNumber("Page #", PdfFileStamp.PosUpperRight);
             fileStamp.Close();
            </code>
      </example>
    </member>
    <member name="M:Aspose.Pdf.Facades.PdfFileStamp.#ctor">
      <summary>
            Constructor of the PdfFileStamp.
            Input file and output file may be specified via corresponding properties.
            <example><code lang="C#">
            PdfFileStamp fileStamp = new PdfFileStamp();
            fileStamp.InputFile = "input.pdf";
            fileStamp.OutputFile = "output.pdf";
            </code></example></summary>
    </member>
    <member name="M:Aspose.Pdf.Facades.PdfFileStamp.#ctor(Aspose.Pdf.Document)">
      <summary>
            Initializes new <see cref="T:Aspose.Pdf.Facades.PdfFileStamp" /> object on base of the <paramref name="document" />.
            </summary>
      <param name="document">
            Pdf document.
            </param>
    </member>
    <member name="M:Aspose.Pdf.Facades.PdfFileStamp.#ctor(Aspose.Pdf.Document,System.String)">
      <summary>
            Initializes new <see cref="T:Aspose.Pdf.Facades.PdfFileStamp" /> object on base of the <paramref name="document" />.
            </summary>
      <param name="document">
            Pdf document.
            </param>
      <param name="outputFile">
            Output file name and path.
            </param>
    </member>
    <member name="M:Aspose.Pdf.Facades.PdfFileStamp.#ctor(Aspose.Pdf.Document,System.IO.Stream)">
      <summary>
            Initializes new <see cref="T:Aspose.Pdf.Facades.PdfFileStamp" /> object on base of the <paramref name="document" />.
            </summary>
      <param name="document">
            Pdf document.
            </param>
      <param name="outputStream">
            Output stream.
            </param>
    </member>
    <member name="P:Aspose.Pdf.Facades.PdfFileStamp.OptimizeSize">
      <summary>
            Gets or sets optimization flag. Equal resource streams in resultant file are merged into one PDF object if this flag set. 
            This allows to decrease resultant file size but may cause slower execution and larger memory requirements.
            Default value: false.
            </summary>
    </member>
    <member name="P:Aspose.Pdf.Facades.PdfFileStamp.KeepSecurity">
      <summary>
            Keeps security if true. (This feature will be implemented in next versions).
            </summary>
    </member>
    <member name="P:Aspose.Pdf.Facades.PdfFileStamp.InputFile">
      <summary>
            Gets or sets name and path of input file.
            </summary>
    </member>
    <member name="P:Aspose.Pdf.Facades.PdfFileStamp.InputStream">
      <summary>
            Gets or sets input stream.
            </summary>
    </member>
    <member name="P:Aspose.Pdf.Facades.PdfFileStamp.OutputFile">
      <summary>
            Gets or sets name and path of output file.
            </summary>
    </member>
    <member name="P:Aspose.Pdf.Facades.PdfFileStamp.OutputStream">
      <summary>
            Gets or sets output stream.
            </summary>
    </member>
    <member name="P:Aspose.Pdf.Facades.PdfFileStamp.PageNumberRotation">
      <summary>
            Gets or sets rotation of page number. Rotation  is in degrees. Default is 0.
            </summary>
    </member>
    <member name="P:Aspose.Pdf.Facades.PdfFileStamp.ConvertTo">
      <summary>
            Sets PDF file format. Result file will be saved in specified file format. 
            If this property is not specified then file will be save in default PDF format without conversion.
            </summary>
    </member>
    <member name="P:Aspose.Pdf.Facades.PdfFileStamp.PageHeight">
      <summary>
            Gets height of first page in souorce file.
            </summary>
      <example>
        <code code="C#">
             PdfFileStamp fileStamp = new PdfFileStamp("input.pdf", "output.pdf");
             Console.WriteLine("Height = " + fileStamp.PageHeight);
             fileStamp.Close();
             </code>
      </example>
    </member>
    <member name="P:Aspose.Pdf.Facades.PdfFileStamp.PageWidth">
      <summary>
            Gets width of first page in input file.
            </summary>
      <example>
        <code lang="C#">
             PdfFileStamp fileStamp = new PdfFileStamp("input.pdf", "output.pdf");
             Console.WriteLine("Width = " + fileStamp.PageWidth);
             fileStamp.Close();
             </code>
      </example>
    </member>
    <member name="P:Aspose.Pdf.Facades.PdfFileStamp.StartingNumber">
      <summary>
            Gets or sets starting number for first page in input file. Next pages will be numbered starting from this value. 
            For example if  StartingNumber is set to 100, document pages will have numbers 100, 101, 102... 
            </summary>
      <example>
        <code lang="C#">
             PdfFileStamp fileStamp = new PdfFileStamp("input.pdf", "output.pdf");
             fileStamp.StartingNumber = 100;
             fileStamp.AddPageNumber("Page #");
             fileStamp.Close();
             </code>
      </example>
    </member>
    <member name="P:Aspose.Pdf.Facades.PdfFileStamp.StampId">
      <summary>
            Stamp ID of next added stamp (incluiding page headers/hooters/page numbers).
            </summary>
    </member>
    <member name="T:Aspose.Pdf.Facades.PdfJavaScriptStripper">
      <summary>
            Class for removing all Java Script code.
            </summary>
    </member>
    <member name="M:Aspose.Pdf.Facades.PdfJavaScriptStripper.Strip(System.String,System.String)">
      <summary>
            Remove Java Script from document. 
            </summary>
      <param name="inputFile">File containig the document.</param>
      <param name="outputFile">File where document will be stored.</param>
      <returns>
      </returns>
    </member>
    <member name="M:Aspose.Pdf.Facades.PdfJavaScriptStripper.Strip(System.IO.Stream,System.IO.Stream)">
      <summary>
            Remove Java Script from the document.
            </summary>
      <param name="inStream">Stream containing document.</param>
      <param name="outStream">Stream where the document will be stored.</param>
      <returns>
      </returns>
    </member>
    <member name="T:Aspose.Pdf.Facades.PdfPageEditor">
      <summary> 
            Represents a class to edit the PDF file's page, including rotating page, zooming page, moving position and changing page size. 
            </summary>
    </member>
    <member name="F:Aspose.Pdf.Facades.PdfPageEditor.SPLITVOUT">
      <summary>  Out Vertical Split</summary>
    </member>
    <member name="F:Aspose.Pdf.Facades.PdfPageEditor.SPLITHOUT">
      <summary>  Out Horizontal Split</summary>
    </member>
    <member name="F:Aspose.Pdf.Facades.PdfPageEditor.SPLITVIN">
      <summary>  In Vertical Split</summary>
    </member>
    <member name="F:Aspose.Pdf.Facades.PdfPageEditor.SPLITHIN">
      <summary>  IN Horizontal Split</summary>
    </member>
    <member name="F:Aspose.Pdf.Facades.PdfPageEditor.BLINDV">
      <summary>  Vertical Blinds</summary>
    </member>
    <member name="F:Aspose.Pdf.Facades.PdfPageEditor.BLINDH">
      <summary>  Vertical Blinds</summary>
    </member>
    <member name="F:Aspose.Pdf.Facades.PdfPageEditor.INBOX">
      <summary>  Inward Box</summary>
    </member>
    <member name="F:Aspose.Pdf.Facades.PdfPageEditor.OUTBOX">
      <summary>  Outward Box</summary>
    </member>
    <member name="F:Aspose.Pdf.Facades.PdfPageEditor.LRWIPE">
      <summary>  Left-Right Wipe</summary>
    </member>
    <member name="F:Aspose.Pdf.Facades.PdfPageEditor.RLWIPE">
      <summary>  Right-Left Wipe</summary>
    </member>
    <member name="F:Aspose.Pdf.Facades.PdfPageEditor.BTWIPE">
      <summary>  Bottom-Top Wipe</summary>
    </member>
    <member name="F:Aspose.Pdf.Facades.PdfPageEditor.TBWIPE">
      <summary>  Top-Bottom Wipe</summary>
    </member>
    <member name="F:Aspose.Pdf.Facades.PdfPageEditor.DISSOLVE">
      <summary>  Dissolve</summary>
    </member>
    <member name="F:Aspose.Pdf.Facades.PdfPageEditor.LRGLITTER">
      <summary>  Left-Right Glitter</summary>
    </member>
    <member name="F:Aspose.Pdf.Facades.PdfPageEditor.TBGLITTER">
      <summary>  Top-Bottom Glitter</summary>
    </member>
    <member name="F:Aspose.Pdf.Facades.PdfPageEditor.DGLITTER">
      <summary>  Diagonal Glitter</summary>
    </member>
    <member name="M:Aspose.Pdf.Facades.PdfPageEditor.#ctor">
      <summary>
      </summary>
    </member>
    <member name="M:Aspose.Pdf.Facades.PdfPageEditor.#ctor(Aspose.Pdf.Document)">
      <summary>
      </summary>
    </member>
    <member name="M:Aspose.Pdf.Facades.PdfPageEditor.MovePosition(System.Single,System.Single)">
      <summary>
            Moves the origin from (0, 0) to the point that appointted. 
            The origin is left-bottom and the unit is point(1 inch = 72 points). 
            </summary>
      <param name="moveX">X-coordinate.</param>
      <param name="moveY">Y-coordinate.</param>
      <example>
        <code lang="C#">
            PdfPageEditor editor = new PdfPageEditor();
            editor.BindPdf("input.pdf");
            editor.MovePosition(-100, 60);
            editor.Save("moved.pdf");
            </code>
      </example>
    </member>
    <member name="M:Aspose.Pdf.Facades.PdfPageEditor.GetPages">
      <summary>
            Returns total number of pages.
            </summary>
      <example>
            The following example demonstrates using of GetPages() method:
            <code lang="C#">
            PdfPageEditor editor = new PdfPageEditor();
            editor.BindPdf("sample.pdf");
            Console.WriteLine("Document has: " + editor.GetPages());
            </code></example>
    </member>
    <member name="M:Aspose.Pdf.Facades.PdfPageEditor.GetPageSize(System.Int32)">
      <summary>
            Returns the page size of the specified page.
            </summary>
      <param name="page">Page index. Document pages are numbered from 1.</param>
      <returns>Result is instance of PageSize. Use Width and Height properties of the returned object to get page width and height.</returns>
      <example>
            The following example demonstrates using of GetPageSize method: 
            <code lang="C#">
            PdfPageEditor editor = new PdfPageEditor();
            editor.BindPdf("sample.pdf");
            PageSize size = editor.GetPageSize(1);
            Console.WriteLine("Size of 1st page : " + size.Width + " x " + size.Height);
            </code></example>
    </member>
    <member name="M:Aspose.Pdf.Facades.PdfPageEditor.GetPageRotation(System.Int32)">
      <summary>
            Returns the rotation of specified page. 
            </summary>
      <param name="page">Page index. Document pages are numbered from 1.</param>
      <returns>Page rotation in degrees.</returns>
      <example>
            The following example demonstrates how to get page rotation:
            <code lang="C#">
            PdfPageEditor editor = new PdfPageEditor();
            editor.BindPdf("sample.pdf");
            int rotation = editor.GetPageSize(1);
            Console.WriteLine("Rotation of 1st page : " + rotation + " degrees");        
            </code></example>
    </member>
    <member name="M:Aspose.Pdf.Facades.PdfPageEditor.GetPageBoxSize(System.Int32,System.String)">
      <summary>
            Returns size of specified box in document.
            </summary>
      <param name="page">Page index. Document pages are numbered from 1.</param>
      <param name="pageBoxName">Box type name. Valid values are: "art", "bleed", "crop", "media", "trim".</param>
      <returns>Rectangle which contains requested box.</returns>
      <example>
            The following example demonstrates how to get media box of the 1st page:
            <code lang="C#">
            PdfPageEditor editor = new PdfPageEditor();
            editor.BindPdf("sample.pdf");
            System.Drawing.Rectangle rect = editor.GetBoxSize(1, "media");
            </code></example>
    </member>
    <member name="M:Aspose.Pdf.Facades.PdfPageEditor.Save(System.String)">
      <summary>
            Saves changed document into file. 
            </summary>
      <param name="outputFile">Path to file where document will be saved.</param>
      <example>
            The following sample demonstrates how to save changed PDF document
            <code lang="C#">
            PdfPageEditor editor = new PdfPageEditor();
            editor.BindPdf("sample.pdf");
            editor.Zoom = 0.5f;
            editor.Save("newdocument.pdf");
            </code></example>
    </member>
    <member name="M:Aspose.Pdf.Facades.PdfPageEditor.Save(System.IO.Stream)">
      <summary>
            Saves changed document into stream. 
            </summary>
      <param name="outputStream">Stream where changed PDF document will be saved.</param>
      <example>
            The following sample demonstrates how to save changed PDF document into stream.
            <code lang="C#">
            PdfPageEditor editor = new PdfPageEditor();
            editor.BindPdf("sample.pdf");
            editor.Zoom = 0.5f;
            editor.Save("newdocument.pdf");
            </code></example>
    </member>
    <member name="M:Aspose.Pdf.Facades.PdfPageEditor.ApplyChanges">
      <summary>
            Apply changes made to the document pages.
            </summary>
    </member>
    <member name="M:Aspose.Pdf.Facades.PdfPageEditor.BindPdf(Aspose.Pdf.Generator.Pdf)">
      <summary> 
            Binds a Pdf document for editing.
            </summary>
      <param name="pdf">Pdf document which came from Aspose.Pdf.Generator.</param>
    </member>
    <member name="P:Aspose.Pdf.Facades.PdfPageEditor.TransitionDuration">
      <summary>
            Gets or sets duration of the transition effect.
            </summary>
    </member>
    <member name="P:Aspose.Pdf.Facades.PdfPageEditor.TransitionType">
      <summary>
            Gets or sets transition style to use when moving to this page from another during a presentation.
            </summary>
    </member>
    <member name="P:Aspose.Pdf.Facades.PdfPageEditor.DisplayDuration">
      <summary>
            Gets or sets display duration for pages.
            </summary>
    </member>
    <member name="P:Aspose.Pdf.Facades.PdfPageEditor.Pages">
      <summary>
            Gets or sets the page numbers to be edited. By default, each page would be edited.
            </summary>
    </member>
    <member name="P:Aspose.Pdf.Facades.PdfPageEditor.Rotation">
      <summary>
            Gets or sets the rotation of the pages, the rotation must be 0, 90, 180 or 270.
            Default value is 0.
            </summary>
    </member>
    <member name="P:Aspose.Pdf.Facades.PdfPageEditor.PageRotations">
      <summary>
            A hashtable contains the page number and rotation degree,
            the key represents the page number, the value of key represents the rotation in degrees.
            </summary>
    </member>
    <member name="P:Aspose.Pdf.Facades.PdfPageEditor.Zoom">
      <summary>
            Get or sets zoom coefficient. Value 1.0 corresponds to 100%.
            Default value is 1.0.
            <example>
            The following example demonstrates how to change zoom of the document pages.
            <code lang="C#">
            PdfPageEditor editor = new PdfPageEditor();
            editor.BindPdf("sample.pdf");
            editor.Zoom = 0.5f;
            </code></example></summary>
    </member>
    <member name="P:Aspose.Pdf.Facades.PdfPageEditor.PageSize">
      <summary>
            Gets or sets the output file's page size.
            </summary>
    </member>
    <member name="P:Aspose.Pdf.Facades.PdfPageEditor.Alignment">
      <summary>
            Gets or sets the horizontal alignment of the original PDF content on the result page, default is AlignmentType.Left.
            </summary>
    </member>
    <member name="P:Aspose.Pdf.Facades.PdfPageEditor.VerticalAlignment">
      <summary>
            Gets or Sets the vertical alignment of the original PDF content on the result page, default is VerticalAlignmentType.Bottom.
            </summary>
    </member>
    <member name="T:Aspose.Pdf.Facades.PdfViewer">
      <summary>
            Represents a class to view or print a pdf.
            </summary>
    </member>
    <member name="M:Aspose.Pdf.Facades.PdfViewer.#ctor">
      <summary>
      </summary>
    </member>
    <member name="M:Aspose.Pdf.Facades.PdfViewer.#ctor(Aspose.Pdf.Document)">
      <summary>
      </summary>
      <param name="document">
      </param>
    </member>
    <member name="M:Aspose.Pdf.Facades.PdfViewer.PrintLargePdf(System.String)">
      <summary>
             Opens and prints a large Pdf file. If your Pdf file has hundreds of pages or more or its size is 
             more than 3 MB, this method is recommended to get better performance.  
             </summary>
      <remarks>This method has integrated the opening and the printing of the file and you need not 
             calling the OpenPdfFile() explicitly. </remarks>
      <param name="filePath">The path of Pdf file.</param>
      <example>
        <code>
             [C#]
            PdfViewer viewer = new PdfViewer();
            viewer.AutoResize = true;     //print the file with adjusted size
            viewer.AutoRotate = true;     //print the file with adjusted rotation
            viewer.PrintPageDialog=false;//do not produce the page number dialog when printing
            viewer.PrintLargePdf(@"d:\test.pdf");
            
            [VisualBasic]
            Dim viewer As PdfViewer = new PdfViewer();
            viewer.AutoResize = true      'print the file with adjusted size
            viewer.AutoRotate = true      'print the file with adjusted rotation
            viewer.PrintPageDialog=false;//do not produce the page number dialog when printing
            viewer.PrintLargePdf(@"d:\test.pdf")
            viewer.ClosePdfFile();
             </code>
      </example>
    </member>
    <member name="M:Aspose.Pdf.Facades.PdfViewer.PrintLargePdf(System.IO.Stream)">
      <summary>
             Opens and prints a large Pdf stream. If your Pdf file has hundreds of pages or more or its size is 
             more than 3 MB, this method is recommended to get better performance.  
             </summary>
      <remarks>This method has integrated the opening and the printing of the file and you need not 
             calling the OpenPdfFile() explicitly. </remarks>
      <param name="inputStream">The pdf stream to be opened  and printed..</param>
      <example>
        <code>
             [C#]
            PdfViewer viewer = new PdfViewer();
            viewer.AutoResize = true;        //print the file with adjusted size
            viewer.AutoRotate = true;        //print the file with adjusted rotation
            viewer.PrintPageDialog=false;//do not produce the page number dialog when printing
            viewer.PrintLargePdf(new MemoryStream(File.ReadAllBytes(@"d:\test.pdf")));
            viewer.ClosePdfFile();
            
            [VisualBasic]
            Dim viewer As PdfViewer = new PdfViewer();
            viewer.AutoResize = true         'print the file with adjusted size
            viewer.AutoRotate = true         'print the file with adjusted rotation
            viewer.PrintPageDialog=false;//do not produce the page number dialog when printing
            viewer.PrintLargePdf(new MemoryStream(File.ReadAllBytes(@"d:\test.pdf")))
            viewer.ClosePdfFile()
             </code>
      </example>
    </member>
    <member name="M:Aspose.Pdf.Facades.PdfViewer.PrintLargePdf(System.String,System.Drawing.Printing.PrinterSettings)">
      <summary>
             Opens and prints a large Pdf file with specified printer settings. If your Pdf file has hundreds 
             of pages or more or its size is more than 3 MB, this method is recommended to get better performance. 
             </summary>
      <remarks>This method has integrated the opening and the printing of the file and you need not 
             calling the OpenPdfFile() explicitly. </remarks>
      <param name="filePath">The path of Pdf file.</param>
      <param name="printerSettings">The printer settings.</param>
      <example>
        <code>
             [C#]
            PdfViewer viewer = new PdfViewer();
            viewer.AutoResize = true;       //print the file with adjusted size
            viewer.AutoRotate = true;       //print the file with adjusted rotation
            viewer.PrintPageDialog=false;//do not produce the page number dialog when printing
            System.Drawing.Printing.PrinterSettings ps = new System.Drawing.Printing.PrinterSettings();
            PrintDocument prtdoc = new PrintDocument();
            ps.PrinterName = prtdoc.PrinterSettings.PrinterName;
            viewer.PrintLargePdf(@"d:\test.pdf",ps);
            viewer.ClosePdfFile();
            
            [VisualBasic]
            Dim viewer As PdfViewer = new PdfViewer();
            viewer.AutoResize = true        'print the file with adjusted size
            viewer.AutoRotate = true        'print the file with adjusted rotation
            viewer.PrintPageDialog=false;//do not produce the page number dialog when printing
            Dim ps As System.Drawing.Printing.PrinterSettings = new System.Drawing.Printing.PrinterSettings()
            Dim prtdoc As PrintDocument = new PrintDocument()
            ps.PrinterName = prtdoc.PrinterSettings.PrinterName
            viewer.PrintLargePdf(@"d:\test.pdf",ps)
            viewer.ClosePdfFile()
             </code>
      </example>
    </member>
    <member name="M:Aspose.Pdf.Facades.PdfViewer.PrintLargePdf(System.IO.Stream,System.Drawing.Printing.PrinterSettings)">
      <summary>
             Opens and prints a large Pdf stream with specified printer settings. If your Pdf file has hundreds 
             of pages or more or its size is more than 3 MB, this method is recommended to get better performance.  
             </summary>
      <remarks>This method has integrated the opening and the printing of the file and you need not 
             calling the OpenPdfFile() explicitly. </remarks>
      <param name="inputStream">The pdf stream to be opened  and printed..</param>
      <param name="printerSettings">The printer settings.</param>
      <example>
        <code>
             [C#]
            PdfViewer viewer = new PdfViewer();
            viewer.AutoResize = true;       //print the file with adjusted size
            viewer.AutoRotate = true;       //print the file with adjusted rotation
            viewer.PrintPageDialog=false;//do not produce the page number dialog when printing
            System.Drawing.Printing.PrinterSettings ps = new System.Drawing.Printing.PrinterSettings();
            PrintDocument prtdoc = new PrintDocument();
            ps.PrinterName = prtdoc.PrinterSettings.PrinterName;
            viewer.PrintLargePdf(new MemoryStream(File.ReadAllBytes(@"d:\middleware.pdf")),ps);
            viewer.ClosePdfFile();
            
            [VisualBasic]
            Dim viewer As PdfViewer = new PdfViewer();
            viewer.AutoResize = true        'print the file with adjusted size
            viewer.AutoRotate = true        'print the file with adjusted rotation
            viewer.PrintPageDialog=false;//do not produce the page number dialog when printing
            Dim ps As System.Drawing.Printing.PrinterSettings = new System.Drawing.Printing.PrinterSettings()
            Dim prtdoc As PrintDocument = new PrintDocument()
            ps.PrinterName = prtdoc.PrinterSettings.PrinterName
            viewer.PrintLargePdf(new MemoryStream(File.ReadAllBytes(@"d:\middleware.pdf")),ps)
            viewer.ClosePdfFile()
             </code>
      </example>
    </member>
    <member name="M:Aspose.Pdf.Facades.PdfViewer.PrintLargePdf(System.String,System.Drawing.Printing.PageSettings,System.Drawing.Printing.PrinterSettings)">
      <summary>
             Opens and prints a large Pdf file with specified page settings and printer settings. If your Pdf 
             file has hundreds of pages or more or its size is more than 3 MB, this method is recommended to 
             get better performance.
             </summary>
      <remarks>This method has integrated the opening and the printing of the file and you need not 
             calling the OpenPdfFile() explicitly. </remarks>
      <param name="filePath">The path of Pdf file.</param>
      <param name="pageSettings">The page settings.</param>
      <param name="printerSettings">The printer settings.</param>
      <example>
        <code>
             [C#]
            PdfViewer viewer = new PdfViewer();
            viewer.AutoResize = true;       //print the file with adjusted size
            viewer.AutoRotate = true;       //print the file with adjusted rotation
            viewer.PrintPageDialog=false;//do not produce the page number dialog when printing
            System.Drawing.Printing.PrinterSettings ps = new System.Drawing.Printing.PrinterSettings();
            PrintDocument prtdoc = new PrintDocument();
            ps.PrinterName = prtdoc.PrinterSettings.PrinterName;
            PageSettings pgs = new PageSettings();
            pgs.PaperSize = new System.Drawing.Printing.PaperSize("A4", 827, 1169);
            pgs.Margins = new Margins(0, 0, 0, 0);
            viewer.PrintLargePdf(@"d:\test.pdf",pgs,ps);
            viewer.ClosePdfFile();
            
            [VisualBasic]
            Dim viewer As PdfViewer = new PdfViewer();
            viewer.AutoResize = true       'print the file with adjusted size
            viewer.AutoRotate = true       'print the file with adjusted rotation
            viewer.PrintPageDialog=false;//do not produce the page number dialog when printing
            Dim ps As System.Drawing.Printing.PrinterSettings = new System.Drawing.Printing.PrinterSettings()
            Dim prtdoc As PrintDocument = new PrintDocument()
            ps.PrinterName = prtdoc.PrinterSettings.PrinterName
            Dim pgs As PageSettings=new PageSettings()
            pgs.PaperSize = new System.Drawing.Printing.PaperSize("A4", 827, 1169)
            pgs.Margins = new Margins(0, 0, 0, 0)
            viewer.PrintLargePdf(@"d:\test.pdf",pgs,ps)
            viewer.ClosePdfFile()
             </code>
      </example>
    </member>
    <member name="M:Aspose.Pdf.Facades.PdfViewer.PrintLargePdf(System.IO.Stream,System.Drawing.Printing.PageSettings,System.Drawing.Printing.PrinterSettings)">
      <summary>
             Opens and prints a large Pdf stream with specified page settings and printer settings. If your Pdf 
             file has hundreds of pages or more or its size is more than 3 MB, this method is recommended to 
             get better performance. 
             </summary>
      <remarks>This method has integrated the opening and the printing of the file and you need not 
             calling the OpenPdfFile() explicitly. </remarks>
      <param name="inputStream">The pdf stream to be opened and printed.</param>
      <param name="pageSettings">The page settings.</param>
      <param name="printerSettings">The printer settings.</param>
      <example>
        <code>
             [C#]
            PdfViewer viewer = new PdfViewer();
            viewer.AutoResize = true;       //print the file with adjusted size
            viewer.AutoRotate = true;       //print the file with adjusted rotation
            viewer.PrintPageDialog=false;//do not produce the page number dialog when printing
            System.Drawing.Printing.PrinterSettings ps = new System.Drawing.Printing.PrinterSettings();
            PrintDocument prtdoc = new PrintDocument();
            ps.PrinterName = prtdoc.PrinterSettings.PrinterName;
            PageSettings pgs = new PageSettings();
            pgs.PaperSize = new System.Drawing.Printing.PaperSize("A4", 827, 1169);
            pgs.Margins = new Margins(0, 0, 0, 0);
            viewer.PrintLargePdf(new MemoryStream(File.ReadAllBytes(@"d:\middleware.pdf")),pgs,ps);
            viewer.ClosePdfFile();
            
            [VisualBasic]
            Dim viewer As PdfViewer = new PdfViewer();
            viewer.AutoResize = true       'print the file with adjusted size
            viewer.AutoRotate = true       'print the file with adjusted rotation
            viewer.PrintPageDialog=false;//do not produce the page number dialog when printing
            Dim ps As System.Drawing.Printing.PrinterSettings = new System.Drawing.Printing.PrinterSettings()
            Dim prtdoc As PrintDocument = new PrintDocument()
            ps.PrinterName = prtdoc.PrinterSettings.PrinterName
            Dim pgs As PageSettings=new PageSettings()
            pgs.PaperSize = new System.Drawing.Printing.PaperSize("A4", 827, 1169)
            pgs.Margins = new Margins(0, 0, 0, 0)
            viewer.PrintLargePdf(new MemoryStream(File.ReadAllBytes(@"d:\middleware.pdf")),pgs,ps)
            viewer.ClosePdfFile()
             </code>
      </example>
    </member>
    <member name="M:Aspose.Pdf.Facades.PdfViewer.DecodeAllPages">
      <summary>
            Get pages of current pdf file.
            </summary>
      <returns>return the array of Pdf page images.</returns>
    </member>
    <member name="M:Aspose.Pdf.Facades.PdfViewer.DecodePage(System.Int32)">
      <summary>
            Decodes a page of one Pdf file.
            </summary>
      <param name="pageNumber">The page number of one Pdf file which must be between 1 and PageCount.</param>
      <returns>return the Pdf page image.</returns>
    </member>
    <member name="M:Aspose.Pdf.Facades.PdfViewer.PrintDocumentWithSetup">
      <summary>
             Prints the Pdf document with a setup dialog. Choose a printer using the dialog.
             </summary>
      <example>
        <code>
             [C#]
            PdfViewer viewer = new PdfViewer();
            viewer.OpenPdfFile(@"d:\test.pdf");
            viewer.AutoResize = true;         //print the file with adjusted size
            viewer.AutoRotate = true;         //print the file with adjusted rotation
            viewer.PrintPageDialog=false;//do not produce the page number dialog when printing
            viewer.PrintDocumentWithSetup();
            viewer.ClosePdfFile();
            
            [VisualBasic]
            Dim viewer As PdfViewer = new PdfViewer()
            viewer.OpenPdfFile(@"d:\test.pdf")   
            viewer.AutoResize = true          'print the file with adjusted size
            viewer.AutoRotate = true          'print the file with adjusted rotation
            viewer.PrintPageDialog=false;//do not produce the page number dialog when printing
            viewer.PrintDocumentWithSetup()
            viewer.ClosePdfFile()
             </code>
      </example>
    </member>
    <member name="M:Aspose.Pdf.Facades.PdfViewer.PrintDocumentWithSettings(System.Drawing.Printing.PageSettings,System.Drawing.Printing.PrinterSettings)">
      <summary>
             Prints the Pdf document with settings. If the document size is not complatible to page size, pdf.kit will extend it to fit page size.
             </summary>
      <param name="pageSettings">The page setting of the printing document.</param>
      <param name="printerSettings">The printer setting of the printing document.</param>
      <example>
        <code>
             [C#]
            PdfViewer viewer = new PdfViewer();
            viewer.OpenPdfFile(@"d:\test.pdf");
            viewer.AutoResize = true;         //print the file with adjusted size
            viewer.AutoRotate = true;         //print the file with adjusted rotation
            viewer.PrintPageDialog=false;//do not produce the page number dialog when printing
            System.Drawing.Printing.PrinterSettings ps = new System.Drawing.Printing.PrinterSettings();
            PrintDocument prtdoc = new PrintDocument();
            ps.PrinterName = prtdoc.PrinterSettings.PrinterName;
            PageSettings pgs = new PageSettings();
            pgs.PaperSize = new System.Drawing.Printing.PaperSize("A4", 827, 1169);
            pgs.Margins = new Margins(0, 0, 0, 0);
            viewer.PrintDocumentWithSettings(pgs, ps);
            viewer.ClosePdfFile();
            
            [VisualBasic]
            Dim viewer As PdfViewer = new PdfViewer()
            viewer.OpenPdfFile(@"d:\test.pdf")
            viewer.AutoResize = true;           'print the file with adjusted size
            viewer.AutoRotate = true;           'print the file with adjusted rotation
            viewer.PrintPageDialog=false;//do not produce the page number dialog when printing
            Dim ps As System.Drawing.Printing.PrinterSettings = new System.Drawing.Printing.PrinterSettings()
            Dim prtdoc As PrintDocument = new PrintDocument()
            ps.PrinterName = prtdoc.PrinterSettings.PrinterName
            Dim pgs As PageSettings=new PageSettings()
            pgs.PaperSize = new System.Drawing.Printing.PaperSize("A4", 827, 1169)
            pgs.Margins = new Margins(0, 0, 0, 0)
            viewer.PrintDocumentWithSettings(pgs, ps)
            viewer.ClosePdfFile()
             </code>
        <remarks>
             printerSettings object is used to print the document.
             pageSettings.PrinterSettings object is ignored.
             </remarks>
      </example>
    </member>
    <member name="M:Aspose.Pdf.Facades.PdfViewer.PrintDocumentWithSettings(System.Drawing.Printing.PrinterSettings)">
      <summary>
             Prints the Pdf document with printer settings. The output page size will fit the the document first page size.
             </summary>
      <param name="printerSettings">The printer setting of the printing document.</param>
      <example>
        <code>
             [C#]
            PdfViewer viewer = new PdfViewer();
            viewer.OpenPdfFile(@"d:\test.pdf");
            viewer.AutoResize = true;         //print the file with adjusted size
            viewer.AutoRotate = true;         //print the file with adjusted rotation
            viewer.PrintPageDialog=false;//do not produce the page number dialog when printing
            System.Drawing.Printing.PrinterSettings ps = new System.Drawing.Printing.PrinterSettings();
            PrintDocument prtdoc = new PrintDocument();
            ps.PrinterName = prtdoc.PrinterSettings.PrinterName;
            viewer.PrintDocumentWithSettings(ps);
            viewer.ClosePdfFile();
            
            [VisualBasic]
            Dim viewer As PdfViewer = new PdfViewer()
            viewer.OpenPdfFile(@"d:\test.pdf")
            viewer.AutoResize = true;        'print the file with adjusted size
            viewer.AutoRotate = true;        'print the file with adjusted rotation
            viewer.PrintPageDialog=false;//do not produce the page number dialog when printing
            Dim ps As System.Drawing.Printing.PrinterSettings = new System.Drawing.Printing.PrinterSettings()
            Dim prtdoc As PrintDocument = new PrintDocument()
            ps.PrinterName = prtdoc.PrinterSettings.PrinterName
            viewer.PrintDocumentWithSettings(ps);
            viewer.ClosePdfFile()
             </code>
      </example>
    </member>
    <member name="M:Aspose.Pdf.Facades.PdfViewer.PrintDocument">
      <summary>
             Prints the Pdf document using default printer.
             </summary>
      <example>
        <code>
             [C#]
            PdfViewer viewer = new PdfViewer();
            viewer.OpenPdfFile(@"d:\test.pdf");
            viewer.AutoResize = true;         //print the file with adjusted size
            viewer.AutoRotate = true;         //print the file with adjusted rotation
            viewer.PrintPageDialog=false;//do not produce the page number dialog when printing
            viewer.PrintDocument(ps);
            viewer.ClosePdfFile();
            
            [VisualBasic]
            Dim viewer As PdfViewer = new PdfViewer()
            viewer.OpenPdfFile(@"d:\test.pdf")
            viewer.AutoResize = true;         'print the file with adjusted size
            viewer.AutoRotate = true;         'print the file with adjusted rotation
            viewer.PrintPageDialog=false;//do not produce the page number dialog when printing
            viewer.PrintDocument(ps);
            viewer.ClosePdfFile()
             </code>
      </example>
    </member>
    <member name="M:Aspose.Pdf.Facades.PdfViewer.GetDefaultPageSettings">
      <summary>
            Gets the default page settings.
            </summary>
    </member>
    <member name="M:Aspose.Pdf.Facades.PdfViewer.GetDefaultPrinterSettings">
      <summary>
            Gets the default printer settings.
            </summary>
    </member>
    <member name="M:Aspose.Pdf.Facades.PdfViewer.OpenPdfFile(System.String)">
      <summary>
             Opens a Pdf file, but does not actually decode the pages of the Pdf file.
             </summary>
      <param name="filePath">The path of Pdf file.</param>
      <example>
        <code>
             [C#]
            PdfViewer viewer = new PdfViewer();
            viewer.OpenPdfFile(@"d:\test.pdf");
            viewer.ClosePdfFile();
            
            [VisualBasic]
            Dim viewer As PdfViewer = new PdfViewer()
            viewer.OpenPdfFile(@"d:\test.pdf")
            viewer.ClosePdfFile()
             </code>
      </example>
    </member>
    <member name="M:Aspose.Pdf.Facades.PdfViewer.OpenPdfFile(System.IO.Stream)">
      <summary>
             Opens a Pdf file stream. But does not actually decode the pages of the Pdf file. 
             </summary>
      <param name="inputStream">The pdf stream to be opened.</param>
      <example>
        <code>
             [C#]
            PdfViewer viewer = new PdfViewer();
            viewer.OpenPdfFile(new MemoryStream(File.ReadAllBytes(@"d:\test.pdf")));
            viewer.ClosePdfFile();
            
            [VisualBasic]
            Dim viewer As PdfViewer = new PdfViewer()
            viewer.OpenPdfFile(new MemoryStream(File.ReadAllBytes(@"d:\test.pdf")))
            viewer.ClosePdfFile()
             </code>
      </example>
    </member>
    <member name="M:Aspose.Pdf.Facades.PdfViewer.ClosePdfFile">
      <summary>
            Closes the current Pdf file.
            </summary>
    </member>
    <member name="M:Aspose.Pdf.Facades.PdfViewer.BindPdf(System.String)">
      <summary>
            Initializes the facade.
            </summary>
      <param name="srcFile">The PDF file.</param>
    </member>
    <member name="M:Aspose.Pdf.Facades.PdfViewer.BindPdf(System.IO.Stream)">
      <summary>
            Initializes the facade.
            </summary>
      <param name="srcStream">The stream of PDF file.</param>
    </member>
    <member name="M:Aspose.Pdf.Facades.PdfViewer.BindPdf(Aspose.Pdf.Document)">
      <summary>
            Initializes the facade.
            </summary>
      <param name="srcDoc">The Aspose.Pdf.Document object.</param>
    </member>
    <member name="M:Aspose.Pdf.Facades.PdfViewer.Save(System.String)">
      <summary>
            Saves the result PDF document to file.
            </summary>
      <param name="destFile">The path of output PDF document.</param>
    </member>
    <member name="M:Aspose.Pdf.Facades.PdfViewer.Save(System.IO.Stream)">
      <summary>
            Saves the result PDF document to stream.
            </summary>
      <param name="destStream">The stream of output PDF document.</param>
    </member>
    <member name="M:Aspose.Pdf.Facades.PdfViewer.Close">
      <summary>
            Closes the facade.
            </summary>
    </member>
    <member name="M:Aspose.Pdf.Facades.PdfViewer.Dispose">
      <summary>
            Disposes the facade resources.
            </summary>
    </member>
    <member name="P:Aspose.Pdf.Facades.PdfViewer.PrintAsImage">
      <summary>
            Sets or gets a mode for PdfViewer to print as image.
            </summary>
      <remarks>
            If true prints always as image (generates image that is printed)
            If false prints directly to device if all features are supported. In case document contains non-supported features the system may automatically decide to print as image.
            
            Default falue is false.
            </remarks>
    </member>
    <member name="P:Aspose.Pdf.Facades.PdfViewer.PageCount">
      <summary>
            Gets page count of the current Pdf file.
            </summary>
      <returns>return page count.</returns>
    </member>
    <member name="P:Aspose.Pdf.Facades.PdfViewer.Password">
      <summary>
            Gets or sets input document password.
            </summary>
    </member>
    <member name="P:Aspose.Pdf.Facades.PdfViewer.PrintPageDialog">
      <summary>
            Gets or sets a bool value that indicates whether produce the page number dialog when printing.
            </summary>
    </member>
    <member name="P:Aspose.Pdf.Facades.PdfViewer.PrinterJobName">
      <summary>
            Gets or sets name of document in printer queue when document is printed. Default value is file name.
            </summary>
    </member>
    <member name="P:Aspose.Pdf.Facades.PdfViewer.FormPresentationMode">
      <summary>
            Gets or sets form presentation mode.
            </summary>
    </member>
    <member name="P:Aspose.Pdf.Facades.PdfViewer.RenderingOptions">
      <summary>
            Gets or sets rendering options.
            </summary>
    </member>
    <member name="P:Aspose.Pdf.Facades.PdfViewer.VerticalAlignment">
      <summary>
            Gets or sets a value that indicates vertical alignment
            </summary>
    </member>
    <member name="P:Aspose.Pdf.Facades.PdfViewer.HorizontalAlignment">
      <summary>
            Gets or sets a value that indicates horizontal alignment
            </summary>
    </member>
    <member name="P:Aspose.Pdf.Facades.PdfViewer.AutoResize">
      <summary>
            Gets or sets a bool value that indicates whether the file be printed with optimized size.
            <value>
            If false print page without page scaling.
            If true print page with scaling to fit to printable area.
            </value></summary>
    </member>
    <member name="P:Aspose.Pdf.Facades.PdfViewer.AutoRotate">
      <summary>
            Gets or sets a bool value that indicates whether the file be printed with auto rotation
            </summary>
    </member>
    <member name="P:Aspose.Pdf.Facades.PdfViewer.AutoRotateMode">
      <summary>
            Gets or sets a AutoRotateMode value that indicates direction of rotation
            </summary>
    </member>
    <member name="P:Aspose.Pdf.Facades.PdfViewer.Resolution">
      <summary>
            Gets or sets resolution during viewing and printing. The higher resolution, the slower speed. The default value is 150.
            </summary>
    </member>
    <member name="P:Aspose.Pdf.Facades.PdfViewer.ScaleFactor">
      <summary>
            Gets or sets a floating point value that indicates scale factor. The default value is 1.0.
            </summary>
    </member>
    <member name="T:Aspose.Pdf.Facades.PdfXmpMetadata">
      <summary>
            Class for manipulation with XMP metadata.
            </summary>
    </member>
    <member name="M:Aspose.Pdf.Facades.PdfXmpMetadata.#ctor">
      <summary>
            Constructor for PdfXmpMetadata.
            </summary>
      <example>
        <code lang="C#">
            PdfXmlMetadata xmp = new PdfXmpMetadata();
            xmp.BindPdf("input.pdf");
            </code>
      </example>
    </member>
    <member name="M:Aspose.Pdf.Facades.PdfXmpMetadata.#ctor(Aspose.Pdf.Document)">
      <summary>
            Initializes new <see cref="T:Aspose.Pdf.Facades.PdfXmpMetadata" /> object on base of the <paramref name="document" />.
            </summary>
      <param name="document">
            Pdf document.
            </param>
    </member>
    <member name="M:Aspose.Pdf.Facades.PdfXmpMetadata.RegisterNamespaceURI(System.String,System.String)">
      <summary>
            Registers the namespace URI.
            </summary>
      <param name="prefix">The prefix.</param>
      <param name="namespaceURI">The namespace URI.</param>
      <example>
        <code lang="C#">
            PdfXmpMetadata xmp = new PdfXmpMetadata("input.pdf");
            xmp.RegisterNamespaceURI("xmp", "http://ns.adobe.com/xap/1.0/");
            </code>
      </example>
    </member>
    <member name="M:Aspose.Pdf.Facades.PdfXmpMetadata.GetNamespaceURIByPrefix(System.String)">
      <summary>
            Gets namespace URI by prefix.
            </summary>
      <param name="prefix">The prefix.</param>
      <returns>Namespace URI.</returns>
      <example>
        <code lang="C#">
            PdfXmpMetadata xmp = new PdfXmpMetadata("input.pdf");
            Console.WriteLine(xmp.GetNamespaceURIByPrefix("xmp"));
            </code>
      </example>
    </member>
    <member name="M:Aspose.Pdf.Facades.PdfXmpMetadata.GetPrefixByNamespaceURI(System.String)">
      <summary>
            Gets the prefix by namespace URI.
            </summary>
      <param name="namespaceURI">Namespace URI.</param>
      <returns>Prefix.</returns>
      <example>
        <code lang="C#">
            PdfXmpMetadata xmp = new PdfXmpMetadata("input.pdf");
            Console.WriteLine(xmp.GetPrefixByNamespaceURI("http://ns.adobe.com/xap/1.0/"));
            </code>
      </example>
    </member>
    <member name="M:Aspose.Pdf.Facades.PdfXmpMetadata.Add(Aspose.Pdf.Facades.DefaultMetadataProperties,System.Object)">
      <summary>
            Adds value to XMP metadata.
            </summary>
      <param name="key">Key name.</param>
      <param name="value">Value which will be added.</param>
      <example>
        <code lang="C#">
            PdfXmpMetadata xmp = new PdfXmpMetadata();
            xmp.BindPdf("input.pdf");
            xmp.Add(DefaultMetadataProperties.Nickname, "name1");
            xmp.Save(TestSettings.GetOutputFile("XMP_AddedValue.pdf"));
            </code>
      </example>
    </member>
    <member name="M:Aspose.Pdf.Facades.PdfXmpMetadata.Clear">
      <summary>
            Removes all elements from the object.
            </summary>
      <example>
        <code lang="C#">
            PdfXmpMetadata xmp = new PdfXmpMetadata();
            xmp.BindPdf("input.pdf");
            xmp.Clear();
            </code>
      </example>
    </member>
    <member name="M:Aspose.Pdf.Facades.PdfXmpMetadata.Remove(Aspose.Pdf.Facades.DefaultMetadataProperties)">
      <summary>
            Removes element with specified key.
            </summary>
      <param name="key">Key of the element which will be deleted.</param>
      <example>
        <code lang="C#">
            PdfXmpMetadata xmp = new PdfXmpMetadata();
            xmp.BindPdf("input.pdf");
            xmp.Remove(DefaultMetadataProperties.Nickname);
            </code>
      </example>
    </member>
    <member name="M:Aspose.Pdf.Facades.PdfXmpMetadata.Add(System.Object,System.Object)">
      <summary>
            Adds new element to the dictionary object.
            </summary>
      <param name="key">Key of new element.</param>
      <param name="value">Value of the element.</param>
      <example>
        <code lang="C#">
            PdfXmpMetadata xmp = new PdfXmpMetadata();
            xmp.BindPdf("input.pdf");
            xmp.Add("xmp:Nickname", "Nickname1");
            </code>
      </example>
    </member>
    <member name="M:Aspose.Pdf.Facades.PdfXmpMetadata.Contains(System.Object)">
      <summary>
            Checks if dictionary contains the specified key.
            </summary>
      <param name="key">Key which will be checked.</param>
      <returns>
      </returns>
      <example>
        <code lang="C#">
            PdfXmpMetadata xmp = new PdfXmpMetadata();
            xmp.BindPdf("input.pdf");
            xmp.Add("xmp:Nickname", "Nickname1");
            if (!xmp.Contains("xmp:Nickname"))
              Console.WriteLine("Key does not exists");
            </code>
      </example>
    </member>
    <member name="M:Aspose.Pdf.Facades.PdfXmpMetadata.GetEnumerator">
      <summary>
            Gets enumerator object of the dictionary.
            </summary>
      <returns>
      </returns>
    </member>
    <member name="M:Aspose.Pdf.Facades.PdfXmpMetadata.Remove(System.Object)">
      <summary>
            Removes key from the dictionary.
            </summary>
      <param name="key">Key which will be removed.</param>
      <example>
        <code lang="C#">
            PdfXmpMetadata xmp = new PdfXmpMetadata();
            xmp.BindPdf("input.pdf");
            xmp.Remove("xmp:Nickname");
            </code>
      </example>
    </member>
    <member name="M:Aspose.Pdf.Facades.PdfXmpMetadata.CopyTo(System.Array,System.Int32)">
      <summary>
            Copy metadata into array.
            </summary>
      <param name="array">
      </param>
      <param name="index">
      </param>
    </member>
    <member name="M:Aspose.Pdf.Facades.PdfXmpMetadata.BindPdf(Aspose.Pdf.Generator.Pdf)">
      <summary> 
             Assigns input PDF document.
            </summary>
      <param name="pdf">Pdf document which came from Aspose.Pdf.Generator.</param>
    </member>
    <member name="M:Aspose.Pdf.Facades.PdfXmpMetadata.GetXmpMetadata">
      <summary>
            Get the XmpMetadata of the input pdf in a xml format.
            </summary>
      <returns>The bytes of the XmpMetadata.</returns>
      <example>
        <code lang="C#">
            PdfXmpMetadata pxm = new PdfXmpMetadata();
            pxm.BindPdf("PdfFile.pdf");
            byte[] data = pxm.GetXmpMetadata();
            </code>
      </example>
    </member>
    <member name="M:Aspose.Pdf.Facades.PdfXmpMetadata.GetXmpMetadata(System.String)">
      <summary>
            Get a part of the XmpMetadata of the input pdf according to a meta name.
            </summary>
      <param name="name">Metadata name.</param>
      <returns>Bytes of metadata.</returns>
      <example>
        <code lang="C#">
            PdfXmpMetadata pxm = new PdfXmpMetadata();
            pxm.BindPdf("PdfFile.pdf");
            byte[] data = pxm.GetXmpMetadata("dc:creator");
            </code>
      </example>
    </member>
    <member name="P:Aspose.Pdf.Facades.PdfXmpMetadata.Keys">
      <summary>
            Gets keys from the dictionary.
            </summary>
    </member>
    <member name="P:Aspose.Pdf.Facades.PdfXmpMetadata.Values">
      <summary>
            Gets the collection of values in dictionary.
            </summary>
    </member>
    <member name="P:Aspose.Pdf.Facades.PdfXmpMetadata.Item(System.Object)">
      <summary>
            Gets or sets value by key.
            </summary>
      <param name="key">
      </param>
      <returns>Object by key</returns>
      <example>
        <code lang="C#">
          <example>
            <code lang="C#">
            PdfXmpMetadata pxm = new PdfXmpMetadata();
            pxm.BindPdf("PdfFile.pdf");
            Console.WriteLine(pxm["xmp:Nickname"]);
            </code>
          </example>
        </code>
      </example>
    </member>
    <member name="P:Aspose.Pdf.Facades.PdfXmpMetadata.IsFixedSize">
      <summary>
            Returns true is collection has fixed size.
            </summary>
    </member>
    <member name="P:Aspose.Pdf.Facades.PdfXmpMetadata.IsReadOnly">
      <summary>
            Returns true if collection is read-only.
            </summary>
    </member>
    <member name="P:Aspose.Pdf.Facades.PdfXmpMetadata.Count">
      <summary>
            Gets count if items in the collection.
            </summary>
      <example>
        <code lang="C#">
            PdfXmpMetadata pxm = new PdfXmpMetadata();
            pxm.BindPdf("PdfFile.pdf");
            Console.WriteLine("Count = " + pxm.Count);
            </code>
      </example>
    </member>
    <member name="P:Aspose.Pdf.Facades.PdfXmpMetadata.IsSynchronized">
      <summary>
            Returns true if collection is synchronized.
            </summary>
    </member>
    <member name="P:Aspose.Pdf.Facades.PdfXmpMetadata.SyncRoot">
      <summary>
            Gets synchroniztion object of the collection.
            </summary>
    </member>
    <member name="P:Aspose.Pdf.Facades.PdfXmpMetadata.Item(Aspose.Pdf.Facades.DefaultMetadataProperties)">
      <summary>
            Gets value of XMP metadata by key.
            </summary>
      <param name="key">Key of the value.</param>
      <returns>Value from XMP metadata.</returns>
      <example>
        <code lang="C#">
            PdfXmpMetadata pxm = new PdfXmpMetadata();
            pxm.BindPdf("PdfFile.pdf");
            Console.WriteLine(pxm[DefaultMetadataProperties.CreatorTool]);
            </code>
      </example>
    </member>
    <member name="T:Aspose.Pdf.Facades.PositioningMode">
      <summary>
            Defines positioning mode.
            Possible values include Legacy (backward compatibility) and 
            Current (updated text position calculation method)
            </summary>
    </member>
    <member name="F:Aspose.Pdf.Facades.PositioningMode.Legacy">
      <summary>
            Legacy text positioning
            </summary>
    </member>
    <member name="F:Aspose.Pdf.Facades.PositioningMode.ModernLineSpacing">
      <summary>
            Updated line spacing, vertical position calculation is done by the old rules 
            (i.e. text is positioned relative to bottom-left corner of the specified rectangle)
            </summary>
    </member>
    <member name="F:Aspose.Pdf.Facades.PositioningMode.Current">
      <summary>
            Updated line spacing and vertical position calculation is done based on left-top corner rather than left-bottom.
            </summary>
    </member>
    <member name="T:Aspose.Pdf.Facades.PropertyFlag">
      <summary>
            Enumeration of possible field flags.
            </summary>
    </member>
    <member name="F:Aspose.Pdf.Facades.PropertyFlag.ReadOnly">
      <summary>
            Field is read-only.
            </summary>
    </member>
    <member name="F:Aspose.Pdf.Facades.PropertyFlag.Required">
      <summary>
            Field is required.
            </summary>
    </member>
    <member name="F:Aspose.Pdf.Facades.PropertyFlag.NoExport">
      <summary>
            Field is not exportable.
            </summary>
    </member>
    <member name="F:Aspose.Pdf.Facades.PropertyFlag.InvalidFlag">
      <summary>
            Invalid field flag.
            </summary>
    </member>
    <member name="T:Aspose.Pdf.Facades.Stamp">
      <summary>
            Class represeting stamp. 
            </summary>
    </member>
    <member name="M:Aspose.Pdf.Facades.Stamp.#ctor">
      <summary>
            Constructor for Stamp object.
            </summary>
    </member>
    <member name="M:Aspose.Pdf.Facades.Stamp.BindPdf(System.String,System.Int32)">
      <summary>
            Sets PDF file and number of page which will be used as stamp.
            </summary>
      <param name="pdfFile">Path to PDF file.</param>
      <param name="pageNumber">Number of page in PDF file</param>
      <example>
        <code lang="C#">
            PdfFileStamp fileStamp = new PdfFileStamp("input.pdf", "output.pdf");
            Stamp stamp = new Stamp();
            //First page will be used as stamp.
            stamp.BindPdf("stamp.pdf", 1);
            stamp.IsBackground = true;
            fileStamp.AddStamp(stamp);
            fileStamp.Close();
            </code>
      </example>
    </member>
    <member name="M:Aspose.Pdf.Facades.Stamp.BindPdf(System.IO.Stream,System.Int32)">
      <summary>
             Sets PDF file and number of page which will be used as stamp.
            </summary>
      <param name="pdfStream">Stream which contains PDF document.</param>
      <param name="pageNumber">Page index of the document whihc will be used as stamp.</param>
      <example>
        <code lang="C#">
            PdfFileStamp fileStamp = new PdfFileStamp("input.pdf", "output.pdf");
            Stamp stamp = new Stamp();
            //First page will be used as stamp.
            Stream stream = new FileStream("stamp.pdf", FileMode.Open, FileAccess.Read);
            stamp.BindPdf(stream, 1);
            fileStamp.AddStamp(stamp);
            fileStamp.Close();
            </code>
      </example>
    </member>
    <member name="M:Aspose.Pdf.Facades.Stamp.BindImage(System.String)">
      <summary>
            Sets image as a stamp.
            </summary>
      <param name="imageFile">Image file name and path.</param>
      <example>
        <code lang="C#">
            PdfFileStamp fileStamp = new PdfFileStamp("input.pdf", "output.pdf");
            Stamp stamp = new Stamp();
            stamp.BindImage("image.jpg");
            fileStamp.AddStamp(stamp);
            fileStamp.Close();
            </code>
      </example>
    </member>
    <member name="M:Aspose.Pdf.Facades.Stamp.BindLogo(Aspose.Pdf.Facades.FormattedText)">
      <summary>
            Sets text as stamp.
            </summary>
      <param name="formattedText">FormattedText object which specifies text and text properties.</param>
    </member>
    <member name="M:Aspose.Pdf.Facades.Stamp.SetOrigin(System.Single,System.Single)">
      <summary>
            Sets position on page where stamp will be placed.
            </summary>
      <param name="originX">X coordinate of the stamp.</param>
      <param name="originY">Y coordinate of the stamp.</param>
    </member>
    <member name="M:Aspose.Pdf.Facades.Stamp.SetImageSize(System.Single,System.Single)">
      <summary>
            Sets size of image stamp. Image will be scaled according to the specified values.
            </summary>
      <param name="width">Image width.</param>
      <param name="height">Image height.</param>
    </member>
    <member name="M:Aspose.Pdf.Facades.Stamp.BindImage(System.IO.Stream)">
      <summary>
            Sets image which will be used as stamp.
            </summary>
      <param name="image">Stream which contains image data.</param>
    </member>
    <member name="M:Aspose.Pdf.Facades.Stamp.BindPdf(Aspose.Pdf.Generator.Pdf,System.Int32)">
      <summary> 
            Sets PDF document and number of page which will be used as stamp.
            </summary>
      <param name="pdf">Pdf document which came from Aspose.Pdf.Generator.</param>
    </member>
    <member name="P:Aspose.Pdf.Facades.Stamp.StampId">
      <summary>
            Gets or sets identifier of stamp.
            </summary>
    </member>
    <member name="P:Aspose.Pdf.Facades.Stamp.Opacity">
      <summary>
            Gets or sets opacity of the stamp.
            </summary>
    </member>
    <member name="P:Aspose.Pdf.Facades.Stamp.PageNumber">
      <summary>
            Gets or sets page number. 
            </summary>
    </member>
    <member name="P:Aspose.Pdf.Facades.Stamp.Pages">
      <summary>
            Gets or sets array with numbers of pages which will be affected by stamp. 
            If Pages = null all pages of the document are affected.
            </summary>
      <example>
        <code lang="C#">
            PdfFileStamp fileStamp = new PdfFileStamp("input.pdf", "output.pdf");
            Stamp stamp = new Aspose.Pdf.Facades.Stamp();
            stamp.BindLogo(new FormattedText(text));
            //put stamp only on 1st, 4th and 6th page.
            stamp.Pages = new int[] { 1, 4, 6 };
            fileStamp.AddStamp(stamp);
            fileStamp.Close();
            </code>
      </example>
    </member>
    <member name="P:Aspose.Pdf.Facades.Stamp.Rotation">
      <summary>
            Gets or sets rotation of the stamp in degrees.
            </summary>
      <example>
        <code lang="C#">
            PdfFileStamp fileStamp = new PdfFileStamp("input.pdf", "output.pdf");
            Stamp stamp = new Stamp();
            stamp.BindLogo(new FormattedText("STAMP"));
            stamp.Rotation = 90;
            fileStamp.AddStamp(stamp);
            fileStamp.Close();
            </code>
      </example>
    </member>
    <member name="P:Aspose.Pdf.Facades.Stamp.IsBackground">
      <summary>
            Gets or sets background status. If true stamp will be placed as background of the spamped page.
            By default is set to false.
            </summary>
            /// <example><code lang="C#">
            PdfFileStamp fileStamp = new PdfFileStamp("input.pdf", "output.pdf");
            Stamp stamp = new Stamp();
            stamp.BindLogo(new FormattedText("STAMP"));
            stamp.IsBackground = true;
            fileStamp.AddStamp(stamp);
            fileStamp.Close();
            </code></example></member>
    <member name="P:Aspose.Pdf.Facades.Stamp.BlendingSpace">
      <summary>
            Gets or sets a BlendingColorSpace value that defines a color space 
            that is used to perform transparency and blending operations on the page.
            </summary>
    </member>
    <member name="T:Aspose.Pdf.Facades.StampInfo">
      <summary>
            Class representing stamp information.
            </summary>
    </member>
    <member name="P:Aspose.Pdf.Facades.StampInfo.StampId">
      <summary>
            Gets identifier of the stamp.
            </summary>
    </member>
    <member name="P:Aspose.Pdf.Facades.StampInfo.IndexOnPage">
      <summary>
            Gets stamp index on the page.
            </summary>
    </member>
    <member name="P:Aspose.Pdf.Facades.StampInfo.StampType">
      <summary>
            Gets stamp type (image / form).
            </summary>
    </member>
    <member name="P:Aspose.Pdf.Facades.StampInfo.Rectangle">
      <summary>
            Gets rectangle where stamp is placed.
            </summary>
    </member>
    <member name="P:Aspose.Pdf.Facades.StampInfo.Image">
      <summary>
            Gets image of stamp. May be null if stamp does not contain images (for example for text stamp).
            </summary>
    </member>
    <member name="P:Aspose.Pdf.Facades.StampInfo.Form">
      <summary>
            Gets XForm of the stamp.
            </summary>
    </member>
    <member name="P:Aspose.Pdf.Facades.StampInfo.Text">
      <summary>
            Gets text in the stamp.
            </summary>
    </member>
    <member name="P:Aspose.Pdf.Facades.StampInfo.Visible">
      <summary>
            Gets visibility of stamp. If false then stamp is hidden (with HideStampById). Hidden stamp may be restored by ShowStampById.
            </summary>
    </member>
    <member name="T:Aspose.Pdf.Facades.StampType">
      <summary>
            Describes stamp types.
            </summary>
    </member>
    <member name="F:Aspose.Pdf.Facades.StampType.Form">
      <summary>
            Stamp if Form.
            </summary>
    </member>
    <member name="F:Aspose.Pdf.Facades.StampType.Image">
      <summary>
            Stamp is image.
            </summary>
    </member>
    <member name="T:Aspose.Pdf.Facades.SubmitFormFlag">
      <summary>
            Enumeration of possible submit form flags.
            </summary>
    </member>
    <member name="F:Aspose.Pdf.Facades.SubmitFormFlag.Fdf">
      <summary>
            Data will be returned in FDF format.
            </summary>
    </member>
    <member name="F:Aspose.Pdf.Facades.SubmitFormFlag.Html">
      <summary>
            Data will be returned in HTML format.
            </summary>
    </member>
    <member name="F:Aspose.Pdf.Facades.SubmitFormFlag.Xfdf">
      <summary>
            Data will be returned in XFDF format.
            </summary>
    </member>
    <member name="F:Aspose.Pdf.Facades.SubmitFormFlag.FdfWithComments">
      <summary>
            Data will be returned in FDF format with comments.
            </summary>
    </member>
    <member name="F:Aspose.Pdf.Facades.SubmitFormFlag.XfdfWithComments">
      <summary>
            Data will be returned in XFDF format with comments.
            </summary>
    </member>
    <member name="F:Aspose.Pdf.Facades.SubmitFormFlag.Pdf">
      <summary>
            Whole PDF file will be submitted.
            </summary>
    </member>
    <member name="T:Aspose.Pdf.Facades.TextProperties">
      <summary>
            Represents text properties such as: text size, color, style etc.
            </summary>
    </member>
    <member name="M:Aspose.Pdf.Facades.TextProperties.#ctor(System.Double)">
      <summary>
            Creates <see cref="T:Aspose.Pdf.Facades.TextProperties" /> object for the specified text size
            </summary>
    </member>
    <member name="P:Aspose.Pdf.Facades.TextProperties.Color">
      <summary>
            Gets or sets text color.
            </summary>
    </member>
    <member name="P:Aspose.Pdf.Facades.TextProperties.IsColorSpecified">
      <summary>
            Gets or sets a value that indicates whether the <see cref="P:Aspose.Pdf.Facades.TextProperties.Color" /> property is specified.
            </summary>
    </member>
    <member name="P:Aspose.Pdf.Facades.TextProperties.TextSize">
      <summary>
            Gets or sets text size.
            </summary>
    </member>
    <member name="P:Aspose.Pdf.Facades.TextProperties.IsTextSizeSpecified">
      <summary>
            Gets or sets a value that indicates whether the <see cref="P:Aspose.Pdf.Facades.TextProperties.TextSize" /> property is specified.
            </summary>
    </member>
    <member name="T:Aspose.Pdf.Facades.VerticalAlignmentType">
      <summary>
            Class representing possible vertical alignment values.
            </summary>
    </member>
    <member name="M:Aspose.Pdf.Facades.VerticalAlignmentType.#ctor(System.String)">
      <summary>
            Initializes vertical alignment by its name.
            </summary>
      <param name="name">
      </param>
    </member>
    <member name="F:Aspose.Pdf.Facades.VerticalAlignmentType.Top">
      <summary>
            Top alignment.
            </summary>
    </member>
    <member name="F:Aspose.Pdf.Facades.VerticalAlignmentType.Center">
      <summary>
            Center alignment type.
            </summary>
    </member>
    <member name="F:Aspose.Pdf.Facades.VerticalAlignmentType.Bottom">
      <summary>
            Bottom alignment type.
            </summary>
    </member>
    <member name="T:Aspose.Pdf.Facades.ViewerPreference">
      <summary>
            Describes viewer prefereces (page mode, non full screen page mode, page layout).
            </summary>
    </member>
    <member name="F:Aspose.Pdf.Facades.ViewerPreference.PageModeUseOC">
      <summary>
            Optional content group panel visible.
            </summary>
    </member>
    <member name="F:Aspose.Pdf.Facades.ViewerPreference.DisplayDocTitle">
      <summary>
            A flag specifying whether the window’s title bar should display the document title
            </summary>
    </member>
    <member name="F:Aspose.Pdf.Facades.ViewerPreference.NonFullScreenPageModeUseOC">
      <summary>
            Optional content group panel visible.
            </summary>
    </member>
    <member name="F:Aspose.Pdf.Facades.ViewerPreference.PageLayoutSinglePage">
      <summary>
            Display one page at a time.
            </summary>
    </member>
    <member name="F:Aspose.Pdf.Facades.ViewerPreference.PageLayoutOneColumn">
      <summary>
            Display the pages in one column.
            </summary>
    </member>
    <member name="F:Aspose.Pdf.Facades.ViewerPreference.PageLayoutTwoColumnLeft">
      <summary>
            Display the pages in two columns, with odd-numbered pages on the right
            </summary>
    </member>
    <member name="F:Aspose.Pdf.Facades.ViewerPreference.PageLayoutTwoColumnRight">
      <summary>
            Display the pages in two columns, with odd-numbered pages on the right.
            </summary>
    </member>
    <member name="F:Aspose.Pdf.Facades.ViewerPreference.PageModeUseNone">
      <summary>
            Neither document outline nor thumbnail images visible
            </summary>
    </member>
    <member name="F:Aspose.Pdf.Facades.ViewerPreference.PageModeUseOutlines">
      <summary>
            Document outline visible.
            </summary>
    </member>
    <member name="F:Aspose.Pdf.Facades.ViewerPreference.PageModeUseThumbs">
      <summary>
            Thumbnail images visible.
            </summary>
    </member>
    <member name="F:Aspose.Pdf.Facades.ViewerPreference.PageModeFullScreen">
      <summary>
            Full-screen mode, with no menu bar, window controls, or any other window visible.
            </summary>
    </member>
    <member name="F:Aspose.Pdf.Facades.ViewerPreference.HideToolbar">
      <summary>
            A flag specifying whether to hide the conforming reader’s tool bars when the document is active.
            </summary>
    </member>
    <member name="F:Aspose.Pdf.Facades.ViewerPreference.HideMenubar">
      <summary>
            A flag specifying whether to hide the conforming reader’s menu bar when the document is active.
            </summary>
    </member>
    <member name="F:Aspose.Pdf.Facades.ViewerPreference.HideWindowUI">
      <summary>
            A flag specifying whether to hide user interface elements in the document’s window (such as scroll bars and navigation controls), leaving only the document’s contents displayed.
            </summary>
    </member>
    <member name="F:Aspose.Pdf.Facades.ViewerPreference.FitWindow">
      <summary>
            A flag specifying whether to resize the document’s window to fit the size of the first displayed page.
            </summary>
    </member>
    <member name="F:Aspose.Pdf.Facades.ViewerPreference.CenterWindow">
      <summary>
            A flag specifying whether to position the document’s window in the center of the screen.
            </summary>
    </member>
    <member name="F:Aspose.Pdf.Facades.ViewerPreference.NonFullScreenPageModeUseNone">
      <summary>
            Neither document outline nor thumbnail images visible.
            </summary>
    </member>
    <member name="F:Aspose.Pdf.Facades.ViewerPreference.NonFullScreenPageModeUseOutlines">
      <summary>
            Document outline visible.
            </summary>
    </member>
    <member name="F:Aspose.Pdf.Facades.ViewerPreference.NonFullScreenPageModeUseThumbs">
      <summary>
            Thumbnail images visible
            </summary>
    </member>
    <member name="F:Aspose.Pdf.Facades.ViewerPreference.DirectionL2R">
      <summary>
            Text reading order left to right.
            </summary>
    </member>
    <member name="F:Aspose.Pdf.Facades.ViewerPreference.DirectionR2L">
      <summary>
            Text reading order right to left.
            </summary>
    </member>
    <member name="T:Aspose.Pdf.Facades.WordWrapMode">
      <summary>
            Defines word wrapping strategies
            </summary>
    </member>
    <member name="F:Aspose.Pdf.Facades.WordWrapMode.Default">
      <summary>
            Default algorithm (allows breaking words in the middle)
            </summary>
    </member>
    <member name="F:Aspose.Pdf.Facades.WordWrapMode.ByWords">
      <summary>
            Word wrapping only wraps complete words.
            If the complete word cannot be wrapped, attempts
            to wrap word in the middle
            </summary>
    </member>
    <member name="T:Aspose.Pdf.FileParams">
      <summary>
            Defines an embedded file parameter dictionary that shall contain additional file-specific information.
            </summary>
    </member>
    <member name="P:Aspose.Pdf.FileParams.Size">
      <summary>
            The size of the uncompressed embedded file, in bytes.
            </summary>
    </member>
    <member name="P:Aspose.Pdf.FileParams.CreationDate">
      <summary>
            The date and time when the embedded file was created.
            </summary>
    </member>
    <member name="P:Aspose.Pdf.FileParams.ModDate">
      <summary>
            The date and time when the embedded file was last modified.
            </summary>
    </member>
    <member name="P:Aspose.Pdf.FileParams.CheckSum">
      <summary>
            A 16-byte string that is the checksum of the bytes of the uncompressed embedded file. 
            The checksum is calculated by applying the standard MD5 message-digest algorithm 
            to the bytes of the embedded file stream.
            </summary>
    </member>
    <member name="T:Aspose.Pdf.FileSpecification">
      <summary>
            Class representing embedded file.
            </summary>
    </member>
    <member name="M:Aspose.Pdf.FileSpecification.#ctor(Aspose.Pdf.Engine.Data.IPdfDictionary)">
      <summary>
            Constructor for FileSpecification class.
            </summary>
      <param name="specification">PDF dictionary which describes file specification.</param>
    </member>
    <member name="M:Aspose.Pdf.FileSpecification.#ctor(System.String)">
      <summary>
            Constructor for FileSpecification
            </summary>
      <param name="file">File path</param>
    </member>
    <member name="M:Aspose.Pdf.FileSpecification.#ctor(System.IO.Stream,System.String)">
      <summary>
            Constructor for file specification.
            </summary>
      <param name="stream">Stream containing data file.</param>
      <param name="name">File specification.</param>
    </member>
    <member name="M:Aspose.Pdf.FileSpecification.#ctor(System.String,System.String)">
      <summary>
            Constructor for FileSpecification.
            </summary>
      <param name="file">File path.</param>
      <param name="description">File description. </param>
    </member>
    <member name="M:Aspose.Pdf.FileSpecification.#ctor(System.IO.Stream,System.String,System.String)">
      <summary>
            Constructor for FileSpecification.
            </summary>
      <param name="stream">Stream to be used in the document.</param>
      <param name="name">A file specification string.</param>
      <param name="description">File description.</param>
    </member>
    <member name="M:Aspose.Pdf.FileSpecification.#ctor(System.String,Aspose.Pdf.InteractiveFeatures.Annotations.Annotation)">
      <summary>
            Constructor for FileSpecification.
            </summary>
      <param name="fileName">File path.</param>
      <param name="annot">The annotation.</param>
    </member>
    <member name="M:Aspose.Pdf.FileSpecification.#ctor">
      <summary>
            Create new empty file specification. 
            </summary>
    </member>
    <member name="P:Aspose.Pdf.FileSpecification.IncludeContents">
      <summary>
            If true, contents of the file will be included in the file specification. 
            </summary>
    </member>
    <member name="P:Aspose.Pdf.FileSpecification.Description">
      <summary>
            Gets or sets text associated with the file specification. 
            </summary>
    </member>
    <member name="P:Aspose.Pdf.FileSpecification.StreamContents">
      <summary>
            Gets contents of file as stream. 
            Contents is not loaded into memory which allows to decrease memory usage.
            But this stream does not support positioning and Length property. If you need this features please use Contents property instead.
            </summary>
    </member>
    <member name="P:Aspose.Pdf.FileSpecification.Contents">
      <summary>
            Gets or sets contents file. 
            This property returns data loaded in memory which may cause Out of memory exception for large data.
            To decrease memory usage please use StreamContents.
            </summary>
    </member>
    <member name="P:Aspose.Pdf.FileSpecification.Params">
      <summary>
            Gets file paramteres.
            </summary>
    </member>
    <member name="P:Aspose.Pdf.FileSpecification.MIMEType">
      <summary>
            Gets subtype of the embedded file
            </summary>
    </member>
    <member name="P:Aspose.Pdf.FileSpecification.Name">
      <summary>
            Gets or sets file specification string. 
            </summary>
    </member>
    <member name="P:Aspose.Pdf.FileSpecification.FileSystem">
      <summary>
            Gets or sets name of the file system.
            </summary>
    </member>
    <member name="F:Aspose.Pdf.HorizontalAlignment.None">
      <summary>
            No alignment.
            </summary>
    </member>
    <member name="F:Aspose.Pdf.HorizontalAlignment.Left">
      <summary>
            Align to left.
            </summary>
    </member>
    <member name="F:Aspose.Pdf.HorizontalAlignment.Center">
      <summary>
            Center alignment.
            </summary>
    </member>
    <member name="F:Aspose.Pdf.HorizontalAlignment.Right">
      <summary>
            Align to right.
            </summary>
    </member>
    <member name="T:Aspose.Pdf.Id">
      <summary>
            Represents file identifier structure.
            </summary>
      <example>
        <code lang="C#">
            Document doc = new Document("example.pdf");
            string original = doc.Id.Original;
            string modified = doc.Id.Modified;
            </code>
      </example>
    </member>
    <member name="P:Aspose.Pdf.Id.Original">
      <summary>
            Permanent identifier based on the contents of the document at the time it was originally created.
            </summary>
    </member>
    <member name="P:Aspose.Pdf.Id.Modified">
      <summary>
            Changing identifier based on the document's contents at the time it was last updated.
            </summary>
    </member>
    <member name="T:Aspose.Pdf.ImageStamp">
      <summary>
            Reresents graphic stamp.
            </summary>
    </member>
    <member name="T:Aspose.Pdf.Stamp">
      <summary>
            An abstract class for various kinds of stamps which come as descendants.
            </summary>
    </member>
    <member name="M:Aspose.Pdf.Stamp.Put(Aspose.Pdf.Page)">
      <summary>
            Adds stamp on the page.
            </summary>
      <param name="page">
            The page to add stamp.
            </param>
    </member>
    <member name="M:Aspose.Pdf.Stamp.setStampId(System.Int32)">
      <summary>
            Sets stamp Id.
            </summary>
      <param name="value">New value of Stamp ID.</param>
    </member>
    <member name="M:Aspose.Pdf.Stamp.getStampId">
      <summary>
            Returns stamp ID.
            </summary>
      <returns>Stamp ID.</returns>
    </member>
    <member name="P:Aspose.Pdf.Stamp.Background">
      <summary>
            Sets or gets a bool value that indicates the content is stamped as background.
            If the value is true, the stamp content is layed at the bottom.
            By defalt, the value is false, the stamp content is layed at the top.
            </summary>
    </member>
    <member name="P:Aspose.Pdf.Stamp.Opacity">
      <summary>
            Gets or sets a value to indicate the stamp opacity. The value is from 0.0 to 1.0.
            By default the value is 1.0.
            </summary>
    </member>
    <member name="P:Aspose.Pdf.Stamp.Rotate">
      <summary>
            Sets or gets the rotation of stamp content according <see cref="T:Aspose.Pdf.Rotation" /> values.
            Note. This property is for set angles which are multiples of 90 degrees (0, 90, 180, 270 degrees).
            To set arbitrary angle use RotateAngle property. 
            If angle set by ArbitraryAngle is not multiple of 90 then Rotate property returns Rotation.None.
            </summary>
    </member>
    <member name="P:Aspose.Pdf.Stamp.XIndent">
      <summary>
            Horizontal stamp coordinate, starting from the left.
            </summary>
    </member>
    <member name="P:Aspose.Pdf.Stamp.YIndent">
      <summary>
            Vertical stamp coordinate, starting from the bottom.
            </summary>
    </member>
    <member name="P:Aspose.Pdf.Stamp.HorizontalAlignment">
      <summary>
            Gets or sets Horizontal alignment of stamp on the page. 
            </summary>
    </member>
    <member name="P:Aspose.Pdf.Stamp.VerticalAlignment">
      <summary>
            Gets or sets vertical alignment of stamp on page.
            </summary>
    </member>
    <member name="P:Aspose.Pdf.Stamp.LeftMargin">
      <summary>
            Gets or sets left margin of stamp.
            </summary>
    </member>
    <member name="P:Aspose.Pdf.Stamp.RightMargin">
      <summary>
            Gets or sets right margin of stamp.
            </summary>
    </member>
    <member name="P:Aspose.Pdf.Stamp.BottomMargin">
      <summary>
            Gets or sets bottom margin of stamp.
            </summary>
    </member>
    <member name="P:Aspose.Pdf.Stamp.TopMargin">
      <summary>
            Gets or sets top margin of stamp.
            </summary>
    </member>
    <member name="P:Aspose.Pdf.Stamp.ZoomX">
      <summary>
            Horizontal zooming factor of the stamp. Allows to scale stamp horizontally.
            </summary>
    </member>
    <member name="P:Aspose.Pdf.Stamp.Width">
      <summary>
            Desired width of the stamp on the page. 
            </summary>
    </member>
    <member name="P:Aspose.Pdf.Stamp.Height">
      <summary>
            Desired height of the stamp on the page. 
            </summary>
    </member>
    <member name="P:Aspose.Pdf.Stamp.ZoomY">
      <summary>
            Vertical zooming factor of the stamp. Allows to scale stamp vertically.
            </summary>
    </member>
    <member name="P:Aspose.Pdf.Stamp.Zoom">
      <summary>
            Zooming factor of the stamp. Allows to scale stamp.
            Please note that pair of properties ZoomX and ZoomY allows to set zoom factor for every axe separately. 
            Setting of this property changes both ZoomX and ZoomY properties. 
            If ZoomX and ZoomY are different then Zoom property returns ZoomX value.
            </summary>
    </member>
    <member name="P:Aspose.Pdf.Stamp.RotateAngle">
      <summary>
            Gets or sets rotate angle of stamp in degrees.
            This property allows to set arbitrary rotate angle. 
            </summary>
    </member>
    <member name="M:Aspose.Pdf.ImageStamp.#ctor(System.IO.Stream)">
      <summary>
            Initializes a new instance of the <see cref="T:Aspose.Pdf.ImageStamp" /> class.
            </summary>
      <param name="image">
            Stream which contains image data.
            </param>
    </member>
    <member name="M:Aspose.Pdf.ImageStamp.Put(Aspose.Pdf.Page)">
      <summary>
            Adds graphic stamp on the page.
            </summary>
      <param name="page">
            Page for stamping.
            </param>
    </member>
    <member name="M:Aspose.Pdf.ImageStamp.#ctor(System.String)">
      <summary>
            Creates image stamp by image in the specified file.
            </summary>
      <param name="fileName">
      </param>
    </member>
    <member name="P:Aspose.Pdf.ImageStamp.Image">
      <summary>
            Gets image stream used for stamping.
            </summary>
    </member>
    <member name="P:Aspose.Pdf.ImageStamp.Width">
      <summary>
            Gets or sets image width. Setting this property allos to scal image horizontally.
            </summary>
    </member>
    <member name="P:Aspose.Pdf.ImageStamp.Height">
      <summary>
            Gets or sets image height. Setting this image allows to scale image vertically.
            </summary>
    </member>
    <member name="T:Aspose.Pdf.InteractiveFeatures.ActionCollection">
      <summary>
            Collection of actions
            </summary>
    </member>
    <member name="M:Aspose.Pdf.InteractiveFeatures.ActionCollection.Add(Aspose.Pdf.InteractiveFeatures.PdfAction)">
      <summary>
            Adds new action into colleciton.
            </summary>
      <param name="action">
      </param>
    </member>
    <member name="M:Aspose.Pdf.InteractiveFeatures.ActionCollection.Delete(System.Int32)">
      <summary>
            Removes action from collection by index.
            </summary>
      <param name="index">Index of action to remove.</param>
    </member>
    <member name="M:Aspose.Pdf.InteractiveFeatures.ActionCollection.Delete">
      <summary>
            Delete all actions.
            </summary>
    </member>
    <member name="M:Aspose.Pdf.InteractiveFeatures.ActionCollection.CopyTo(System.Array,System.Int32)">
      <summary>
            Copies actions array into collection.
            </summary>
      <param name="array">Array of actions which must be copied into collection.</param>
      <param name="index">Index starting from which array will be copied.</param>
    </member>
    <member name="M:Aspose.Pdf.InteractiveFeatures.ActionCollection.GetEnumerator">
      <summary>
            Returns enumerator for collection.
            </summary>
      <returns>Collection enumerator.</returns>
    </member>
    <member name="P:Aspose.Pdf.InteractiveFeatures.ActionCollection.Count">
      <summary>
            Count of actions on the collection.
            </summary>
    </member>
    <member name="P:Aspose.Pdf.InteractiveFeatures.ActionCollection.IsSynchronized">
      <summary>
            Returns true if object is synchronized.
            </summary>
    </member>
    <member name="P:Aspose.Pdf.InteractiveFeatures.ActionCollection.SyncRoot">
      <summary>
            Gets synchronization object.
            </summary>
    </member>
    <member name="P:Aspose.Pdf.InteractiveFeatures.ActionCollection.Item(System.Int32)">
      <summary>
            Gets action by its index.
            </summary>
      <param name="index">Index of action.</param>
      <returns>Retreived action.</returns>
    </member>
    <member name="T:Aspose.Pdf.InteractiveFeatures.Annotations.AnnotationActionCollection">
      <summary>
            Represents the collection of annotation actions.
            </summary>
    </member>
    <member name="P:Aspose.Pdf.InteractiveFeatures.Annotations.AnnotationActionCollection.OnEnter">
      <summary>
            Gets or sets an action to be performed when the cursor enters the annotation’s active area.
            </summary>
    </member>
    <member name="P:Aspose.Pdf.InteractiveFeatures.Annotations.AnnotationActionCollection.OnExit">
      <summary>
            Gets or sets an action to be performed when the cursor exits the annotation’s active area.
            </summary>
    </member>
    <member name="P:Aspose.Pdf.InteractiveFeatures.Annotations.AnnotationActionCollection.OnPressMouseBtn">
      <summary>
            Gets or sets an action to be performed when the mouse button is pressed inside the annotation’s active area.
            </summary>
    </member>
    <member name="P:Aspose.Pdf.InteractiveFeatures.Annotations.AnnotationActionCollection.OnReleaseMouseBtn">
      <summary>
            Gets or sets an action to be performed when the mouse button is released inside the annotation’s active area.
            </summary>
    </member>
    <member name="P:Aspose.Pdf.InteractiveFeatures.Annotations.AnnotationActionCollection.OnReceiveFocus">
      <summary>
            Gets or sets an action to be performed when the annotation receives the input focus.
            </summary>
    </member>
    <member name="P:Aspose.Pdf.InteractiveFeatures.Annotations.AnnotationActionCollection.OnOpenPage">
      <summary>
            Gets or sets an action to be performed when the page containing the annotation is opened.
            </summary>
    </member>
    <member name="P:Aspose.Pdf.InteractiveFeatures.Annotations.AnnotationActionCollection.OnClosePage">
      <summary>
            Gets or sets an action to be performed when the page containing the annotation is closed.
            </summary>
    </member>
    <member name="P:Aspose.Pdf.InteractiveFeatures.Annotations.AnnotationActionCollection.OnShowPage">
      <summary>
            Gets or sets an action to be performed when the page containing the annotation becomes visible in the viewer application’s user interface.
            </summary>
    </member>
    <member name="P:Aspose.Pdf.InteractiveFeatures.Annotations.AnnotationActionCollection.OnHidePage">
      <summary>
            Gets or sets an action to be performed when the page containing the annotation is no longer visible in the viewer application’s user interface.
            </summary>
    </member>
    <member name="P:Aspose.Pdf.InteractiveFeatures.Annotations.AnnotationActionCollection.OnLostFocus">
      <summary>
            Gets or sets an action to be performed when the annotation loses the input focus.
            </summary>
    </member>
    <member name="T:Aspose.Pdf.InteractiveFeatures.Annotations.AnnotationCollection">
      <summary>
            Class representing annotation collection.
            </summary>
    </member>
    <member name="M:Aspose.Pdf.InteractiveFeatures.Annotations.AnnotationCollection.Add(Aspose.Pdf.InteractiveFeatures.Annotations.Annotation)">
      <summary>
            Adds annotation in the collection.
            </summary>
      <param name="annotation">Annotation which shall be added.</param>
    </member>
    <member name="M:Aspose.Pdf.InteractiveFeatures.Annotations.AnnotationCollection.Delete(System.Int32)">
      <summary>
            Deletes annotation from the collection by index.
            </summary>
      <param name="index">Index of annotation which shall be deleted.</param>
    </member>
    <member name="M:Aspose.Pdf.InteractiveFeatures.Annotations.AnnotationCollection.Delete">
      <summary>
            Deletes all annotations from the collection.
            </summary>
    </member>
    <member name="M:Aspose.Pdf.InteractiveFeatures.Annotations.AnnotationCollection.CopyTo(System.Array,System.Int32)">
      <summary>
            Copies array of annotations into collection.
            </summary>
      <param name="array">Array to copy into collection.</param>
      <param name="index">Starting index where colleciton wil lbe copied.</param>
    </member>
    <member name="M:Aspose.Pdf.InteractiveFeatures.Annotations.AnnotationCollection.GetEnumerator">
      <summary>
            Returns collection enumerator.
            </summary>
      <returns>Enumerator object</returns>
    </member>
    <member name="M:Aspose.Pdf.InteractiveFeatures.Annotations.AnnotationCollection.Accept(Aspose.Pdf.InteractiveFeatures.Annotations.AnnotationSelector)">
      <summary>
            Accepts visitor to process annotation.
            </summary>
      <param name="visitor">
      </param>
    </member>
    <member name="M:Aspose.Pdf.InteractiveFeatures.Annotations.AnnotationCollection.Delete(Aspose.Pdf.InteractiveFeatures.Annotations.Annotation)">
      <summary>
            Deletes specified annotation from the collection. 
            </summary>
      <param name="annotation">Annotation which shall be deleted.</param>
    </member>
    <member name="P:Aspose.Pdf.InteractiveFeatures.Annotations.AnnotationCollection.IsSynchronized">
      <summary>
            Gets a value indicating whether access to the Aspose.Pdf.InteractiveFeatures.Annotations.AnnotationCollection is synchronized (thread safe).
            </summary>
    </member>
    <member name="P:Aspose.Pdf.InteractiveFeatures.Annotations.AnnotationCollection.SyncRoot">
      <summary>
            Gets an object that can be used to synchronize access to Aspose.Pdf.InteractiveFeatures.Annotations.AnnotationCollection.
            </summary>
    </member>
    <member name="P:Aspose.Pdf.InteractiveFeatures.Annotations.AnnotationCollection.Count">
      <summary>
            Gets count of annotations in collection.
            </summary>
    </member>
    <member name="P:Aspose.Pdf.InteractiveFeatures.Annotations.AnnotationCollection.Item(System.Int32)">
      <summary>
            The index of the element to get.
            </summary>
      <param name="index">The index value started from one.</param>
      <returns>Annotation object</returns>
    </member>
    <member name="T:Aspose.Pdf.InteractiveFeatures.Annotations.AnnotationFlags">
      <summary>
            A set of flags specifying various characteristics of the annotation.
            </summary>
    </member>
    <member name="F:Aspose.Pdf.InteractiveFeatures.Annotations.AnnotationFlags.Default">
      <summary>
            Default value.
            </summary>
    </member>
    <member name="F:Aspose.Pdf.InteractiveFeatures.Annotations.AnnotationFlags.Invisible">
      <summary>
            If set, do not display the annotation if it does not belong to one of the standard annotation types
            and no annotation handler is available. If clear, display such an unknown annotation
            using an appearance stream specified by its appearance dictionary, if any.
            </summary>
    </member>
    <member name="F:Aspose.Pdf.InteractiveFeatures.Annotations.AnnotationFlags.Hidden">
      <summary>
            If set, do not display or print the annotation or allow it to interact with the user,
            regardless of its annotation type or whether an annotation handler is available.
            In cases where screen space is limited, the ability to hide and show annotations selectively
            can be used in combination with appearance streams to display auxiliary pop-up information
            similar in function to online help systems.
            </summary>
    </member>
    <member name="F:Aspose.Pdf.InteractiveFeatures.Annotations.AnnotationFlags.Print">
      <summary>
            If set, print the annotation when the page is printed. If clear, never print the annotation,
            regardless of whether it is displayed on the screen. This can be useful, for example, for annotations
            representing interactive pushbuttons, which would serve no meaningful purpose on the printed page.
            </summary>
    </member>
    <member name="F:Aspose.Pdf.InteractiveFeatures.Annotations.AnnotationFlags.NoZoom">
      <summary>
            If set, do not scale the annotation’s appearance to match the magnification of the page.
            The location of the annotation on the page (defined by the upper-left corner of its annotation rectangle)
            remains fixed, regardless of the page magnification.
            </summary>
    </member>
    <member name="F:Aspose.Pdf.InteractiveFeatures.Annotations.AnnotationFlags.NoRotate">
      <summary>
            If set, do not rotate the annotation’s appearance to match the rotation of the page.
            The upper-left corner of the annotation rectangle remains in a fixed location on the page,
            regardless of the page rotation.
            </summary>
    </member>
    <member name="F:Aspose.Pdf.InteractiveFeatures.Annotations.AnnotationFlags.NoView">
      <summary>
            If set, do not display the annotation on the screen or allow it to interact with the user.
            The annotation may be printed (depending on the setting of the Print flag)
            but should be considered hidden for purposes of on-screen display and user interaction.
            </summary>
    </member>
    <member name="F:Aspose.Pdf.InteractiveFeatures.Annotations.AnnotationFlags.ReadOnly">
      <summary>
            If set, do not allow the annotation to interact with the user. The annotation may be displayed
            or printed (depending on the settings of the NoView and Print flags) but should not respond to mouse
            clicks or change its appearance in response to mouse motions. This flag is ignored for widget annotations;
            its function is subsumed by the ReadOnly flag of the associated form field.
            </summary>
    </member>
    <member name="F:Aspose.Pdf.InteractiveFeatures.Annotations.AnnotationFlags.Locked">
      <summary>
            If set, do not allow the annotation to be deleted or its properties (including position and size)
            to be modified by the user. However, this flag does not restrict changes to the annotation’s contents,
            such as the value of a form field.
            </summary>
    </member>
    <member name="F:Aspose.Pdf.InteractiveFeatures.Annotations.AnnotationFlags.ToggleNoView">
      <summary>
            If set, invert the interpretation of the NoView flag for certain events.
            A typical use is to have an annotation that appears only when a mouse cursor is held over it.
            </summary>
    </member>
    <member name="F:Aspose.Pdf.InteractiveFeatures.Annotations.AnnotationFlags.LockedContents">
      <summary>
            If set, do not allow the contents of the annotation to be modified by the user.
            This flag does not restrict deletion of the annotation or changes to other annotation properties,
            such as position and size.
            </summary>
    </member>
    <member name="T:Aspose.Pdf.InteractiveFeatures.Annotations.AnnotationStateModel">
      <summary>
            The state model corresponding to state of annotation.
            </summary>
    </member>
    <member name="F:Aspose.Pdf.InteractiveFeatures.Annotations.AnnotationStateModel.Undefined">
      <summary>
            Not defined state model.
            </summary>
    </member>
    <member name="F:Aspose.Pdf.InteractiveFeatures.Annotations.AnnotationStateModel.Marked">
      <summary>
            The annotation has been marked (or unmarked) by the user.
            </summary>
    </member>
    <member name="F:Aspose.Pdf.InteractiveFeatures.Annotations.AnnotationStateModel.Review">
      <summary>
            The annotation has been reviewed (accepted, rejected, cancelled, completed, none) by the user.
            </summary>
    </member>
    <member name="T:Aspose.Pdf.InteractiveFeatures.Annotations.AnnotationType">
      <summary>
            Enumeration of annotation types.
            </summary>
    </member>
    <member name="F:Aspose.Pdf.InteractiveFeatures.Annotations.AnnotationType.Text">
      <summary>
            Text annotation type.
            </summary>
    </member>
    <member name="F:Aspose.Pdf.InteractiveFeatures.Annotations.AnnotationType.Circle">
      <summary>
            Circle annotation type.
            </summary>
    </member>
    <member name="F:Aspose.Pdf.InteractiveFeatures.Annotations.AnnotationType.Polygon">
      <summary>
            Polygon annotation type. 
            </summary>
    </member>
    <member name="F:Aspose.Pdf.InteractiveFeatures.Annotations.AnnotationType.PolyLine">
      <summary>
            Plyline annotation type.
            </summary>
    </member>
    <member name="F:Aspose.Pdf.InteractiveFeatures.Annotations.AnnotationType.Line">
      <summary>
            Line annotation type.
            </summary>
    </member>
    <member name="F:Aspose.Pdf.InteractiveFeatures.Annotations.AnnotationType.Square">
      <summary>
            Square annotatotion type.
            </summary>
    </member>
    <member name="F:Aspose.Pdf.InteractiveFeatures.Annotations.AnnotationType.FreeText">
      <summary>
            Free text annotation type.
            </summary>
    </member>
    <member name="F:Aspose.Pdf.InteractiveFeatures.Annotations.AnnotationType.Highlight">
      <summary>
            Highlight annotation type.
            </summary>
    </member>
    <member name="F:Aspose.Pdf.InteractiveFeatures.Annotations.AnnotationType.Underline">
      <summary>
            Underline annotation type.
            </summary>
    </member>
    <member name="F:Aspose.Pdf.InteractiveFeatures.Annotations.AnnotationType.Squiggly">
      <summary>
            Squiggle annotation type.
            </summary>
    </member>
    <member name="F:Aspose.Pdf.InteractiveFeatures.Annotations.AnnotationType.StrikeOut">
      <summary>
            Strikeout annotation type.
            </summary>
    </member>
    <member name="F:Aspose.Pdf.InteractiveFeatures.Annotations.AnnotationType.Caret">
      <summary>
            Caret annotation type.
            </summary>
    </member>
    <member name="F:Aspose.Pdf.InteractiveFeatures.Annotations.AnnotationType.Ink">
      <summary>
            Ink annotation type.
            </summary>
    </member>
    <member name="F:Aspose.Pdf.InteractiveFeatures.Annotations.AnnotationType.Link">
      <summary>
            Link annotation type.
            </summary>
    </member>
    <member name="F:Aspose.Pdf.InteractiveFeatures.Annotations.AnnotationType.Popup">
      <summary>
            Popup annotation type.
            </summary>
    </member>
    <member name="F:Aspose.Pdf.InteractiveFeatures.Annotations.AnnotationType.FileAttachment">
      <summary>
            File attachment annotation type.
            </summary>
    </member>
    <member name="F:Aspose.Pdf.InteractiveFeatures.Annotations.AnnotationType.Sound">
      <summary>
            Sound annotation type.
            </summary>
    </member>
    <member name="F:Aspose.Pdf.InteractiveFeatures.Annotations.AnnotationType.Movie">
      <summary>
            Movie annotation type.
            </summary>
    </member>
    <member name="F:Aspose.Pdf.InteractiveFeatures.Annotations.AnnotationType.Screen">
      <summary>
            Screen annotation type.
            </summary>
    </member>
    <member name="F:Aspose.Pdf.InteractiveFeatures.Annotations.AnnotationType.Widget">
      <summary>
            Widget annotation type.
            </summary>
    </member>
    <member name="F:Aspose.Pdf.InteractiveFeatures.Annotations.AnnotationType.Watermark">
      <summary>
            Watermark annotation type.
            </summary>
    </member>
    <member name="F:Aspose.Pdf.InteractiveFeatures.Annotations.AnnotationType.TrapNet">
      <summary>
            Trap network annotation type.
            </summary>
    </member>
    <member name="F:Aspose.Pdf.InteractiveFeatures.Annotations.AnnotationType.PrinterMark">
      <summary>
            Printer mark annotation type.
            </summary>
    </member>
    <member name="F:Aspose.Pdf.InteractiveFeatures.Annotations.AnnotationType.Stamp">
      <summary>
            Rubber stamp annotation type.
            </summary>
    </member>
    <member name="T:Aspose.Pdf.InteractiveFeatures.Annotations.AppearanceDictionary">
      <summary>
            Annotation appearance dictionary specifying how the annotation shall be presented visually on the page.
            </summary>
    </member>
    <member name="M:Aspose.Pdf.InteractiveFeatures.Annotations.AppearanceDictionary.Contains(System.Object)">
      <summary>
            Determines whether dictionary contains an element with the specified key.
            </summary>
    </member>
    <member name="M:Aspose.Pdf.InteractiveFeatures.Annotations.AppearanceDictionary.Remove(System.Object)">
      <summary>
            Removes the element with the specified key.
            </summary>
    </member>
    <member name="M:Aspose.Pdf.InteractiveFeatures.Annotations.AppearanceDictionary.Clear">
      <summary>
            Removes all elements from the dictionary.
            </summary>
    </member>
    <member name="M:Aspose.Pdf.InteractiveFeatures.Annotations.AppearanceDictionary.Add(System.Object,System.Object)">
      <summary>
            Adds an element with the provided key and value.
            </summary>
      <param name="key">
            Element key.
            </param>
      <param name="value">
            Element value.
            </param>
    </member>
    <member name="M:Aspose.Pdf.InteractiveFeatures.Annotations.AppearanceDictionary.GetEnumerator">
      <summary>
            Returns an IDictionaryEnumerator object for the dictionary.
            </summary>
    </member>
    <member name="M:Aspose.Pdf.InteractiveFeatures.Annotations.AppearanceDictionary.CopyTo(System.Array,System.Int32)">
      <summary>
            Copies the elements of the dictionary to an Array, starting at a particular Array index.
            </summary>
    </member>
    <member name="P:Aspose.Pdf.InteractiveFeatures.Annotations.AppearanceDictionary.IsReadOnly">
      <summary>
            Gets a value indicating whether dictionary is read-only.
            </summary>
    </member>
    <member name="P:Aspose.Pdf.InteractiveFeatures.Annotations.AppearanceDictionary.IsFixedSize">
      <summary>
            Gets a value indicating whether dictionary has a fixed size.
            </summary>
    </member>
    <member name="P:Aspose.Pdf.InteractiveFeatures.Annotations.AppearanceDictionary.Keys">
      <summary>
            Gets keys of the dictionary. If appearance dictionary has subditionaries, then <see cref="P:Aspose.Pdf.InteractiveFeatures.Annotations.AppearanceDictionary.Keys" /> contains (N|R|D).state values,
            where N - normal appearance, R - rollover appearance, D - down appearance and state - the name of the state
            (e.g. On, Off for checkboxes).
            </summary>
    </member>
    <member name="P:Aspose.Pdf.InteractiveFeatures.Annotations.AppearanceDictionary.Values">
      <summary>
            Gets the list of the dictionary values. 
            Result collection contains the list of XForm objects.
            </summary>
    </member>
    <member name="P:Aspose.Pdf.InteractiveFeatures.Annotations.AppearanceDictionary.IsSynchronized">
      <summary>
            Gets a value indicating whether access to the dictionary is synchronized (thread safe).
            </summary>
    </member>
    <member name="P:Aspose.Pdf.InteractiveFeatures.Annotations.AppearanceDictionary.SyncRoot">
      <summary>
            Gets an object that can be used to synchronize access to the dictionary.
            </summary>
    </member>
    <member name="P:Aspose.Pdf.InteractiveFeatures.Annotations.AppearanceDictionary.Count">
      <summary>
            Gets the number of elements contained in the dictionary. 
            </summary>
    </member>
    <member name="P:Aspose.Pdf.InteractiveFeatures.Annotations.AppearanceDictionary.Item(System.Object)">
      <summary>
            Represents convenient form for getting appearance streams.
            </summary>
      <param name="key">
            Represents path to appearance stream. 
            If appearance dictionary has subdictionaries, then path must contain 2 parts (<see cref="P:Aspose.Pdf.InteractiveFeatures.Annotations.AppearanceDictionary.Keys" />), 
            else path has only one part.
            </param>
      <returns>
            XForm object (appearance stream) which corresponds to the given key.
            </returns>
    </member>
    <member name="T:Aspose.Pdf.InteractiveFeatures.Annotations.CaretAnnotation">
      <summary>
            Class representing Caret annotation.
            </summary>
    </member>
    <member name="T:Aspose.Pdf.InteractiveFeatures.Annotations.MarkupAnnotation">
      <summary>
            Abstract class representing markup annotation.
            </summary>
    </member>
    <member name="T:Aspose.Pdf.InteractiveFeatures.Annotations.Annotation">
      <summary>
            Class representing annotation object.
            </summary>
    </member>
    <member name="M:Aspose.Pdf.InteractiveFeatures.Annotations.Annotation.Accept(Aspose.Pdf.InteractiveFeatures.Annotations.AnnotationSelector)">
      <summary>
            Accepts visitor for annotation processing.
            </summary>
      <param name="visitor">
      </param>
    </member>
    <member name="M:Aspose.Pdf.InteractiveFeatures.Annotations.Annotation.Flatten">
      <summary>
            Places annotation contents directly on the page,
            annotation object will be removed.
            </summary>
    </member>
    <member name="P:Aspose.Pdf.InteractiveFeatures.Annotations.Annotation.Flags">
      <summary>
            Flags of the annotation.
            </summary>
    </member>
    <member name="P:Aspose.Pdf.InteractiveFeatures.Annotations.Annotation.Width">
      <summary>
            Gets or sets width of the annotation.
            </summary>
    </member>
    <member name="P:Aspose.Pdf.InteractiveFeatures.Annotations.Annotation.Height">
      <summary>
            Gets or sets height of the annotation.
            </summary>
    </member>
    <member name="P:Aspose.Pdf.InteractiveFeatures.Annotations.Annotation.Rect">
      <summary>
            Gets or sets annotation rectangle.
            </summary>
    </member>
    <member name="P:Aspose.Pdf.InteractiveFeatures.Annotations.Annotation.Contents">
      <summary>
            Gets or sets annotation text.
            </summary>
    </member>
    <member name="P:Aspose.Pdf.InteractiveFeatures.Annotations.Annotation.Name">
      <summary>
            Gets or sets annotation name on the page.
            </summary>
    </member>
    <member name="P:Aspose.Pdf.InteractiveFeatures.Annotations.Annotation.Modified">
      <summary>
            Gets or sets date and time when annotation was recently modified.
            </summary>
    </member>
    <member name="P:Aspose.Pdf.InteractiveFeatures.Annotations.Annotation.Color">
      <summary>
            Gets or sets annotation color.
            </summary>
    </member>
    <member name="P:Aspose.Pdf.InteractiveFeatures.Annotations.Annotation.Border">
      <summary>
            Gets or sets annotation border characteristics. <see cref="P:Aspose.Pdf.InteractiveFeatures.Annotations.Annotation.Border" /></summary>
    </member>
    <member name="P:Aspose.Pdf.InteractiveFeatures.Annotations.Annotation.ActiveState">
      <summary>
            Gets or sets current annotation appearance state.
            </summary>
    </member>
    <member name="P:Aspose.Pdf.InteractiveFeatures.Annotations.Annotation.Characteristics">
      <summary>
            Gets annotation characteristics.
            </summary>
    </member>
    <member name="P:Aspose.Pdf.InteractiveFeatures.Annotations.Annotation.States">
      <summary>
            Gets appearance dictionary of annotation.
            </summary>
    </member>
    <member name="P:Aspose.Pdf.InteractiveFeatures.Annotations.Annotation.Alignment">
      <summary>
            Gets or sets text alignmennt for annotation.
            </summary>
    </member>
    <member name="P:Aspose.Pdf.InteractiveFeatures.Annotations.Annotation.FullName">
      <summary>
            Gets full qualified name of the annotation. 
            </summary>
      <returns>
      </returns>
    </member>
    <member name="P:Aspose.Pdf.InteractiveFeatures.Annotations.Annotation.Appearance">
      <summary>
            Gets appearance dictionary of the annotation.
            </summary>
    </member>
    <member name="P:Aspose.Pdf.InteractiveFeatures.Annotations.Annotation.PageIndex">
      <summary>
            Gets index of page which contains annotation.
            </summary>
    </member>
    <member name="P:Aspose.Pdf.InteractiveFeatures.Annotations.MarkupAnnotation.Title">
      <summary>
            Gets or sets a text that shall be displayed in title bar of annotation.
            </summary>
    </member>
    <member name="P:Aspose.Pdf.InteractiveFeatures.Annotations.MarkupAnnotation.RichText">
      <summary>
            Gets or sets a rich text string to be displayed in the pop-up window when the annotation is opened.
            </summary>
    </member>
    <member name="P:Aspose.Pdf.InteractiveFeatures.Annotations.MarkupAnnotation.CreationDate">
      <summary>
            Gets date and time when annotation was created.
            </summary>
    </member>
    <member name="P:Aspose.Pdf.InteractiveFeatures.Annotations.MarkupAnnotation.Subject">
      <summary>
            Gets text representing desciption of the object.
            </summary>
    </member>
    <member name="P:Aspose.Pdf.InteractiveFeatures.Annotations.MarkupAnnotation.Popup">
      <summary>
            TODO:
            </summary>
    </member>
    <member name="P:Aspose.Pdf.InteractiveFeatures.Annotations.MarkupAnnotation.Opacity">
      <summary>
            Gets or sets the constant opacity value to be used in painting the annotation.
            </summary>
    </member>
    <member name="P:Aspose.Pdf.InteractiveFeatures.Annotations.MarkupAnnotation.InReplyTo">
      <summary>
            A reference to the annotation that this annotation is "in reply to".
            Both annotations must be on the same page of the document.
            </summary>
    </member>
    <member name="P:Aspose.Pdf.InteractiveFeatures.Annotations.MarkupAnnotation.ReplyType">
      <summary>
            A string specifying the relationship (the "reply type") between this annotation
            and one specified by InReplyTo.
            </summary>
    </member>
    <member name="M:Aspose.Pdf.InteractiveFeatures.Annotations.CaretAnnotation.Accept(Aspose.Pdf.InteractiveFeatures.Annotations.AnnotationSelector)">
      <summary>
            Accepts visitor object to process the annotation.
            </summary>
      <param name="visitor">Visitor object.</param>
    </member>
    <member name="M:Aspose.Pdf.InteractiveFeatures.Annotations.CaretAnnotation.#ctor(Aspose.Pdf.Page,Aspose.Pdf.Rectangle)">
      <summary>
            Creates new Caret annotation on the specified page.
            </summary>
      <param name="page">Document's page where annotation should be created.</param>
      <param name="rect">Required rectangle that sets annotation's border.</param>
    </member>
    <member name="M:Aspose.Pdf.InteractiveFeatures.Annotations.CaretAnnotation.#ctor(Aspose.Pdf.Engine.Data.IPdfObject,Aspose.Pdf.Document)">
      <summary>
            Ititializes Caret annotation with engine annotation object.
            </summary>
      <param name="engineAnnot">Engine object that presents the annotation.</param>
      <param name="document">The Aspose.Pdf.Document object.</param>
    </member>
    <member name="P:Aspose.Pdf.InteractiveFeatures.Annotations.CaretAnnotation.Frame">
      <summary>
            Gets or sets caret rectangle.
            </summary>
    </member>
    <member name="P:Aspose.Pdf.InteractiveFeatures.Annotations.CaretAnnotation.Symbol">
      <summary>
            Gets or sets symbol associated with caret.
            </summary>
      <see cref="T:Aspose.Pdf.InteractiveFeatures.Annotations.CaretSymbol" />
    </member>
    <member name="T:Aspose.Pdf.InteractiveFeatures.Annotations.Characteristics">
      <summary>
            Represents annotation characteristics
            </summary>
    </member>
    <member name="P:Aspose.Pdf.InteractiveFeatures.Annotations.Characteristics.Background">
      <summary>
            Gets or sets color of the background
            </summary>
    </member>
    <member name="P:Aspose.Pdf.InteractiveFeatures.Annotations.Characteristics.Border">
      <summary>
            Gets or sets color of the border.
            </summary>
    </member>
    <member name="P:Aspose.Pdf.InteractiveFeatures.Annotations.Characteristics.Rotate">
      <summary>
            Gets or sets rotation of the annotation.
            </summary>
    </member>
    <member name="T:Aspose.Pdf.InteractiveFeatures.Annotations.CircleAnnotation">
      <summary>
            Class representing Circle annotation.
            </summary>
    </member>
    <member name="T:Aspose.Pdf.InteractiveFeatures.Annotations.CommonFigureAnnotation">
      <summary>
            Abstract class representing common figure annotation.
            </summary>
    </member>
    <member name="P:Aspose.Pdf.InteractiveFeatures.Annotations.CommonFigureAnnotation.InteriorColor">
      <summary>
            Interior color with which to fill the annotation’s rectangle or ellipse.
            </summary>
    </member>
    <member name="P:Aspose.Pdf.InteractiveFeatures.Annotations.CommonFigureAnnotation.Frame">
      <summary>
            The rectangle describing the numerical differences between two rectangles:
            the Rect entry of the annotation and the actual boundaries of the underlying square or circle.
            </summary>
    </member>
    <member name="M:Aspose.Pdf.InteractiveFeatures.Annotations.CircleAnnotation.#ctor(Aspose.Pdf.Engine.Data.IPdfObject,Aspose.Pdf.Document)">
      <summary>
            Ititializes Caret annotation with engine annotation object.
            </summary>
      <param name="engineAnnot">Engine object that presents the annotation.</param>
      <param name="document">The Aspose.Pdf.Document object.</param>
    </member>
    <member name="M:Aspose.Pdf.InteractiveFeatures.Annotations.CircleAnnotation.Accept(Aspose.Pdf.InteractiveFeatures.Annotations.AnnotationSelector)">
      <summary>
            Accepts visitor object to process the annotation.
            </summary>
      <param name="visitor">Visitor object.</param>
    </member>
    <member name="M:Aspose.Pdf.InteractiveFeatures.Annotations.CircleAnnotation.#ctor(Aspose.Pdf.Page,Aspose.Pdf.Rectangle)">
      <summary>
            Creates new Circle annotation on the specified page.
            </summary>
      <param name="page">Document's page where annotation should be created.</param>
      <param name="rect">Required rectangle that sets annotation's border.</param>
    </member>
    <member name="T:Aspose.Pdf.InteractiveFeatures.Annotations.FileAttachmentAnnotation">
      <summary>
            Class describes file attachment annotation.
            </summary>
    </member>
    <member name="M:Aspose.Pdf.InteractiveFeatures.Annotations.FileAttachmentAnnotation.#ctor(Aspose.Pdf.Engine.Data.IPdfObject,Aspose.Pdf.Document)">
      <summary>
            Ititializes FileAttachment annotation with engine annotation object.
            </summary>
      <param name="engineAnnot">Engine object that presents the annotation.</param>
      <param name="document">The Aspose.Pdf.Document object.</param>
    </member>
    <member name="M:Aspose.Pdf.InteractiveFeatures.Annotations.FileAttachmentAnnotation.Accept(Aspose.Pdf.InteractiveFeatures.Annotations.AnnotationSelector)">
      <summary>
            Accepts visitor object to process annotation.
            </summary>
      <param name="visitor">Visitor object.</param>
    </member>
    <member name="M:Aspose.Pdf.InteractiveFeatures.Annotations.FileAttachmentAnnotation.#ctor(Aspose.Pdf.Page,Aspose.Pdf.Rectangle,Aspose.Pdf.FileSpecification)">
      <summary>
            Creates new FileAttachment annotation on the specified page.
            </summary>
      <param name="page">Document's page where annotation should be created.</param>
      <param name="rect">Required rectangle that sets annotation's border.</param>
      <param name="fileSpec">Describes the file that shoud be bound with the annotation.</param>
    </member>
    <member name="P:Aspose.Pdf.InteractiveFeatures.Annotations.FileAttachmentAnnotation.File">
      <summary>
            The specification of the file associated with this annotation.
            </summary>
    </member>
    <member name="P:Aspose.Pdf.InteractiveFeatures.Annotations.FileAttachmentAnnotation.Icon">
      <summary>
            Gets or sets icon that shall be used in displaying annotation.
            </summary>
    </member>
    <member name="P:Aspose.Pdf.InteractiveFeatures.Annotations.FileAttachmentAnnotation.Opacity">
      <summary>
            Gets or sets icon's opacity from 0 to 1: 0 - completely transparant, 1 - completely opaque.
            </summary>
    </member>
    <member name="T:Aspose.Pdf.InteractiveFeatures.Annotations.FreeTextAnnotation">
      <summary>
            Represents a free text annotation that displays text directly on the page. Unlike an ordinary text annotation, a free text annotation has no open or closed state; instead of being displayed in a pop-up window, the text is always visible.
            </summary>
    </member>
    <member name="M:Aspose.Pdf.InteractiveFeatures.Annotations.FreeTextAnnotation.Accept(Aspose.Pdf.InteractiveFeatures.Annotations.AnnotationSelector)">
      <summary>
            Accepts visitor object to process the annotation.
            </summary>
      <param name="visitor">Visitor object.</param>
    </member>
    <member name="M:Aspose.Pdf.InteractiveFeatures.Annotations.FreeTextAnnotation.#ctor(Aspose.Pdf.Engine.Data.IPdfObject,Aspose.Pdf.Document)">
      <summary>
            Ititializes FreeText annotation with engine annotation object.
            </summary>
      <param name="engineAnnot">Engine object that presents the annotation.</param>
      <param name="document">The Aspose.Pdf.Document object.</param>
    </member>
    <member name="M:Aspose.Pdf.InteractiveFeatures.Annotations.FreeTextAnnotation.#ctor(Aspose.Pdf.Page,Aspose.Pdf.Rectangle,Aspose.Pdf.InteractiveFeatures.DefaultAppearance)">
      <summary>
            Creates new FreeText annotation on the specified page.
            </summary>
      <param name="page">The document's page where annotation should be created.</param>
      <param name="rect">The annotation rectangle, defining the location of the annotation on the page.</param>
      <param name="appearance">The default appearance to be used in formatting the text.</param>
    </member>
    <member name="P:Aspose.Pdf.InteractiveFeatures.Annotations.FreeTextAnnotation.Justification">
      <summary>
            Gets or set a code specifying the form of quadding (justification) to be used in displaying the annotation’s text.
            </summary>
    </member>
    <member name="P:Aspose.Pdf.InteractiveFeatures.Annotations.FreeTextAnnotation.DefaultAppearance">
      <summary>
            Gets or sets the default appearance string to be used in formatting the text.
            </summary>
    </member>
    <member name="P:Aspose.Pdf.InteractiveFeatures.Annotations.FreeTextAnnotation.DefaultAppearanceObject">
      <summary>
            Object which represents default appearance of FreeText annotation.
            </summary>
    </member>
    <member name="P:Aspose.Pdf.InteractiveFeatures.Annotations.FreeTextAnnotation.Intent">
      <summary>
            Gets or sets the intent of the free text annotation.
            </summary>
    </member>
    <member name="P:Aspose.Pdf.InteractiveFeatures.Annotations.FreeTextAnnotation.DefaultStyle">
      <summary>
            Gets or sets a default style string.
            </summary>
    </member>
    <member name="P:Aspose.Pdf.InteractiveFeatures.Annotations.FreeTextAnnotation.TextStyle">
      <summary>
            Gets or sets style of the text in appearance. when text style is changed, text appearance is updated.
            </summary>
    </member>
    <member name="T:Aspose.Pdf.InteractiveFeatures.Annotations.FreeTextIntent">
      <summary>
            Enumerates the intents of the free text annotation.
            </summary>
    </member>
    <member name="F:Aspose.Pdf.InteractiveFeatures.Annotations.FreeTextIntent.Undefined">
      <summary>
            Not defined state.
            </summary>
    </member>
    <member name="F:Aspose.Pdf.InteractiveFeatures.Annotations.FreeTextIntent.FreeTextCallout">
      <summary>
            Means that the annotation is intended to function as a callout.
            </summary>
    </member>
    <member name="F:Aspose.Pdf.InteractiveFeatures.Annotations.FreeTextIntent.FreeTextTypeWriter">
      <summary>
            Means that the annotation is intended to function as a click-to-type or typewriter object.
            </summary>
    </member>
    <member name="T:Aspose.Pdf.InteractiveFeatures.Annotations.HighlightAnnotation">
      <summary>
            Represents a highlight annotation that highlights a range of text in the document.
            </summary>
    </member>
    <member name="T:Aspose.Pdf.InteractiveFeatures.Annotations.TextMarkupAnnotation">
      <summary>
            Abstract base class for text markup annotations.
            </summary>
    </member>
    <member name="P:Aspose.Pdf.InteractiveFeatures.Annotations.TextMarkupAnnotation.QuadPoints">
      <summary>
            Gets or sets an array of points specifying the coordinates of n quadrilaterals. Each quadrilateral encompasses a word or group of contiguous words in the text underlying the annotation.
            </summary>
    </member>
    <member name="M:Aspose.Pdf.InteractiveFeatures.Annotations.HighlightAnnotation.Accept(Aspose.Pdf.InteractiveFeatures.Annotations.AnnotationSelector)">
      <summary>
            Accepts visitor object to process the annotation.
            </summary>
      <param name="visitor">Visitor object.</param>
    </member>
    <member name="M:Aspose.Pdf.InteractiveFeatures.Annotations.HighlightAnnotation.#ctor(Aspose.Pdf.Engine.Data.IPdfObject,Aspose.Pdf.Document)">
      <summary>
            Ititializes Highlight annotation with engine annotation object.
            </summary>
      <param name="engineAnnot">Engine object that presents the annotation.</param>
      <param name="document">The Aspose.Pdf.Document object.</param>
    </member>
    <member name="M:Aspose.Pdf.InteractiveFeatures.Annotations.HighlightAnnotation.#ctor(Aspose.Pdf.Page,Aspose.Pdf.Rectangle)">
      <summary>
            Creates new Highlight annotation on the specified page.
            </summary>
      <param name="page">The document's page where annotation should be created.</param>
      <param name="rect">The annotation rectangle, defining the location of the annotation on the page.</param>
    </member>
    <member name="T:Aspose.Pdf.InteractiveFeatures.Annotations.InkAnnotation">
      <summary>
            Represents a freehand "scribble" composed of one or more disjoint paths.
            </summary>
    </member>
    <member name="M:Aspose.Pdf.InteractiveFeatures.Annotations.InkAnnotation.Accept(Aspose.Pdf.InteractiveFeatures.Annotations.AnnotationSelector)">
      <summary>
            Accepts visitor object to process the annotation.
            </summary>
      <param name="visitor">Visitor object.</param>
    </member>
    <member name="M:Aspose.Pdf.InteractiveFeatures.Annotations.InkAnnotation.#ctor(Aspose.Pdf.Engine.Data.IPdfObject,Aspose.Pdf.Document)">
      <summary>
            Ititializes Ink annotation with engine annotation object.
            </summary>
      <param name="engineAnnot">Engine object that presents the annotation.</param>
      <param name="document">The Aspose.Pdf.Document object.</param>
    </member>
    <member name="M:Aspose.Pdf.InteractiveFeatures.Annotations.InkAnnotation.#ctor(Aspose.Pdf.Page,Aspose.Pdf.Rectangle,System.Collections.IList)">
      <summary>
            Creates new Ink annotation on the specified page.
            </summary>
      <param name="page">The document's page where annotation should be created.</param>
      <param name="rect">The annotation rectangle, defining the location of the annotation on the page.</param>
      <param name="inkList">An array of Point[] arrays, each representing a stroked path.</param>
    </member>
    <member name="P:Aspose.Pdf.InteractiveFeatures.Annotations.InkAnnotation.InkList">
      <summary>
            Gets or sets list of gestures that are independent lines which are represented by Point[] arrays.
            </summary>
    </member>
    <member name="T:Aspose.Pdf.InteractiveFeatures.Annotations.LineAnnotation">
      <summary>
            Class representing line annotation.
            </summary>
    </member>
    <member name="M:Aspose.Pdf.InteractiveFeatures.Annotations.LineAnnotation.Accept(Aspose.Pdf.InteractiveFeatures.Annotations.AnnotationSelector)">
      <summary>
            Accepts visitor to annotation processing.
            </summary>
      <param name="visitor">Visitor object</param>
    </member>
    <member name="M:Aspose.Pdf.InteractiveFeatures.Annotations.LineAnnotation.#ctor(Aspose.Pdf.Engine.Data.IPdfObject,Aspose.Pdf.Document)">
      <summary>
            Ititializes Line annotation with engine annotation object.
            </summary>
      <param name="engineAnnot">Engine object that represents the annotation.</param>
      <param name="document">The Aspose.Pdf.Document object.</param>
    </member>
    <member name="M:Aspose.Pdf.InteractiveFeatures.Annotations.LineAnnotation.#ctor(Aspose.Pdf.Page,Aspose.Pdf.Rectangle,Aspose.Pdf.Point,Aspose.Pdf.Point)">
      <summary>
            Creates new Line annotation on the specified page.
            </summary>
      <param name="page">The document's page where annotation should be created.</param>
      <param name="rect">The annotation rectangle, defining the location of the annotation on the page.</param>
      <param name="start">A point, specifying the starting coordinate of the line.</param>
      <param name="end">A point, specifying the ending coordinate of the line.</param>
    </member>
    <member name="P:Aspose.Pdf.InteractiveFeatures.Annotations.LineAnnotation.Starting">
      <summary>
            Gets or sets starting point of line.
            </summary>
    </member>
    <member name="P:Aspose.Pdf.InteractiveFeatures.Annotations.LineAnnotation.StartingStyle">
      <summary>
            Gets or sets line ending style for line starting point.
            </summary>
    </member>
    <member name="P:Aspose.Pdf.InteractiveFeatures.Annotations.LineAnnotation.Ending">
      <summary>
            Gets or sets line ending point.
            </summary>
    </member>
    <member name="P:Aspose.Pdf.InteractiveFeatures.Annotations.LineAnnotation.EndingStyle">
      <summary>
            Gets or sets ending style for end point of line.
            </summary>
    </member>
    <member name="P:Aspose.Pdf.InteractiveFeatures.Annotations.LineAnnotation.InteriorColor">
      <summary>
            Gets or sets interior color of the annotation.
            </summary>
    </member>
    <member name="P:Aspose.Pdf.InteractiveFeatures.Annotations.LineAnnotation.LeaderLine">
      <summary>
            Gets or sets leader line length.
            </summary>
    </member>
    <member name="P:Aspose.Pdf.InteractiveFeatures.Annotations.LineAnnotation.LeaderLineExtension">
      <summary>
            Gets or sets length of leader line extension.
            </summary>
    </member>
    <member name="P:Aspose.Pdf.InteractiveFeatures.Annotations.LineAnnotation.ShowCaption">
      <summary>
            Gets or sets boolean flag which determinies is contents must be shown as caption.
            </summary>
    </member>
    <member name="P:Aspose.Pdf.InteractiveFeatures.Annotations.LineAnnotation.LeaderLineOffset">
      <summary>
            Gets or sets leader line offset.
            </summary>
    </member>
    <member name="P:Aspose.Pdf.InteractiveFeatures.Annotations.LineAnnotation.CaptionOffset">
      <summary>
            Gets or sets caption text offset from its normal position.
            </summary>
    </member>
    <member name="P:Aspose.Pdf.InteractiveFeatures.Annotations.LineAnnotation.CaptionPosition">
      <summary>
            Gets or sets annotation caption position.
            </summary>
    </member>
    <member name="P:Aspose.Pdf.InteractiveFeatures.Annotations.LineAnnotation.Intent">
      <summary>
            Gets or sets the intent of the line annotation.
            </summary>
    </member>
    <member name="T:Aspose.Pdf.InteractiveFeatures.Annotations.LineIntent">
      <summary>
            Enumerates the intents of the line annotation.
            </summary>
    </member>
    <member name="F:Aspose.Pdf.InteractiveFeatures.Annotations.LineIntent.Undefined">
      <summary>
            Undefined state.
            </summary>
    </member>
    <member name="F:Aspose.Pdf.InteractiveFeatures.Annotations.LineIntent.LineArrow">
      <summary>
            Means that the annotation is intended to function as an arrow.
            </summary>
    </member>
    <member name="F:Aspose.Pdf.InteractiveFeatures.Annotations.LineIntent.LineDimension">
      <summary>
            Means that the annotation is intended to function as a dimension line.
            </summary>
    </member>
    <member name="T:Aspose.Pdf.InteractiveFeatures.Annotations.LinkAnnotation">
      <summary>
            Represents either a hypertext link to a destination elsewhere in the document or an action to be performed.
            </summary>
    </member>
    <member name="M:Aspose.Pdf.InteractiveFeatures.Annotations.LinkAnnotation.Accept(Aspose.Pdf.InteractiveFeatures.Annotations.AnnotationSelector)">
      <summary>
            Accepts visitor object to process the annotation.
            </summary>
      <param name="visitor">Visitor object.</param>
    </member>
    <member name="M:Aspose.Pdf.InteractiveFeatures.Annotations.LinkAnnotation.#ctor(Aspose.Pdf.Engine.Data.IPdfObject,Aspose.Pdf.Document)">
      <summary>
            Ititializes Link annotation with engine annotation object.
            </summary>
      <param name="engineAnnot">Engine object that represents the annotation.</param>
      <param name="document">Document.</param>
    </member>
    <member name="M:Aspose.Pdf.InteractiveFeatures.Annotations.LinkAnnotation.#ctor(Aspose.Pdf.Page,Aspose.Pdf.Rectangle)">
      <summary>
            Creates new Link annotation on the specified page.
            </summary>
      <param name="page">The document's page where annotation should be created.</param>
      <param name="rect">The annotation rectangle, defining the location of the annotation on the page.</param>
    </member>
    <member name="P:Aspose.Pdf.InteractiveFeatures.Annotations.LinkAnnotation.Action">
      <summary>
            An action to be performed when the link annotation is activated.
            </summary>
    </member>
    <member name="P:Aspose.Pdf.InteractiveFeatures.Annotations.LinkAnnotation.Destination">
      <summary>
            A destination to be displayed when the annotation is activated.
            </summary>
    </member>
    <member name="P:Aspose.Pdf.InteractiveFeatures.Annotations.LinkAnnotation.Highlighting">
      <summary>
            The visual effect to be used when the mouse button is pressed or held down inside its active area.
            </summary>
    </member>
    <member name="T:Aspose.Pdf.InteractiveFeatures.Annotations.MovieAnnotation">
      <summary>
            Represents a movie annotation that contains animated graphics and sound to be presented on the computer screen and through the speakers. When the annotation is activated, the movie is played.
            </summary>
    </member>
    <member name="M:Aspose.Pdf.InteractiveFeatures.Annotations.MovieAnnotation.#ctor(Aspose.Pdf.Page,Aspose.Pdf.Rectangle,System.String)">
      <summary>
            Creates new Sound annotation on the specified page.
            </summary>
      <param name="page">The document's page where annotation should be created.</param>
      <param name="rect">The annotation rectangle, defining the location of the annotation on the page.</param>
      <param name="movieFile">A movie file to be played when the annotation is activated.</param>
    </member>
    <member name="M:Aspose.Pdf.InteractiveFeatures.Annotations.MovieAnnotation.Accept(Aspose.Pdf.InteractiveFeatures.Annotations.AnnotationSelector)">
      <summary>
            Accepts visitor object to process the annotation.
            </summary>
      <param name="visitor">Visitor object.</param>
    </member>
    <member name="P:Aspose.Pdf.InteractiveFeatures.Annotations.MovieAnnotation.Title">
      <summary>
            Gets or sets the title of the movie annotation.
            </summary>
    </member>
    <member name="P:Aspose.Pdf.InteractiveFeatures.Annotations.MovieAnnotation.File">
      <summary>
            Gets or sets a file specification identifying a self-describing movie file.
            </summary>
    </member>
    <member name="P:Aspose.Pdf.InteractiveFeatures.Annotations.MovieAnnotation.Aspect">
      <summary>
            Gets or sets the width and height of the movie’s bounding box, in pixels, specified as [ width height ].
            </summary>
    </member>
    <member name="T:Aspose.Pdf.InteractiveFeatures.Annotations.PolyAnnotation">
      <summary>
            Abstract base class for poly- annotations.
            </summary>
    </member>
    <member name="P:Aspose.Pdf.InteractiveFeatures.Annotations.PolyAnnotation.Vertices">
      <summary>
            Gets or sets an array of points representing the horizontal and vertical coordinates of each vertex.
            </summary>
    </member>
    <member name="P:Aspose.Pdf.InteractiveFeatures.Annotations.PolyAnnotation.InteriorColor">
      <summary>
            Gets or sets the interior color with which to fill the annotation’s line endings.
            </summary>
    </member>
    <member name="P:Aspose.Pdf.InteractiveFeatures.Annotations.PolyAnnotation.StartingStyle">
      <summary>
            Gets or sets the style of first line ending.
            </summary>
    </member>
    <member name="P:Aspose.Pdf.InteractiveFeatures.Annotations.PolyAnnotation.EndingStyle">
      <summary>
            Gets or sets the style of second line ending.
            </summary>
    </member>
    <member name="P:Aspose.Pdf.InteractiveFeatures.Annotations.PolyAnnotation.Intent">
      <summary>
            Gets or sets the intent of the polygon or polyline annotation.
            </summary>
    </member>
    <member name="T:Aspose.Pdf.InteractiveFeatures.Annotations.PolygonAnnotation">
      <summary>
            Class representing polygon annotation. 
            </summary>
    </member>
    <member name="M:Aspose.Pdf.InteractiveFeatures.Annotations.PolygonAnnotation.Accept(Aspose.Pdf.InteractiveFeatures.Annotations.AnnotationSelector)">
      <summary>
            Accepts visitor object for annotation processing. 
            </summary>
      <param name="visitor">Visitor object.</param>
    </member>
    <member name="M:Aspose.Pdf.InteractiveFeatures.Annotations.PolygonAnnotation.#ctor(Aspose.Pdf.Engine.Data.IPdfObject,Aspose.Pdf.Document)">
      <summary>
            Ititializes Polygon annotation with engine annotation object.
            </summary>
      <param name="engineAnnot">Engine object that represents the annotation.</param>
      <param name="document">The Aspose.Pdf.Document object.</param>
    </member>
    <member name="M:Aspose.Pdf.InteractiveFeatures.Annotations.PolygonAnnotation.#ctor(Aspose.Pdf.Page,Aspose.Pdf.Rectangle,Aspose.Pdf.Point[])">
      <summary>
            Creates new Polygon annotation on the specified page.
            </summary>
      <param name="page">The document's page where annotation should be created.</param>
      <param name="rect">The annotation rectangle, defining the location of the annotation on the page.</param>
      <param name="vertices">An array of polygon vertices points.</param>
    </member>
    <member name="T:Aspose.Pdf.InteractiveFeatures.Annotations.PolyIntent">
      <summary>
            Enumerates the intents of the polygon or polyline annotation.
            </summary>
    </member>
    <member name="F:Aspose.Pdf.InteractiveFeatures.Annotations.PolyIntent.Undefined">
      <summary>
            Undefined state.
            </summary>
    </member>
    <member name="F:Aspose.Pdf.InteractiveFeatures.Annotations.PolyIntent.PolygonCloud">
      <summary>
            Means that the annotation is intended to function as a cloud object.
            </summary>
    </member>
    <member name="F:Aspose.Pdf.InteractiveFeatures.Annotations.PolyIntent.PolyLineDimension">
      <summary>
            Indicates that the polyline annotation is intended to function as a dimension.
            </summary>
    </member>
    <member name="F:Aspose.Pdf.InteractiveFeatures.Annotations.PolyIntent.PolygonDimension">
      <summary>
            Indicates that the polygon annotation is intended to function as a dimension.
            </summary>
    </member>
    <member name="T:Aspose.Pdf.InteractiveFeatures.Annotations.PolylineAnnotation">
      <summary>
            Represents polyline annotation that is similar to polygon, except that the first and last vertex are not implicitly connected.
            </summary>
    </member>
    <member name="M:Aspose.Pdf.InteractiveFeatures.Annotations.PolylineAnnotation.Accept(Aspose.Pdf.InteractiveFeatures.Annotations.AnnotationSelector)">
      <summary>
            Accepts visitor object to process the annotation.
            </summary>
      <param name="visitor">Visitor object.</param>
    </member>
    <member name="M:Aspose.Pdf.InteractiveFeatures.Annotations.PolylineAnnotation.#ctor(Aspose.Pdf.Engine.Data.IPdfObject,Aspose.Pdf.Document)">
      <summary>
            Ititializes Polyline annotation with engine annotation object.
            </summary>
      <param name="engineAnnot">Engine object that represents the annotation.</param>
      <param name="document">The Aspose.Pdf.Document object.</param>
    </member>
    <member name="M:Aspose.Pdf.InteractiveFeatures.Annotations.PolylineAnnotation.#ctor(Aspose.Pdf.Page,Aspose.Pdf.Rectangle,Aspose.Pdf.Point[])">
      <summary>
            Creates new Polyline annotation on the specified page.
            </summary>
      <param name="page">The document's page where annotation should be created.</param>
      <param name="rect">The annotation rectangle, defining the location of the annotation on the page.</param>
      <param name="vertices">An array of polygon vertices points.</param>
    </member>
    <member name="T:Aspose.Pdf.InteractiveFeatures.Annotations.PopupAnnotation">
      <summary>
            Represents the pop-up annotation that displays text in a pop-up window for entry and editing.
            </summary>
    </member>
    <member name="M:Aspose.Pdf.InteractiveFeatures.Annotations.PopupAnnotation.Accept(Aspose.Pdf.InteractiveFeatures.Annotations.AnnotationSelector)">
      <summary>
            Accepts visitor object to process the annotation.
            </summary>
      <param name="visitor">Visitor object.</param>
    </member>
    <member name="M:Aspose.Pdf.InteractiveFeatures.Annotations.PopupAnnotation.#ctor(Aspose.Pdf.Engine.Data.IPdfObject,Aspose.Pdf.Document)">
      <summary>
            Ititializes Popup annotation with engine annotation object.
            </summary>
      <param name="engineAnnot">Engine object that represents the annotation.</param>
      <param name="document">Document.</param>
    </member>
    <member name="M:Aspose.Pdf.InteractiveFeatures.Annotations.PopupAnnotation.#ctor(Aspose.Pdf.Page,Aspose.Pdf.Rectangle)">
      <summary>
            Creates new Popup annotation on the specified page.
            </summary>
      <param name="page">The document's page where annotation should be created.</param>
      <param name="rect">The annotation rectangle, defining the location of the annotation on the page.</param>
    </member>
    <member name="P:Aspose.Pdf.InteractiveFeatures.Annotations.PopupAnnotation.Open">
      <summary>
            Gets or sets a flag specifying whether the pop-up annotation should initially be displayed open.
            </summary>
    </member>
    <member name="T:Aspose.Pdf.InteractiveFeatures.Annotations.ReplyType">
      <summary>
            Enumerates the kinds of the relationships (the “reply type”) between the annotation and one specified by InReplyTo.
            </summary>
    </member>
    <member name="F:Aspose.Pdf.InteractiveFeatures.Annotations.ReplyType.Undefined">
      <summary>
            Undefined relationship.
            </summary>
    </member>
    <member name="F:Aspose.Pdf.InteractiveFeatures.Annotations.ReplyType.Reply">
      <summary>
            The annotation is considered a reply to the annotation specified by InReplyTo. Viewer applications should not display replies to an annotation individually but together in the form of threaded comments.
            </summary>
    </member>
    <member name="F:Aspose.Pdf.InteractiveFeatures.Annotations.ReplyType.Group">
      <summary>
            The annotation is grouped with the annotation specified by InReplyTo.
            </summary>
    </member>
    <member name="T:Aspose.Pdf.InteractiveFeatures.Annotations.SoundAnnotation">
      <summary>
            Represents a sound annotation that contains sound recorded from the computer’s microphone or imported from a file.
            </summary>
    </member>
    <member name="M:Aspose.Pdf.InteractiveFeatures.Annotations.SoundAnnotation.Accept(Aspose.Pdf.InteractiveFeatures.Annotations.AnnotationSelector)">
      <summary>
            Accepts visitor object to process the annotation.
            </summary>
      <param name="visitor">Visitor object.</param>
    </member>
    <member name="M:Aspose.Pdf.InteractiveFeatures.Annotations.SoundAnnotation.#ctor(Aspose.Pdf.Engine.Data.IPdfObject,Aspose.Pdf.Document)">
      <summary>
            Ititializes Sound annotation with engine annotation object.
            </summary>
      <param name="engineAnnot">Engine object that represents the annotation.</param>
      <param name="document">The Aspose.Pdf.Document object.</param>
    </member>
    <member name="M:Aspose.Pdf.InteractiveFeatures.Annotations.SoundAnnotation.#ctor(Aspose.Pdf.Page,Aspose.Pdf.Rectangle,System.String)">
      <summary>
            Creates new Sound annotation on the specified page.
            </summary>
      <param name="page">The document's page where annotation should be created.</param>
      <param name="rect">The annotation rectangle, defining the location of the annotation on the page.</param>
      <param name="soundFile">A sound file defining the sound to be played when the annotation is activated.</param>
    </member>
    <member name="P:Aspose.Pdf.InteractiveFeatures.Annotations.SoundAnnotation.Icon">
      <summary>
            Gets or sets an icon to be used in displaying the annotation.
            </summary>
    </member>
    <member name="P:Aspose.Pdf.InteractiveFeatures.Annotations.SoundAnnotation.SoundData">
      <summary>
            Gets a sound object defining the sound to be played when the annotation is activated.
            </summary>
    </member>
    <member name="T:Aspose.Pdf.InteractiveFeatures.SoundData">
      <summary>
            Represents a sound data defining the sound to be played when the annotation is activated.
            </summary>
    </member>
    <member name="P:Aspose.Pdf.InteractiveFeatures.SoundData.Rate">
      <summary>
            Gets or sets the sampling rate, in samples per second.
            </summary>
    </member>
    <member name="P:Aspose.Pdf.InteractiveFeatures.SoundData.Channels">
      <summary>
            Gets or sets the number of sound channels.
            </summary>
    </member>
    <member name="P:Aspose.Pdf.InteractiveFeatures.SoundData.Bits">
      <summary>
            Gets or sets the number of bits per sample value per channel.
            </summary>
    </member>
    <member name="P:Aspose.Pdf.InteractiveFeatures.SoundData.Contents">
      <summary>
            Gets stream of the sound to be played when the annotation is activated.
            </summary>
    </member>
    <member name="P:Aspose.Pdf.InteractiveFeatures.SoundData.Encoding">
      <summary>
            Gets or sets the encoding format for the sample data.
            </summary>
    </member>
    <member name="T:Aspose.Pdf.InteractiveFeatures.Annotations.SoundEncoding">
      <summary>
            The encoding format for the sample data.
            </summary>
    </member>
    <member name="F:Aspose.Pdf.InteractiveFeatures.Annotations.SoundEncoding.Raw">
      <summary>
            Unspecified or unsigned values in the range 0 to 2^bits − 1.
            </summary>
    </member>
    <member name="F:Aspose.Pdf.InteractiveFeatures.Annotations.SoundEncoding.Signed">
      <summary>
            Twos-complement values.
            </summary>
    </member>
    <member name="F:Aspose.Pdf.InteractiveFeatures.Annotations.SoundEncoding.MuLaw">
      <summary>
            μ-law–encoded samples.
            </summary>
    </member>
    <member name="F:Aspose.Pdf.InteractiveFeatures.Annotations.SoundEncoding.ALaw">
      <summary>
            A-law–encoded samples.
            </summary>
    </member>
    <member name="T:Aspose.Pdf.InteractiveFeatures.Annotations.SoundIcon">
      <summary>
            Enumerates the icons to be used in displaying the annotation.
            </summary>
    </member>
    <member name="F:Aspose.Pdf.InteractiveFeatures.Annotations.SoundIcon.Speaker">
      <summary>
            Speaker icon.
            </summary>
    </member>
    <member name="F:Aspose.Pdf.InteractiveFeatures.Annotations.SoundIcon.Mic">
      <summary>
            Microphone icon.
            </summary>
    </member>
    <member name="T:Aspose.Pdf.InteractiveFeatures.Annotations.SquareAnnotation">
      <summary>
            Class representing square annotation.
            </summary>
    </member>
    <member name="M:Aspose.Pdf.InteractiveFeatures.Annotations.SquareAnnotation.#ctor(Aspose.Pdf.Engine.Data.IPdfObject,Aspose.Pdf.Document)">
      <summary>
            Ititializes Square annotation with engine annotation object.
            </summary>
      <param name="engineAnnot">Engine object that represents the annotation.</param>
      <param name="document">The Aspose.Pdf.Document object.</param>
    </member>
    <member name="M:Aspose.Pdf.InteractiveFeatures.Annotations.SquareAnnotation.Accept(Aspose.Pdf.InteractiveFeatures.Annotations.AnnotationSelector)">
      <summary>
            Accepts visitor to process annotation.
            </summary>
      <param name="visitor">Visitor object.</param>
    </member>
    <member name="M:Aspose.Pdf.InteractiveFeatures.Annotations.SquareAnnotation.#ctor(Aspose.Pdf.Page,Aspose.Pdf.Rectangle)">
      <summary>
            Creates new Square annotation on the specified page.
            </summary>
      <param name="page">The document's page where annotation should be created.</param>
      <param name="rect">The annotation rectangle, defining the location of the annotation on the page.</param>
    </member>
    <member name="T:Aspose.Pdf.InteractiveFeatures.Annotations.SquigglyAnnotation">
      <summary>
            Represents the squiggly annotation that appears as a jagged underline in the text of a document.
            </summary>
    </member>
    <member name="M:Aspose.Pdf.InteractiveFeatures.Annotations.SquigglyAnnotation.Accept(Aspose.Pdf.InteractiveFeatures.Annotations.AnnotationSelector)">
      <summary>
            Accepts visitor object to process the annotation.
            </summary>
      <param name="visitor">Visitor object.</param>
    </member>
    <member name="M:Aspose.Pdf.InteractiveFeatures.Annotations.SquigglyAnnotation.#ctor(Aspose.Pdf.Engine.Data.IPdfObject,Aspose.Pdf.Document)">
      <summary>
            Ititializes Squiggly annotation with engine annotation object.
            </summary>
      <param name="engineAnnot">Engine object that presents the annotation.</param>
      <param name="document">The Aspose.Pdf.Document object.</param>
    </member>
    <member name="M:Aspose.Pdf.InteractiveFeatures.Annotations.SquigglyAnnotation.#ctor(Aspose.Pdf.Page,Aspose.Pdf.Rectangle)">
      <summary>
            Creates new Squiggly annotation on the specified page.
            </summary>
      <param name="page">The document's page where annotation should be created.</param>
      <param name="rect">The annotation rectangle, defining the location of the annotation on the page.</param>
    </member>
    <member name="T:Aspose.Pdf.InteractiveFeatures.Annotations.StampAnnotation">
      <summary>
             Represents rubber stamp annotation. 
             This type of annotation displays text or graphics intended to look as if they were stamped on the page with a rubber stamp.
             </summary>
      <example>
             Next code snippet demonstrates how to add 2 stamps into the first pdf document page.
             Input document comes from inFile and changes are saved into the outFile.
             The first stamp has icon NotForPublicRelease and the second comes with image from rubber.jpg.
             <code lang="C#">
             Document document = new Document(inFile);
             StampAnnotation stamp1 = new StampAnnotation(StampIcon.NotForPublicRelease);
            	stamp1.Rect = new Rectangle(100, 100, 120, 120)
            	document.Pages[1].Annotations.Add(stamp1);
             StampAnnotation stamp2 = new StampAnnotation(new FileStream("rubber.jpg", FileMode.Open));
            	stamp2.Rect = new Rectangle(200, 200, 220, 220)
            	document.Pages[1].Annotations.Add(stamp2);
             document.Save(outFile);
             </code></example>
    </member>
    <member name="M:Aspose.Pdf.InteractiveFeatures.Annotations.StampAnnotation.Accept(Aspose.Pdf.InteractiveFeatures.Annotations.AnnotationSelector)">
      <summary>
            Acepts <see cref="T:Aspose.Pdf.InteractiveFeatures.Annotations.AnnotationSelector" /> visitor when browsing annotation collection.
            </summary>
    </member>
    <member name="M:Aspose.Pdf.InteractiveFeatures.Annotations.StampAnnotation.#ctor(Aspose.Pdf.Engine.Data.IPdfObject,Aspose.Pdf.Document)">
      <summary>
            Ititializes Stamp annotation with engine annotation object.
            </summary>
      <param name="engineAnnot">Engine object that represents the annotation.</param>
      <param name="document">The Aspose.Pdf.Document object.</param>
    </member>
    <member name="M:Aspose.Pdf.InteractiveFeatures.Annotations.StampAnnotation.#ctor(Aspose.Pdf.Page,Aspose.Pdf.Rectangle)">
      <summary>
            Creates new Stamp annotation on the specified page.
            </summary>
      <param name="page">The document's page where annotation should be created.</param>
      <param name="rect">The annotation rectangle, defining the location of the annotation on the page.</param>
    </member>
    <member name="P:Aspose.Pdf.InteractiveFeatures.Annotations.StampAnnotation.Icon">
      <summary>
            Gets or sets icon for rubber stamp.
            </summary>
    </member>
    <member name="P:Aspose.Pdf.InteractiveFeatures.Annotations.StampAnnotation.Image">
      <summary>
            Gets or sets image of the annotation.
            </summary>
    </member>
    <member name="T:Aspose.Pdf.InteractiveFeatures.Annotations.StrikeOutAnnotation">
      <summary>
            Represents a strikeout annotation that appears as a strikeout in the text of the document.
            </summary>
    </member>
    <member name="M:Aspose.Pdf.InteractiveFeatures.Annotations.StrikeOutAnnotation.Accept(Aspose.Pdf.InteractiveFeatures.Annotations.AnnotationSelector)">
      <summary>
            Accepts visitor object to process the annotation.
            </summary>
      <param name="visitor">Visitor object.</param>
    </member>
    <member name="M:Aspose.Pdf.InteractiveFeatures.Annotations.StrikeOutAnnotation.#ctor(Aspose.Pdf.Engine.Data.IPdfObject,Aspose.Pdf.Document)">
      <summary>
            Ititializes StrikeOut annotation with engine annotation object.
            </summary>
      <param name="engineAnnot">Engine object that presents the annotation.</param>
      <param name="document">The Aspose.Pdf.Document object.</param>
    </member>
    <member name="M:Aspose.Pdf.InteractiveFeatures.Annotations.StrikeOutAnnotation.#ctor(Aspose.Pdf.Page,Aspose.Pdf.Rectangle)">
      <summary>
            Creates new StrikeOut annotation on the specified page.
            </summary>
      <param name="page">The document's page where annotation should be created.</param>
      <param name="rect">The annotation rectangle, defining the location of the annotation on the page.</param>
    </member>
    <member name="T:Aspose.Pdf.InteractiveFeatures.Annotations.TextAlignment">
      <summary>
            Alignment of text in annotation.
            </summary>
    </member>
    <member name="F:Aspose.Pdf.InteractiveFeatures.Annotations.TextAlignment.Left">
      <summary>
            Text is aligned to left.
            </summary>
    </member>
    <member name="F:Aspose.Pdf.InteractiveFeatures.Annotations.TextAlignment.Center">
      <summary>
            Text is centered.
            </summary>
    </member>
    <member name="F:Aspose.Pdf.InteractiveFeatures.Annotations.TextAlignment.Right">
      <summary>
            Text is aligned to right.
            </summary>
    </member>
    <member name="T:Aspose.Pdf.InteractiveFeatures.Annotations.UnderlineAnnotation">
      <summary>
            Represents an underline annotation that appears as an underline in the text of the document.
            </summary>
    </member>
    <member name="M:Aspose.Pdf.InteractiveFeatures.Annotations.UnderlineAnnotation.Accept(Aspose.Pdf.InteractiveFeatures.Annotations.AnnotationSelector)">
      <summary>
            Accepts visitor object to process the annotation.
            </summary>
      <param name="visitor">Visitor object.</param>
    </member>
    <member name="M:Aspose.Pdf.InteractiveFeatures.Annotations.UnderlineAnnotation.#ctor(Aspose.Pdf.Engine.Data.IPdfObject,Aspose.Pdf.Document)">
      <summary>
            Ititializes Underline annotation with engine annotation object.
            </summary>
      <param name="engineAnnot">Engine object that presents the annotation.</param>
      <param name="document">The Aspose.Pdf.Document object.</param>
    </member>
    <member name="M:Aspose.Pdf.InteractiveFeatures.Annotations.UnderlineAnnotation.#ctor(Aspose.Pdf.Page,Aspose.Pdf.Rectangle)">
      <summary>
            Creates new Underline annotation on the specified page.
            </summary>
      <param name="page">The document's page where annotation should be created.</param>
      <param name="rect">The annotation rectangle, defining the location of the annotation on the page.</param>
    </member>
    <member name="T:Aspose.Pdf.InteractiveFeatures.Annotations.WidgetAnnotation">
      <summary>
            Class representing widget annotation.
            </summary>
    </member>
    <member name="M:Aspose.Pdf.InteractiveFeatures.Annotations.WidgetAnnotation.Accept(Aspose.Pdf.InteractiveFeatures.Annotations.AnnotationSelector)">
      <summary>
            Accepts visitor.
            </summary>
      <param name="visitor">Visitor to be accepted.</param>
    </member>
    <member name="P:Aspose.Pdf.InteractiveFeatures.Annotations.WidgetAnnotation.OnActivated">
      <summary>
            An action which shall be performed when the annotation is activated.
            </summary>
    </member>
    <member name="P:Aspose.Pdf.InteractiveFeatures.Annotations.WidgetAnnotation.Actions">
      <summary>
            Gets the annotation actions.
            </summary>
    </member>
    <member name="P:Aspose.Pdf.InteractiveFeatures.Annotations.WidgetAnnotation.Highlighting">
      <summary>
            Annotation highlighting mode.
            </summary>
    </member>
    <member name="P:Aspose.Pdf.InteractiveFeatures.Annotations.WidgetAnnotation.Parent">
      <summary>
            Gets annotation parent.
            </summary>
    </member>
    <member name="P:Aspose.Pdf.InteractiveFeatures.Annotations.WidgetAnnotation.DefaultAppearance">
      <summary>
            Gets or sets default appearance of the field.
            </summary>
    </member>
    <member name="P:Aspose.Pdf.InteractiveFeatures.Annotations.WidgetAnnotation.ReadOnly">
      <summary>
            Gets or sets read only status of the field.
            </summary>
    </member>
    <member name="P:Aspose.Pdf.InteractiveFeatures.Annotations.WidgetAnnotation.Required">
      <summary>
            Gets or sets required status of the field.
            </summary>
    </member>
    <member name="P:Aspose.Pdf.InteractiveFeatures.Annotations.WidgetAnnotation.Exportable">
      <summary>
            Gets or sets exportable flag of the field. 
            </summary>
    </member>
    <member name="T:Aspose.Pdf.InteractiveFeatures.DefaultAppearance">
      <summary>
            Describes default appearance of field (font, text size and color).
            </summary>
    </member>
    <member name="M:Aspose.Pdf.InteractiveFeatures.DefaultAppearance.#ctor">
      <summary>
            Constructor of DefaultAppearance.
            </summary>
    </member>
    <member name="M:Aspose.Pdf.InteractiveFeatures.DefaultAppearance.#ctor(System.String,System.Double,System.Drawing.Color)">
      <summary>
            Constructor of DefaultAppearance.
            </summary>
      <param name="fontName">Font name.</param>
      <param name="fontSize">Font size.</param>
      <param name="textColor">Color of text.</param>
    </member>
    <member name="M:Aspose.Pdf.InteractiveFeatures.DefaultAppearance.#ctor(Aspose.Pdf.Text.Font,System.Double,System.Drawing.Color)">
      <summary>
            Constructor of Default Appearance. Previously created font may be specified as default font. 
            </summary>
      <param name="font">Font which will be used as default.</param>
      <param name="fontSize">Font size.</param>
      <param name="textColor">Color of text.</param>
    </member>
    <member name="P:Aspose.Pdf.InteractiveFeatures.DefaultAppearance.FontSize">
      <summary>
            Gets font size in default apperance.
            </summary>
    </member>
    <member name="P:Aspose.Pdf.InteractiveFeatures.DefaultAppearance.TextColor">
      <summary>
            Gets or sets the color of text in the default appearance.
            </summary>
    </member>
    <member name="P:Aspose.Pdf.InteractiveFeatures.DefaultAppearance.FontName">
      <summary>
            Gets font name in the default appearance.
            </summary>
    </member>
    <member name="P:Aspose.Pdf.InteractiveFeatures.DefaultAppearance.Font">
      <summary>
            Gets font specified as default for text.
            </summary>
    </member>
    <member name="P:Aspose.Pdf.InteractiveFeatures.DefaultAppearance.Text">
      <summary>
            Gets the list of pdf operators which represent appearence. 
            </summary>
    </member>
    <member name="T:Aspose.Pdf.InteractiveFeatures.DocumentActionCollection">
      <summary>
            Class describes actions performed on some actions with document
            </summary>
    </member>
    <member name="M:Aspose.Pdf.InteractiveFeatures.DocumentActionCollection.#ctor(Aspose.Pdf.Document)">
      <summary>
            Constructor for DocumentActionCollection. Constructs DocumentActionCollection objects from Pdf.Kit.Engine Document object.
            </summary>
      <param name="document">
      </param>
    </member>
    <member name="P:Aspose.Pdf.InteractiveFeatures.DocumentActionCollection.BeforeSaving">
      <summary>
            Gets or sets action performed before document saving.
            </summary>
    </member>
    <member name="P:Aspose.Pdf.InteractiveFeatures.DocumentActionCollection.BeforeClosing">
      <summary>
            Gets or sets action that will be performed before documetn closing.
            </summary>
    </member>
    <member name="P:Aspose.Pdf.InteractiveFeatures.DocumentActionCollection.AfterSaving">
      <summary>
            Gets or sets action that will be performed after document saving.
            </summary>
    </member>
    <member name="P:Aspose.Pdf.InteractiveFeatures.DocumentActionCollection.BeforePrinting">
      <summary>
            Action that will be performed before document printing.
            </summary>
    </member>
    <member name="P:Aspose.Pdf.InteractiveFeatures.DocumentActionCollection.AfterPrinting">
      <summary>
            Action that will be performed after document printing.
            </summary>
    </member>
    <member name="T:Aspose.Pdf.InteractiveFeatures.FitBExplicitDestination">
      <summary>
            Represents explicit destination that displays the page with its contents magnified just enough to fit its bounding box entirely within the window both horizontally and vertically. If the required horizontal and vertical magnification factors are different, use the smaller of the two, centering the bounding box within the window in the other dimension.
            </summary>
    </member>
    <member name="T:Aspose.Pdf.InteractiveFeatures.ExplicitDestination">
      <summary>
            Represents the base class for explicit destinations in PDF document.
            </summary>
    </member>
    <member name="T:Aspose.Pdf.InteractiveFeatures.IAppointment">
      <summary>
            Represents general interface for actions and destinations.
            </summary>
    </member>
    <member name="M:Aspose.Pdf.InteractiveFeatures.ExplicitDestination.CreateDestination(Aspose.Pdf.Engine.Data.IPdfArray)">
      <summary>
            Creates instances of ExplicitDestination descendant classes.
            </summary>
      <param name="engineDest">Engine destination object.</param>
      <returns>DOM explicit destination object.</returns>
    </member>
    <member name="M:Aspose.Pdf.InteractiveFeatures.ExplicitDestination.CreateDestination(Aspose.Pdf.Page,Aspose.Pdf.InteractiveFeatures.ExplicitDestinationType,System.Double[])">
      <summary>
            Creates instances of ExplicitDestination descendant classes.
            </summary>
      <param name="page">The object of destination page.</param>
      <param name="type">The type of explicit destination.</param>
      <param name="values">Array of double values.</param>
      <returns>The explicit destination object.</returns>
    </member>
    <member name="M:Aspose.Pdf.InteractiveFeatures.ExplicitDestination.CreateDestination(Aspose.Pdf.Document,System.Int32,Aspose.Pdf.InteractiveFeatures.ExplicitDestinationType,System.Double[])">
      <summary>
      </summary>
      <param name="doc">
      </param>
      <param name="pageNumber">
      </param>
      <param name="type">
      </param>
      <param name="values">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:Aspose.Pdf.InteractiveFeatures.ExplicitDestination.CreateDestination(System.Int32,Aspose.Pdf.InteractiveFeatures.ExplicitDestinationType,System.Double[])">
      <summary>
            Creates instances of ExplicitDestination descendant classes.
            </summary>
      <param name="pageNumber">The destination page number.</param>
      <param name="type">The type of explicit destination.</param>
      <param name="values">Array of double values.</param>
      <returns>The explicit destination object.</returns>
    </member>
    <member name="P:Aspose.Pdf.InteractiveFeatures.ExplicitDestination.Page">
      <summary>
            Gets the destination page object
            </summary>
    </member>
    <member name="P:Aspose.Pdf.InteractiveFeatures.ExplicitDestination.PageNumber">
      <summary>
            Gets the destination page number
            </summary>
    </member>
    <member name="M:Aspose.Pdf.InteractiveFeatures.FitBExplicitDestination.#ctor(Aspose.Pdf.Page)">
      <summary>
            Creates local explicit destination.
            </summary>
      <param name="page">The destination page object.</param>
    </member>
    <member name="M:Aspose.Pdf.InteractiveFeatures.FitBExplicitDestination.#ctor(Aspose.Pdf.Document,System.Int32)">
      <summary>
            Creates remote explicit destination.
            </summary>
      <param name="document">The parent document that contains this object.</param>
      <param name="pageNumber">The destination page number of remote document.</param>
    </member>
    <member name="M:Aspose.Pdf.InteractiveFeatures.FitBExplicitDestination.#ctor(System.Int32)">
      <summary>
            Creates remote explicit destination.
            </summary>
      <param name="pageNumber">The destination page number of remote document.</param>
    </member>
    <member name="M:Aspose.Pdf.InteractiveFeatures.FitBExplicitDestination.#ctor(Aspose.Pdf.Engine.Data.IPdfArray)">
      <summary>
            Creates the instance and initializes it by engine destination object.
            </summary>
      <param name="engineDest">Engine destination object.</param>
    </member>
    <member name="M:Aspose.Pdf.InteractiveFeatures.FitBExplicitDestination.ToString">
      <summary>
            Converts the object state into string value. Example: "1 FitB".
            </summary>
      <returns>String value representing object state.</returns>
    </member>
    <member name="T:Aspose.Pdf.InteractiveFeatures.FitBHExplicitDestination">
      <summary>
            Represents explicit destination that displays the page with the vertical coordinate top positioned at the top edge of the window and the contents of the page magnified just enough to fit the entire width of its bounding box within the window. A null value for top specifies that the current value of that parameter is to be retained unchanged.
            </summary>
    </member>
    <member name="M:Aspose.Pdf.InteractiveFeatures.FitBHExplicitDestination.#ctor(Aspose.Pdf.Page,System.Double)">
      <summary>
            Creates local explicit destination.
            </summary>
      <param name="page">The destination page object.</param>
      <param name="top">The vertical coordinate top positioned at the top edge of the window.</param>
    </member>
    <member name="M:Aspose.Pdf.InteractiveFeatures.FitBHExplicitDestination.#ctor(Aspose.Pdf.Document,System.Int32,System.Double)">
      <summary>
            Creates remote explicit destination.
            </summary>
      <param name="document">The parent document that contains this object.</param>
      <param name="pageNumber">The destination page number of remote document.</param>
      <param name="top">The vertical coordinate top positioned at the top edge of the window.</param>
    </member>
    <member name="M:Aspose.Pdf.InteractiveFeatures.FitBHExplicitDestination.#ctor(System.Int32,System.Double)">
      <summary>
            Creates remote explicit destination.
            </summary>
      <param name="pageNumber">The destination page number of remote document.</param>
      <param name="top">The vertical coordinate top positioned at the top edge of the window.</param>
    </member>
    <member name="M:Aspose.Pdf.InteractiveFeatures.FitBHExplicitDestination.#ctor(Aspose.Pdf.Engine.Data.IPdfArray)">
      <summary>
            Creates the instance and initializes it by engine destination object.
            </summary>
      <param name="engineDest">Engine destination object.</param>
    </member>
    <member name="M:Aspose.Pdf.InteractiveFeatures.FitBHExplicitDestination.ToString">
      <summary>
            Converts the object state into string value. Example: "1 FitBH 100".
            </summary>
      <returns>String value representing object state.</returns>
    </member>
    <member name="P:Aspose.Pdf.InteractiveFeatures.FitBHExplicitDestination.Top">
      <summary>
            Gets the vertical coordinate top positioned at the top edge of the window.
            </summary>
    </member>
    <member name="T:Aspose.Pdf.InteractiveFeatures.FitBVExplicitDestination">
      <summary>
            Represents explicit destination that displays the page with the horizontal coordinate left positioned at the left edge of the window and the contents of the page magnified just enough to fit the entire height of its bounding box within the window. A null value for left specifies that the current value of that parameter is to be retained unchanged.
            </summary>
    </member>
    <member name="M:Aspose.Pdf.InteractiveFeatures.FitBVExplicitDestination.#ctor(Aspose.Pdf.Page,System.Double)">
      <summary>
            Creates local explicit destination.
            </summary>
      <param name="page">The destination page object.</param>
      <param name="left">The horizontal coordinate left positioned at the left edge of the window.</param>
    </member>
    <member name="M:Aspose.Pdf.InteractiveFeatures.FitBVExplicitDestination.#ctor(Aspose.Pdf.Document,System.Int32,System.Double)">
      <summary>
            Creates remote explicit destination.
            </summary>
      <param name="document">The parent document that contains this object.</param>
      <param name="pageNumber">The destination page number of remote document.</param>
      <param name="left">The horizontal coordinate left positioned at the left edge of the window.</param>
    </member>
    <member name="M:Aspose.Pdf.InteractiveFeatures.FitBVExplicitDestination.#ctor(System.Int32,System.Double)">
      <summary>
            Creates remote explicit destination.
            </summary>
      <param name="pageNumber">The destination page number of remote document.</param>
      <param name="left">The horizontal coordinate left positioned at the left edge of the window.</param>
    </member>
    <member name="M:Aspose.Pdf.InteractiveFeatures.FitBVExplicitDestination.#ctor(Aspose.Pdf.Engine.Data.IPdfArray)">
      <summary>
            Creates the instance and initializes it by engine destination object.
            </summary>
      <param name="engineDest">Engine destination object.</param>
    </member>
    <member name="M:Aspose.Pdf.InteractiveFeatures.FitBVExplicitDestination.ToString">
      <summary>
            Converts the object state into string value. Example: "1 FitBV 100".
            </summary>
      <returns>String value representing object state.</returns>
    </member>
    <member name="P:Aspose.Pdf.InteractiveFeatures.FitBVExplicitDestination.Left">
      <summary>
            Gets the horizontal coordinate left positioned at the left edge of the window.
            </summary>
    </member>
    <member name="T:Aspose.Pdf.InteractiveFeatures.FitExplicitDestination">
      <summary>
            Represents explicit destination that displays the page with its contents magnified just enough to fit the entire page within the window both horizontally and vertically. If the required horizontal and vertical magnification factors are different, use the smaller of the two, centering the page within the window in the other dimension.
            </summary>
    </member>
    <member name="M:Aspose.Pdf.InteractiveFeatures.FitExplicitDestination.#ctor(Aspose.Pdf.Page)">
      <summary>
            Creates local explicit destination.
            </summary>
      <param name="page">The destination page object.</param>
    </member>
    <member name="M:Aspose.Pdf.InteractiveFeatures.FitExplicitDestination.#ctor(Aspose.Pdf.Document,System.Int32)">
      <summary>
            Creates remote explicit destination.
            </summary>
      <param name="document">The Aspose.Pdf.Document object.</param>
      <param name="pageNumber">The destination page number.</param>
    </member>
    <member name="M:Aspose.Pdf.InteractiveFeatures.FitExplicitDestination.#ctor(System.Int32)">
      <summary>
            Creates remote explicit destination.
            </summary>
      <param name="pageNumber">The destination page number of remote document.</param>
    </member>
    <member name="M:Aspose.Pdf.InteractiveFeatures.FitExplicitDestination.#ctor(Aspose.Pdf.Engine.Data.IPdfArray)">
      <summary>
            Creates the instance and initializes it by engine destination object.
            </summary>
      <param name="engineDest">Engine destination object.</param>
    </member>
    <member name="M:Aspose.Pdf.InteractiveFeatures.FitExplicitDestination.ToString">
      <summary>
            Converts the object state into string value. Example: "1 Fit".
            </summary>
      <returns>String value representing object state.</returns>
    </member>
    <member name="T:Aspose.Pdf.InteractiveFeatures.FitHExplicitDestination">
      <summary>
            Represents explicit destination that displays the page with the vertical coordinate top positioned at the top edge of the window and the contents of the page magnified just enough to fit the entire width of the page within the window. A null value for top specifies that the current value of that parameter is to be retained unchanged.
            </summary>
    </member>
    <member name="M:Aspose.Pdf.InteractiveFeatures.FitHExplicitDestination.#ctor(Aspose.Pdf.Page,System.Double)">
      <summary>
            Creates local explicit destination.
            </summary>
      <param name="page">The destination page object.</param>
      <param name="top">The vertical coordinate top positioned at the top edge of the window.</param>
    </member>
    <member name="M:Aspose.Pdf.InteractiveFeatures.FitHExplicitDestination.#ctor(Aspose.Pdf.Document,System.Int32,System.Double)">
      <summary>
            Creates remote explicit destination.
            </summary>
      <param name="document">The parent document that contains this object.</param>
      <param name="pageNumber">The destination page number of remote document.</param>
      <param name="top">The vertical coordinate top positioned at the top edge of the window.</param>
    </member>
    <member name="M:Aspose.Pdf.InteractiveFeatures.FitHExplicitDestination.#ctor(System.Int32,System.Double)">
      <summary>
            Creates remote explicit destination.
            </summary>
      <param name="pageNumber">The destination page number of remote document.</param>
      <param name="top">The vertical coordinate top positioned at the top edge of the window.</param>
    </member>
    <member name="M:Aspose.Pdf.InteractiveFeatures.FitHExplicitDestination.#ctor(Aspose.Pdf.Engine.Data.IPdfArray)">
      <summary>
            Creates the instance and initializes it by engine destination object.
            </summary>
      <param name="engineDest">Engine destination object.</param>
    </member>
    <member name="M:Aspose.Pdf.InteractiveFeatures.FitHExplicitDestination.ToString">
      <summary>
            Converts the object state into string value. Example: "1 FitH 100".
            </summary>
      <returns>String value representing object state.</returns>
    </member>
    <member name="P:Aspose.Pdf.InteractiveFeatures.FitHExplicitDestination.Top">
      <summary>
            Gets the vertical coordinate top positioned at the top edge of the window.
            </summary>
    </member>
    <member name="T:Aspose.Pdf.InteractiveFeatures.FitRExplicitDestination">
      <summary>
            Represents explicit destination that displays the page with its contents magnified just enough to fit the rectangle specified by the coordinates left, bottom, right, and topentirely within the window both horizontally and vertically. If the required horizontal and vertical magnification factors are different, use the smaller of the two, centering the rectangle within the window in the other dimension. A null value for any of the parameters may result in unpredictable behavior.
            </summary>
    </member>
    <member name="M:Aspose.Pdf.InteractiveFeatures.FitRExplicitDestination.#ctor(Aspose.Pdf.Page,System.Double,System.Double,System.Double,System.Double)">
      <summary>
            Creates local explicit destination.
            </summary>
      <param name="page">The destination page object.</param>
      <param name="left">Left horizontal coordinate of visible rectangle.</param>
      <param name="bottom">Bottom vertical coordinate of visible rectangle.</param>
      <param name="right">Right horizontal coordinate of visible rectangle.</param>
      <param name="top">Top vertical coordinate of visible rectangle.</param>
    </member>
    <member name="M:Aspose.Pdf.InteractiveFeatures.FitRExplicitDestination.#ctor(Aspose.Pdf.Document,System.Int32,System.Double,System.Double,System.Double,System.Double)">
      <summary>
            Creates remote explicit destination.
            </summary>
      <param name="document">The parent document that contains this object.</param>
      <param name="pageNumber">The destination page number of remote document.</param>
      <param name="left">Left horizontal coordinate of visible rectangle.</param>
      <param name="bottom">Bottom vertical coordinate of visible rectangle.</param>
      <param name="right">Right horizontal coordinate of visible rectangle.</param>
      <param name="top">Top vertical coordinate of visible rectangle.</param>
    </member>
    <member name="M:Aspose.Pdf.InteractiveFeatures.FitRExplicitDestination.#ctor(System.Int32,System.Double,System.Double,System.Double,System.Double)">
      <summary>
            Creates remote explicit destination.
            </summary>
      <param name="pageNumber">The destination page number of remote document.</param>
      <param name="left">Left horizontal coordinate of visible rectangle.</param>
      <param name="bottom">Bottom vertical coordinate of visible rectangle.</param>
      <param name="right">Right horizontal coordinate of visible rectangle.</param>
      <param name="top">Top vertical coordinate of visible rectangle.</param>
    </member>
    <member name="M:Aspose.Pdf.InteractiveFeatures.FitRExplicitDestination.#ctor(Aspose.Pdf.Engine.Data.IPdfArray)">
      <summary>
            Creates the instance and initializes it by engine destination object.
            </summary>
      <param name="engineDest">Engine destination object.</param>
    </member>
    <member name="M:Aspose.Pdf.InteractiveFeatures.FitRExplicitDestination.ToString">
      <summary>
            Converts the object state into string value. Example: "1 FitR 100 200 300 400".
            </summary>
      <returns>String value representing object state.</returns>
    </member>
    <member name="P:Aspose.Pdf.InteractiveFeatures.FitRExplicitDestination.Left">
      <summary>
            Gets left horizontal coordinate of visible rectangle.
            </summary>
    </member>
    <member name="P:Aspose.Pdf.InteractiveFeatures.FitRExplicitDestination.Bottom">
      <summary>
            Gets bottom vertical coordinate of visible rectangle.
            </summary>
    </member>
    <member name="P:Aspose.Pdf.InteractiveFeatures.FitRExplicitDestination.Right">
      <summary>
            Gets right horizontal coordinate of visible rectangle.
            </summary>
    </member>
    <member name="P:Aspose.Pdf.InteractiveFeatures.FitRExplicitDestination.Top">
      <summary>
            Gets top vertical coordinate of visible rectangle.
            </summary>
    </member>
    <member name="T:Aspose.Pdf.InteractiveFeatures.FitVExplicitDestination">
      <summary>
            Represents explicit destination that displays the page with the horizontal coordinate left positioned at the left edge of the window and the contents of the page magnified just enough to fit the entire height of the page within the window. A null value for left specifies that the current value of that parameter is to be retained unchanged.
            </summary>
    </member>
    <member name="M:Aspose.Pdf.InteractiveFeatures.FitVExplicitDestination.#ctor(Aspose.Pdf.Page,System.Double)">
      <summary>
            Creates local explicit destination.
            </summary>
      <param name="page">The destination page object.</param>
      <param name="left">The horizontal coordinate left positioned at the left edge of the window.</param>
    </member>
    <member name="M:Aspose.Pdf.InteractiveFeatures.FitVExplicitDestination.#ctor(Aspose.Pdf.Document,System.Int32,System.Double)">
      <summary>
            Creates remote explicit destination.
            </summary>
      <param name="document">The parent document that contains this object.</param>
      <param name="pageNumber">The destination page number of remote document.</param>
      <param name="left">The horizontal coordinate left positioned at the left edge of the window.</param>
    </member>
    <member name="M:Aspose.Pdf.InteractiveFeatures.FitVExplicitDestination.#ctor(System.Int32,System.Double)">
      <summary>
            Creates remote explicit destination.
            </summary>
      <param name="pageNumber">The destination page number of remote document.</param>
      <param name="left">The horizontal coordinate left positioned at the left edge of the window.</param>
    </member>
    <member name="M:Aspose.Pdf.InteractiveFeatures.FitVExplicitDestination.#ctor(Aspose.Pdf.Engine.Data.IPdfArray)">
      <summary>
            Creates the instance and initializes it by engine destination object.
            </summary>
      <param name="engineDest">Engine destination object.</param>
    </member>
    <member name="M:Aspose.Pdf.InteractiveFeatures.FitVExplicitDestination.ToString">
      <summary>
            Converts the object state into string value. Example: "1 FitV 100".
            </summary>
      <returns>String value representing object state.</returns>
    </member>
    <member name="P:Aspose.Pdf.InteractiveFeatures.FitVExplicitDestination.Left">
      <summary>
            Gets the horizontal coordinate left positioned at the left edge of the window.
            </summary>
    </member>
    <member name="T:Aspose.Pdf.InteractiveFeatures.Forms.FormType">
      <summary>
            Enumeration of posible types of Acro Form.
            </summary>
    </member>
    <member name="F:Aspose.Pdf.InteractiveFeatures.Forms.FormType.Standard">
      <summary>
            Standard AcroForm.
            </summary>
    </member>
    <member name="F:Aspose.Pdf.InteractiveFeatures.Forms.FormType.Static">
      <summary>
            Static XFA form.
            </summary>
    </member>
    <member name="F:Aspose.Pdf.InteractiveFeatures.Forms.FormType.Dynamic">
      <summary>
            Dynamic XFA form.
            </summary>
    </member>
    <member name="T:Aspose.Pdf.InteractiveFeatures.Forms.XFA">
      <summary>
            Represents XML form regarding XML Forms Architecture (XFA).
            </summary>
    </member>
    <member name="M:Aspose.Pdf.InteractiveFeatures.Forms.XFA.GetFieldTemplate(System.String,System.String@)">
      <summary>
            Returns field template node. 
            </summary>
      <param name="fieldName">Field full path</param>
      <returns>Field template node.</returns>
    </member>
    <member name="M:Aspose.Pdf.InteractiveFeatures.Forms.XFA.GetFieldTemplate(System.String)">
      <summary>
            Returns XML node of XFA field tempalte. 
            </summary>
      <param name="fieldName">Path of the field which template must be found.</param>
      <returns>XL node with field template.</returns>
    </member>
    <member name="M:Aspose.Pdf.InteractiveFeatures.Forms.XFA.GetFieldTemplates">
      <summary>
            Returns list of all field templates on XFA form.
            </summary>
      <returns>List of field templates.</returns>
    </member>
    <member name="P:Aspose.Pdf.InteractiveFeatures.Forms.XFA.Template">
      <summary>
            XFA Template component of an XFA form.
            </summary>
    </member>
    <member name="P:Aspose.Pdf.InteractiveFeatures.Forms.XFA.Datasets">
      <summary>
            XFA Datasets component of an XFA form.
            </summary>
    </member>
    <member name="P:Aspose.Pdf.InteractiveFeatures.Forms.XFA.Config">
      <summary>
            XFA Config component of an XFA form.
            </summary>
    </member>
    <member name="P:Aspose.Pdf.InteractiveFeatures.Forms.XFA.XDP">
      <summary>
            XML Data Package (all XFA form components within a surrounding XML container).
            </summary>
    </member>
    <member name="P:Aspose.Pdf.InteractiveFeatures.Forms.XFA.Item(System.String)">
      <summary>
            Gets of sets data node value according <paramref name="path" />.
            </summary>
      <param name="path">
            Data node path, e.g. form1[0].Subform1[0].Subform2[0].Subform3[0].TextField[0]. 
            Be sure to include indices even if data contains only single occurences of each nodes, 
            i.e. write node1[0].node2[0]... instead of node1.node2...
            </param>
      <returns>Data node value.</returns>
    </member>
    <member name="P:Aspose.Pdf.InteractiveFeatures.Forms.XFA.FieldNames">
      <summary>
            List of field names in the form template.
            </summary>
    </member>
    <member name="P:Aspose.Pdf.InteractiveFeatures.Forms.XFA.NamespaceManager">
      <summary>
            Gets the namespace for the XFA form. The following namepsaces are defined: "data" for form data and "tpl" for form template. 
            </summary>
    </member>
    <member name="T:Aspose.Pdf.InteractiveFeatures.XYZExplicitDestination">
      <summary>
            Represents explicit destination that displays the page with the coordinates (left, top) positioned at the upper-left corner of the window and the contents of the page magnified by the factor zoom. A null value for any of the parameters left, top, or zoom specifies that the current value of that parameter is to be retained unchanged. A zoom value of 0 has the same meaning as a null value.
            </summary>
      <example>
        <code lang="C#">
            Document doc = new Document("example.pdf");
            XYZExplicitDestination dest = (XYZExplicitDestination)doc.Outlines[1].Destination;
            string left = dest.Left;
            string top = dest.Top;
            string zoom = dest.Zoom;
            </code>
      </example>
    </member>
    <member name="M:Aspose.Pdf.InteractiveFeatures.XYZExplicitDestination.#ctor(Aspose.Pdf.Page,System.Double,System.Double,System.Double)">
      <summary>
            Creates local explicit destination.
            </summary>
      <param name="page">The destination page object.</param>
      <param name="left">Left horizontal coordinate of the upper-left corner of the window.</param>
      <param name="top">Top vertical coordinate of the upper-left corner of the window.</param>
      <param name="zoom">Zoom factor.</param>
    </member>
    <member name="M:Aspose.Pdf.InteractiveFeatures.XYZExplicitDestination.#ctor(Aspose.Pdf.Document,System.Int32,System.Double,System.Double,System.Double)">
      <summary>
            Creates remote explicit destination.
            </summary>
      <param name="document">The parent document that contains this object.</param>
      <param name="pageNumber">The destination page number of remote document.</param>
      <param name="left">Left horizontal coordinate of the upper-left corner of the window.</param>
      <param name="top">Top vertical coordinate of the upper-left corner of the window.</param>
      <param name="zoom">Zoom factor.</param>
    </member>
    <member name="M:Aspose.Pdf.InteractiveFeatures.XYZExplicitDestination.#ctor(System.Int32,System.Double,System.Double,System.Double)">
      <summary>
            Creates remote explicit destination.
            </summary>
      <param name="pageNumber">The destination page number of remote document.</param>
      <param name="left">Left horizontal coordinate of the upper-left corner of the window.</param>
      <param name="top">Top vertical coordinate of the upper-left corner of the window.</param>
      <param name="zoom">Zoom factor.</param>
    </member>
    <member name="M:Aspose.Pdf.InteractiveFeatures.XYZExplicitDestination.#ctor(Aspose.Pdf.Engine.Data.IPdfArray)">
      <summary>
            Creates the instance and initializes it by engine destination object.
            </summary>
      <param name="engineDest">Engine destination object.</param>
    </member>
    <member name="M:Aspose.Pdf.InteractiveFeatures.XYZExplicitDestination.ToString">
      <summary>
            Converts the object state into string value. Example: "1 XYZ 100 200 3".
            </summary>
      <returns>String value representing object state.</returns>
    </member>
    <member name="P:Aspose.Pdf.InteractiveFeatures.XYZExplicitDestination.Left">
      <summary>
            Gets left horizontal coordinate of the upper-left corner of the window.
            </summary>
    </member>
    <member name="P:Aspose.Pdf.InteractiveFeatures.XYZExplicitDestination.Top">
      <summary>
            Gets top vertical coordinate of the upper-left corner of the window.
            </summary>
    </member>
    <member name="P:Aspose.Pdf.InteractiveFeatures.XYZExplicitDestination.Zoom">
      <summary>
            Gets zoom factor.
            </summary>
    </member>
    <member name="T:Aspose.Pdf.InteractiveFeatures.Forms.BarcodeField">
      <summary>
            Class represents barcode field.
            </summary>
    </member>
    <member name="T:Aspose.Pdf.InteractiveFeatures.Forms.TextBoxField">
      <summary>
            Class representing text box field.
            </summary>
    </member>
    <member name="T:Aspose.Pdf.InteractiveFeatures.Forms.Field">
      <summary>
            Base class for acro form fields.
            </summary>
    </member>
    <member name="M:Aspose.Pdf.InteractiveFeatures.Forms.Field.CopyTo(System.Array,System.Int32)">
      <summary>
            Copies subfields of this field into array starting from specified index.
            </summary>
      <param name="array">Array where field must be copied.</param>
      <param name="index">Starting index where fields will be copied.</param>
    </member>
    <member name="M:Aspose.Pdf.InteractiveFeatures.Forms.Field.GetEnumerator">
      <summary>
            Returns enumerator of contained fields.
            </summary>
      <returns>Enumerator.</returns>
    </member>
    <member name="M:Aspose.Pdf.InteractiveFeatures.Forms.Field.Flatten">
      <summary>
            Removes this field and place its value directly on the page.
            </summary>
    </member>
    <member name="M:Aspose.Pdf.InteractiveFeatures.Forms.Field.SetPosition(Aspose.Pdf.Point)">
      <summary>
            Set position of the field.
            </summary>
      <param name="point">
      </param>
    </member>
    <member name="P:Aspose.Pdf.InteractiveFeatures.Forms.Field.PartialName">
      <summary>
            Gets or sets partial name of the field.
            </summary>
    </member>
    <member name="P:Aspose.Pdf.InteractiveFeatures.Forms.Field.AlternateName">
      <summary>
            Gets or sets alternate name of the field (An alternate field 
            name that shall be used in place of the actual field name 
            wherever the field shall be identified in the user interface).
            Alternate name is used as field tooltip in Adobe Acrobat.
            </summary>
    </member>
    <member name="P:Aspose.Pdf.InteractiveFeatures.Forms.Field.MappingName">
      <summary>
            Gets or sets mapping name  of the field that shall be used when exporting interactive form field data from the document.
            </summary>
    </member>
    <member name="P:Aspose.Pdf.InteractiveFeatures.Forms.Field.Value">
      <summary>
            Gets or sets value of the field.
            </summary>
    </member>
    <member name="P:Aspose.Pdf.InteractiveFeatures.Forms.Field.IsSynchronized">
      <summary>
            Returns true if dictionary is synchronized.
            </summary>
    </member>
    <member name="P:Aspose.Pdf.InteractiveFeatures.Forms.Field.Count">
      <summary>
            Gets or sets number of subfields in this field. (For example number of items in radio button field).
            </summary>
    </member>
    <member name="P:Aspose.Pdf.InteractiveFeatures.Forms.Field.SyncRoot">
      <summary>
            Synchronization object.
            </summary>
    </member>
    <member name="P:Aspose.Pdf.InteractiveFeatures.Forms.Field.IsGroup">
      <summary>
            Gets or sets boolean value which indicates is this field non-terminal field i.e. group of fields.
            </summary>
    </member>
    <member name="P:Aspose.Pdf.InteractiveFeatures.Forms.Field.Item(System.String)">
      <summary>
            Gets subfield contained in this field by name of the subfield.
            </summary>
      <param name="name">Contained subfield name.</param>
      <returns>Field instance.</returns>
    </member>
    <member name="P:Aspose.Pdf.InteractiveFeatures.Forms.Field.Item(System.Int32)">
      <summary>
            Gets subfield contained in this field by index.
            </summary>
      <param name="index">Index of the reuqested subfield.</param>
      <returns>Field instance.</returns>
    </member>
    <member name="P:Aspose.Pdf.InteractiveFeatures.Forms.Field.AnnotationIndex">
      <summary>
            Gets or sets index of this anotation on the page.
            </summary>
    </member>
    <member name="P:Aspose.Pdf.InteractiveFeatures.Forms.Field.PageIndex">
      <summary>
            Gets index of page which contains this field.
            </summary>
    </member>
    <member name="P:Aspose.Pdf.InteractiveFeatures.Forms.Field.Rect">
      <summary>
            Gets or sets the field rectangle.
            </summary>
    </member>
    <member name="P:Aspose.Pdf.InteractiveFeatures.Forms.Field.IsSharedField">
      <summary>
            Property for Generator support. Used when field is added to header or footer. If true, this field will created once and it's appearance will be visible on all pages of the document. If false, separated field will be created for every document page. 
            </summary>
    </member>
    <member name="M:Aspose.Pdf.InteractiveFeatures.Forms.TextBoxField.#ctor">
      <summary>
            Create instance of TextBoxField.
            </summary>
    </member>
    <member name="M:Aspose.Pdf.InteractiveFeatures.Forms.TextBoxField.#ctor(Aspose.Pdf.Page,Aspose.Pdf.Rectangle)">
      <summary>
            Constructor of TextBox field.
            </summary>
      <param name="page">Page where text field is placed.</param>
      <param name="rect">Rectangle where the text field will be placed on the page.</param>
    </member>
    <member name="M:Aspose.Pdf.InteractiveFeatures.Forms.TextBoxField.AddImage(System.Drawing.Image)">
      <summary>
            Adds image into the field resources an draws it.
            </summary>
      <param name="image">
            Image to add into text field.
            </param>
    </member>
    <member name="M:Aspose.Pdf.InteractiveFeatures.Forms.TextBoxField.AddBarcode(System.String)">
      <summary>
            Adds barcode 128 into the field. 
            Field value will be changed onto the code and field become read only.
            </summary>
      <param name="code">
            The text to generate barcode 128.
            </param>
    </member>
    <member name="P:Aspose.Pdf.InteractiveFeatures.Forms.TextBoxField.Multiline">
      <summary>
            Gets or sets multiline flag of the field. If Multiline is true field can contain multiple lines of text.
            </summary>
    </member>
    <member name="P:Aspose.Pdf.InteractiveFeatures.Forms.TextBoxField.SpellCheck">
      <summary>
            Gets or sets spellcheck flag for field. If true field shall be spell checked.
            </summary>
    </member>
    <member name="P:Aspose.Pdf.InteractiveFeatures.Forms.TextBoxField.Scrollable">
      <summary>
            Gets or sets scrollable flag of field. If true field can be scrolled. 
            </summary>
    </member>
    <member name="P:Aspose.Pdf.InteractiveFeatures.Forms.TextBoxField.ForceCombs">
      <summary>
            Gets or sets flag which indicates is field divided into spaced positions.
            </summary>
    </member>
    <member name="P:Aspose.Pdf.InteractiveFeatures.Forms.TextBoxField.MaxLen">
      <summary>
            Gets or sets maximum length of text in the field. 
            </summary>
    </member>
    <member name="P:Aspose.Pdf.InteractiveFeatures.Forms.TextBoxField.Value">
      <summary>
            Gets or sets value of the field.
            </summary>
    </member>
    <member name="M:Aspose.Pdf.InteractiveFeatures.Forms.BarcodeField.#ctor(Aspose.Pdf.Page,Aspose.Pdf.Rectangle)">
      <summary>
            Initializes new instance of the <see cref="T:Aspose.Pdf.InteractiveFeatures.Forms.BarcodeField" /> class.
            </summary>
      <param name="page">
            The page where to place new barcode.
            </param>
      <param name="rect">
            Barcode sizes given in rectangle.
            </param>
    </member>
    <member name="P:Aspose.Pdf.InteractiveFeatures.Forms.BarcodeField.Resolution">
      <summary>
            Gets the resolution, in dots-per-inch (dpi), at which the barcode object is rendered.
            </summary>
    </member>
    <member name="P:Aspose.Pdf.InteractiveFeatures.Forms.BarcodeField.Caption">
      <summary>
            Gets the caption of the barcode object.
            </summary>
    </member>
    <member name="P:Aspose.Pdf.InteractiveFeatures.Forms.BarcodeField.Symbology">
      <summary>
            Specifies which barcode or glyph technology is to be used on this annotation,
            see <see cref="P:Aspose.Pdf.InteractiveFeatures.Forms.BarcodeField.Symbology" /> for details.
            </summary>
    </member>
    <member name="P:Aspose.Pdf.InteractiveFeatures.Forms.BarcodeField.XSymWidth">
      <summary>
            Gets The horizontal distance, in pixels, between two barcode modules.
            </summary>
    </member>
    <member name="P:Aspose.Pdf.InteractiveFeatures.Forms.BarcodeField.XSymHeight">
      <summary>
            Gets the the vertical distance between two barcode modules, measured in pixels. 
            The ratio XSymHeight/XSymWidth shall be an integer value. 
            For PDF417, the acceptable ratio range is from 1 to 4. For QRCode and DataMatrix, 
            this ratio shall always be 1
            </summary>
    </member>
    <member name="P:Aspose.Pdf.InteractiveFeatures.Forms.BarcodeField.ECC">
      <summary>
            Gets an integer value representing the error correction coefficient. 
            For PDF417, shall be from 0 to 8. For QRCode, shall be from 0 to 3 
            (0 for ‘L’, 1 for ‘M’, 2 for ‘Q’, and 3 for ‘H’).
            </summary>
    </member>
    <member name="T:Aspose.Pdf.InteractiveFeatures.Forms.BoxStyle">
      <summary>
            Represents styles of check box
            </summary>
    </member>
    <member name="F:Aspose.Pdf.InteractiveFeatures.Forms.BoxStyle.Circle">
      <summary>
            Circle style.
            </summary>
    </member>
    <member name="F:Aspose.Pdf.InteractiveFeatures.Forms.BoxStyle.Check">
      <summary>
            Check style.
            </summary>
    </member>
    <member name="F:Aspose.Pdf.InteractiveFeatures.Forms.BoxStyle.Cross">
      <summary>
            Cross style.
            </summary>
    </member>
    <member name="F:Aspose.Pdf.InteractiveFeatures.Forms.BoxStyle.Diamond">
      <summary>
            Diamond style.
            </summary>
    </member>
    <member name="F:Aspose.Pdf.InteractiveFeatures.Forms.BoxStyle.Square">
      <summary>
            Square style.
            </summary>
    </member>
    <member name="F:Aspose.Pdf.InteractiveFeatures.Forms.BoxStyle.Star">
      <summary>
            Star style.
            </summary>
    </member>
    <member name="T:Aspose.Pdf.InteractiveFeatures.Forms.ButtonField">
      <summary>
            Class represnets push button field.
            </summary>
    </member>
    <member name="M:Aspose.Pdf.InteractiveFeatures.Forms.ButtonField.#ctor(Aspose.Pdf.Engine.Data.IPdfObject,Aspose.Pdf.Document)">
      <summary>
            Constructor for ButtonField class
            </summary>
      <param name="annotation">Annotation object which describes button.</param>
      <param name="document">Document which owns button.</param>
    </member>
    <member name="M:Aspose.Pdf.InteractiveFeatures.Forms.ButtonField.AddImage(System.Drawing.Image)">
      <summary>
            Adds image into the field resources an draws it.
            </summary>
      <param name="image">
            Image ot add into text field.
            </param>
    </member>
    <member name="M:Aspose.Pdf.InteractiveFeatures.Forms.ButtonField.#ctor(Aspose.Pdf.Page,Aspose.Pdf.Rectangle)">
      <summary>
            ButtonField constructor.
            </summary>
      <param name="page">Page where button will be placed.</param>
      <param name="rect">Rectangle where button is placed on the page.</param>
    </member>
    <member name="P:Aspose.Pdf.InteractiveFeatures.Forms.ButtonField.NormalCaption">
      <summary>
            Gets or sets normal caption.
            </summary>
    </member>
    <member name="P:Aspose.Pdf.InteractiveFeatures.Forms.ButtonField.RolloverCaption">
      <summary>
            Gets or sets rollover caption of button which shall be displayed when the user rolls the cursor 
            into its active area without pressing the mouse button.
            </summary>
    </member>
    <member name="P:Aspose.Pdf.InteractiveFeatures.Forms.ButtonField.AlternateCaption">
      <summary>
            Gets or sets alternate caption of the button which shall be displayed 
            when the mouse button is pressed within its active area.
            </summary>
    </member>
    <member name="P:Aspose.Pdf.InteractiveFeatures.Forms.ButtonField.NormalIcon">
      <summary>
            Gets or sets normal icon of the button which shall be displayed when it is not interacting with the user.
            </summary>
    </member>
    <member name="P:Aspose.Pdf.InteractiveFeatures.Forms.ButtonField.RolloverIcon">
      <summary>
            Gets or sets rollover icon of the button which shall be displayed when the user 
            rolls the cursor into its active area without pressing the mouse button.
            </summary>
    </member>
    <member name="P:Aspose.Pdf.InteractiveFeatures.Forms.ButtonField.AlternateIcon">
      <summary>
            Gets or sets alternate icon which shall be displayed when the mouse button is pressed within its active area.
            </summary>
    </member>
    <member name="P:Aspose.Pdf.InteractiveFeatures.Forms.ButtonField.IconFit">
      <summary>
            Gets icon fit object specifying how the widget annotation's icon shall be displayed within its annotation rectangle.
            </summary>
    </member>
    <member name="P:Aspose.Pdf.InteractiveFeatures.Forms.ButtonField.ICPosition">
      <summary>
            Gets or sets icon caption position.
            </summary>
    </member>
    <member name="T:Aspose.Pdf.InteractiveFeatures.Forms.CheckboxField">
      <summary>
            Class representing checkbox field
            </summary>
    </member>
    <member name="M:Aspose.Pdf.InteractiveFeatures.Forms.CheckboxField.#ctor(Aspose.Pdf.Page,Aspose.Pdf.Rectangle)">
      <summary>
            Constructor for CheckboxField class.
            </summary>
      <param name="page">Page where check box will be placed.</param>
      <param name="rect">Position and size of the check box.</param>
    </member>
    <member name="M:Aspose.Pdf.InteractiveFeatures.Forms.CheckboxField.#ctor">
      <summary>
            Create instance of CheckboxField.
            </summary>
    </member>
    <member name="P:Aspose.Pdf.InteractiveFeatures.Forms.CheckboxField.AllowedStates">
      <summary>
            Returns list of allowed states. 
            </summary>
      <returns>
      </returns>
    </member>
    <member name="P:Aspose.Pdf.InteractiveFeatures.Forms.CheckboxField.Style">
      <summary>
            Gets or sets style of check box.
            </summary>
    </member>
    <member name="P:Aspose.Pdf.InteractiveFeatures.Forms.CheckboxField.ActiveState">
      <summary>
            Gets or sets current annotation appearance state.
            </summary>
    </member>
    <member name="P:Aspose.Pdf.InteractiveFeatures.Forms.CheckboxField.Checked">
      <summary>
            Gets or sets state of check box.  
            </summary>
    </member>
    <member name="P:Aspose.Pdf.InteractiveFeatures.Forms.CheckboxField.Value">
      <summary>
            Gets or sets value of check box field.
            </summary>
    </member>
    <member name="T:Aspose.Pdf.InteractiveFeatures.Forms.ChoiceField">
      <summary>
            Represents base class for choice fields.
            </summary>
    </member>
    <member name="M:Aspose.Pdf.InteractiveFeatures.Forms.ChoiceField.#ctor(Aspose.Pdf.Page,Aspose.Pdf.Rectangle)">
      <summary>
            Constructor for ChoiceField.
            </summary>
    </member>
    <member name="M:Aspose.Pdf.InteractiveFeatures.Forms.ChoiceField.AddOption(System.String)">
      <summary>
            Adds new option with specified name. 
            </summary>
      <param name="optionName">Name of the new option.</param>
    </member>
    <member name="M:Aspose.Pdf.InteractiveFeatures.Forms.ChoiceField.AddOption(System.String,System.String)">
      <summary>
            Adds new option with specified export value and name.
            </summary>
      <param name="export">Export value.</param>
      <param name="name">Name of the new option.</param>
    </member>
    <member name="M:Aspose.Pdf.InteractiveFeatures.Forms.ChoiceField.DeleteOption(System.String)">
      <summary>
            Deletes option by its name.
            </summary>
      <param name="optionName">Name of the option which must be deleted.</param>
    </member>
    <member name="P:Aspose.Pdf.InteractiveFeatures.Forms.ChoiceField.CommitImmediately">
      <summary>
            Gets or sets commit on selection change flag.
            </summary>
    </member>
    <member name="P:Aspose.Pdf.InteractiveFeatures.Forms.ChoiceField.MultiSelect">
      <summary>
            Gets or sets multiselection flag.
            </summary>
    </member>
    <member name="P:Aspose.Pdf.InteractiveFeatures.Forms.ChoiceField.Selected">
      <summary>
            Gets or sets index of selected option. This property allows to change selection. 
            </summary>
    </member>
    <member name="P:Aspose.Pdf.InteractiveFeatures.Forms.ChoiceField.SelectedItems">
      <summary>
            Gets or sets array of selected items. For multiselect list array contains more then one item. For single selection list it contains single item.
            </summary>
    </member>
    <member name="P:Aspose.Pdf.InteractiveFeatures.Forms.ChoiceField.Options">
      <summary>
            Gets collection of choice options.
            </summary>
    </member>
    <member name="P:Aspose.Pdf.InteractiveFeatures.Forms.ChoiceField.Value">
      <summary>
            Gets or sets value of the field.
            </summary>
    </member>
    <member name="T:Aspose.Pdf.InteractiveFeatures.Forms.ComboBoxField">
      <summary>
            Class representing Combobox field of the form.
            </summary>
    </member>
    <member name="P:Aspose.Pdf.InteractiveFeatures.Forms.ComboBoxField.Editable">
      <summary>
            Gets or sets editable status of the field.
            </summary>
    </member>
    <member name="P:Aspose.Pdf.InteractiveFeatures.Forms.ComboBoxField.SpellCheck">
      <summary>
            Gets or sets spellchaeck activiity status.
            </summary>
    </member>
    <member name="P:Aspose.Pdf.InteractiveFeatures.Forms.ComboBoxField.Selected">
      <summary>
            Gets or sets index of currently selected item in combo box list.
            </summary>
    </member>
    <member name="T:Aspose.Pdf.InteractiveFeatures.Forms.Form">
      <summary>
            Class representing form object.
            </summary>
    </member>
    <member name="M:Aspose.Pdf.InteractiveFeatures.Forms.Form.CopyTo(System.Array,System.Int32)">
      <summary>
            Copies fields placed on the form into array.
            </summary>
      <param name="array">Array where fields must be placed.</param>
      <param name="index">Starting index.</param>
    </member>
    <member name="M:Aspose.Pdf.InteractiveFeatures.Forms.Form.GetEnumerator">
      <summary>
            Gets enumeration of form fields.
            </summary>
      <returns>Field enumerator.</returns>
    </member>
    <member name="M:Aspose.Pdf.InteractiveFeatures.Forms.Form.Add(Aspose.Pdf.InteractiveFeatures.Forms.Field,System.Int32)">
      <summary>
            Adds field on the form.
            </summary>
      <param name="field">Field which must be added.</param>
      <param name="pageNumber">Page index where added field will be placed.</param>
    </member>
    <member name="M:Aspose.Pdf.InteractiveFeatures.Forms.Form.Add(Aspose.Pdf.InteractiveFeatures.Forms.Field)">
      <summary>
            Adds field on the form.
            </summary>
      <param name="field">Field which must be added.</param>
    </member>
    <member name="M:Aspose.Pdf.InteractiveFeatures.Forms.Form.Delete(Aspose.Pdf.InteractiveFeatures.Forms.Field)">
      <summary>
            Delete field from the form.
            </summary>
      <param name="field">Field which must be deleted.</param>
    </member>
    <member name="M:Aspose.Pdf.InteractiveFeatures.Forms.Form.Delete(System.String)">
      <summary>
            Deletes field from the form by its name.
            </summary>
      <param name="fieldName">Name of the filed which must be deleted.</param>
    </member>
    <member name="M:Aspose.Pdf.InteractiveFeatures.Forms.Form.Flatten">
      <summary>
            Removes all form fields and place their values directly on the page.
            </summary>
    </member>
    <member name="M:Aspose.Pdf.InteractiveFeatures.Forms.Form.Add(Aspose.Pdf.InteractiveFeatures.Forms.Field,System.String,System.Int32)">
      <summary>
            Adds new field to the form; If this field is already placed on other or this form, the copy of field is created. 
            </summary>
      <param name="field">Field name.</param>
      <param name="partialName">Name of field on the form.</param>
      <param name="pageNumber">Page number where field will be added.</param>
      <returns>Added field returned. If copy of the field was created it will be returned.</returns>
    </member>
    <member name="M:Aspose.Pdf.InteractiveFeatures.Forms.Form.AddFieldAppearance(Aspose.Pdf.InteractiveFeatures.Forms.Field,System.Int32,Aspose.Pdf.Rectangle)">
      <summary>
            Adds additional appearance of the field to specified page of the document in the specified location. 
            </summary>
      <param name="field">
      </param>
      <param name="pageNumber">
      </param>
      <param name="rect">
      </param>
    </member>
    <member name="M:Aspose.Pdf.InteractiveFeatures.Forms.Form.AssignXfa(System.Xml.XmlDocument)">
      <summary>
            Sets XFA of the form to specified value.
            </summary>
      <param name="xml">
      </param>
    </member>
    <member name="M:Aspose.Pdf.InteractiveFeatures.Forms.Form.GetFieldsInRect(Aspose.Pdf.Rectangle)">
      <summary>
            Returns fields inside of specified rectangle.
            </summary>
      <param name="rect">Rectangle where fields should be found.</param>
      <returns>Array with found fields.</returns>
    </member>
    <member name="P:Aspose.Pdf.InteractiveFeatures.Forms.Form.IsSynchronized">
      <summary>
            Returns true if object is thread-safe.
            </summary>
    </member>
    <member name="P:Aspose.Pdf.InteractiveFeatures.Forms.Form.SyncRoot">
      <summary>
            Returns synchronization object.
            </summary>
    </member>
    <member name="P:Aspose.Pdf.InteractiveFeatures.Forms.Form.Count">
      <summary>
            Gets number of the fields on this form.
            </summary>
    </member>
    <member name="P:Aspose.Pdf.InteractiveFeatures.Forms.Form.DefaultResources">
      <summary>
            Gets default resources placed on this form.
            </summary>
    </member>
    <member name="P:Aspose.Pdf.InteractiveFeatures.Forms.Form.DefaultAppearance">
      <summary>
            Gets or sets default appearance of the form (object which describes default font, text size and color for fields on the form).
            </summary>
    </member>
    <member name="P:Aspose.Pdf.InteractiveFeatures.Forms.Form.XFA">
      <summary>
            Gets XFA data of the form (if presents).
            </summary>
    </member>
    <member name="P:Aspose.Pdf.InteractiveFeatures.Forms.Form.Type">
      <summary>
            Gets type of the form. Possible values are: Standard, Static, Dynamic.
            </summary>
    </member>
    <member name="P:Aspose.Pdf.InteractiveFeatures.Forms.Form.Item(System.String)">
      <summary>
            Gets field of the form by field name. Throws excpetion if the field was not found.
            </summary>
      <param name="name">Name of the field.</param>
      <returns>Retreived field.</returns>
    </member>
    <member name="P:Aspose.Pdf.InteractiveFeatures.Forms.Form.Item(System.Int32)">
      <summary>
            Gets field of the form by field index.
            </summary>
      <param name="index">Index of the field.</param>
      <returns>Retreived field.</returns>
    </member>
    <member name="P:Aspose.Pdf.InteractiveFeatures.Forms.Form.Fields">
      <summary>
            Gets list of all fields in lowest level of hierarhical form.
            </summary>
    </member>
    <member name="T:Aspose.Pdf.InteractiveFeatures.Forms.ListBoxField">
      <summary>
            Class represents ListBox field.
            </summary>
    </member>
    <member name="M:Aspose.Pdf.InteractiveFeatures.Forms.ListBoxField.#ctor(Aspose.Pdf.Engine.Data.IPdfObject,Aspose.Pdf.Document)">
      <summary>
            Constructor for ListBoxField class.
            </summary>
      <param name="annotation">List box annotation.</param>
      <param name="document">Document which contains list box.</param>
    </member>
    <member name="M:Aspose.Pdf.InteractiveFeatures.Forms.ListBoxField.#ctor(Aspose.Pdf.Page,Aspose.Pdf.Rectangle)">
      <summary>
            Creates new ListBox field.
            </summary>
      <param name="page">Page where list box will be placed.</param>
      <param name="rect">Rectangle where list box will be placed on the page.</param>
    </member>
    <member name="P:Aspose.Pdf.InteractiveFeatures.Forms.ListBoxField.TopIndex">
      <summary>
            Gets or sets index of the top visible element of the list.
            </summary>
    </member>
    <member name="P:Aspose.Pdf.InteractiveFeatures.Forms.ListBoxField.Selected">
      <summary>
            Gets or sets index of the selected item. Items are numbered from 1.
            </summary>
    </member>
    <member name="P:Aspose.Pdf.InteractiveFeatures.Forms.ListBoxField.SelectedItems">
      <summary>
            Gets or sets array of the selected items in the multiselect list. For single-select list returns array with single item.
            </summary>
    </member>
    <member name="T:Aspose.Pdf.InteractiveFeatures.Forms.Option">
      <summary>
            Class represents option of choice field.
            </summary>
    </member>
    <member name="P:Aspose.Pdf.InteractiveFeatures.Forms.Option.Value">
      <summary>
            Gets or sets option export value.
            </summary>
    </member>
    <member name="P:Aspose.Pdf.InteractiveFeatures.Forms.Option.Name">
      <summary>
            Gets or sets name of option.
            </summary>
    </member>
    <member name="P:Aspose.Pdf.InteractiveFeatures.Forms.Option.Selected">
      <summary>
            Gets or sets selected status of option. Returns true if option is selected.
            </summary>
    </member>
    <member name="P:Aspose.Pdf.InteractiveFeatures.Forms.Option.Index">
      <summary>
            Gets index of the option. 
            </summary>
    </member>
    <member name="T:Aspose.Pdf.InteractiveFeatures.Forms.OptionCollection">
      <summary>
            Class representing collection of options of the choice field. 
            </summary>
    </member>
    <member name="M:Aspose.Pdf.InteractiveFeatures.Forms.OptionCollection.CopyTo(System.Array,System.Int32)">
      <summary>
            Copies options into array.
            </summary>
      <param name="array">Array where options wil lbe copied.</param>
      <param name="index">Startign index in array.</param>
    </member>
    <member name="M:Aspose.Pdf.InteractiveFeatures.Forms.OptionCollection.GetEnumerator">
      <summary>
            Returns enumerator for options in collection.
            </summary>
      <returns>Options enumerator.</returns>
    </member>
    <member name="M:Aspose.Pdf.InteractiveFeatures.Forms.OptionCollection.get(System.Int32)">
      <summary>
            Gets option by index.
            </summary>
      <param name="index">Option index. Index should be in range [1..n] where n is options count.</param>
      <returns>Retreived option.</returns>
    </member>
    <member name="M:Aspose.Pdf.InteractiveFeatures.Forms.OptionCollection.get(System.String)">
      <summary>
            Gets option from colleciton by option name.
            </summary>
      <param name="name">Option name.</param>
      <returns>Retreived option.</returns>
    </member>
    <member name="P:Aspose.Pdf.InteractiveFeatures.Forms.OptionCollection.IsSynchronized">
      <summary>
            Returns true of object is synchronized.
            </summary>
    </member>
    <member name="P:Aspose.Pdf.InteractiveFeatures.Forms.OptionCollection.SyncRoot">
      <summary>
            Synchronization object of the collection.
            </summary>
    </member>
    <member name="P:Aspose.Pdf.InteractiveFeatures.Forms.OptionCollection.Count">
      <summary>
            Gets number of options.
            </summary>
    </member>
    <member name="P:Aspose.Pdf.InteractiveFeatures.Forms.OptionCollection.Item(System.Int32)">
      <summary>
            Gets option by index.
            </summary>
      <param name="index">Index of the option.</param>
      <returns>Option on the specified index.</returns>
    </member>
    <member name="P:Aspose.Pdf.InteractiveFeatures.Forms.OptionCollection.Item(System.String)">
      <summary>
            Gets option by its name.
            </summary>
      <param name="name">Name of the option.</param>
      <returns>Found option.</returns>
    </member>
    <member name="T:Aspose.Pdf.InteractiveFeatures.Forms.PasswordBoxField">
      <summary>
            Class descibes text field for entering password.
            </summary>
    </member>
    <member name="T:Aspose.Pdf.InteractiveFeatures.Forms.PKCS1">
      <summary>
            Represents signature object regarding PKCS#1 standard.
            RSA encryption algorithm and SHA-1 digest method are used for signing.
            </summary>
    </member>
    <member name="T:Aspose.Pdf.InteractiveFeatures.Forms.Signature">
      <summary>
            An abstract class which represents signature object in the pdf document. 
            Signatures are fields with values of signature objects, the last contain data which is used to
            verify the document validity.
            </summary>
    </member>
    <member name="M:Aspose.Pdf.InteractiveFeatures.Forms.Signature.Verify">
      <summary>
            Verify the document regarding this signature and return true if document is valid 
            or otherwise false.
            </summary>
    </member>
    <member name="M:Aspose.Pdf.InteractiveFeatures.Forms.Signature.#ctor(System.IO.Stream)">
      <summary>
            Initializes signature object with image.
            </summary>
      <param name="image">
            Image data.
            </param>
    </member>
    <member name="M:Aspose.Pdf.InteractiveFeatures.Forms.Signature.#ctor(Aspose.Pdf.Engine.Data.IPdfDictionary,Aspose.Pdf.Engine.IPdfDocument)">
      <summary>
            Initialize signature object from signature dictionary. Then this object will be used for verifying the document.
            </summary>
      <param name="signature">
            Signature dictionary.
            </param>
      <param name="document">
            The document, it is used then to get file data in order to verify signature.
            </param>
    </member>
    <member name="M:Aspose.Pdf.InteractiveFeatures.Forms.Signature.#ctor">
      <summary>
            Inititalizes new instance of the <see cref="T:Aspose.Pdf.InteractiveFeatures.Forms.Signature" /> class.
            </summary>
    </member>
    <member name="M:Aspose.Pdf.InteractiveFeatures.Forms.Signature.#ctor(System.String,System.String)">
      <summary>
            Inititalizes new instance of the <see cref="T:Aspose.Pdf.InteractiveFeatures.Forms.Signature" /> class.
            </summary>
      <param name="pfx">
            Pfx file which contains certificate for signing.
            </param>
      <param name="password">
            Password to get access to the private key in the certificate.
            </param>
    </member>
    <member name="M:Aspose.Pdf.InteractiveFeatures.Forms.Signature.#ctor(System.IO.Stream,System.String)">
      <summary>
            Inititalizes new instance of the <see cref="T:Aspose.Pdf.InteractiveFeatures.Forms.Signature" /> class.
            </summary>
      <param name="pfx">
            Stream with certificate data organized as pfx.
            </param>
      <param name="password">
            Password to get access to the private key in the certificate.
            </param>
    </member>
    <member name="P:Aspose.Pdf.InteractiveFeatures.Forms.Signature.Authority">
      <summary>
            The name of the person or authority signing the document.
            </summary>
    </member>
    <member name="P:Aspose.Pdf.InteractiveFeatures.Forms.Signature.Date">
      <summary>
            The time of signing.
            </summary>
    </member>
    <member name="P:Aspose.Pdf.InteractiveFeatures.Forms.Signature.Location">
      <summary>
            The CPU host name or physical location of the signing.
            </summary>
    </member>
    <member name="P:Aspose.Pdf.InteractiveFeatures.Forms.Signature.Reason">
      <summary>
            The reason for the signing, such as (I agreeРІР‚В¦).
            </summary>
    </member>
    <member name="P:Aspose.Pdf.InteractiveFeatures.Forms.Signature.ContactInfo">
      <summary>
            Information provided by the signer to enable a recipient to contact the signer 
            to verify the signature, e.g. a phone number.
            </summary>
    </member>
    <member name="P:Aspose.Pdf.InteractiveFeatures.Forms.Signature.ByteRange">
      <summary>
             An array of pairs of integers (starting byte offset, length in bytes) 
             that shall describe the exact byte range for the digest calculation.
             </summary>
    </member>
    <member name="P:Aspose.Pdf.InteractiveFeatures.Forms.Signature.ShowProperties">
      <summary>
            Force to show/hide signature properties.
            In case ShowProperties is true signature field has predefined format of appearance (strings to represent):
            -------------------------------------------
            Digitally signed by {certificate subject}
            Date: {signature.Date}
            Reason: {signature.Reason}
            Location: {signature.Location}
            -------------------------------------------
            where {X} is placeholder for X value. Also signature can have image, in this case listed strings are placed over image.
            ShowProperties is true by default.
            </summary>
    </member>
    <member name="M:Aspose.Pdf.InteractiveFeatures.Forms.PKCS1.#ctor(System.IO.Stream)">
      <summary>
            Initializes new instance of the <see cref="T:Aspose.Pdf.InteractiveFeatures.Forms.PKCS1" /> class.
            </summary>
      <param name="image">
            This image will define signature appearance on the page.
            </param>
    </member>
    <member name="M:Aspose.Pdf.InteractiveFeatures.Forms.PKCS1.#ctor(Aspose.Pdf.Engine.Data.IPdfDictionary,Aspose.Pdf.Engine.IPdfDocument)">
      <summary>
            Initialize signature object from signature dictionary. Then this object will be used for verifying the document.
            </summary>
      <param name="signature">
            Signature dictionary.
            </param>
      <param name="document">
            The document, it is used then to get file data in order to verify signature.
            </param>
    </member>
    <member name="M:Aspose.Pdf.InteractiveFeatures.Forms.PKCS1.#ctor">
      <summary>
            Inititalizes new instance of the <see cref="T:Aspose.Pdf.InteractiveFeatures.Forms.PKCS1" /> class.
            </summary>
    </member>
    <member name="M:Aspose.Pdf.InteractiveFeatures.Forms.PKCS1.#ctor(System.String,System.String)">
      <summary>
            Inititalizes new instance of the <see cref="T:Aspose.Pdf.InteractiveFeatures.Forms.PKCS1" /> class.
            </summary>
      <param name="pfx">
            Pfx file which contains certificate for signing.
            </param>
      <param name="password">
      </param>
            Password to get access to the private key in the certificate.
        </member>
    <member name="M:Aspose.Pdf.InteractiveFeatures.Forms.PKCS1.#ctor(System.IO.Stream,System.String)">
      <summary>
            Inititalizes new instance of the <see cref="T:Aspose.Pdf.InteractiveFeatures.Forms.PKCS1" /> class.
            </summary>
      <param name="pfx">
            Stream with certificate data organized as pfx.
            </param>
      <param name="password">
            Password to get access to the private key in the certificate.
            </param>
    </member>
    <member name="T:Aspose.Pdf.InteractiveFeatures.Forms.PKCS7">
      <summary>
            Represents the PKCS#7 object that conform to the PKCS#7 specification in Internet RFC 2315, 
            PKCS #7: Cryptographic Message Syntax, Version 1.5.
            The SHA1 digest of the document's byte range is encapsulated in the PKCS#7 SignedData field.
            </summary>
    </member>
    <member name="M:Aspose.Pdf.InteractiveFeatures.Forms.PKCS7.#ctor(System.IO.Stream)">
      <summary>
            Initializes new instance of the <see cref="T:Aspose.Pdf.InteractiveFeatures.Forms.PKCS7" /> class.
            </summary>
      <param name="image">
            This image will define signature appearance on the page.
            </param>
    </member>
    <member name="M:Aspose.Pdf.InteractiveFeatures.Forms.PKCS7.#ctor(Aspose.Pdf.Engine.Data.IPdfDictionary,Aspose.Pdf.Engine.IPdfDocument)">
      <summary>
            Initialize signature object from signature dictionary. Then this object will be used for verifying the document.
            </summary>
      <param name="signature">
            Signature dictionary.
            </param>
      <param name="document">
            The document, it is used then to get file data in order to verify signature.
            </param>
    </member>
    <member name="M:Aspose.Pdf.InteractiveFeatures.Forms.PKCS7.#ctor">
      <summary>
            Inititalizes new instance of the <see cref="T:Aspose.Pdf.InteractiveFeatures.Forms.PKCS7" /> class.
            </summary>
    </member>
    <member name="M:Aspose.Pdf.InteractiveFeatures.Forms.PKCS7.#ctor(System.String,System.String)">
      <summary>
            Inititalizes new instance of the <see cref="T:Aspose.Pdf.InteractiveFeatures.Forms.PKCS7" /> class.
            </summary>
      <param name="pfx">
            Pfx file which contains certificate for signing.
            </param>
      <param name="password">
      </param>
            Password to get access to the private key in the certificate.
        </member>
    <member name="M:Aspose.Pdf.InteractiveFeatures.Forms.PKCS7.#ctor(System.IO.Stream,System.String)">
      <summary>
            Inititalizes new instance of the <see cref="T:Aspose.Pdf.InteractiveFeatures.Forms.PKCS7" /> class.
            </summary>
      <param name="pfx">
            Stream with certificate data organized as pfx.
            </param>
      <param name="password">
            Password to get access to the private key in the certificate.
            </param>
    </member>
    <member name="T:Aspose.Pdf.InteractiveFeatures.Forms.PKCS7Detached">
      <summary>
            Represents the PKCS#7 object that conform to the PKCS#7 specification in Internet RFC 2315, 
            PKCS #7: Cryptographic Message Syntax, Version 1.5.
            The original signed message digest over the document's byte range is incorporated as the normal PKCS#7 SignedData field. 
            No data shall is encapsulated in the PKCS#7 SignedData field.
            </summary>
    </member>
    <member name="M:Aspose.Pdf.InteractiveFeatures.Forms.PKCS7Detached.#ctor(System.IO.Stream)">
      <summary>
            Initializes new instance of the <see cref="T:Aspose.Pdf.InteractiveFeatures.Forms.PKCS7Detached" /> class.
            </summary>
      <param name="image">
            This image will define signature appearance on the page.
            </param>
    </member>
    <member name="M:Aspose.Pdf.InteractiveFeatures.Forms.PKCS7Detached.#ctor(Aspose.Pdf.Engine.Data.IPdfDictionary,Aspose.Pdf.Engine.IPdfDocument)">
      <summary>
            Initialize signature object from signature dictionary. Then this object will be used for verifying the document.
            </summary>
      <param name="signature">
            Signature dictionary.
            </param>
      <param name="document">
            The document, it is used then to get file data in order to verify signature.
            </param>
    </member>
    <member name="M:Aspose.Pdf.InteractiveFeatures.Forms.PKCS7Detached.#ctor">
      <summary>
            Inititalizes new instance of the <see cref="T:Aspose.Pdf.InteractiveFeatures.Forms.PKCS7Detached" /> class.
            </summary>
    </member>
    <member name="M:Aspose.Pdf.InteractiveFeatures.Forms.PKCS7Detached.#ctor(System.String,System.String)">
      <summary>
            Inititalizes new instance of the <see cref="T:Aspose.Pdf.InteractiveFeatures.Forms.PKCS7Detached" /> class.
            </summary>
      <param name="pfx">
            Pfx file which contains certificate for signing.
            </param>
      <param name="password">
      </param>
    </member>
    <member name="M:Aspose.Pdf.InteractiveFeatures.Forms.PKCS7Detached.#ctor(System.IO.Stream,System.String)">
      <summary>
            Inititalizes new instance of the <see cref="T:Aspose.Pdf.InteractiveFeatures.Forms.PKCS7Detached" /> class.
            </summary>
      <param name="pfx">
            Stream with certificate data organized as pfx.
            </param>
      <param name="password">
            Password to get access to the private key in the certificate.
            </param>
    </member>
    <member name="T:Aspose.Pdf.InteractiveFeatures.Forms.RadioButtonField">
      <summary>
            Class representing radio button field.
            </summary>
    </member>
    <member name="M:Aspose.Pdf.InteractiveFeatures.Forms.RadioButtonField.#ctor(Aspose.Pdf.Page)">
      <summary>
            Constructor for RadiouttonField
            </summary>
      <param name="page">
      </param>
    </member>
    <member name="M:Aspose.Pdf.InteractiveFeatures.Forms.RadioButtonField.Add(Aspose.Pdf.InteractiveFeatures.Forms.RadioButtonOptionField)">
      <summary>
            Adds new option field to RadioButton field
            </summary>
      <param name="newItem">
      </param>
    </member>
    <member name="M:Aspose.Pdf.InteractiveFeatures.Forms.RadioButtonField.AddOption(System.String,Aspose.Pdf.Rectangle)">
      <summary>
            Add  to radio button option with specifed rectangle. 
            </summary>
      <param name="optionName">Name of new option.</param>
      <param name="rect">New item rectangle.</param>
    </member>
    <member name="M:Aspose.Pdf.InteractiveFeatures.Forms.RadioButtonField.AddOption(System.String)">
      <summary>
            Add option to radion button. 
            </summary>
      <param name="optionName">
      </param>
    </member>
    <member name="M:Aspose.Pdf.InteractiveFeatures.Forms.RadioButtonField.SetPosition(Aspose.Pdf.Point)">
      <summary>
            Move all subitems of radio button to specified positins on the page. 
            </summary>
      <param name="point">
      </param>
    </member>
    <member name="P:Aspose.Pdf.InteractiveFeatures.Forms.RadioButtonField.Style">
      <summary>
            Style of field box.
            </summary>
    </member>
    <member name="P:Aspose.Pdf.InteractiveFeatures.Forms.RadioButtonField.Selected">
      <summary>
            Gets or sets index of selected item. Numbering of items is started from 1.
            </summary>
    </member>
    <member name="P:Aspose.Pdf.InteractiveFeatures.Forms.RadioButtonField.Options">
      <summary>
            Gets collection of options of the radio button.
            </summary>
    </member>
    <member name="P:Aspose.Pdf.InteractiveFeatures.Forms.RadioButtonField.PageIndex">
      <summary>
            Gets index of page which contains this RadioButton field.
            </summary>
    </member>
    <member name="P:Aspose.Pdf.InteractiveFeatures.Forms.RadioButtonField.Value">
      <summary>
            Gets or sets value of field.
            </summary>
    </member>
    <member name="T:Aspose.Pdf.InteractiveFeatures.Forms.RadioButtonOptionField">
      <summary>
            Class represents item of RadioButton field.
            </summary>
    </member>
    <member name="M:Aspose.Pdf.InteractiveFeatures.Forms.RadioButtonOptionField.#ctor(Aspose.Pdf.Engine.Data.IPdfObject,Aspose.Pdf.Document)">
      <summary>
            Initializes RadioButtonOptionField.
            </summary>
      <param name="annotation">
      </param>
      <param name="document">
      </param>
    </member>
    <member name="M:Aspose.Pdf.InteractiveFeatures.Forms.RadioButtonOptionField.#ctor">
      <summary>
            Create new RadioButtonOptionField instance.
            </summary>
    </member>
    <member name="P:Aspose.Pdf.InteractiveFeatures.Forms.RadioButtonOptionField.OptionName">
      <summary>
            Gets or sets name of the option.
            </summary>
    </member>
    <member name="P:Aspose.Pdf.InteractiveFeatures.Forms.RadioButtonOptionField.Caption">
      <summary>
            Gets or sets caption.
            </summary>
    </member>
    <member name="T:Aspose.Pdf.InteractiveFeatures.Forms.RichTextBoxField">
      <summary>
            Class describes rich text editor component.
            </summary>
    </member>
    <member name="M:Aspose.Pdf.InteractiveFeatures.Forms.RichTextBoxField.#ctor(Aspose.Pdf.Page,Aspose.Pdf.Rectangle)">
      <summary>
            Constructor for Rich Text Box  field. 
            </summary>
      <param name="page">
      </param>
      <param name="rect">
      </param>
    </member>
    <member name="P:Aspose.Pdf.InteractiveFeatures.Forms.RichTextBoxField.Style">
      <summary>
            Gets or sets default style string of the rich text field.
            </summary>
    </member>
    <member name="P:Aspose.Pdf.InteractiveFeatures.Forms.RichTextBoxField.RValue">
      <summary>
            Gets or sets rich text value.
            </summary>
    </member>
    <member name="P:Aspose.Pdf.InteractiveFeatures.Forms.RichTextBoxField.FormattedValue">
      <summary>
            Gets or sets formatted rich text value with markup.
            </summary>
    </member>
    <member name="P:Aspose.Pdf.InteractiveFeatures.Forms.RichTextBoxField.Value">
      <summary>
            Value of RichTextField.
            </summary>
    </member>
    <member name="P:Aspose.Pdf.InteractiveFeatures.Forms.RichTextBoxField.Justify">
      <summary>
            Gets or sets justification of the rich text box.
            </summary>
    </member>
    <member name="T:Aspose.Pdf.InteractiveFeatures.Forms.SignatureField">
      <summary>
            Represents signature form field.
            </summary>
    </member>
    <member name="M:Aspose.Pdf.InteractiveFeatures.Forms.SignatureField.Sign(Aspose.Pdf.InteractiveFeatures.Forms.Signature,System.IO.Stream,System.String)">
      <summary>
            Signs the document using this signature field.
            </summary>
      <param name="signature">
            Signature object, see <see cref="T:Aspose.Pdf.InteractiveFeatures.Forms.PKCS1" />, <see cref="T:Aspose.Pdf.InteractiveFeatures.Forms.PKCS7" />, <see cref="T:Aspose.Pdf.InteractiveFeatures.Forms.PKCS7Detached" />.
            </param>
      <param name="pfx">
            Stream with certificate.
            </param>
      <param name="pass">
            Password to access private in the <paramref name="pfx" />.
            </param>
    </member>
    <member name="M:Aspose.Pdf.InteractiveFeatures.Forms.SignatureField.#ctor(Aspose.Pdf.Engine.Data.IPdfObject,Aspose.Pdf.Document)">
      <summary>
            Initializes new instance of the <see cref="T:Aspose.Pdf.InteractiveFeatures.Forms.SignatureField" /> on reading pdf document.
            </summary>
      <param name="annotation">
            Signature field annotation.
            </param>
      <param name="document">
            The document. This info is necessary for signing blank signature fields.
            </param>
    </member>
    <member name="M:Aspose.Pdf.InteractiveFeatures.Forms.SignatureField.#ctor(Aspose.Pdf.Page,Aspose.Pdf.Rectangle)">
      <summary>
            Initializes new instance of the <see cref="T:Aspose.Pdf.InteractiveFeatures.Forms.SignatureField" /> class.
            </summary>
    </member>
    <member name="M:Aspose.Pdf.InteractiveFeatures.Forms.SignatureField.Sign(Aspose.Pdf.InteractiveFeatures.Forms.Signature)">
      <summary>
            Sign the document using this signature field.
            </summary>
      <param name="signature">Signature object, see <see cref="T:Aspose.Pdf.InteractiveFeatures.Forms.PKCS1" />, <see cref="T:Aspose.Pdf.InteractiveFeatures.Forms.PKCS7" /> and <see cref="T:Aspose.Pdf.InteractiveFeatures.Forms.PKCS7Detached" />.</param>
    </member>
    <member name="P:Aspose.Pdf.InteractiveFeatures.Forms.SignatureField.Signature">
      <summary>
            Gets signature object.
            This object contains signature data regarding public-key cryptographic standards.
            Classes <see cref="T:Aspose.Pdf.InteractiveFeatures.Forms.PKCS1" />, <see cref="T:Aspose.Pdf.InteractiveFeatures.Forms.PKCS7" /> and <see cref="T:Aspose.Pdf.InteractiveFeatures.Forms.PKCS7Detached" /> 
            represent all supported types of signature objects.
            </summary>
    </member>
    <member name="T:Aspose.Pdf.InteractiveFeatures.Forms.Symbology">
      <summary>
            A (Barcode) Symbology defines the technical details of a particular type of barcode:
            the width of the bars, character set, method of encoding, checksum specifications, etc.
            </summary>
    </member>
    <member name="F:Aspose.Pdf.InteractiveFeatures.Forms.Symbology.PDF417">
      <summary>
            A multi-row, variable-length 2D symbology with high data capacity and error-correction capability.
            </summary>
    </member>
    <member name="F:Aspose.Pdf.InteractiveFeatures.Forms.Symbology.QRCode">
      <summary>
            QR code (short for Quick Response) is a specific matrix barcode (2D code), 
            readable by dedicated QR barcode readers and camera phones.
            </summary>
    </member>
    <member name="F:Aspose.Pdf.InteractiveFeatures.Forms.Symbology.DataMatrix">
      <summary>
            A 2D matrix symbology consisting of black and white square modules arranged in either a square or 
            rectangular pattern.
            </summary>
    </member>
    <member name="T:Aspose.Pdf.InteractiveFeatures.GoToAction">
      <summary>
            Represents a go-to action that changes the view to a specified destination (page, location, and magnification factor).
            </summary>
    </member>
    <member name="T:Aspose.Pdf.InteractiveFeatures.PdfAction">
      <summary>
            Represents Action in PDF document
            </summary>
    </member>
    <member name="P:Aspose.Pdf.InteractiveFeatures.PdfAction.Next">
      <summary>
            Next actions in sequence. 
            </summary>
    </member>
    <member name="M:Aspose.Pdf.InteractiveFeatures.GoToAction.#ctor(System.Int32)">
      <summary>
            Constructor.
            </summary>
      <param name="page">The destination page number to jump to.</param>
    </member>
    <member name="M:Aspose.Pdf.InteractiveFeatures.GoToAction.#ctor(Aspose.Pdf.Page)">
      <summary>
            Constructor.
            </summary>
      <param name="page">Aspose.Pdf.Page destination object to jump to.</param>
    </member>
    <member name="M:Aspose.Pdf.InteractiveFeatures.GoToAction.#ctor(Aspose.Pdf.Page,Aspose.Pdf.InteractiveFeatures.ExplicitDestinationType,System.Double[])">
      <summary>
      </summary>
      <param name="page">
      </param>
      <param name="type">
      </param>
      <param name="values">
      </param>
    </member>
    <member name="M:Aspose.Pdf.InteractiveFeatures.GoToAction.#ctor(Aspose.Pdf.InteractiveFeatures.ExplicitDestination)">
      <summary>
            Constructor.
            </summary>
      <param name="destination">Explicit destination.</param>
    </member>
    <member name="M:Aspose.Pdf.InteractiveFeatures.GoToAction.#ctor">
      <summary>
            Constructor.
            </summary>
    </member>
    <member name="P:Aspose.Pdf.InteractiveFeatures.GoToAction.Destination">
      <summary>
            Gets or sets the destination to jump to.
            </summary>
    </member>
    <member name="T:Aspose.Pdf.InteractiveFeatures.GoToRemoteAction">
      <summary>
            Represents a remote go-to action that is similar to an ordinary go-to action but jumps to a destination in another PDF file instead of the current file.
            </summary>
    </member>
    <member name="M:Aspose.Pdf.InteractiveFeatures.GoToRemoteAction.#ctor(System.String,System.Int32)">
      <summary>
      </summary>
      <param name="remotePdf">
      </param>
      <param name="remotePageNumber">
      </param>
    </member>
    <member name="M:Aspose.Pdf.InteractiveFeatures.GoToRemoteAction.#ctor(System.String,Aspose.Pdf.InteractiveFeatures.ExplicitDestination)">
      <summary>
      </summary>
      <param name="remotePdf">
      </param>
      <param name="destination">
      </param>
    </member>
    <member name="P:Aspose.Pdf.InteractiveFeatures.GoToRemoteAction.File">
      <summary>
            Gets or sets the specification of the file in which the destination is located.
            </summary>
    </member>
    <member name="P:Aspose.Pdf.InteractiveFeatures.GoToRemoteAction.NewWindow">
      <summary>
            Gets or sets a flag specifying whether to open the destination document in a new window.
            </summary>
    </member>
    <member name="P:Aspose.Pdf.InteractiveFeatures.GoToRemoteAction.Destination">
      <summary>
            Gets or sets the destination to jump to.
            </summary>
    </member>
    <member name="T:Aspose.Pdf.InteractiveFeatures.GoToURIAction">
      <summary>
            Represents a URI action causes a URI to be resolved.
            </summary>
    </member>
    <member name="M:Aspose.Pdf.InteractiveFeatures.GoToURIAction.#ctor(System.String)">
      <summary>
            Constructor.
            </summary>
      <param name="uri">The uniform resource identifier to resolve.</param>
    </member>
    <member name="P:Aspose.Pdf.InteractiveFeatures.GoToURIAction.URI">
      <summary>
            Gets or sets the uniform resource identifier to resolve.
            </summary>
    </member>
    <member name="T:Aspose.Pdf.InteractiveFeatures.HighlightingMode">
      <summary>
            Enumerates the annotation’s highlighting mode, the visual effect to be used when the mouse button is pressed or held down inside its active area.
            </summary>
    </member>
    <member name="F:Aspose.Pdf.InteractiveFeatures.HighlightingMode.None">
      <summary>
            No highlighting.
            </summary>
    </member>
    <member name="F:Aspose.Pdf.InteractiveFeatures.HighlightingMode.Invert">
      <summary>
            Invert the contents of the annotation rectangle.
            </summary>
    </member>
    <member name="F:Aspose.Pdf.InteractiveFeatures.HighlightingMode.Outline">
      <summary>
            Invert the annotation’s border.
            </summary>
    </member>
    <member name="F:Aspose.Pdf.InteractiveFeatures.HighlightingMode.Push">
      <summary>
            Display the annotation’s down appearance, if any. If no down appearance is defined, offset the contents of the annotation rectangle to appear as if it were being pushed below the surface of the page.
            </summary>
    </member>
    <member name="F:Aspose.Pdf.InteractiveFeatures.HighlightingMode.Toggle">
      <summary>
            Same as Push (which is preferred).
            </summary>
    </member>
    <member name="T:Aspose.Pdf.InteractiveFeatures.JavascriptAction">
      <summary>
            Class representing javascript action.
            </summary>
    </member>
    <member name="M:Aspose.Pdf.InteractiveFeatures.JavascriptAction.#ctor(System.String)">
      <summary>
            Constructor.
            </summary>
      <param name="javaScript">JavaScript code.</param>
    </member>
    <member name="M:Aspose.Pdf.InteractiveFeatures.JavascriptAction.#ctor(Aspose.Pdf.Engine.Data.IPdfDictionary)">
      <summary>
            Constructor for Javascript class. 
            </summary>
      <param name="action">PDF dictionary which describes action.</param>
    </member>
    <member name="P:Aspose.Pdf.InteractiveFeatures.JavascriptAction.Script">
      <summary>
            Gets or sets javascript code.
            </summary>
    </member>
    <member name="T:Aspose.Pdf.InteractiveFeatures.LaunchAction">
      <summary>
            Represents a launch action that launches an application or opens or prints a document.
            </summary>
    </member>
    <member name="M:Aspose.Pdf.InteractiveFeatures.LaunchAction.#ctor(System.String)">
      <summary>
            Creates a launch action.
            </summary>
      <param name="file">The file to be launched.</param>
    </member>
    <member name="M:Aspose.Pdf.InteractiveFeatures.LaunchAction.#ctor(Aspose.Pdf.Document,System.String)">
      <summary>
            Creates a launch action.
            </summary>
      <param name="document">Document where action will be created.</param>
      <param name="file">The file to be launched.</param>
    </member>
    <member name="P:Aspose.Pdf.InteractiveFeatures.LaunchAction.File">
      <summary>
            Gets or sets the application to be launched or the document to be opened or printed.
            </summary>
    </member>
    <member name="P:Aspose.Pdf.InteractiveFeatures.LaunchAction.NewWindow">
      <summary>
            Gets or sets a flag specifying whether to open the destination document in a new window (affect PDF documents only).
            </summary>
    </member>
    <member name="T:Aspose.Pdf.InteractiveFeatures.SubmitFormAction">
      <summary>
            Class which describes submit-form action.
            </summary>
    </member>
    <member name="F:Aspose.Pdf.InteractiveFeatures.SubmitFormAction.Exclude">
      <summary>
            If clear, the Fields array specifies which fields to include in the submission. 
            </summary>
    </member>
    <member name="F:Aspose.Pdf.InteractiveFeatures.SubmitFormAction.IncludeNoValueFields">
      <summary>
            If set, all fields designated by the Fields array and the Include/Exclude flag shall be submitted.
            </summary>
    </member>
    <member name="F:Aspose.Pdf.InteractiveFeatures.SubmitFormAction.ExportFormat">
      <summary>
            If set, field names and values shall be submitted in HTML Form format.
            </summary>
    </member>
    <member name="F:Aspose.Pdf.InteractiveFeatures.SubmitFormAction.GetMethod">
      <summary>
            If set, field names and values shall be submitted using an HTTP GET request.
            </summary>
    </member>
    <member name="F:Aspose.Pdf.InteractiveFeatures.SubmitFormAction.SubmitCoordinates">
      <summary>
            If set, the coordinates of the mouse click that caused the submit-form action shall be transmitted as part of the form data.
            </summary>
    </member>
    <member name="F:Aspose.Pdf.InteractiveFeatures.SubmitFormAction.Xfdf">
      <summary>
            If set, field names and values shall be submitted as XFDF.
            </summary>
    </member>
    <member name="F:Aspose.Pdf.InteractiveFeatures.SubmitFormAction.IncludeAppendSaves">
      <summary>
            If set, the submitted FDF file shall include the contents of all incremental updates.
            </summary>
    </member>
    <member name="F:Aspose.Pdf.InteractiveFeatures.SubmitFormAction.IncludeAnnotations">
      <summary>
            If set, the submitted FDF file shall include includes all markup annotations in the underlying PDF document.
            </summary>
    </member>
    <member name="F:Aspose.Pdf.InteractiveFeatures.SubmitFormAction.SubmitPdf">
      <summary>
            If set, the document shall be submitted as PDF, using the MIME content type application/pdf.
            </summary>
    </member>
    <member name="F:Aspose.Pdf.InteractiveFeatures.SubmitFormAction.CanonicalFormat">
      <summary>
            If set, any submitted field values representing dates shall be converted to the standard format.
            </summary>
    </member>
    <member name="F:Aspose.Pdf.InteractiveFeatures.SubmitFormAction.ExclNonUserAnnots">
      <summary>
            If set, it shall include only those markup annotations whose T entry matches the name of the current user.
            </summary>
    </member>
    <member name="F:Aspose.Pdf.InteractiveFeatures.SubmitFormAction.ExclFKey">
      <summary>
            If set, the submitted FDF shall exclude the F entry.
            </summary>
    </member>
    <member name="F:Aspose.Pdf.InteractiveFeatures.SubmitFormAction.EmbedForm">
      <summary>
            If set, the F entry of the submitted FDF shall be a file specification containing an 
            embedded file stream representing the PDF file from which the FDF is being submitted.
            </summary>
    </member>
    <member name="P:Aspose.Pdf.InteractiveFeatures.SubmitFormAction.Flags">
      <summary>
            Gets or sets flagas of submit action
            </summary>
    </member>
    <member name="T:Aspose.Pdf.InteractiveFeatures.Annotations.TextStyle">
      <summary>
            Class represents style of text in annotation 
            </summary>
    </member>
    <member name="M:Aspose.Pdf.InteractiveFeatures.Annotations.TextStyle.ToString">
      <summary>
            String representation of TextStyle.
            </summary>
      <returns>String representation.</returns>
    </member>
    <member name="P:Aspose.Pdf.InteractiveFeatures.Annotations.TextStyle.FontName">
      <summary>
            Name of the font.
            </summary>
    </member>
    <member name="P:Aspose.Pdf.InteractiveFeatures.Annotations.TextStyle.FontSize">
      <summary>
            Fonst size.
            </summary>
    </member>
    <member name="P:Aspose.Pdf.InteractiveFeatures.Annotations.TextStyle.Alignment">
      <summary>
            Txt alignment. Valid values are: Left, Center, Rigth.
            </summary>
    </member>
    <member name="P:Aspose.Pdf.InteractiveFeatures.Annotations.TextStyle.Color">
      <summary>
            Color of the text.
            </summary>
    </member>
    <member name="T:Aspose.Pdf.InteractiveFeatures.Annotations.AnnotationSelector">
      <summary>
            This class is used for selecting annotations using Visitor template idea.
            </summary>
    </member>
    <member name="T:Aspose.Pdf.Selector">
      <summary>
             Base abstract class for selecting routines which are defined in concrete descendants.
             </summary>
    </member>
    <member name="M:Aspose.Pdf.Selector.#ctor">
      <summary>
             Initializes new instance of the <see cref="T:Aspose.Pdf.Selector" /> class.
             </summary>
    </member>
    <member name="P:Aspose.Pdf.Selector.Selected">
      <summary>
             The list of selected objects.
             </summary>
    </member>
    <member name="T:Aspose.Pdf.InteractiveFeatures.Annotations.IAnnotationVisitor">
      <summary>
            Defines Visitor for visiting different document annotations.
            </summary>
    </member>
    <member name="M:Aspose.Pdf.InteractiveFeatures.Annotations.IAnnotationVisitor.Visit(Aspose.Pdf.InteractiveFeatures.Annotations.LinkAnnotation)">
      <summary>
            Visit/select link annotation.
            </summary>
      <param name="link">
            LinkAnnotation object example/template.
            </param>
    </member>
    <member name="M:Aspose.Pdf.InteractiveFeatures.Annotations.IAnnotationVisitor.Visit(Aspose.Pdf.InteractiveFeatures.Annotations.FileAttachmentAnnotation)">
      <summary>
            Visit/select attachment annotation.
            </summary>
      <param name="attachment">
            FileAttachmentAnnotation object example/template.
            </param>
    </member>
    <member name="M:Aspose.Pdf.InteractiveFeatures.Annotations.IAnnotationVisitor.Visit(Aspose.Pdf.InteractiveFeatures.Annotations.TextAnnotation)">
      <summary>
            Visit/select text annotation.
            </summary>
      <param name="text">
            TextAnnotation object example/template.
            </param>
    </member>
    <member name="M:Aspose.Pdf.InteractiveFeatures.Annotations.IAnnotationVisitor.Visit(Aspose.Pdf.InteractiveFeatures.Annotations.FreeTextAnnotation)">
      <summary>
            Visit/select freetext annotation.
            </summary>
      <param name="freetext">
            FreeTextAnnotation object example/template.
            </param>
    </member>
    <member name="M:Aspose.Pdf.InteractiveFeatures.Annotations.IAnnotationVisitor.Visit(Aspose.Pdf.InteractiveFeatures.Annotations.HighlightAnnotation)">
      <summary>
            Visit/select highlight annotation.
            </summary>
      <param name="highlight">
            HighlightAnnotation object example/template.
            </param>
    </member>
    <member name="M:Aspose.Pdf.InteractiveFeatures.Annotations.IAnnotationVisitor.Visit(Aspose.Pdf.InteractiveFeatures.Annotations.UnderlineAnnotation)">
      <summary>
            Visit/select underline annotation.
            </summary>
      <param name="underline">
            UnderlineAnnotation object example/template.
            </param>
    </member>
    <member name="M:Aspose.Pdf.InteractiveFeatures.Annotations.IAnnotationVisitor.Visit(Aspose.Pdf.InteractiveFeatures.Annotations.StrikeOutAnnotation)">
      <summary>
            Visit/select strikeOut annotation.
            </summary>
      <param name="strikeOut">
            StrikeOutAnnotation object example/template.
            </param>
    </member>
    <member name="M:Aspose.Pdf.InteractiveFeatures.Annotations.IAnnotationVisitor.Visit(Aspose.Pdf.InteractiveFeatures.Annotations.SquigglyAnnotation)">
      <summary>
            Visit/select squiggly annotation.
            </summary>
      <param name="squiggly">
            SquigglyAnnotation object example/template.
            </param>
    </member>
    <member name="M:Aspose.Pdf.InteractiveFeatures.Annotations.IAnnotationVisitor.Visit(Aspose.Pdf.InteractiveFeatures.Annotations.PopupAnnotation)">
      <summary>
            Visit/select popup annotation.
            </summary>
      <param name="popup">
            PopupAnnotation object example/template.
            </param>
    </member>
    <member name="M:Aspose.Pdf.InteractiveFeatures.Annotations.IAnnotationVisitor.Visit(Aspose.Pdf.InteractiveFeatures.Annotations.LineAnnotation)">
      <summary>
            Visit/select line annotation.
            </summary>
      <param name="line">
            LineAnnotation object example/template.
            </param>
    </member>
    <member name="M:Aspose.Pdf.InteractiveFeatures.Annotations.IAnnotationVisitor.Visit(Aspose.Pdf.InteractiveFeatures.Annotations.CircleAnnotation)">
      <summary>
            Visit/select circle annotation.
            </summary>
      <param name="circle">
            CircleAnnotation object example/template.
            </param>
    </member>
    <member name="M:Aspose.Pdf.InteractiveFeatures.Annotations.IAnnotationVisitor.Visit(Aspose.Pdf.InteractiveFeatures.Annotations.SquareAnnotation)">
      <summary>
            Visit/select square annotation.
            </summary>
      <param name="square">
            SquareAnnotation object example/template.
            </param>
    </member>
    <member name="M:Aspose.Pdf.InteractiveFeatures.Annotations.IAnnotationVisitor.Visit(Aspose.Pdf.InteractiveFeatures.Annotations.InkAnnotation)">
      <summary>
            Visit/select ink annotation.
            </summary>
      <param name="ink">
            InkAnnotation object example/template.
            </param>
    </member>
    <member name="M:Aspose.Pdf.InteractiveFeatures.Annotations.IAnnotationVisitor.Visit(Aspose.Pdf.InteractiveFeatures.Annotations.PolylineAnnotation)">
      <summary>
            Visit/select polyline annotation.
            </summary>
      <param name="polyline">
            PolylineAnnotation object example/template.
            </param>
    </member>
    <member name="M:Aspose.Pdf.InteractiveFeatures.Annotations.IAnnotationVisitor.Visit(Aspose.Pdf.InteractiveFeatures.Annotations.PolygonAnnotation)">
      <summary>
            Visit/select polygon annotation.
            </summary>
      <param name="polygon">
            PolygonAnnotation object example/template.
            </param>
    </member>
    <member name="M:Aspose.Pdf.InteractiveFeatures.Annotations.IAnnotationVisitor.Visit(Aspose.Pdf.InteractiveFeatures.Annotations.CaretAnnotation)">
      <summary>
            Visit/select caret annotation.
            </summary>
      <param name="caret">
            CaretAnnotation object example/template.
            </param>
    </member>
    <member name="M:Aspose.Pdf.InteractiveFeatures.Annotations.IAnnotationVisitor.Visit(Aspose.Pdf.InteractiveFeatures.Annotations.StampAnnotation)">
      <summary>
            Visit/select stamp annotation.
            </summary>
      <param name="stamp">
            StampAnnotation object example/template.
            </param>
    </member>
    <member name="M:Aspose.Pdf.InteractiveFeatures.Annotations.IAnnotationVisitor.Visit(Aspose.Pdf.InteractiveFeatures.Annotations.WidgetAnnotation)">
      <summary>
            Visit/select widget annotation.
            </summary>
      <param name="widget">
            WidgetAnnotation object example/template.
            </param>
    </member>
    <member name="M:Aspose.Pdf.InteractiveFeatures.Annotations.IAnnotationVisitor.Visit(Aspose.Pdf.InteractiveFeatures.Annotations.MovieAnnotation)">
      <summary>
            Visit/select movie annotation.
            </summary>
      <param name="movie">
            MovieAnnotation object example/template.
            </param>
    </member>
    <member name="M:Aspose.Pdf.InteractiveFeatures.Annotations.IAnnotationVisitor.Visit(Aspose.Pdf.InteractiveFeatures.Annotations.ScreenAnnotation)">
      <summary>
            Visit/select screen annotation.
            </summary>
      <param name="screen">
            ScreenAnnotation object example/template.
            </param>
    </member>
    <member name="M:Aspose.Pdf.InteractiveFeatures.Annotations.AnnotationSelector.Visit(Aspose.Pdf.InteractiveFeatures.Annotations.LinkAnnotation)">
      <summary>
             Select link annotation if AnnotationSelector was initialized with LinkAnnotation object.
             </summary>
      <param name="link">
             LinkAnnotation object for selecting.
             </param>
    </member>
    <member name="M:Aspose.Pdf.InteractiveFeatures.Annotations.AnnotationSelector.#ctor(Aspose.Pdf.InteractiveFeatures.Annotations.Annotation)">
      <summary>
             Initializes new <see cref="T:Aspose.Pdf.InteractiveFeatures.Annotations.AnnotationSelector" /> object.
             </summary>
      <param name="annotation">
             Annotation to be selected. 
             This object only describes some characteristics we want found annotations to have, e.g. the type of annotation.
             </param>
    </member>
    <member name="M:Aspose.Pdf.InteractiveFeatures.Annotations.AnnotationSelector.Visit(Aspose.Pdf.InteractiveFeatures.Annotations.FileAttachmentAnnotation)">
      <summary>
             Select attachment annotation if AnnotationSelector was initialized with FileAttachmentAnnotation object.
            </summary>
      <param name="attachment">
             FileAttachmentAnnotation object for selecting.
            </param>
    </member>
    <member name="M:Aspose.Pdf.InteractiveFeatures.Annotations.AnnotationSelector.Visit(Aspose.Pdf.InteractiveFeatures.Annotations.TextAnnotation)">
      <summary>
             Select text annotation if AnnotationSelector was initialized with TextAnnotation object.
            </summary>
      <param name="text">
             TextAnnotation object for selecting.
            </param>
    </member>
    <member name="M:Aspose.Pdf.InteractiveFeatures.Annotations.AnnotationSelector.Visit(Aspose.Pdf.InteractiveFeatures.Annotations.FreeTextAnnotation)">
      <summary>
             Select freetext annotation if AnnotationSelector was initialized with FreeTextAnnotation object.
            </summary>
      <param name="freetext">
             FreeTextAnnotation object for selecting.
            </param>
    </member>
    <member name="M:Aspose.Pdf.InteractiveFeatures.Annotations.AnnotationSelector.Visit(Aspose.Pdf.InteractiveFeatures.Annotations.HighlightAnnotation)">
      <summary>
             Select attachment annotation if AnnotationSelector was initialized with FreeTextAnnotation object.
            </summary>
      <param name="highlight">
             HighlightAnnotation object for selecting.
            </param>
    </member>
    <member name="M:Aspose.Pdf.InteractiveFeatures.Annotations.AnnotationSelector.Visit(Aspose.Pdf.InteractiveFeatures.Annotations.UnderlineAnnotation)">
      <summary>
             Select underline annotation if AnnotationSelector was initialized with UnderlineAnnotation object.
            </summary>
      <param name="underline">
             UnderlineAnnotation object for selecting.
            </param>
    </member>
    <member name="M:Aspose.Pdf.InteractiveFeatures.Annotations.AnnotationSelector.Visit(Aspose.Pdf.InteractiveFeatures.Annotations.StrikeOutAnnotation)">
      <summary>
             Select strikeOut annotation if AnnotationSelector was initialized with StrikeOutAnnotation object.
            </summary>
      <param name="strikeOut">
             StrikeOutAnnotation object for selecting.
            </param>
    </member>
    <member name="M:Aspose.Pdf.InteractiveFeatures.Annotations.AnnotationSelector.Visit(Aspose.Pdf.InteractiveFeatures.Annotations.SquigglyAnnotation)">
      <summary>
             Select squiggly annotation if AnnotationSelector was initialized with SquigglyAnnotation object.
            </summary>
      <param name="squiggly">
             SquigglyAnnotation object for selecting.
            </param>
    </member>
    <member name="M:Aspose.Pdf.InteractiveFeatures.Annotations.AnnotationSelector.Visit(Aspose.Pdf.InteractiveFeatures.Annotations.PopupAnnotation)">
      <summary>
             Select popup annotation if AnnotationSelector was initialized with PopupAnnotation object.
            </summary>
      <param name="popup">
             PopupAnnotation object for selecting.
            </param>
    </member>
    <member name="M:Aspose.Pdf.InteractiveFeatures.Annotations.AnnotationSelector.Visit(Aspose.Pdf.InteractiveFeatures.Annotations.LineAnnotation)">
      <summary>
             Select line annotation if AnnotationSelector was initialized with LineAnnotation object.
            </summary>
      <param name="line">
             LineAnnotation object for selecting.
            </param>
    </member>
    <member name="M:Aspose.Pdf.InteractiveFeatures.Annotations.AnnotationSelector.Visit(Aspose.Pdf.InteractiveFeatures.Annotations.CircleAnnotation)">
      <summary>
             Select circle annotation if AnnotationSelector was initialized with CircleAnnotation object.
            </summary>
      <param name="circle">
             CircleAnnotation object for selecting.
            </param>
    </member>
    <member name="M:Aspose.Pdf.InteractiveFeatures.Annotations.AnnotationSelector.Visit(Aspose.Pdf.InteractiveFeatures.Annotations.SquareAnnotation)">
      <summary>
             Select square annotation if AnnotationSelector was initialized with SquareAnnotation object.
            </summary>
      <param name="square">
             SquareAnnotation object for selecting.
            </param>
    </member>
    <member name="M:Aspose.Pdf.InteractiveFeatures.Annotations.AnnotationSelector.Visit(Aspose.Pdf.InteractiveFeatures.Annotations.InkAnnotation)">
      <summary>
             Select ink annotation if AnnotationSelector was initialized with InkAnnotation object.
            </summary>
      <param name="ink">
             InkAnnotation object for selecting.
            </param>
    </member>
    <member name="M:Aspose.Pdf.InteractiveFeatures.Annotations.AnnotationSelector.Visit(Aspose.Pdf.InteractiveFeatures.Annotations.PolylineAnnotation)">
      <summary>
             Select polyline annotation if AnnotationSelector was initialized with PolylineAnnotation object.
            </summary>
      <param name="polyline">
             PolylineAnnotation object for selecting.
            </param>
    </member>
    <member name="M:Aspose.Pdf.InteractiveFeatures.Annotations.AnnotationSelector.Visit(Aspose.Pdf.InteractiveFeatures.Annotations.PolygonAnnotation)">
      <summary>
             Select polygon annotation if AnnotationSelector was initialized with PolygonAnnotation object.
            </summary>
      <param name="polygon">
             PolygonAnnotation object for selecting.
            </param>
    </member>
    <member name="M:Aspose.Pdf.InteractiveFeatures.Annotations.AnnotationSelector.Visit(Aspose.Pdf.InteractiveFeatures.Annotations.CaretAnnotation)">
      <summary>
             Select caret annotation if AnnotationSelector was initialized with CaretAnnotation object.
            </summary>
      <param name="caret">
             CaretAnnotation object for selecting.
            </param>
    </member>
    <member name="M:Aspose.Pdf.InteractiveFeatures.Annotations.AnnotationSelector.Visit(Aspose.Pdf.InteractiveFeatures.Annotations.StampAnnotation)">
      <summary>
             Select stamp annotation if AnnotationSelector was initialized with StampAnnotation object.
            </summary>
      <param name="stamp">
             StampAnnotation object for selecting.
            </param>
    </member>
    <member name="M:Aspose.Pdf.InteractiveFeatures.Annotations.AnnotationSelector.Visit(Aspose.Pdf.InteractiveFeatures.Annotations.WidgetAnnotation)">
      <summary>
             Select widget annotation if AnnotationSelector was initialized with WidgetAnnotation object.
            </summary>
      <param name="widget">
             WidgetAnnotation object for selecting.
            </param>
    </member>
    <member name="M:Aspose.Pdf.InteractiveFeatures.Annotations.AnnotationSelector.Visit(Aspose.Pdf.InteractiveFeatures.Annotations.MovieAnnotation)">
      <summary>
            Select movie annotation if AnnotationSelector was initialized with MovieAnnotation object.
            </summary>
      <param name="movie">MovieAnnotation object for selecting.</param>
    </member>
    <member name="M:Aspose.Pdf.InteractiveFeatures.Annotations.AnnotationSelector.Visit(Aspose.Pdf.InteractiveFeatures.Annotations.ScreenAnnotation)">
      <summary>
            Select screen annotation if AnnotationSelector was initialized with ScreenAnnotation object.
            </summary>
      <param name="screen">ScreenAnnotation object for selecting.</param>
    </member>
    <member name="T:Aspose.Pdf.InteractiveFeatures.Annotations.AnnotationState">
      <summary>
            The enumeration of states to which the original annotation can be set.
            </summary>
    </member>
    <member name="F:Aspose.Pdf.InteractiveFeatures.Annotations.AnnotationState.Undefined">
      <summary>
            Not defined state.
            </summary>
    </member>
    <member name="F:Aspose.Pdf.InteractiveFeatures.Annotations.AnnotationState.Marked">
      <summary>
            The annotation has been marked by the user.
            </summary>
    </member>
    <member name="F:Aspose.Pdf.InteractiveFeatures.Annotations.AnnotationState.Unmarked">
      <summary>
            The annotation has not been marked by the user.
            </summary>
    </member>
    <member name="F:Aspose.Pdf.InteractiveFeatures.Annotations.AnnotationState.Accepted">
      <summary>
            The user agrees with the change.
            </summary>
    </member>
    <member name="F:Aspose.Pdf.InteractiveFeatures.Annotations.AnnotationState.Rejected">
      <summary>
            The user disagrees with the change.
            </summary>
    </member>
    <member name="F:Aspose.Pdf.InteractiveFeatures.Annotations.AnnotationState.Cancelled">
      <summary>
            The change has been cancelled.
            </summary>
    </member>
    <member name="F:Aspose.Pdf.InteractiveFeatures.Annotations.AnnotationState.Completed">
      <summary>
            The change has been completed.
            </summary>
    </member>
    <member name="F:Aspose.Pdf.InteractiveFeatures.Annotations.AnnotationState.None">
      <summary>
            The user has indicated nothing about the change.
            </summary>
    </member>
    <member name="T:Aspose.Pdf.InteractiveFeatures.Annotations.Border">
      <summary>
            Class representing characteristics of annotation border.
            </summary>
    </member>
    <member name="M:Aspose.Pdf.InteractiveFeatures.Annotations.Border.#ctor(Aspose.Pdf.Engine.Data.IPdfObject)">
      <summary>
            constructor of Border class.
            </summary>
      <param name="annotation">PDf object which describes annotation.</param>
    </member>
    <member name="M:Aspose.Pdf.InteractiveFeatures.Annotations.Border.#ctor(Aspose.Pdf.InteractiveFeatures.Annotations.Annotation)">
      <summary>
            Constructor for border object.
            </summary>
      <param name="parent">Parent annotation.</param>
    </member>
    <member name="P:Aspose.Pdf.InteractiveFeatures.Annotations.Border.HCornerRadius">
      <summary>
            Gets or sets horizontal corner radius.
            </summary>
    </member>
    <member name="P:Aspose.Pdf.InteractiveFeatures.Annotations.Border.VCornerRaduis">
      <summary>
            Gets or sets vertical corner radius.
            </summary>
    </member>
    <member name="P:Aspose.Pdf.InteractiveFeatures.Annotations.Border.Width">
      <summary>
            Gets or sets border width.
            </summary>
    </member>
    <member name="P:Aspose.Pdf.InteractiveFeatures.Annotations.Border.EffectIntensity">
      <summary>
            Gets or sets effect intencity. Valid range of value is [0..2].
            </summary>
    </member>
    <member name="P:Aspose.Pdf.InteractiveFeatures.Annotations.Border.Style">
      <summary>
            Gets or sets border style.
            </summary>
      <see cref="T:Aspose.Pdf.InteractiveFeatures.Annotations.BorderStyle" />
    </member>
    <member name="P:Aspose.Pdf.InteractiveFeatures.Annotations.Border.Effect">
      <summary>
            Gets or sets border effect.
            </summary>
      <see cref="T:Aspose.Pdf.InteractiveFeatures.Annotations.BorderEffect" />
    </member>
    <member name="P:Aspose.Pdf.InteractiveFeatures.Annotations.Border.Dash">
      <summary>
            Gets or sets dash pattern.
            </summary>
    </member>
    <member name="T:Aspose.Pdf.InteractiveFeatures.Annotations.BorderEffect">
      <summary>
            Describes effect which should be applied to the border of the annotations.
            </summary>
    </member>
    <member name="F:Aspose.Pdf.InteractiveFeatures.Annotations.BorderEffect.None">
      <summary>
            No effect.
            </summary>
    </member>
    <member name="F:Aspose.Pdf.InteractiveFeatures.Annotations.BorderEffect.Cloudy">
      <summary>
            The border will appear "cloudly".
            </summary>
    </member>
    <member name="T:Aspose.Pdf.InteractiveFeatures.Annotations.BorderStyle">
      <summary>
            Describes style of the annotation border.
            </summary>
    </member>
    <member name="F:Aspose.Pdf.InteractiveFeatures.Annotations.BorderStyle.Solid">
      <summary>
            Solid border.
            </summary>
    </member>
    <member name="F:Aspose.Pdf.InteractiveFeatures.Annotations.BorderStyle.Dashed">
      <summary>
            Dashed border.
            </summary>
    </member>
    <member name="F:Aspose.Pdf.InteractiveFeatures.Annotations.BorderStyle.Beveled">
      <summary>
            Bevelled border.
            </summary>
    </member>
    <member name="F:Aspose.Pdf.InteractiveFeatures.Annotations.BorderStyle.Inset">
      <summary>
            Inset border.
            </summary>
    </member>
    <member name="F:Aspose.Pdf.InteractiveFeatures.Annotations.BorderStyle.Underline">
      <summary>
            Underlined border.
            </summary>
    </member>
    <member name="T:Aspose.Pdf.InteractiveFeatures.Annotations.CaptionPosition">
      <summary>
            Enumeration of the annotation’s caption positioning.
            </summary>
    </member>
    <member name="F:Aspose.Pdf.InteractiveFeatures.Annotations.CaptionPosition.Inline">
      <summary>
            The caption will be centered inside the line (default value).
            </summary>
    </member>
    <member name="F:Aspose.Pdf.InteractiveFeatures.Annotations.CaptionPosition.Top">
      <summary>
            The caption will be on top of the line.
            </summary>
    </member>
    <member name="T:Aspose.Pdf.InteractiveFeatures.Annotations.CaretSymbol">
      <summary>
            A symbol to be associated with the caret.
            </summary>
    </member>
    <member name="F:Aspose.Pdf.InteractiveFeatures.Annotations.CaretSymbol.None">
      <summary>
            No symbol should be associated with the caret.
            </summary>
    </member>
    <member name="F:Aspose.Pdf.InteractiveFeatures.Annotations.CaretSymbol.Paragraph">
      <summary>
            A new paragraph symbol (¶) should be associated with the caret.
            </summary>
    </member>
    <member name="T:Aspose.Pdf.InteractiveFeatures.Annotations.Dash">
      <summary>
            Class representing line dash pattern.
            </summary>
    </member>
    <member name="M:Aspose.Pdf.InteractiveFeatures.Annotations.Dash.#ctor(System.Int32,System.Int32)">
      <summary>
            Constructor for Dash.
            </summary>
      <param name="on">Length of the dash.</param>
      <param name="off">Length of the gap.</param>
    </member>
    <member name="P:Aspose.Pdf.InteractiveFeatures.Annotations.Dash.On">
      <summary>
            Gets or sets length of dash.
            </summary>
    </member>
    <member name="P:Aspose.Pdf.InteractiveFeatures.Annotations.Dash.Off">
      <summary>
            Gets or sets length of gap between dashes.
            </summary>
    </member>
    <member name="T:Aspose.Pdf.InteractiveFeatures.Annotations.FileIcon">
      <summary>
            An icon to be used in displaying the annotation.
            </summary>
    </member>
    <member name="F:Aspose.Pdf.InteractiveFeatures.Annotations.FileIcon.PushPin">
      <summary>
            PushPin icon (default value).
            </summary>
    </member>
    <member name="F:Aspose.Pdf.InteractiveFeatures.Annotations.FileIcon.Graph">
      <summary>
            Graph icon.
            </summary>
    </member>
    <member name="F:Aspose.Pdf.InteractiveFeatures.Annotations.FileIcon.Paperclip">
      <summary>
            Paperclip icon.
            </summary>
    </member>
    <member name="F:Aspose.Pdf.InteractiveFeatures.Annotations.FileIcon.Tag">
      <summary>
            Tag icon.
            </summary>
    </member>
    <member name="T:Aspose.Pdf.InteractiveFeatures.Annotations.LineEnding">
      <summary>
            Enumerates the line ending styles to be used in drawing the line.
            </summary>
    </member>
    <member name="F:Aspose.Pdf.InteractiveFeatures.Annotations.LineEnding.None">
      <summary>
            No line ending.
            </summary>
    </member>
    <member name="F:Aspose.Pdf.InteractiveFeatures.Annotations.LineEnding.Square">
      <summary>
            A square filled with the annotation’s interior color, if any.
            </summary>
    </member>
    <member name="F:Aspose.Pdf.InteractiveFeatures.Annotations.LineEnding.Circle">
      <summary>
            A circle filled with the annotation’s interior color, if any.
            </summary>
    </member>
    <member name="F:Aspose.Pdf.InteractiveFeatures.Annotations.LineEnding.Diamond">
      <summary>
            A diamond shape filled with the annotation’s interior color, if any.
            </summary>
    </member>
    <member name="F:Aspose.Pdf.InteractiveFeatures.Annotations.LineEnding.OpenArrow">
      <summary>
            Two short lines meeting in an acute angle to form an open arrowhead.
            </summary>
    </member>
    <member name="F:Aspose.Pdf.InteractiveFeatures.Annotations.LineEnding.ClosedArrow">
      <summary>
            Two short lines meeting in an acute angle as in the OpenArrow style and connected by a third line to form a triangular closed arrowhead filled with the annotation’s interior color, if any.
            </summary>
    </member>
    <member name="F:Aspose.Pdf.InteractiveFeatures.Annotations.LineEnding.Butt">
      <summary>
            A short line at the endpoint perpendicular to the line itself.
            </summary>
    </member>
    <member name="F:Aspose.Pdf.InteractiveFeatures.Annotations.LineEnding.ROpenArrow">
      <summary>
            Two short lines in the reverse direction from OpenArrow.
            </summary>
    </member>
    <member name="F:Aspose.Pdf.InteractiveFeatures.Annotations.LineEnding.RClosedArrow">
      <summary>
            A triangular closed arrowhead in the reverse direction from ClosedArrow.
            </summary>
    </member>
    <member name="F:Aspose.Pdf.InteractiveFeatures.Annotations.LineEnding.Slash">
      <summary>
            A short line at the endpoint approximately 30 degrees clockwise from perpendicular to the line itself.
            </summary>
    </member>
    <member name="T:Aspose.Pdf.InteractiveFeatures.Annotations.StampIcon">
      <summary>
            Enumerates the icons to be used in displaying the annotation.
            </summary>
    </member>
    <member name="F:Aspose.Pdf.InteractiveFeatures.Annotations.StampIcon.Draft">
      <summary>
            Draft stamp icon.
            </summary>
    </member>
    <member name="F:Aspose.Pdf.InteractiveFeatures.Annotations.StampIcon.Approved">
      <summary>
            Approved stamp icon.
            </summary>
    </member>
    <member name="F:Aspose.Pdf.InteractiveFeatures.Annotations.StampIcon.Experimental">
      <summary>
            Experimental stamp icon.
            </summary>
    </member>
    <member name="F:Aspose.Pdf.InteractiveFeatures.Annotations.StampIcon.NotApproved">
      <summary>
            Stamp icon is not approved.
            </summary>
    </member>
    <member name="F:Aspose.Pdf.InteractiveFeatures.Annotations.StampIcon.AsIs">
      <summary>
            Stamp icon "as is".
            </summary>
    </member>
    <member name="F:Aspose.Pdf.InteractiveFeatures.Annotations.StampIcon.Expired">
      <summary>
            Stamp icon is expired.
            </summary>
    </member>
    <member name="F:Aspose.Pdf.InteractiveFeatures.Annotations.StampIcon.NotForPublicRelease">
      <summary>
            Not for public release.
            </summary>
    </member>
    <member name="F:Aspose.Pdf.InteractiveFeatures.Annotations.StampIcon.Confidential">
      <summary>
            Confidential.
            </summary>
    </member>
    <member name="F:Aspose.Pdf.InteractiveFeatures.Annotations.StampIcon.Final">
      <summary>
            Final.
            </summary>
    </member>
    <member name="F:Aspose.Pdf.InteractiveFeatures.Annotations.StampIcon.Sold">
      <summary>
            Sold.
            </summary>
    </member>
    <member name="F:Aspose.Pdf.InteractiveFeatures.Annotations.StampIcon.Departmental">
      <summary>
            Departamental.
            </summary>
    </member>
    <member name="F:Aspose.Pdf.InteractiveFeatures.Annotations.StampIcon.ForComment">
      <summary>
            For comment.
            </summary>
    </member>
    <member name="F:Aspose.Pdf.InteractiveFeatures.Annotations.StampIcon.ForPublicRelease">
      <summary>
            For public release.
            </summary>
    </member>
    <member name="F:Aspose.Pdf.InteractiveFeatures.Annotations.StampIcon.TopSecret">
      <summary>
            Top secret.
            </summary>
    </member>
    <member name="T:Aspose.Pdf.InteractiveFeatures.Annotations.TextAnnotation">
      <summary>
            Represents a text annotation that is a “sticky note” attached to a point in the PDF document.
            </summary>
    </member>
    <member name="M:Aspose.Pdf.InteractiveFeatures.Annotations.TextAnnotation.Accept(Aspose.Pdf.InteractiveFeatures.Annotations.AnnotationSelector)">
      <summary>
            Accepts visitor object to process the annotation.
            </summary>
      <param name="visitor">Visitor object.</param>
    </member>
    <member name="M:Aspose.Pdf.InteractiveFeatures.Annotations.TextAnnotation.#ctor(Aspose.Pdf.Engine.Data.IPdfObject,Aspose.Pdf.Document)">
      <summary>
            Ititializes Text annotation with engine annotation object.
            </summary>
      <param name="engineAnnot">Engine object that represents the annotation.</param>
      <param name="document">The Aspose.Pdf.Document object.</param>
    </member>
    <member name="M:Aspose.Pdf.InteractiveFeatures.Annotations.TextAnnotation.#ctor(Aspose.Pdf.Page,Aspose.Pdf.Rectangle)">
      <summary>
            Creates new Text annotation on the specified page.
            </summary>
      <param name="page">The document's page where annotation should be created.</param>
      <param name="rect">The annotation rectangle, defining the location of the annotation on the page.</param>
    </member>
    <member name="P:Aspose.Pdf.InteractiveFeatures.Annotations.TextAnnotation.Open">
      <summary>
            Gets or sets a flag specifying whether the annotation should initially be displayed open.
            </summary>
    </member>
    <member name="P:Aspose.Pdf.InteractiveFeatures.Annotations.TextAnnotation.Icon">
      <summary>
            Gets or sets an icon to be used in displaying the annotation.
            </summary>
    </member>
    <member name="P:Aspose.Pdf.InteractiveFeatures.Annotations.TextAnnotation.State">
      <summary>
            Gets or sets the state to which the original annotation should be set.
            </summary>
    </member>
    <member name="T:Aspose.Pdf.InteractiveFeatures.Annotations.TextIcon">
      <summary>
            Enumerates the icons to be used in displaying the annotation.
            </summary>
    </member>
    <member name="F:Aspose.Pdf.InteractiveFeatures.Annotations.TextIcon.Note">
      <summary>
            Note icon.
            </summary>
    </member>
    <member name="F:Aspose.Pdf.InteractiveFeatures.Annotations.TextIcon.Comment">
      <summary>
            Comment icon.
            </summary>
    </member>
    <member name="F:Aspose.Pdf.InteractiveFeatures.Annotations.TextIcon.Key">
      <summary>
            Key icon.
            </summary>
    </member>
    <member name="F:Aspose.Pdf.InteractiveFeatures.Annotations.TextIcon.Help">
      <summary>
            Help icon.
            </summary>
    </member>
    <member name="F:Aspose.Pdf.InteractiveFeatures.Annotations.TextIcon.NewParagraph">
      <summary>
            NewParagraph icon.
            </summary>
    </member>
    <member name="F:Aspose.Pdf.InteractiveFeatures.Annotations.TextIcon.Paragraph">
      <summary>
            Paragraph icon.
            </summary>
    </member>
    <member name="F:Aspose.Pdf.InteractiveFeatures.Annotations.TextIcon.Insert">
      <summary>
            Insert icon.
            </summary>
    </member>
    <member name="F:Aspose.Pdf.InteractiveFeatures.Annotations.TextIcon.Check">
      <summary>
            Check icon.
            </summary>
    </member>
    <member name="T:Aspose.Pdf.InteractiveFeatures.Justification">
      <summary>
            Enumerates the forms of quadding (justification) to be used in displaying the annotation’s text.
            </summary>
    </member>
    <member name="F:Aspose.Pdf.InteractiveFeatures.Justification.Left">
      <summary>
            Left justification.
            </summary>
    </member>
    <member name="F:Aspose.Pdf.InteractiveFeatures.Justification.Center">
      <summary>
            Center justification.
            </summary>
    </member>
    <member name="F:Aspose.Pdf.InteractiveFeatures.Justification.Right">
      <summary>
            Right justification.
            </summary>
    </member>
    <member name="T:Aspose.Pdf.InteractiveFeatures.NamedAction">
      <summary>
            Represents named actions that PDF viewer applications are expected to support.
            </summary>
    </member>
    <member name="M:Aspose.Pdf.InteractiveFeatures.NamedAction.#ctor(Aspose.Pdf.InteractiveFeatures.PredefinedAction)">
      <summary>
            Constructor.
            </summary>
      <param name="action">
      </param>
    </member>
    <member name="P:Aspose.Pdf.InteractiveFeatures.NamedAction.Name">
      <summary>
            Gets or sets the action to be performed.
            </summary>
    </member>
    <member name="T:Aspose.Pdf.InteractiveFeatures.PredefinedAction">
      <summary>
            Defines different actions which can be triggered from a PDF file.
            </summary>
    </member>
    <member name="F:Aspose.Pdf.InteractiveFeatures.PredefinedAction.FirstPage">
      <summary>
            A named action to go to the first page.
            </summary>
    </member>
    <member name="F:Aspose.Pdf.InteractiveFeatures.PredefinedAction.LastPage">
      <summary>
             A named action to go to the last page.
             </summary>
    </member>
    <member name="F:Aspose.Pdf.InteractiveFeatures.PredefinedAction.NextPage">
      <summary>
            A named action to go to the next page.
            </summary>
    </member>
    <member name="F:Aspose.Pdf.InteractiveFeatures.PredefinedAction.PrevPage">
      <summary>
            A named action to go to the previous page.
            </summary>
    </member>
    <member name="F:Aspose.Pdf.InteractiveFeatures.PredefinedAction.PrintDialog">
      <summary>
            A named action to open a print dialog.
            </summary>
    </member>
    <member name="F:Aspose.Pdf.InteractiveFeatures.PredefinedAction.Bookmarks_ExpanCurrentBookmark">
      <summary>
            A named action to find current bookmark.
            </summary>
    </member>
    <member name="F:Aspose.Pdf.InteractiveFeatures.PredefinedAction.Bookmarks_HightlightCurrentBookmark">
      <summary>
            A named action to highlight current bookmark.
            </summary>
    </member>
    <member name="F:Aspose.Pdf.InteractiveFeatures.PredefinedAction.Document_AttachFile">
      <summary>
            A named action to add file attachment.
            </summary>
    </member>
    <member name="F:Aspose.Pdf.InteractiveFeatures.PredefinedAction.Document_CropPages">
      <summary>
            A named action to crop document pages.
            </summary>
    </member>
    <member name="F:Aspose.Pdf.InteractiveFeatures.PredefinedAction.Document_DeletePages">
      <summary>
            A named action to delete document pages.
            </summary>
    </member>
    <member name="F:Aspose.Pdf.InteractiveFeatures.PredefinedAction.Document_ExtractPages">
      <summary>
            A named action to exctract document pages.
            </summary>
    </member>
    <member name="F:Aspose.Pdf.InteractiveFeatures.PredefinedAction.Document_InsertPages">
      <summary>
            A named action to insert pages from a document.
            </summary>
    </member>
    <member name="F:Aspose.Pdf.InteractiveFeatures.PredefinedAction.Document_ReplacePages">
      <summary>
            A named action to replace document pages.
            </summary>
    </member>
    <member name="F:Aspose.Pdf.InteractiveFeatures.PredefinedAction.Document_RotatePages">
      <summary>
            A named action to rotate document pages.
            </summary>
    </member>
    <member name="F:Aspose.Pdf.InteractiveFeatures.PredefinedAction.Edit_CheckSpelling_InComFieldEdit">
      <summary>
            A named action to check spelling in comments.
            </summary>
    </member>
    <member name="F:Aspose.Pdf.InteractiveFeatures.PredefinedAction.Edit_Find">
      <summary>
            A named action to find.
            </summary>
    </member>
    <member name="F:Aspose.Pdf.InteractiveFeatures.PredefinedAction.Edit_Preferences">
      <summary>
            A named action to edit preferences.
            </summary>
    </member>
    <member name="F:Aspose.Pdf.InteractiveFeatures.PredefinedAction.Edit_Search">
      <summary>
            A named action for searching.
            </summary>
    </member>
    <member name="F:Aspose.Pdf.InteractiveFeatures.PredefinedAction.File_AttachToEmail">
      <summary>
            A named action for attaching current pdf document into email message.
            </summary>
    </member>
    <member name="F:Aspose.Pdf.InteractiveFeatures.PredefinedAction.File_Close">
      <summary>
            A named action to close the document.
            </summary>
    </member>
    <member name="F:Aspose.Pdf.InteractiveFeatures.PredefinedAction.File_CreatePDF_FromScanner">
      <summary>
            A named action to create pdf document from scanner.
            </summary>
    </member>
    <member name="F:Aspose.Pdf.InteractiveFeatures.PredefinedAction.File_CreatePDF_FromWebPage">
      <summary>
            A named action to create pdf document from web page.
            </summary>
    </member>
    <member name="F:Aspose.Pdf.InteractiveFeatures.PredefinedAction.File_Exit">
      <summary>
            A named action to exit pdf reader.
            </summary>
    </member>
    <member name="F:Aspose.Pdf.InteractiveFeatures.PredefinedAction.File_Organizer_OpenOrganizer">
      <summary>
            A named action to open organizer.
            </summary>
    </member>
    <member name="F:Aspose.Pdf.InteractiveFeatures.PredefinedAction.File_Print">
      <summary>
            A named action to print the document.
            </summary>
    </member>
    <member name="F:Aspose.Pdf.InteractiveFeatures.PredefinedAction.File_Properties">
      <summary>
            A named action to open the document properties.
            </summary>
    </member>
    <member name="F:Aspose.Pdf.InteractiveFeatures.PredefinedAction.File_SaveAs">
      <summary>
            A named action to save the document with another name.
            </summary>
    </member>
    <member name="F:Aspose.Pdf.InteractiveFeatures.PredefinedAction.Miscellaneous_ZoomIn">
      <summary>
            A named action to zoom in the document.
            </summary>
    </member>
    <member name="F:Aspose.Pdf.InteractiveFeatures.PredefinedAction.Miscellaneous_ZoomOut">
      <summary>
            A named action to zoom out the document.
            </summary>
    </member>
    <member name="F:Aspose.Pdf.InteractiveFeatures.PredefinedAction.PageImages_PrintPages">
      <summary>
            A named action to print the document pages.
            </summary>
    </member>
    <member name="F:Aspose.Pdf.InteractiveFeatures.PredefinedAction.View_GoTo_NextView">
      <summary>
            A named action to go to the next view.
            </summary>
    </member>
    <member name="F:Aspose.Pdf.InteractiveFeatures.PredefinedAction.View_GoTo_Page">
      <summary>
            A named action to go to the certain page.
            </summary>
    </member>
    <member name="F:Aspose.Pdf.InteractiveFeatures.PredefinedAction.View_GoTo_PreDocument">
      <summary>
            A named action to go to the previous document.
            </summary>
    </member>
    <member name="F:Aspose.Pdf.InteractiveFeatures.PredefinedAction.View_GoTo_PreView">
      <summary>
            A named action to go to the previous view.
            </summary>
    </member>
    <member name="F:Aspose.Pdf.InteractiveFeatures.PredefinedAction.View_NavigationPanels_Articles">
      <summary>
            A named action to show/hide articles panel.
            </summary>
    </member>
    <member name="F:Aspose.Pdf.InteractiveFeatures.PredefinedAction.View_NavigationPanels_Attachments">
      <summary>
            A named action to show/hide attachment panel.
            </summary>
    </member>
    <member name="F:Aspose.Pdf.InteractiveFeatures.PredefinedAction.View_NavigationPanels_Boomarks">
      <summary>
            A named action to show/hide bookmark panel.
            </summary>
    </member>
    <member name="F:Aspose.Pdf.InteractiveFeatures.PredefinedAction.View_NavigationPanels_Comments">
      <summary>
            A named action to show/hide comments panel.
            </summary>
    </member>
    <member name="F:Aspose.Pdf.InteractiveFeatures.PredefinedAction.View_NavigationPanels_Fields">
      <summary>
            A named action to show/hide fields panel.
            </summary>
    </member>
    <member name="F:Aspose.Pdf.InteractiveFeatures.PredefinedAction.View_NavigationPanels_Layers">
      <summary>
            A named action to show/hide layers panel.
            </summary>
    </member>
    <member name="F:Aspose.Pdf.InteractiveFeatures.PredefinedAction.View_NavigationPanels_ModelTree">
      <summary>
            A named action to show/hide model tree panel.
            </summary>
    </member>
    <member name="F:Aspose.Pdf.InteractiveFeatures.PredefinedAction.View_NavigationPanels_Pages">
      <summary>
            A named action to show/hide pages panel.
            </summary>
    </member>
    <member name="F:Aspose.Pdf.InteractiveFeatures.PredefinedAction.View_NavigationPanels_Signatures">
      <summary>
            A named action to show/hide signatures panel.
            </summary>
    </member>
    <member name="F:Aspose.Pdf.InteractiveFeatures.PredefinedAction.View_PageDisplay_SinglePage">
      <summary>
            A named action to display single page.
            </summary>
    </member>
    <member name="F:Aspose.Pdf.InteractiveFeatures.PredefinedAction.View_PageDisplay_SinglePageContinuous">
      <summary>
            A named action to display single continious page.
            </summary>
    </member>
    <member name="F:Aspose.Pdf.InteractiveFeatures.PredefinedAction.View_PageDisplay_TwoUp">
      <summary>
            A named action to display pages as Two-Up.
            </summary>
    </member>
    <member name="F:Aspose.Pdf.InteractiveFeatures.PredefinedAction.View_PageDisplay_TwoUpContinuous">
      <summary>
            A named action to display pages as Two-Up continious.
            </summary>
    </member>
    <member name="F:Aspose.Pdf.InteractiveFeatures.PredefinedAction.View_Toolbars_AdvanceEditing">
      <summary>
            A named action to show/hide advanced editing toolbar.
            </summary>
    </member>
    <member name="F:Aspose.Pdf.InteractiveFeatures.PredefinedAction.View_Toolbars_CommentMarkup">
      <summary>
            A named action to show/hide commenting toolbar.
            </summary>
    </member>
    <member name="F:Aspose.Pdf.InteractiveFeatures.PredefinedAction.View_Toolbars_Edit">
      <summary>
            A named action to show/hide edit toolbar.
            </summary>
    </member>
    <member name="F:Aspose.Pdf.InteractiveFeatures.PredefinedAction.View_Toolbars_File">
      <summary>
            A named action to show/hide file toolbar.
            </summary>
    </member>
    <member name="F:Aspose.Pdf.InteractiveFeatures.PredefinedAction.View_Toolbars_Find">
      <summary>
            A named action to show/hide find toolbar.
            </summary>
    </member>
    <member name="F:Aspose.Pdf.InteractiveFeatures.PredefinedAction.View_Toolbars_Forms">
      <summary>
            A named action to show/hide forms toolbar.
            </summary>
    </member>
    <member name="F:Aspose.Pdf.InteractiveFeatures.PredefinedAction.View_Toolbars_Measuring">
      <summary>
            A named action to show/hide measuring toolbar.
            </summary>
    </member>
    <member name="F:Aspose.Pdf.InteractiveFeatures.PredefinedAction.View_Toolbars_ObjectData">
      <summary>
            A named action to show/hide object data toolbar.
            </summary>
    </member>
    <member name="F:Aspose.Pdf.InteractiveFeatures.PredefinedAction.View_Toolbars_PageDisplay">
      <summary>
            A named action to show/hide page display toolbar.
            </summary>
    </member>
    <member name="F:Aspose.Pdf.InteractiveFeatures.PredefinedAction.View_Toolbars_PageNavigation">
      <summary>
            A named action to show/hide navigation toolbar.
            </summary>
    </member>
    <member name="F:Aspose.Pdf.InteractiveFeatures.PredefinedAction.View_Toolbars_PrintProduction">
      <summary>
            A named action to show/hide print production toolbar.
            </summary>
    </member>
    <member name="F:Aspose.Pdf.InteractiveFeatures.PredefinedAction.View_Toolbars_PropertiesBar">
      <summary>
            A named action to show/hide property toolbar.
            </summary>
    </member>
    <member name="F:Aspose.Pdf.InteractiveFeatures.PredefinedAction.View_Toolbars_Redaction">
      <summary>
            A named action to show/hide redaction toolbar.
            </summary>
    </member>
    <member name="F:Aspose.Pdf.InteractiveFeatures.PredefinedAction.View_Toolbars_SelectZoom">
      <summary>
            A named action to show/hide select &amp; zoom toolbar.
            </summary>
    </member>
    <member name="F:Aspose.Pdf.InteractiveFeatures.PredefinedAction.View_Toolbars_Tasks">
      <summary>
            A named action to show/hide tasks toolbar.
            </summary>
    </member>
    <member name="F:Aspose.Pdf.InteractiveFeatures.PredefinedAction.View_Toolbars_Typewriter">
      <summary>
            A named action to show/hide typewriter toolbar.
            </summary>
    </member>
    <member name="F:Aspose.Pdf.InteractiveFeatures.PredefinedAction.View_Zoom_ActualSize">
      <summary>
            A named action to view pages in actual size.
            </summary>
    </member>
    <member name="F:Aspose.Pdf.InteractiveFeatures.PredefinedAction.View_Zoom_FitHeight">
      <summary>
            A named action to fit page on height.
            </summary>
    </member>
    <member name="F:Aspose.Pdf.InteractiveFeatures.PredefinedAction.View_Zoom_FitPage">
      <summary>
            A named action to fit page.
            </summary>
    </member>
    <member name="F:Aspose.Pdf.InteractiveFeatures.PredefinedAction.View_Zoom_FitVisible">
      <summary>
            A named action to fit page visibility.
            </summary>
    </member>
    <member name="F:Aspose.Pdf.InteractiveFeatures.PredefinedAction.View_Zoom_FitWidth">
      <summary>
            A named action to fit page on width.
            </summary>
    </member>
    <member name="F:Aspose.Pdf.InteractiveFeatures.PredefinedAction.View_Zoom_ZoomTo">
      <summary>
            A named action to make zoom.
            </summary>
    </member>
    <member name="F:Aspose.Pdf.InteractiveFeatures.PredefinedAction.Window_FullScreenMode">
      <summary>
            A named action to view the document in the full screen mode.
            </summary>
    </member>
    <member name="T:Aspose.Pdf.InteractiveFeatures.XfdfReader">
      <summary>
            Class which peroformes reading of XFDF format. 
            </summary>
      <example>
        <code lang="C#">
            Document doc = new Document("example.pdf");
            Stream xfdfStream = File.OpenRead("file.xfdf");
            XfdfReader.ReadAnnotations(xfdfStream, doc);
            xfdfStream.Close();
            doc.Save("example_out.pdf");
            </code>
      </example>
    </member>
    <member name="M:Aspose.Pdf.InteractiveFeatures.XfdfReader.ReadAnnotations(System.IO.Stream,Aspose.Pdf.Document)">
      <summary>
            Import annotations from XFDF file and put them into document.
            </summary>
      <param name="stream">Source stream containing XFDF file.</param>
      <param name="document">Document where annotations will be added.</param>
    </member>
    <member name="M:Aspose.Pdf.InteractiveFeatures.XfdfReader.ReadFields(System.IO.Stream,Aspose.Pdf.Document)">
      <summary>
            Import field values from XFDF file.
            </summary>
      <param name="stream">Stream containing XFDF data.</param>
      <param name="document">Document where fields data will be imported.</param>
    </member>
    <member name="M:Aspose.Pdf.InteractiveFeatures.XfdfReader.GetElements(System.Xml.XmlReader)">
      <summary>
            Parses XFDF file and returns information as hashtable.
            </summary>
      <param name="reader">XmlReader for the source file.</param>
      <returns>Hashtable with information parsed from XFDF file.</returns>
    </member>
    <member name="T:Aspose.Pdf.IOperatorSelector">
      <summary>
            Defines Visitor for visiting different pdf operators.
            </summary>
    </member>
    <member name="M:Aspose.Pdf.IOperatorSelector.Visit(Aspose.Pdf.Operator.Fill)">
      <summary>
            Visit/select f operator.
            </summary>
      <param name="f">
            Fill path operator (nonzero winding number rule).
            </param>
    </member>
    <member name="M:Aspose.Pdf.IOperatorSelector.Visit(Aspose.Pdf.Operator.ObsoleteFill)">
      <summary>
            Visit/select F operator.
            </summary>
      <param name="F">
            Fill path operator (nonzero winding number rule).
            </param>
    </member>
    <member name="M:Aspose.Pdf.IOperatorSelector.Visit(Aspose.Pdf.Operator.EOFill)">
      <summary>
            Visit/select operator f*.
            </summary>
      <param name="f_">
            Fill path operator (even-odd rule).
            </param>
    </member>
    <member name="M:Aspose.Pdf.IOperatorSelector.Visit(Aspose.Pdf.Operator.SetGrayStroke)">
      <summary>
            Visit/select G operator.
            </summary>
      <param name="G">
            Set gray level operator (for stroking operations).
            </param>
    </member>
    <member name="M:Aspose.Pdf.IOperatorSelector.Visit(Aspose.Pdf.Operator.SetGray)">
      <summary>
            Visit/select g operator.
            </summary>
      <param name="g">
            Set gray level operator (for nonstroking operations).
            </param>
    </member>
    <member name="M:Aspose.Pdf.IOperatorSelector.Visit(Aspose.Pdf.Operator.GS)">
      <summary>
            Visit/select gs operator.
            </summary>
      <param name="gs">
            Set graphics state operator.
            </param>
    </member>
    <member name="M:Aspose.Pdf.IOperatorSelector.Visit(Aspose.Pdf.Operator.ClosePath)">
      <summary>
            Visit/select h operator.
            </summary>
      <param name="h">
            Close subpath operator.
            </param>
    </member>
    <member name="M:Aspose.Pdf.IOperatorSelector.Visit(Aspose.Pdf.Operator.SetFlat)">
      <summary>
            Visit/select i operator.
            </summary>
      <param name="i">
            Set flatness tolerance operator.
            </param>
    </member>
    <member name="M:Aspose.Pdf.IOperatorSelector.Visit(Aspose.Pdf.Operator.ID)">
      <summary>
            Visit/select ID operator.
            </summary>
      <param name="ID">
            Begin inline image data operator.
            </param>
    </member>
    <member name="M:Aspose.Pdf.IOperatorSelector.Visit(Aspose.Pdf.Operator.SetColorRenderingIntent)">
      <summary>
            Visit/select ri operator.
            </summary>
      <param name="ri">
            Set color rendering intent operator.
            </param>
    </member>
    <member name="M:Aspose.Pdf.IOperatorSelector.Visit(Aspose.Pdf.Operator.SetLineCap)">
      <summary>
            Visit/select J operator.
            </summary>
      <param name="J">
            Set line cap style operator.
            </param>
    </member>
    <member name="M:Aspose.Pdf.IOperatorSelector.Visit(Aspose.Pdf.Operator.SetMiterLimit)">
      <summary>
            Visit/select M operator.
            </summary>
      <param name="M">
            Set miter limit operator.
            </param>
    </member>
    <member name="M:Aspose.Pdf.IOperatorSelector.Visit(Aspose.Pdf.Operator.MP)">
      <summary>
            Visit/select MP operator.
            </summary>
      <param name="MP">
            Define marked-content point operator.
            </param>
    </member>
    <member name="M:Aspose.Pdf.IOperatorSelector.Visit(Aspose.Pdf.Operator.EndPath)">
      <summary>
            Visit/select n operator.
            </summary>
      <param name="n">
            End path operator (without filling or stroking).
            </param>
    </member>
    <member name="M:Aspose.Pdf.IOperatorSelector.Visit(Aspose.Pdf.Operator.GSave)">
      <summary>
            Visit/select q operator.
            </summary>
      <param name="q">
            Save graphics state operator.
            </param>
    </member>
    <member name="M:Aspose.Pdf.IOperatorSelector.Visit(Aspose.Pdf.Operator.GRestore)">
      <summary>
            Visit/select Q operator.
            </summary>
      <param name="Q">
            Restore graphics state operator.
            </param>
    </member>
    <member name="M:Aspose.Pdf.IOperatorSelector.Visit(Aspose.Pdf.Operator.Re)">
      <summary>
            Visit/select re operator.
            </summary>
      <param name="re">
            Append rectangle to path operator.
            </param>
    </member>
    <member name="M:Aspose.Pdf.IOperatorSelector.Visit(Aspose.Pdf.Operator.SetRGBColorStroke)">
      <summary>
            Visit/select RG operator.
            </summary>
      <param name="RG">
            Set RGB color operator (for stroking operations).
            </param>
    </member>
    <member name="M:Aspose.Pdf.IOperatorSelector.Visit(Aspose.Pdf.Operator.SetRGBColor)">
      <summary>
            Visit/select rg operator.
            </summary>
      <param name="rg">
            Set RGB color operator (for nonstroking operations).
            </param>
    </member>
    <member name="M:Aspose.Pdf.IOperatorSelector.Visit(Aspose.Pdf.Operator.SetCMYKColorStroke)">
      <summary>
            Visit/select K operator.
            </summary>
      <param name="K">
            Set CMYK color operator (for stroking operations).
            </param>
    </member>
    <member name="M:Aspose.Pdf.IOperatorSelector.Visit(Aspose.Pdf.Operator.SetCMYKColor)">
      <summary>
            Visit/select k operator.
            </summary>
      <param name="k">
            Set CMYK color operator (for nonstroking operations).
            </param>
    </member>
    <member name="M:Aspose.Pdf.IOperatorSelector.Visit(Aspose.Pdf.Operator.LineTo)">
      <summary>
            Visit/select l operator.
            </summary>
      <param name="l">
            Append straight line segment to path operator.
            </param>
    </member>
    <member name="M:Aspose.Pdf.IOperatorSelector.Visit(Aspose.Pdf.Operator.MoveTo)">
      <summary>
            Visit/select m operator.
            </summary>
      <param name="m">
            Begin new subpath operator.
            </param>
    </member>
    <member name="M:Aspose.Pdf.IOperatorSelector.Visit(Aspose.Pdf.Operator.SetWordSpacing)">
      <summary>
            Visit/select Tw operator.
            </summary>
      <param name="Tw">
            Set word spacing operator.
            </param>
    </member>
    <member name="M:Aspose.Pdf.IOperatorSelector.Visit(Aspose.Pdf.Operator.ClosePathStroke)">
      <summary>
            Visit/select s operator.
            </summary>
      <param name="s">
            Close and stroke path operator.
            </param>
    </member>
    <member name="M:Aspose.Pdf.IOperatorSelector.Visit(Aspose.Pdf.Operator.MoveTextPositionSetLeading)">
      <summary>
            Visit/select TD operator.
            </summary>
      <param name="TD">
            Move text position and set leading operator.
            </param>
    </member>
    <member name="M:Aspose.Pdf.IOperatorSelector.Visit(Aspose.Pdf.Operator.SelectFont)">
      <summary>
            Visit/select Tf operator.
            </summary>
      <param name="Tf">
            Set text font and size operator.
            </param>
    </member>
    <member name="M:Aspose.Pdf.IOperatorSelector.Visit(Aspose.Pdf.Operator.ShowText)">
      <summary>
            Visit/select Tj operator.
            </summary>
      <param name="Tj">
            Show text operator.
            </param>
    </member>
    <member name="M:Aspose.Pdf.IOperatorSelector.Visit(Aspose.Pdf.Operator.SetGlyphsPositionShowText)">
      <summary>
            Visit/select TJ operator.
            </summary>
      <param name="TJ">
            Show text operator (allowing individual glyph positioning).
            </param>
    </member>
    <member name="M:Aspose.Pdf.IOperatorSelector.Visit(Aspose.Pdf.Operator.SetTextLeading)">
      <summary>
            Visit/select TL operator.
            </summary>
      <param name="TL">
            Set text leading operator.
            </param>
    </member>
    <member name="M:Aspose.Pdf.IOperatorSelector.Visit(Aspose.Pdf.Operator.SetTextMatrix)">
      <summary>
            Visit/select Tm operator.
            </summary>
      <param name="Tm">
            Set text matrix and text line matrix operator.
            </param>
    </member>
    <member name="M:Aspose.Pdf.IOperatorSelector.Visit(Aspose.Pdf.Operator.SetTextRenderingMode)">
      <summary>
            Visit/select Tr operator.
            </summary>
      <param name="Tr">
            Set text rendering mode operator.
            </param>
    </member>
    <member name="M:Aspose.Pdf.IOperatorSelector.Visit(Aspose.Pdf.Operator.SetTextRise)">
      <summary>
            Visit/select Ts operator.
            </summary>
      <param name="Ts">
            Set text rise operator.
            </param>
    </member>
    <member name="M:Aspose.Pdf.IOperatorSelector.Visit(Aspose.Pdf.Operator.Stroke)">
      <summary>
            Visit/select S operator.
            </summary>
      <param name="S">
            Stroke path operator.
            </param>
    </member>
    <member name="M:Aspose.Pdf.IOperatorSelector.Visit(Aspose.Pdf.Operator.SetColorStroke)">
      <summary>
            Visit/select SC operator.
            </summary>
      <param name="SC">
            Set color operator (for stroking operations).
            </param>
    </member>
    <member name="M:Aspose.Pdf.IOperatorSelector.Visit(Aspose.Pdf.Operator.SetColor)">
      <summary>
            Visit/select sc operator.
            </summary>
      <param name="sc">
            Set color operator (for nonstroking operations).
            </param>
    </member>
    <member name="M:Aspose.Pdf.IOperatorSelector.Visit(Aspose.Pdf.Operator.SetAdvancedColorStroke)">
      <summary>
            Visit/select SCN operator.
            </summary>
      <param name="SCN">
            Set color operator (for stroking operations, ICCBasedand special colour spaces).
            </param>
    </member>
    <member name="M:Aspose.Pdf.IOperatorSelector.Visit(Aspose.Pdf.Operator.SetAdvancedColor)">
      <summary>
            Visit/select scn operator.
            </summary>
      <param name="scn">
            Set color operator (for nonstroking operations, ICCBased and special colour spaces).
            </param>
    </member>
    <member name="M:Aspose.Pdf.IOperatorSelector.Visit(Aspose.Pdf.Operator.ShFill)">
      <summary>
            Visit/select sh operator.
            </summary>
      <param name="sh">
            Paint area defined by shading pattern operator.
            </param>
    </member>
    <member name="M:Aspose.Pdf.IOperatorSelector.Visit(Aspose.Pdf.Operator.MoveToNextLine)">
      <summary>
            Visit/select T* operator.
            </summary>
      <param name="T_">
            Move to start of next text line operator.
            </param>
    </member>
    <member name="M:Aspose.Pdf.IOperatorSelector.Visit(Aspose.Pdf.Operator.SetCharacterSpacing)">
      <summary>
            Visit/select Tc operator.
            </summary>
      <param name="Tc">
            Set character spacing operator.
            </param>
    </member>
    <member name="M:Aspose.Pdf.IOperatorSelector.Visit(Aspose.Pdf.Operator.MoveTextPosition)">
      <summary>
            Visit/select Td operator.
            </summary>
      <param name="Td">
            Move text position operator.
            </param>
    </member>
    <member name="M:Aspose.Pdf.IOperatorSelector.Visit(Aspose.Pdf.Operator.CurveTo2)">
      <summary>
            Visit/select y operator.
            </summary>
      <param name="y">
            Append curved segment to path operator (final point replicated).
            </param>
    </member>
    <member name="M:Aspose.Pdf.IOperatorSelector.Visit(Aspose.Pdf.Operator.EOClip)">
      <summary>
            Visit/select W* operator.
            </summary>
      <param name="W_">
            Set clipping path operator (even-odd rule).
            </param>
    </member>
    <member name="M:Aspose.Pdf.IOperatorSelector.Visit(Aspose.Pdf.Operator.SetHorizontalTextScaling)">
      <summary>
            Visit/select Tz operator.
            </summary>
      <param name="Tz">
            Set horizontal text scaling operator.
            </param>
    </member>
    <member name="M:Aspose.Pdf.IOperatorSelector.Visit(Aspose.Pdf.Operator.CurveTo1)">
      <summary>
            Visit/select v operator.
            </summary>
      <param name="v">
            Append curved segment to path operator (initial point replicated).
            </param>
    </member>
    <member name="M:Aspose.Pdf.IOperatorSelector.Visit(Aspose.Pdf.Operator.Clip)">
      <summary>
            Visit/select W operator.
            </summary>
      <param name="W">
            Set clipping path operator (nonzero winding number rule).
            </param>
    </member>
    <member name="M:Aspose.Pdf.IOperatorSelector.Visit(Aspose.Pdf.Operator.SetLineWidth)">
      <summary>
            Visit/select w operator.
            </summary>
      <param name="w">
            Set line width operator.
            </param>
    </member>
    <member name="M:Aspose.Pdf.IOperatorSelector.Visit(Aspose.Pdf.Operator.SetLineJoin)">
      <summary>
            Visit/select j operator.
            </summary>
      <param name="j">
            Set line join style operator.
            </param>
    </member>
    <member name="M:Aspose.Pdf.IOperatorSelector.Visit(Aspose.Pdf.Operator.EX)">
      <summary>
            Visit/select EX operator.
            </summary>
      <param name="EX">
            End compatibility section operator.
            </param>
    </member>
    <member name="M:Aspose.Pdf.IOperatorSelector.Visit(Aspose.Pdf.Operator.ET)">
      <summary>
            Visit/select ET operator.
            </summary>
      <param name="ET">
            End text object operator.
            </param>
    </member>
    <member name="M:Aspose.Pdf.IOperatorSelector.Visit(Aspose.Pdf.Operator.EMC)">
      <summary>
            Visit/select EMC operator.
            </summary>
      <param name="EMC">
            End marked-content sequence operator.
            </param>
    </member>
    <member name="M:Aspose.Pdf.IOperatorSelector.Visit(Aspose.Pdf.Operator.EI)">
      <summary>
            Visit/select EI operator.
            </summary>
      <param name="EI">
            End inline image object operator.
            </param>
    </member>
    <member name="M:Aspose.Pdf.IOperatorSelector.Visit(Aspose.Pdf.Operator.DP)">
      <summary>
            Visit/select DP operator.
            </summary>
      <param name="DP">
            Define marked-content point operator (with property list).
            </param>
    </member>
    <member name="M:Aspose.Pdf.IOperatorSelector.Visit(Aspose.Pdf.Operator.Do)">
      <summary>
            Visit/select Do operator.
            </summary>
      <param name="Do">
            Invoke named XObject operator.
            </param>
    </member>
    <member name="M:Aspose.Pdf.IOperatorSelector.Visit(Aspose.Pdf.Operator.SetDash)">
      <summary>
            Visit/select d operator.
            </summary>
      <param name="d">
            Set line dash pattern operator.
            </param>
    </member>
    <member name="M:Aspose.Pdf.IOperatorSelector.Visit(Aspose.Pdf.Operator.SetCharWidth)">
      <summary>
            Visit/select d0 operator.
            </summary>
      <param name="d0">
            Set glyph width in Type 3 font operator.
            </param>
    </member>
    <member name="M:Aspose.Pdf.IOperatorSelector.Visit(Aspose.Pdf.Operator.SetCharWidthBoundingBox)">
      <summary>
            Visit/select d1 operator.
            </summary>
      <param name="d1">
            Set glyph width and bounding box in Type 3 font operator.
            </param>
    </member>
    <member name="M:Aspose.Pdf.IOperatorSelector.Visit(Aspose.Pdf.Operator.SetColorSpaceStroke)">
      <summary>
            Visit/select CS operator.
            </summary>
      <param name="CS">
            Set color space operator (for stroking operations).
            </param>
    </member>
    <member name="M:Aspose.Pdf.IOperatorSelector.Visit(Aspose.Pdf.Operator.SetColorSpace)">
      <summary>
            Visit/select cs operator.
            </summary>
      <param name="cs">
            Set color space operator (for nonstroking operations).
            </param>
    </member>
    <member name="M:Aspose.Pdf.IOperatorSelector.Visit(Aspose.Pdf.Operator.ConcatenateMatrix)">
      <summary>
            Visit/select cm operator.
            </summary>
      <param name="cm">
            Concatenate matrix to current transformation matrix operator.
            </param>
    </member>
    <member name="M:Aspose.Pdf.IOperatorSelector.Visit(Aspose.Pdf.Operator.CurveTo)">
      <summary>
            Visit/select c operator.
            </summary>
      <param name="c">
            Append curved segment to path operator (three control points).
            </param>
    </member>
    <member name="M:Aspose.Pdf.IOperatorSelector.Visit(Aspose.Pdf.Operator.BX)">
      <summary>
            Visit/select BX operator.
            </summary>
      <param name="BX">
            Begin compatibility section operator.
            </param>
    </member>
    <member name="M:Aspose.Pdf.IOperatorSelector.Visit(Aspose.Pdf.Operator.BT)">
      <summary>
            Visit/select BT operator.
            </summary>
      <param name="BT">
            Begin text object operator.
            </param>
    </member>
    <member name="M:Aspose.Pdf.IOperatorSelector.Visit(Aspose.Pdf.Operator.BMC)">
      <summary>
            Visit/select BMC operator.
            </summary>
      <param name="BMC">
            Begin marked-content sequence operator.
            </param>
    </member>
    <member name="M:Aspose.Pdf.IOperatorSelector.Visit(Aspose.Pdf.Operator.BI)">
      <summary>
            Visit/select BI operator.
            </summary>
      <param name="BI">
            Begin inline image object operator.
            </param>
    </member>
    <member name="M:Aspose.Pdf.IOperatorSelector.Visit(Aspose.Pdf.Operator.BDC)">
      <summary>
            Visit/select BDC operator.
            </summary>
      <param name="BDC">
            Begin marked-content sequence operator (with property list).
            </param>
    </member>
    <member name="M:Aspose.Pdf.IOperatorSelector.Visit(Aspose.Pdf.Operator.FillStroke)">
      <summary>
            Visit/select B operator.
            </summary>
      <param name="B">
            Fill and stroke path operator (nonzero winding number rule).
            </param>
    </member>
    <member name="M:Aspose.Pdf.IOperatorSelector.Visit(Aspose.Pdf.Operator.ClosePathFillStroke)">
      <summary>
            Visit/select b operator.
            </summary>
      <param name="b">
            Close, fill, and stroke path operator (nonzero winding number rule).
            </param>
    </member>
    <member name="M:Aspose.Pdf.IOperatorSelector.Visit(Aspose.Pdf.Operator.EOFillStroke)">
      <summary>
            Visit/select B* operator.
            </summary>
      <param name="B_">
            Fill and stroke path operator (even-odd rule).
            </param>
    </member>
    <member name="M:Aspose.Pdf.IOperatorSelector.Visit(Aspose.Pdf.Operator.ClosePathEOFillStroke)">
      <summary>
            Visit/select b* operator.
            </summary>
      <param name="b_">
            Close, fill, and stroke path operator (even-odd rule).
            </param>
    </member>
    <member name="M:Aspose.Pdf.IOperatorSelector.Visit(Aspose.Pdf.Operator.MoveToNextLineShowText)">
      <summary>
            Visit/select ' operator.
            </summary>
      <param name="_">
            Move to next line and show text operator.
            </param>
    </member>
    <member name="M:Aspose.Pdf.IOperatorSelector.Visit(Aspose.Pdf.Operator.SetSpacingMoveToNextLineShowText)">
      <summary>
            Visit/select '' operator.
            </summary>
      <param name="__">
            Set word and character spacing, move to next line, and show text operator.
            </param>
    </member>
    <member name="M:Aspose.Pdf.IOperatorSelector.Visit(Aspose.Pdf.Operator.TextOperator)">
      <summary>
            Visit/select any text operator operator.
            </summary>
      <param name="textOperator">
            General text operator which is used to select the set of corresponding pdf operators.
            </param>
    </member>
    <member name="T:Aspose.Pdf.License">
      <summary>
            Provides methods to license the component.
            </summary>
      <example>
            In this example, an attempt will be made to find a license file named MyLicense.lic
            in the folder that contains 
            
            
            the component, in the folder that contains the calling assembly,
            in the folder of the entry assembly and then in the embedded resources of the calling assembly.
            <code>
            [C#]
            
            License license = new License();
            license.SetLicense("MyLicense.lic");
            
            
            [Visual Basic]
            
            Dim license As license = New license
            License.SetLicense("MyLicense.lic")
            </code></example>
    </member>
    <member name="M:Aspose.Pdf.License.#ctor">
      <summary>
            Initializes a new instance of this class.
            </summary>
      <example>
            In this example, an attempt will be made to find a license file named MyLicense.lic
            in the folder that contains 
            
            
            the component, in the folder that contains the calling assembly,
            in the folder of the entry assembly and then in the embedded resources of the calling assembly.
            <code>
            [C#]
            
            License license = new License();
            license.SetLicense("MyLicense.lic");
            
            
            [Visual Basic]
            
            Dim license As license = New license
            License.SetLicense("MyLicense.lic")
            </code></example>
    </member>
    <member name="M:Aspose.Pdf.License.SetLicense(System.String)">
      <summary>
            Licenses the component.
            </summary>
      <remarks>
        <p>Tries to find the license in the following locations:</p>
        <p>1. Explicit path.</p>
        <p>2. The folder of the component assembly.</p>
        <p>3. The folder of the client's calling assembly.</p>
        <p>4. The folder of the entry assembly.</p>
        <p>5. An embedded resource in the client's calling assembly.</p>
        <p>
          <b>Note:</b>On the .NET Compact Framework, tries to find the license only in these locations:</p>
        <p>1. Explicit path.</p>
        <p>2. An embedded resource in the client's calling assembly.</p>
      </remarks>
      <example>
            In this example, an attempt will be made to find a license file named MyLicense.lic
            in the folder that contains 
            
            
            the component, in the folder that contains the calling assembly,
            in the folder of the entry assembly and then in the embedded resources of the calling assembly.
            <code>
            [C#]
            
            License license = new License();
            license.SetLicense("MyLicense.lic");
            
            
            [Visual Basic]
            
            Dim license As License = New License
            license.SetLicense("MyLicense.lic")
            </code><param name="licenseName">Can be a full or short file name or name of an embedded resource.
            Use an empty string to switch to evaluation mode.</param></example>
    </member>
    <member name="M:Aspose.Pdf.License.SetLicense(System.IO.Stream)">
      <summary>
            Licenses the component.
            </summary>
      <param name="stream">A stream that contains the license.</param>
      <remarks>
        <p>Use this method to load a license from a stream.</p>
      </remarks>
      <example>
        <code>
            [C#]
            
            License license = new License();
            license.SetLicense(myStream);
            
            
            [Visual Basic]
            
            Dim license as License = new License
            license.SetLicense(myStream)
            </code>
      </example>
    </member>
    <member name="P:Aspose.Pdf.License.Embedded">
      <summary>
            License number was added as embedded resource.
            </summary>
    </member>
    <member name="T:Aspose.Pdf.Metadata">
      <summary>
            Provides access to XMP metadata stream.
            </summary>
    </member>
    <member name="M:Aspose.Pdf.Metadata.RegisterNamespaceUri(System.String,System.String)">
      <summary>
            Registers namespace URI.
            </summary>
      <param name="prefix">Prefix.</param>
      <param name="namespaceUri">Namespace URI.</param>
    </member>
    <member name="M:Aspose.Pdf.Metadata.GetNamespaceUriByPrefix(System.String)">
      <summary>
            Returns  namespace URI by prefix.
            </summary>
      <param name="prefix">Prefix.</param>
      <returns>Namespace URI.</returns>
    </member>
    <member name="M:Aspose.Pdf.Metadata.GetPrefixByNamespaceUri(System.String)">
      <summary>
            Returns prefix by namespace URI.
            </summary>
      <param name="namespaceUri">Namespace URI.</param>
      <returns>Prefix.</returns>
    </member>
    <member name="M:Aspose.Pdf.Metadata.Add(System.Object,System.Object)">
      <summary>
            Adds value to metadata.
            </summary>
      <param name="key">Key name.</param>
      <param name="value">Value which will be added.</param>
    </member>
    <member name="M:Aspose.Pdf.Metadata.Clear">
      <summary>
            Clears metadata.
            </summary>
    </member>
    <member name="M:Aspose.Pdf.Metadata.Contains(System.Object)">
      <summary>
            Checks does key is contained in metadata.
            </summary>
      <param name="key">Key name.</param>
      <returns>True if key is contained in the metadata.</returns>
    </member>
    <member name="M:Aspose.Pdf.Metadata.GetEnumerator">
      <summary>
            Returns dictionary enumerator.
            </summary>
      <returns>Enumerator.</returns>
    </member>
    <member name="M:Aspose.Pdf.Metadata.Remove(System.Object)">
      <summary>
            Removes entry from metadata. 
            </summary>
      <param name="key">
      </param>
    </member>
    <member name="M:Aspose.Pdf.Metadata.CopyTo(System.Array,System.Int32)">
      <summary>
            Copies elements of the collection into array.
            </summary>
      <param name="array">Destination array.</param>
      <param name="index">Starting index.</param>
    </member>
    <member name="P:Aspose.Pdf.Metadata.IsFixedSize">
      <summary>
            Checks if colleciton has fixed size.
            </summary>
    </member>
    <member name="P:Aspose.Pdf.Metadata.IsReadOnly">
      <summary>
            Checks if collection is read-only.
            </summary>
    </member>
    <member name="P:Aspose.Pdf.Metadata.Keys">
      <summary>
            Gets collection of metadata keys.
            </summary>
    </member>
    <member name="P:Aspose.Pdf.Metadata.Values">
      <summary>
            Gets values in the metadata.
            </summary>
    </member>
    <member name="P:Aspose.Pdf.Metadata.Item(System.Object)">
      <summary>
            Gets or sets data from metadata.
            </summary>
      <param name="key">Key name.</param>
      <returns>Metadata object.</returns>
    </member>
    <member name="P:Aspose.Pdf.Metadata.Count">
      <summary>
            Gets count of elements in the collection.
            </summary>
    </member>
    <member name="P:Aspose.Pdf.Metadata.IsSynchronized">
      <summary>
            Checks if collection is synchronized.
            </summary>
    </member>
    <member name="P:Aspose.Pdf.Metadata.SyncRoot">
      <summary>
            Gets collection synchronization object.
            </summary>
    </member>
    <member name="T:Aspose.Pdf.Operator">
      <summary>
            Abstract class representing operator.
            </summary>
    </member>
    <member name="M:Aspose.Pdf.Operator.Accept(Aspose.Pdf.IOperatorSelector)">
      <summary>
            Accepts visitor IOperatorSelector which provides operators processing.
            </summary>
      <param name="visitor">Visitor object</param>
    </member>
    <member name="M:Aspose.Pdf.Operator.ToString">
      <summary>
            Returns text of operator and its parameters.
            </summary>
      <returns>Operator text</returns>
    </member>
    <member name="M:Aspose.Pdf.Operator.ToString(Aspose.Pdf.Engine.Data.IPdfPrimitive)">
      <summary>
            Returns text representation of Pdf primitive (string, array, dictionary etc.) according to PDF specification.
            </summary>
      <param name="primitive">Primitive</param>
      <returns>Text represetation of the primitive</returns>
    </member>
    <member name="M:Aspose.Pdf.Operator.IsTextShowOperator(Aspose.Pdf.Operator)">
      <summary>
            Determines if the operator is operator which responsible for text output (Tj, TJ, etc)
            </summary>
      <param name="op">Operator object</param>
      <returns>True if this is text output operator</returns>
    </member>
    <member name="P:Aspose.Pdf.Operator.Index">
      <summary>
            Operator index in page operators list.
            </summary>
    </member>
    <member name="T:Aspose.Pdf.OperatorCollection">
      <summary>
            Class represents collection of operators
            </summary>
    </member>
    <member name="M:Aspose.Pdf.OperatorCollection.CopyTo(System.Array,System.Int32)">
      <summary>
            Copies operators into operators list.
            </summary>
      <param name="array">Array with operators which must to be copied. This array must be Object[] or Operator[].</param>
      <param name="index">Starting index from which operators will be copied</param>
    </member>
    <member name="M:Aspose.Pdf.OperatorCollection.GetEnumerator">
      <summary>
            Returns enumerator for collection
            </summary>
      <returns>Collection enumerator</returns>
    </member>
    <member name="M:Aspose.Pdf.OperatorCollection.Accept(Aspose.Pdf.IOperatorSelector)">
      <summary>
            Accepts IOperatorSelector visitor object to process operators.
            </summary>
      <param name="visitor">Visitor object</param>
    </member>
    <member name="M:Aspose.Pdf.OperatorCollection.Add(Aspose.Pdf.Operator)">
      <summary>
            Adds new operator into collection.
            </summary>
      <param name="op">Operator which must be added</param>
      <example>
            Example demonstrates how to add operators to the end of page.contents.
            <code lang="C#">
            Document doc = new Document("input.pdf");
            doc.Pages[1].Contents.Add(new Operator.q());
            doc.Pages[1].Contents.Add(new Operator.Q());
            </code></example>
    </member>
    <member name="M:Aspose.Pdf.OperatorCollection.Delete(System.Int32)">
      <summary>
            Deletes operator from collection.
            </summary>
      <param name="index">Index of operator which must be deleted. Operators numbering starts from 1.</param>
      <example>
            Example demonstrates how to delete operator by its index.
            <code lang="C#">
            Document doc = new Document("input.pdf");
            OperatorCollection oc = doc.Pages[1].Contents;
            oc.Delete(3);
            </code></example>
    </member>
    <member name="M:Aspose.Pdf.OperatorCollection.Insert(System.Int32,Aspose.Pdf.Operator)">
      <summary>
            Inserts operator into collection.
            </summary>
      <param name="index">Index where new operator must be added</param>
      <param name="op">Operator which will be insterted</param>
      <example>
            Example demonstrates how to insert operator to the page contents.
            <code lang="C#">
            Document doc = new Document("input.pdf");
            OperatorCollection oc = doc.Pages[1].Contents;
            oc.Insert(1, new Operator.q());
            oc.Add(new Operator.Q());
            </code></example>
    </member>
    <member name="M:Aspose.Pdf.OperatorCollection.Replace(System.Collections.IList)">
      <summary>
            Replace operators in collection with other operators.
            </summary>
      <param name="operators">Operators list which will replace operators currently contained in the collection. Eash operator from the list must have correct index in range [1..N] where N is count of operators in the collection</param>
    </member>
    <member name="M:Aspose.Pdf.OperatorCollection.Add(Aspose.Pdf.Operator[])">
      <summary>
            Add operators at the end of the contents operators.
            </summary>
      <param name="ops">Array of operators to be added. Each operator can have any index (by default -1) because they come to the end of the contents operators i.e. indices are assigned automatically.</param>
      <example>
            Example demonstrates how to add  operator to the end of page contents.
            <code lang="C#">
            Document doc = new Document("input.pdf");
            OperatorCollection oc = doc.Pages[1].Contents;
            oc.Add(new Operator[] { new Operator.q(), new Operator.Q() } );
            </code></example>
    </member>
    <member name="M:Aspose.Pdf.OperatorCollection.Insert(System.Int32,Aspose.Pdf.Operator[])">
      <summary>
            Insert operators at the the given position.
            </summary>
      <param name="at">Index from which operators are being started to insert.</param>
      <param name="ops">Array of operators to be inserted. Each operator can have any index (by default -1) because their indices adjusted automatically starting from <paramref name="at" />.</param>
      <example>
            Example demonstrates how to insert operator to the page contents.
            <code lang="C#">
            Document doc = new Document("input.pdf");
            OperatorCollection oc = doc.Pages[1].Contents;
            oc.Insert(1, new Operator[] { new Operator.q(), new Operator.Q() } );
            </code></example>
    </member>
    <member name="M:Aspose.Pdf.OperatorCollection.Delete(Aspose.Pdf.Operator[])">
      <summary>
            Deletes operators from collection.
            </summary>
      <param name="ops">Array of operators to delete</param>
      <example>
            Example demonstrates how to remove operator from page contents.
            <code lang="C#">
            Document doc = new Document("input.pdf");
            OperatorCollection oc = doc.Pages[1].Contents;
            oc.Delete(new Operator[] { oc[1] } );
            </code></example>
    </member>
    <member name="M:Aspose.Pdf.OperatorCollection.Delete(System.Collections.IList)">
      <summary>
            Deletes operators from collection.
            </summary>
      <param name="list">The list of operators to delete</param>
      <example>
            Example demonstrates how to remove operator from page contents.
            <code lang="C#">
            Document doc = new Document("input.pdf");
            OperatorCollection oc = doc.Pages[1].Contents;
            ArrayList opList = new ArrayList();
            opList.Add(oc[1]);
            oc.Delete(opList);
            </code></example>
    </member>
    <member name="M:Aspose.Pdf.OperatorCollection.Insert(System.Int32,System.Collections.IList)">
      <summary>
            Insert operators at the the given position.
            </summary>
      <param name="at">Index from which operators are being started to insert.</param>
      <param name="ops">Array of operators to be inserted.</param>
      <example>
            Example demonstrates how to insert operators to page contents.
            <code lang="C#">
            Document doc = new Document("input.pdf");
            OperatorCollection oc = doc.Pages[1].Contents;
            ArrayList opList = new ArrayList();
            opList.Add(new Operator.q());
            opList.Add(new Operator.Q());
            oc.Insert(1, opList);
            </code></example>
    </member>
    <member name="M:Aspose.Pdf.OperatorCollection.Clear">
      <summary>
            Removes all operators from list.
            </summary>
      <example>
            Example demonstrates how to clear page contents.
            <code lang="C#">
            Document doc = new Document("input.pdf");
            doc.Pages[1].Clear();
            </code></example>
    </member>
    <member name="M:Aspose.Pdf.OperatorCollection.ToString">
      <summary>
            Returns text representation of the operator.
            </summary>
      <returns>Text representation of operator.</returns>
    </member>
    <member name="M:Aspose.Pdf.OperatorCollection.Add(System.Collections.ICollection)">
      <summary>
            Adds to collection all operators from other collection.
            </summary>
      <param name="ops">collection whitch contains operators which will be added.</param>
      <example>
            Example demonstrates how to add operator collection to the page contents.
            <code lang="C#">
            Document doc = new Document("input.pdf");
            OperatorCollection oc = doc.Pages[1].Contents;
            ArrayList opList = new ArrayList();
            opList.Add(new Operator.q());
            opList.Add(new Operator.Q());
            oc.Add(opList);
            </code></example>
    </member>
    <member name="M:Aspose.Pdf.OperatorCollection.SuppressUpdate">
      <summary> 
            Suppresses update contents data.
            The contents stream is not updated until ResumeUpdate is called.
            </summary>
    </member>
    <member name="M:Aspose.Pdf.OperatorCollection.ResumeUpdate">
      <summary>
            Resumes document update.
            Updates contents stream in case there are any pending changes.
            </summary>
    </member>
    <member name="M:Aspose.Pdf.OperatorCollection.CancelUpdate">
      <summary>
            Cancels last update.
            This method may be called when the change should not raise contents update.
            </summary>
    </member>
    <member name="P:Aspose.Pdf.OperatorCollection.Count">
      <summary>
            Gets count of operators in the collection.
            </summary>
    </member>
    <member name="P:Aspose.Pdf.OperatorCollection.IsSynchronized">
      <summary>
            Returns true if object is synchronized.
            </summary>
    </member>
    <member name="P:Aspose.Pdf.OperatorCollection.SyncRoot">
      <summary>
            Gets synchronization object.
            </summary>
    </member>
    <member name="P:Aspose.Pdf.OperatorCollection.Item(System.Int32)">
      <summary>
            Gets operator by its index.
            </summary>
      <param name="index">Index of operator. Numbering is starts from 1.</param>
      <returns>Operator from requested index</returns>
      <example>
            Example demonstrates how to get operator of page contents by index.
            <code lang="C#">
            Document doc = new Document("input.pdf");
            OperatorCollection oc = doc.Pages[1].Contents;
            Operator first = oc[1];
            </code></example>
    </member>
    <member name="T:Aspose.Pdf.OperatorSelector">
      <summary>
             This class is used for selecting operators using Visitor template idea.
             </summary>
    </member>
    <member name="M:Aspose.Pdf.OperatorSelector.#ctor(Aspose.Pdf.Operator)">
      <summary>
            Initializes new <see cref="T:Aspose.Pdf.OperatorSelector" />.
            </summary>
      <param name="op">
            The operator to visit/select.
            </param>
    </member>
    <member name="M:Aspose.Pdf.OperatorSelector.Visit(Aspose.Pdf.Operator.SetLineJoin)">
      <summary>
            Visit/select j operator.
            </summary>
      <param name="j">
            Set line join style operator.
            </param>
    </member>
    <member name="M:Aspose.Pdf.OperatorSelector.Visit(Aspose.Pdf.Operator.EX)">
      <summary>
            Visit/select EX operator.
            </summary>
      <param name="EX">
            End compatibility section operator.
            </param>
    </member>
    <member name="M:Aspose.Pdf.OperatorSelector.Visit(Aspose.Pdf.Operator.ET)">
      <summary>
            Visit/select ET operator.
            </summary>
      <param name="ET">
            End text object operator.
            </param>
    </member>
    <member name="M:Aspose.Pdf.OperatorSelector.Visit(Aspose.Pdf.Operator.EMC)">
      <summary>
            Visit/select EMC operator.
            </summary>
      <param name="EMC">
            End marked-content sequence operator.
            </param>
    </member>
    <member name="M:Aspose.Pdf.OperatorSelector.Visit(Aspose.Pdf.Operator.EI)">
      <summary>
            Visit/select EI operator.
            </summary>
      <param name="EI">
            End inline image object operator.
            </param>
    </member>
    <member name="M:Aspose.Pdf.OperatorSelector.Visit(Aspose.Pdf.Operator.DP)">
      <summary>
            Visit/select DP operator.
            </summary>
      <param name="DP">
            Define marked-content point operator (with property list).
            </param>
    </member>
    <member name="M:Aspose.Pdf.OperatorSelector.Visit(Aspose.Pdf.Operator.Do)">
      <summary>
            Visit/select Do operator.
            </summary>
      <param name="Do">
            Invoke named XObject operator.
            </param>
    </member>
    <member name="M:Aspose.Pdf.OperatorSelector.Visit(Aspose.Pdf.Operator.SetCharWidthBoundingBox)">
      <summary>
            Visit/select d1 operator.
            </summary>
      <param name="d1">
            Set glyph width and bounding box in Type 3 font operator.
            </param>
    </member>
    <member name="M:Aspose.Pdf.OperatorSelector.Visit(Aspose.Pdf.Operator.SetCharWidth)">
      <summary>
            Visit/select d0 operator.
            </summary>
      <param name="d0">
            Set glyph width in Type 3 font operator.
            </param>
    </member>
    <member name="M:Aspose.Pdf.OperatorSelector.Visit(Aspose.Pdf.Operator.SetDash)">
      <summary>
            Visit/select d operator.
            </summary>
      <param name="d">
            Set line dash pattern operator.
            </param>
    </member>
    <member name="M:Aspose.Pdf.OperatorSelector.Visit(Aspose.Pdf.Operator.SetColorSpaceStroke)">
      <summary>
            Visit/select CS operator.
            </summary>
      <param name="CS">
            Set color space operator (for stroking operations).
            </param>
    </member>
    <member name="M:Aspose.Pdf.OperatorSelector.Visit(Aspose.Pdf.Operator.SetColorSpace)">
      <summary>
            Visit/select cs operator.
            </summary>
      <param name="cs">
            Set color space operator (for nonstroking operations).
            </param>
    </member>
    <member name="M:Aspose.Pdf.OperatorSelector.Visit(Aspose.Pdf.Operator.ConcatenateMatrix)">
      <summary>
            Visit/select cm operator.
            </summary>
      <param name="cm">
            Concatenate matrix to current transformation matrix operator.
            </param>
    </member>
    <member name="M:Aspose.Pdf.OperatorSelector.Visit(Aspose.Pdf.Operator.CurveTo)">
      <summary>
            Visit/select c operator.
            </summary>
      <param name="c">
            Append curved segment to path operator (three control points).
            </param>
    </member>
    <member name="M:Aspose.Pdf.OperatorSelector.Visit(Aspose.Pdf.Operator.BX)">
      <summary>
            Visit/select BX operator.
            </summary>
      <param name="BX">
            Begin compatibility section operator.
            </param>
    </member>
    <member name="M:Aspose.Pdf.OperatorSelector.Visit(Aspose.Pdf.Operator.BT)">
      <summary>
            Visit/select BT operator.
            </summary>
      <param name="BT">
            Begin text object operator.
            </param>
    </member>
    <member name="M:Aspose.Pdf.OperatorSelector.Visit(Aspose.Pdf.Operator.BMC)">
      <summary>
            Visit/select BMC operator.
            </summary>
      <param name="BMC">
            Begin marked-content sequence operator.
            </param>
    </member>
    <member name="M:Aspose.Pdf.OperatorSelector.Visit(Aspose.Pdf.Operator.BI)">
      <summary>
            Visit/select BI operator.
            </summary>
      <param name="BI">
            Begin inline image object operator.
            </param>
    </member>
    <member name="M:Aspose.Pdf.OperatorSelector.Visit(Aspose.Pdf.Operator.BDC)">
      <summary>
            Visit/select BDC operator.
            </summary>
      <param name="BDC">
            Begin marked-content sequence operator (with property list).
            </param>
    </member>
    <member name="M:Aspose.Pdf.OperatorSelector.Visit(Aspose.Pdf.Operator.FillStroke)">
      <summary>
            Visit/select B operator.
            </summary>
      <param name="B">
            Fill and stroke path operator (nonzero winding number rule).
            </param>
    </member>
    <member name="M:Aspose.Pdf.OperatorSelector.Visit(Aspose.Pdf.Operator.ClosePathFillStroke)">
      <summary>
            Visit/select b operator.
            </summary>
      <param name="b">
            Close, fill, and stroke path operator (nonzero winding number rule).
            </param>
    </member>
    <member name="M:Aspose.Pdf.OperatorSelector.Visit(Aspose.Pdf.Operator.EOFillStroke)">
      <summary>
            Visit/select B* operator.
            </summary>
      <param name="B_">
            Fill and stroke path operator (even-odd rule).
            </param>
    </member>
    <member name="M:Aspose.Pdf.OperatorSelector.Visit(Aspose.Pdf.Operator.ClosePathEOFillStroke)">
      <summary>
            Visit/select b* operator.
            </summary>
      <param name="b_">
            Close, fill, and stroke path operator (even-odd rule).
            </param>
    </member>
    <member name="M:Aspose.Pdf.OperatorSelector.Visit(Aspose.Pdf.Operator.MoveToNextLineShowText)">
      <summary>
            Visit/select ' operator.
            </summary>
      <param name="_">
            Move to next line and show text operator.
            </param>
    </member>
    <member name="M:Aspose.Pdf.OperatorSelector.Visit(Aspose.Pdf.Operator.SetSpacingMoveToNextLineShowText)">
      <summary>
            Visit/select '' operator.
            </summary>
      <param name="__">
            Set word and character spacing, move to next line, and show text operator.
            </param>
    </member>
    <member name="M:Aspose.Pdf.OperatorSelector.Visit(Aspose.Pdf.Operator.EOFill)">
      <summary>
            Visit/select operator f*.
            </summary>
      <param name="f_">
            Fill path operator (even-odd rule).
            </param>
    </member>
    <member name="M:Aspose.Pdf.OperatorSelector.Visit(Aspose.Pdf.Operator.Fill)">
      <summary>
            Visit/select f operator.
            </summary>
      <param name="f">
            Fill path operator (nonzero winding number rule).
            </param>
    </member>
    <member name="M:Aspose.Pdf.OperatorSelector.Visit(Aspose.Pdf.Operator.ObsoleteFill)">
      <summary>
            Visit/select F operator.
            </summary>
      <param name="F">
            Fill path operator (nonzero winding number rule).
            </param>
    </member>
    <member name="M:Aspose.Pdf.OperatorSelector.Visit(Aspose.Pdf.Operator.SetGray)">
      <summary>
            Visit/select g operator.
            </summary>
      <param name="g">
            Set gray level operator (for nonstroking operations).
            </param>
    </member>
    <member name="M:Aspose.Pdf.OperatorSelector.Visit(Aspose.Pdf.Operator.SetGrayStroke)">
      <summary>
            Visit/select G operator.
            </summary>
      <param name="G">
            Set gray level operator (for stroking operations).
            </param>
    </member>
    <member name="M:Aspose.Pdf.OperatorSelector.Visit(Aspose.Pdf.Operator.GS)">
      <summary>
            Visit/select gs operator.
            </summary>
      <param name="gs">
            Set graphics state operator.
            </param>
    </member>
    <member name="M:Aspose.Pdf.OperatorSelector.Visit(Aspose.Pdf.Operator.ClosePath)">
      <summary>
            Visit/select h operator.
            </summary>
      <param name="h">
            Close subpath operator.
            </param>
    </member>
    <member name="M:Aspose.Pdf.OperatorSelector.Visit(Aspose.Pdf.Operator.SetFlat)">
      <summary>
            Visit/select i operator.
            </summary>
      <param name="i">
            Set flatness tolerance operator.
            </param>
    </member>
    <member name="M:Aspose.Pdf.OperatorSelector.Visit(Aspose.Pdf.Operator.ID)">
      <summary>
            Visit/select ID operator.
            </summary>
      <param name="ID">
            Begin inline image data operator.
            </param>
    </member>
    <member name="M:Aspose.Pdf.OperatorSelector.Visit(Aspose.Pdf.Operator.SetLineCap)">
      <summary>
            Visit/select J operator.
            </summary>
      <param name="J">
            Set line cap style operator.
            </param>
    </member>
    <member name="M:Aspose.Pdf.OperatorSelector.Visit(Aspose.Pdf.Operator.SetCMYKColor)">
      <summary>
            Visit/select k operator.
            </summary>
      <param name="k">
            Set CMYK color operator (for nonstroking operations).
            </param>
    </member>
    <member name="M:Aspose.Pdf.OperatorSelector.Visit(Aspose.Pdf.Operator.SetCMYKColorStroke)">
      <summary>
            Visit/select K operator.
            </summary>
      <param name="K">
            Set CMYK color operator (for stroking operations).
            </param>
    </member>
    <member name="M:Aspose.Pdf.OperatorSelector.Visit(Aspose.Pdf.Operator.LineTo)">
      <summary>
            Visit/select l operator.
            </summary>
      <param name="l">
            Append straight line segment to path operator.
            </param>
    </member>
    <member name="M:Aspose.Pdf.OperatorSelector.Visit(Aspose.Pdf.Operator.MoveTo)">
      <summary>
            Visit/select m operator.
            </summary>
      <param name="m">
            Begin new subpath operator.
            </param>
    </member>
    <member name="M:Aspose.Pdf.OperatorSelector.Visit(Aspose.Pdf.Operator.SetMiterLimit)">
      <summary>
            Visit/select M operator.
            </summary>
      <param name="M">
            Set miter limit operator.
            </param>
    </member>
    <member name="M:Aspose.Pdf.OperatorSelector.Visit(Aspose.Pdf.Operator.MP)">
      <summary>
            Visit/select MP operator.
            </summary>
      <param name="MP">
            Define marked-content point operator.
            </param>
    </member>
    <member name="M:Aspose.Pdf.OperatorSelector.Visit(Aspose.Pdf.Operator.EndPath)">
      <summary>
            Visit/select n operator.
            </summary>
      <param name="n">
            End path operator (without filling or stroking).
            </param>
    </member>
    <member name="M:Aspose.Pdf.OperatorSelector.Visit(Aspose.Pdf.Operator.GSave)">
      <summary>
            Visit/select q operator.
            </summary>
      <param name="q">
            Save graphics state operator.
            </param>
    </member>
    <member name="M:Aspose.Pdf.OperatorSelector.Visit(Aspose.Pdf.Operator.GRestore)">
      <summary>
            Visit/select Q operator.
            </summary>
      <param name="Q">
            Restore graphics state operator.
            </param>
    </member>
    <member name="M:Aspose.Pdf.OperatorSelector.Visit(Aspose.Pdf.Operator.Re)">
      <summary>
            Visit/select re operator.
            </summary>
      <param name="re">
            Append rectangle to path operator.
            </param>
    </member>
    <member name="M:Aspose.Pdf.OperatorSelector.Visit(Aspose.Pdf.Operator.SetRGBColor)">
      <summary>
            Visit/select rg operator.
            </summary>
      <param name="rg">
            Set RGB color operator (for nonstroking operations).
            </param>
    </member>
    <member name="M:Aspose.Pdf.OperatorSelector.Visit(Aspose.Pdf.Operator.SetRGBColorStroke)">
      <summary>
            Visit/select RG operator.
            </summary>
      <param name="RG">
            Set RGB color operator (for stroking operations).
            </param>
    </member>
    <member name="M:Aspose.Pdf.OperatorSelector.Visit(Aspose.Pdf.Operator.SetColorRenderingIntent)">
      <summary>
            Visit/select ri operator.
            </summary>
      <param name="ri">
            Set color rendering intent operator.
            </param>
    </member>
    <member name="M:Aspose.Pdf.OperatorSelector.Visit(Aspose.Pdf.Operator.ClosePathStroke)">
      <summary>
            Visit/select s operator.
            </summary>
      <param name="s">
            Close and stroke path operator.
            </param>
    </member>
    <member name="M:Aspose.Pdf.OperatorSelector.Visit(Aspose.Pdf.Operator.Stroke)">
      <summary>
            Visit/select S operator.
            </summary>
      <param name="S">
            Stroke path operator.
            </param>
    </member>
    <member name="M:Aspose.Pdf.OperatorSelector.Visit(Aspose.Pdf.Operator.SetColor)">
      <summary>
            Visit/select sc operator.
            </summary>
      <param name="sc">
            Set color operator (for nonstroking operations).
            </param>
    </member>
    <member name="M:Aspose.Pdf.OperatorSelector.Visit(Aspose.Pdf.Operator.SetColorStroke)">
      <summary>
            Visit/select SC operator.
            </summary>
      <param name="SC">
            Set color operator (for stroking operations).
            </param>
    </member>
    <member name="M:Aspose.Pdf.OperatorSelector.Visit(Aspose.Pdf.Operator.SetAdvancedColor)">
      <summary>
            Visit/select scn operator.
            </summary>
      <param name="scn">
            Set color operator (for nonstroking operations, ICCBased and special colour spaces).
            </param>
    </member>
    <member name="M:Aspose.Pdf.OperatorSelector.Visit(Aspose.Pdf.Operator.SetAdvancedColorStroke)">
      <summary>
            Visit/select SCN operator.
            </summary>
      <param name="SCN">
            Set color operator (for stroking operations, ICCBasedand special colour spaces).
            </param>
    </member>
    <member name="M:Aspose.Pdf.OperatorSelector.Visit(Aspose.Pdf.Operator.ShFill)">
      <summary>
            Visit/select sh operator.
            </summary>
      <param name="sh">
            Paint area defined by shading pattern operator.
            </param>
    </member>
    <member name="M:Aspose.Pdf.OperatorSelector.Visit(Aspose.Pdf.Operator.MoveToNextLine)">
      <summary>
            Visit/select T* operator.
            </summary>
      <param name="T_">
            Move to start of next text line operator.
            </param>
    </member>
    <member name="M:Aspose.Pdf.OperatorSelector.Visit(Aspose.Pdf.Operator.SetCharacterSpacing)">
      <summary>
            Visit/select Tc operator.
            </summary>
      <param name="Tc">
            Set character spacing operator.
            </param>
    </member>
    <member name="M:Aspose.Pdf.OperatorSelector.Visit(Aspose.Pdf.Operator.MoveTextPosition)">
      <summary>
            Visit/select Td operator.
            </summary>
      <param name="Td">
            Move text position operator.
            </param>
    </member>
    <member name="M:Aspose.Pdf.OperatorSelector.Visit(Aspose.Pdf.Operator.MoveTextPositionSetLeading)">
      <summary>
            Visit/select TD operator.
            </summary>
      <param name="TD">
            Move text position and set leading operator.
            </param>
    </member>
    <member name="M:Aspose.Pdf.OperatorSelector.Visit(Aspose.Pdf.Operator.SelectFont)">
      <summary>
            Visit/select Tf operator.
            </summary>
      <param name="Tf">
            Set text font and size operator.
            </param>
    </member>
    <member name="M:Aspose.Pdf.OperatorSelector.Visit(Aspose.Pdf.Operator.ShowText)">
      <summary>
            Visit/select Tj operator.
            </summary>
      <param name="Tj">
            Show text operator.
            </param>
    </member>
    <member name="M:Aspose.Pdf.OperatorSelector.Visit(Aspose.Pdf.Operator.SetGlyphsPositionShowText)">
      <summary>
            Visit/select TJ operator.
            </summary>
      <param name="TJ">
            Show text operator (allowing individual glyph positioning).
            </param>
    </member>
    <member name="M:Aspose.Pdf.OperatorSelector.Visit(Aspose.Pdf.Operator.SetTextLeading)">
      <summary>
            Visit/select TL operator.
            </summary>
      <param name="TL">
            Set text leading operator.
            </param>
    </member>
    <member name="M:Aspose.Pdf.OperatorSelector.Visit(Aspose.Pdf.Operator.SetTextMatrix)">
      <summary>
            Visit/select Tm operator.
            </summary>
      <param name="Tm">
            Set text matrix and text line matrix operator.
            </param>
    </member>
    <member name="M:Aspose.Pdf.OperatorSelector.Visit(Aspose.Pdf.Operator.SetTextRenderingMode)">
      <summary>
            Visit/select Tr operator.
            </summary>
      <param name="Tr">
            Set text rendering mode operator.
            </param>
    </member>
    <member name="M:Aspose.Pdf.OperatorSelector.Visit(Aspose.Pdf.Operator.SetTextRise)">
      <summary>
            Visit/select Ts operator.
            </summary>
      <param name="Ts">
            Set text rise operator.
            </param>
    </member>
    <member name="M:Aspose.Pdf.OperatorSelector.Visit(Aspose.Pdf.Operator.SetWordSpacing)">
      <summary>
            Visit/select Tw operator.
            </summary>
      <param name="Tw">
            Set word spacing operator.
            </param>
    </member>
    <member name="M:Aspose.Pdf.OperatorSelector.Visit(Aspose.Pdf.Operator.SetHorizontalTextScaling)">
      <summary>
            Visit/select Tz operator.
            </summary>
      <param name="Tz">
            Set horizontal text scaling operator.
            </param>
    </member>
    <member name="M:Aspose.Pdf.OperatorSelector.Visit(Aspose.Pdf.Operator.CurveTo1)">
      <summary>
            Visit/select v operator.
            </summary>
      <param name="v">
            Append curved segment to path operator (initial point replicated).
            </param>
    </member>
    <member name="M:Aspose.Pdf.OperatorSelector.Visit(Aspose.Pdf.Operator.EOClip)">
      <summary>
            Visit/select W* operator.
            </summary>
      <param name="W_">
            Set clipping path operator (even-odd rule).
            </param>
    </member>
    <member name="M:Aspose.Pdf.OperatorSelector.Visit(Aspose.Pdf.Operator.SetLineWidth)">
      <summary>
            Visit/select w operator.
            </summary>
      <param name="w">
            Set line width operator.
            </param>
    </member>
    <member name="M:Aspose.Pdf.OperatorSelector.Visit(Aspose.Pdf.Operator.Clip)">
      <summary>
            Visit/select W operator.
            </summary>
      <param name="W">
            Set clipping path operator (nonzero winding number rule).
            </param>
    </member>
    <member name="M:Aspose.Pdf.OperatorSelector.Visit(Aspose.Pdf.Operator.CurveTo2)">
      <summary>
            Visit/select y operator.
            </summary>
      <param name="y">
            Append curved segment to path operator (final point replicated).
            </param>
    </member>
    <member name="M:Aspose.Pdf.OperatorSelector.Visit(Aspose.Pdf.Operator.TextOperator)">
      <summary>
            Visit/select any text operator operator.
            </summary>
      <param name="textOperator">
            General text operator which is used to select the set of corresponding pdf operators.
            </param>
    </member>
    <member name="T:Aspose.Pdf.OutlineCollection">
      <summary>
            Represents document outline hierarchy.
            </summary>
    </member>
    <member name="M:Aspose.Pdf.OutlineCollection.Add(Aspose.Pdf.OutlineItemCollection)">
      <summary>
            Adds outline item to collection.
            </summary>
      <param name="outline">The outline item to be added.</param>
    </member>
    <member name="M:Aspose.Pdf.OutlineCollection.Delete">
      <summary>
            Deletes all outline items from the document outline.
            </summary>
    </member>
    <member name="M:Aspose.Pdf.OutlineCollection.Delete(Aspose.Pdf.Engine.Data.IPdfDictionary,System.String)">
      <summary>
            Deletes the outline item with specified title from the specified OutlineCollection instance.
            </summary>
      <param name="outlines">OutlineCollection instance</param>
      <param name="name">The title of outline item to be deleted.</param>
    </member>
    <member name="M:Aspose.Pdf.OutlineCollection.Delete(System.String)">
      <summary>
            Deletes the outline item with specified title from the document outline.
            </summary>
      <param name="name">The title of outline item to be deleted</param>
    </member>
    <member name="M:Aspose.Pdf.OutlineCollection.CopyTo(System.Array,System.Int32)">
      <summary>
            Copies the outline items to an System.Array, starting at a particular System.Array index.
            </summary>
      <param name="array">The one-dimensional System.Array that is the destination. Must have zero-based indexing.</param>
      <param name="index">The zero-based index in array at which copying begins.</param>
    </member>
    <member name="M:Aspose.Pdf.OutlineCollection.GetEnumerator">
      <summary>
            Returns an enumerator that iterates through the collection.
            </summary>
      <returns>An System.Collections.IEnumerator object that can be used to iterate through the collection.</returns>
    </member>
    <member name="P:Aspose.Pdf.OutlineCollection.Count">
      <summary>
            Gets the total number of outline items (bookmarks) at all levels of the document outline.
            </summary>
    </member>
    <member name="P:Aspose.Pdf.OutlineCollection.First">
      <summary>
            Gets an outline item representing the first top-level item in the outline.
            </summary>
    </member>
    <member name="P:Aspose.Pdf.OutlineCollection.Last">
      <summary>
            Gets an outline item representing the last top-level item in the outline.
            </summary>
    </member>
    <member name="P:Aspose.Pdf.OutlineCollection.IsSynchronized">
      <summary>
            Gets a value indicating whether access to this collection is synchronized (thread safe).
            </summary>
    </member>
    <member name="P:Aspose.Pdf.OutlineCollection.SyncRoot">
      <summary>
            Gets an object that can be used to synchronize access to this collection.
            </summary>
    </member>
    <member name="P:Aspose.Pdf.OutlineCollection.Item(System.Int32)">
      <summary>
            Gets outline item from collection by index.
            </summary>
      <param name="index">
      </param>
      <returns>
      </returns>
    </member>
    <member name="T:Aspose.Pdf.OutlineItemCollection">
      <summary>
            Represents outline entry in outline hierarchy of PDF document.
            </summary>
    </member>
    <member name="M:Aspose.Pdf.OutlineItemCollection.Delete">
      <summary>
            Deletes this outline item from the document outline hierarchy.
            </summary>
    </member>
    <member name="M:Aspose.Pdf.OutlineItemCollection.#ctor(Aspose.Pdf.Engine.Data.IPdfObject)">
      <summary>
            Initializes new instance of this class using internal engine outline entry object.
            </summary>
      <param name="outline">Internal engine object of outline entry.</param>
    </member>
    <member name="M:Aspose.Pdf.OutlineItemCollection.#ctor(Aspose.Pdf.OutlineCollection)">
      <summary>
            Initializes outline item instance using root hierarchy object.
            </summary>
      <param name="outlines">
      </param>
    </member>
    <member name="M:Aspose.Pdf.OutlineItemCollection.Delete(System.String)">
      <summary>
            Deletes outline entry with specified name from the document outline hierarchy.
            </summary>
      <param name="name">Title of outline entry will be deleted.</param>
    </member>
    <member name="M:Aspose.Pdf.OutlineItemCollection.CopyTo(System.Array,System.Int32)">
      <summary>
            Copies the outline entries to an System.Array, starting at a particular System.Array index.
            </summary>
      <param name="array">The one-dimensional System.Array that is the destination. Must have zero-based indexing.</param>
      <param name="index">The zero-based index in array at which copying begins.</param>
    </member>
    <member name="M:Aspose.Pdf.OutlineItemCollection.GetEnumerator">
      <summary>
            Returns an enumerator that iterates through the collection.
            </summary>
      <returns>An System.Collections.IEnumerator object that can be used to iterate through the collection.</returns>
    </member>
    <member name="M:Aspose.Pdf.OutlineItemCollection.Add(Aspose.Pdf.OutlineItemCollection)">
      <summary>
            Adds outline item to collection.
            </summary>
      <param name="outline">The outline item to be added.</param>
    </member>
    <member name="M:Aspose.Pdf.OutlineItemCollection.Insert(System.Int32,Aspose.Pdf.OutlineItemCollection)">
      <summary>
            Inserts the outline item into collection at the specified place.
            </summary>
      <param name="index">The index specifying place for inserting.</param>
      <param name="outline">The outline item should be inserted.</param>
    </member>
    <member name="P:Aspose.Pdf.OutlineItemCollection.Title">
      <summary>
            Gets or sets the title for this outline item.
            </summary>
    </member>
    <member name="P:Aspose.Pdf.OutlineItemCollection.Destination">
      <summary>
            Gets or sets the destination for this outline item.
            </summary>
    </member>
    <member name="P:Aspose.Pdf.OutlineItemCollection.Action">
      <summary>
            Gets or sets the action for this outline item.
            </summary>
    </member>
    <member name="P:Aspose.Pdf.OutlineItemCollection.Color">
      <summary>
            Gets or sets the color for the title text of this outline item.
            </summary>
    </member>
    <member name="P:Aspose.Pdf.OutlineItemCollection.Italic">
      <summary>
            Gets or sets italic flag for the title text of this outline item
            </summary>
    </member>
    <member name="P:Aspose.Pdf.OutlineItemCollection.Bold">
      <summary>
            Gets or sets bold flag for the title text of this outline item
            </summary>
    </member>
    <member name="P:Aspose.Pdf.OutlineItemCollection.First">
      <summary>
            Gets the outline item representing the first top-level item in the outline hierarchy.
            </summary>
    </member>
    <member name="P:Aspose.Pdf.OutlineItemCollection.Last">
      <summary>
            Gets the outline item representing the last top-level item in the outline hierarchy.
            </summary>
    </member>
    <member name="P:Aspose.Pdf.OutlineItemCollection.Prev">
      <summary>
            Gets the outline item representing previous item relatively this item in the outline hierarchy.
            </summary>
    </member>
    <member name="P:Aspose.Pdf.OutlineItemCollection.Next">
      <summary>
            Gets the outline item representing next item relatively this item in the outline hierarchy.
            </summary>
    </member>
    <member name="P:Aspose.Pdf.OutlineItemCollection.Parent">
      <summary>
            Gets the parent object of this outline item in the outline hierarchy.
            </summary>
    </member>
    <member name="P:Aspose.Pdf.OutlineItemCollection.Count">
      <summary>
            Gets the total number of outline items at all levels in the document outline hierarchy.
            </summary>
    </member>
    <member name="P:Aspose.Pdf.OutlineItemCollection.IsSynchronized">
      <summary>
            Gets the value indicating whether access to this collection is synchronized (thread safe).
            </summary>
    </member>
    <member name="P:Aspose.Pdf.OutlineItemCollection.SyncRoot">
      <summary>
            Gets the object that can be used to synchronize access to this collection.
            </summary>
    </member>
    <member name="P:Aspose.Pdf.OutlineItemCollection.Open">
      <summary>
            Get or sets open status (true/false) for outline item.
            </summary>
    </member>
    <member name="P:Aspose.Pdf.OutlineItemCollection.Item(System.Int32)">
      <summary>
            Gets outline item from the collection using index.
            </summary>
      <param name="index">
      </param>
      <returns>
      </returns>
    </member>
    <member name="P:Aspose.Pdf.OutlineItemCollection.Level">
      <summary>
            Gets hierarchy level of outline item.
            </summary>
    </member>
    <member name="T:Aspose.Pdf.Page">
      <summary>
            Class representing page of PDF document.
            </summary>
    </member>
    <member name="M:Aspose.Pdf.Page.GetPageRect(System.Boolean)">
      <summary>
            Returns rectangle of the page. 
            </summary>
      <param name="considerRotation">If true then rotation of the page will be considered in rect calculation.</param>
      <returns>Rectangle of the page.</returns>
    </member>
    <member name="M:Aspose.Pdf.Page.SendTo(Aspose.Pdf.Devices.PageDevice,System.IO.Stream)">
      <summary>
            Sends page to process with given page device.
            </summary>
      <param name="device">
            The device to process page.
            </param>
      <param name="output">
            Result stream which is used with device to save its output.
            </param>
    </member>
    <member name="M:Aspose.Pdf.Page.Accept(Aspose.Pdf.InteractiveFeatures.Annotations.AnnotationSelector)">
      <summary>
            Accepts <see cref="T:Aspose.Pdf.InteractiveFeatures.Annotations.AnnotationSelector" /> visitor object that provides functionality to work with annotations.
            </summary>
      <param name="visitor">
      </param>
    </member>
    <member name="M:Aspose.Pdf.Page.RotationToInt(Aspose.Pdf.Rotation)">
      <summary>
            Translates rotation enumeration member into integer value.
            </summary>
      <param name="rotation">Rotation enumeratioom member.</param>
      <returns>Corresponding integer value</returns>
    </member>
    <member name="M:Aspose.Pdf.Page.IntToRotation(System.Int32)">
      <summary>
            Translates integer value into corresponding rotation enumeration member.
            </summary>
      <param name="rotation">Integer value to convert</param>
      <returns>Rotation enumeration member</returns>
    </member>
    <member name="M:Aspose.Pdf.Page.AddStamp(Aspose.Pdf.Stamp)">
      <summary>
            Put stamp into page. Stamp can be page number, image or simple text, e.g. some logo.
            </summary>
      <param name="stamp">
            Stamp to add on the page. 
            Each stamp has its coordinates and corresponding properties regarding to the kind of stamp, 
            i.e. image or text value.
            </param>
    </member>
    <member name="M:Aspose.Pdf.Page.AddImage(System.IO.Stream,Aspose.Pdf.Rectangle)">
      <summary>
            Adds image onto the page and locates it in the middle of specified rectangle saving image's proportion.
            </summary>
      <param name="imageStream">The stream of the image.</param>
      <param name="imageRect">The position of the image.</param>
    </member>
    <member name="M:Aspose.Pdf.Page.AddImage(System.String,System.IO.Stream,Aspose.Pdf.Rectangle)">
      <summary>
            Adds searchable image onto the page and locates it in the middle of specified rectangle saving image's proportion.
            </summary>
      <param name="hocr">The hocr of the image.</param>
      <param name="imageStream">The stream of the image.</param>
      <param name="imageRect">The position of the image.</param>
    </member>
    <member name="M:Aspose.Pdf.Page.AddImage(System.IO.Stream,Aspose.Pdf.Rectangle,System.Int32,System.Int32,System.Boolean)">
      <summary>
            Adds image on page and places it depend on image rectangle position.
            </summary>
      <param name="imageStream">The stream of the image.</param>
      <param name="imageRect">The default position of the image on page.</param>
      <param name="imageWidth">The width of the image.</param>
      <param name="imageHeight">The height of the image.</param>
      <param name="saveImageProportions">If the flag set to true than image placed in rectangle position; otherwise, the size of rectange is becoming equal to image size.</param>
    </member>
    <member name="M:Aspose.Pdf.Page.AddImage(System.String,Aspose.Pdf.Rectangle)">
      <summary>
            Adds image onto the page and locates it in the middle of specified rectangle saving image's proportion.
            </summary>
      <param name="imagePath">The path to image.</param>
      <param name="rectangle">The position of the image.</param>
    </member>
    <member name="M:Aspose.Pdf.Page.AddImage(System.IO.Stream,Aspose.Pdf.Rectangle,Aspose.Pdf.CompositingParameters)">
      <summary>
            Adds image onto the page and locates it in the middle of specified rectangle saving image's proportion.
            </summary>
      <param name="stream">The stream of the image.</param>
      <param name="rectangle">The position of the image.</param>
      <param name="compositingParameters">The compositing parameters.</param>
    </member>
    <member name="M:Aspose.Pdf.Page.AddImage(System.IO.Stream,Aspose.Pdf.Rectangle,Aspose.Pdf.CompositingParameters,System.Boolean)">
      <summary>
            Adds image onto the page.
            </summary>
      <param name="stream">The stream of the image.</param>
      <param name="rectangle">The position of the image. If the rectangle is the point image will be added in original size.</param>
      <param name="compositingParameters">The compositing parameters.</param>
      <param name="addImage">If true image will be added otherwise not.</param>
      <returns>List of operators that add image.</returns>
    </member>
    <member name="M:Aspose.Pdf.Page.SendTo(Aspose.Pdf.Devices.PageDevice,System.String)">
      <summary>
            Sends page to process with given page device.
            </summary>
      <param name="device">
            The device to process page.
            </param>
      <param name="outputFileName">
            File which is used with device to save its output.
            </param>
    </member>
    <member name="M:Aspose.Pdf.Page.Flatten">
      <summary>
            Removes all fields located on the page and place their values instead.
            </summary>
    </member>
    <member name="M:Aspose.Pdf.Page.Accept(Aspose.Pdf.Text.TextFragmentAbsorber)">
      <summary>
            Accepts <see cref="T:Aspose.Pdf.Text.TextFragmentAbsorber" /> visitor object that provides functionality to work with text objects.
            </summary>
      <param name="visitor">
      </param>
    </member>
    <member name="M:Aspose.Pdf.Page.Accept(Aspose.Pdf.ImagePlacementAbsorber)">
      <summary>
            Accepts <see cref="T:Aspose.Pdf.ImagePlacementAbsorber" /> visitor object that provides functionality to work with image placement objects.
            </summary>
      <param name="visitor">
      </param>
    </member>
    <member name="M:Aspose.Pdf.Page.Accept(Aspose.Pdf.Text.TextAbsorber)">
      <summary>
            Accepts <see cref="T:Aspose.Pdf.Text.TextAbsorber" /> visitor object that provides functionality to work with text objects.
            </summary>
      <param name="visitor">
      </param>
    </member>
    <member name="M:Aspose.Pdf.Page.SetPageSize(System.Double,System.Double)">
      <summary>
            Sets page size for page. 
            </summary>
      <param name="width">Page width</param>
      <param name="height">Page size</param>
    </member>
    <member name="M:Aspose.Pdf.Page.FreeMemory">
      <summary>
            Clears cached data
            </summary>
    </member>
    <member name="P:Aspose.Pdf.Page.TocInfo">
      <summary>
            The table of contents info.
            </summary>
      <value>The table of contents info - default null. If it set this page will contain table of contents.</value>
    </member>
    <member name="P:Aspose.Pdf.Page.Header">
      <summary>
            The page header.
            </summary>
      <value>The page header.</value>
    </member>
    <member name="P:Aspose.Pdf.Page.Footer">
      <summary>
            The page header.
            </summary>
      <value>The page header.</value>
    </member>
    <member name="P:Aspose.Pdf.Page.Paragraphs">
      <summary>
            Gets the paragraphs.
            </summary>
      <value>The paragraphs.</value>
    </member>
    <member name="P:Aspose.Pdf.Page.PageInfo">
      <summary>
            Gets or sets the page info.(for generator only)
            </summary>
      <value>The page info.</value>
    </member>
    <member name="E:Aspose.Pdf.Page.OnCustomizeHeaderFooter">
      <summary>
            Event for customize header and footer.
            </summary>
    </member>
    <member name="P:Aspose.Pdf.Page.Rect">
      <summary>
            Gets or sets rectangle of the page. Page crop box is returned if specified, otherwise page media box is returned.
            Please note that this property don't consider page rotation. To get page rectangle considering rotation please use ActualRect.
            </summary>
      <example>
            Example demonstrates how to get page rectangle:
            <code lang="C#">
            Document document = new Document("sample.pdf");
            Page page = document.Pages[1];
            Rectangle pageRect = page.Rect;
            </code></example>
    </member>
    <member name="P:Aspose.Pdf.Page.ColorType">
      <summary>
            Sets color type of the pages based on information getting from operators SetColor and
            images.
            </summary>
    </member>
    <member name="P:Aspose.Pdf.Page.TabOrder">
      <summary>
            Gets or sets tab order of the page. 
            Possible values: Row, Column. Default, Manual
            </summary>
    </member>
    <member name="P:Aspose.Pdf.Page.Duration">
      <summary>
            Gets of set page display duration. This is time in seconds that page shall be displayed during presentation.
            Returs -1 if duration is not defined. 
            </summary>
      <example>
            Example demonstrates how to get page duration
            <code lang="C#">
            Document document = new Document("sample.pdf");
            Page page = document.Pages[1];
            int pageRect = page.Duration;
            </code></example>
    </member>
    <member name="P:Aspose.Pdf.Page.Contents">
      <summary>
            Gets collection of operators in the content stream of the page.
            <see cref="T:Aspose.Pdf.OperatorCollection" /></summary>
      <example>
            Example is demonstrates how to scan operators stream of page.
            <code lang="C#">
            Document document = new Document("sample.pdf");
            Operators contents = document.Pages[1].Contents;
            foreach(Operator op in contents)
            {
                Console.WriteLn(op);
            }
            </code></example>
    </member>
    <member name="P:Aspose.Pdf.Page.Group">
      <summary>
            Gets or sets a group attributes class specifying the attributes of the page’s page group for use in the transparent imaging model.
            </summary>
    </member>
    <member name="P:Aspose.Pdf.Page.Annotations">
      <summary>
            Gets collection of page annotations.
            <see cref="P:Aspose.Pdf.Page.Annotations" /></summary>
    </member>
    <member name="P:Aspose.Pdf.Page.Resources">
      <summary>
            Gets page resources. Resources object contains collections of images, forms and fonts.
            <see cref="P:Aspose.Pdf.Page.Resources" /></summary>
      <example>
            Example demonstrates scan through page images:
            <code lang="C#">
            Document document = new Document("sample.pdf");
            DocumentActions actions = document.Actions;
            Resources resources = document.Pages[1].Resources;
            foreach(XImage image in resources.Images)
            {
              Console.WriteLine(image.Width + ":" + image.Height);
            }
            </code></example>
    </member>
    <member name="P:Aspose.Pdf.Page.Rotate">
      <summary>
            Gets or sets rotation of the page.
            </summary>
      <example>
            Example demonstrates how to determine page rotation.
            <code lang="C#">
            Document document = new Document("sample.pdf");
            Console.Writeln(document.Pages[1].Rotate);
            </code></example>
    </member>
    <member name="P:Aspose.Pdf.Page.TrimBox">
      <summary>
            Gets or sets trim box of the page. 
            </summary>
      <example>
            Example demonstrates how to get trim box of the page:
            <code lang="C#">
            Document document = new Document("sample.pdf");
            Rectangle trimBox = document.Pages[1].TrimBox;
            </code></example>
    </member>
    <member name="P:Aspose.Pdf.Page.ArtBox">
      <summary>
            Gets or sets art box of the page. 
            </summary>
      <example>
            Example demonstrates how to get art box of the page:
            <code lang="C#">
            Document document = new Document("sample.pdf");
            Rectangle artBox = document.Pages[1].ArtBox;
            </code></example>
    </member>
    <member name="P:Aspose.Pdf.Page.BleedBox">
      <summary>
            Gets or sets bleed box of the page. 
            </summary>
      <example>
            Example demonstrates how to get bleed box of the page:
            <code lang="C#">
            Document document = new Document("sample.pdf");
            Rectangle bleedBox = document.Pages[1].BleedBox;
            </code></example>
    </member>
    <member name="P:Aspose.Pdf.Page.CropBox">
      <summary>
            Gets or sets crop box of the page. 
            </summary>
      <example>
            Example demonstrates how to get crop box of the page:
            <code lang="C#">
            Document document = new Document("sample.pdf");
            Rectangle cropBox = document.Pages[1].CropBox;
            </code></example>
    </member>
    <member name="P:Aspose.Pdf.Page.MediaBox">
      <summary>
            Gets or sets media box of the page. 
            </summary>
      <example>
            Example demonstrates how to get media box of the page:
            <code lang="C#">
            Document document = new Document("sample.pdf");
            Rectangle mediaBox = document.Pages[1].MediaBox;
            </code></example>
    </member>
    <member name="P:Aspose.Pdf.Page.Number">
      <summary>
            Get number of the page.
            </summary>
    </member>
    <member name="P:Aspose.Pdf.Page.Background">
      <summary>
            Gets or sets the background color of the page.
            </summary>
    </member>
    <member name="P:Aspose.Pdf.Page.Watermark">
      <summary>
            Gets or sets the watermark of the page.
            </summary>
    </member>
    <member name="P:Aspose.Pdf.Page.Artifacts">
      <summary>
            Gets collection of artifacts on the page.
            </summary>
    </member>
    <member name="P:Aspose.Pdf.Page.Actions">
      <summary>
            Gets collection of page properties.
            </summary>
    </member>
    <member name="T:Aspose.Pdf.PageCollection">
      <summary>
            Collection of PDF document pages.
            </summary>
    </member>
    <member name="M:Aspose.Pdf.PageCollection.Add(Aspose.Pdf.Page)">
      <summary>
            Adds page to collection. 
            </summary>
      <param name="entity">Page which should be added.</param>
    </member>
    <member name="M:Aspose.Pdf.PageCollection.Delete(System.Int32)">
      <summary>
            Delete specified page.
            </summary>
      <param name="index">Number of page that will be deleted. Pages numbers start from 1.</param>
    </member>
    <member name="M:Aspose.Pdf.PageCollection.Delete">
      <summary>
            Deletes all pages from collection.
            </summary>
    </member>
    <member name="M:Aspose.Pdf.PageCollection.IndexOf(Aspose.Pdf.Page)">
      <summary>
            Returns index of the specified page.
            </summary>
      <remarks>
            Pages numbers start from 1.
            Returns 0 in case collection doesn't contain the page.
            </remarks>
      <param name="entity">Page object. Pages numbers start from 1.</param>
    </member>
    <member name="M:Aspose.Pdf.PageCollection.CopyTo(System.Array,System.Int32)">
      <summary>
            Copyies pages into document. 
            </summary>
      <param name="array">Array containing Pages object to insert into document. It must be Object[] or Page[].</param>
      <param name="index">Starting index where pages will be inserted</param>
    </member>
    <member name="M:Aspose.Pdf.PageCollection.GetEnumerator">
      <summary>
            Returns enumerator of pages.
            </summary>
      <returns>Enumerator of pages</returns>
    </member>
    <member name="M:Aspose.Pdf.PageCollection.Accept(Aspose.Pdf.InteractiveFeatures.Annotations.AnnotationSelector)">
      <summary>
            Accepts <see cref="T:Aspose.Pdf.InteractiveFeatures.Annotations.AnnotationSelector" /> visitor object that provides functionality to work with annotations.
            </summary>
      <param name="visitor">AnnotationSelector Visitor</param>
    </member>
    <member name="M:Aspose.Pdf.PageCollection.Delete(System.Int32[])">
      <summary>
            Delete pages specified which numbers are specified in array.
            </summary>
      <param name="pages">Array of pages to be deleted.</param>
    </member>
    <member name="M:Aspose.Pdf.PageCollection.Insert(System.Int32)">
      <summary>
            Insert empty apge into collection at the specified position.
            </summary>
      <param name="pageNumber">Position of the new page.</param>
    </member>
    <member name="M:Aspose.Pdf.PageCollection.Add">
      <summary>
            Adds empty page
            </summary>
    </member>
    <member name="M:Aspose.Pdf.PageCollection.Add(System.Collections.ICollection)">
      <summary>
            Adds to collection all pages from list.
            </summary>
      <param name="pages">List which contains all pages which must be added.</param>
    </member>
    <member name="M:Aspose.Pdf.PageCollection.Insert(System.Int32,Aspose.Pdf.Page)">
      <summary>
            Inserts page into page collection at specified place. 
            </summary>
      <param name="pageNumber">Required page index in collection.</param>
      <param name="entity">Page to be inserted.</param>
    </member>
    <member name="M:Aspose.Pdf.PageCollection.Accept(Aspose.Pdf.ImagePlacementAbsorber)">
      <summary>
            Accepts <see cref="T:Aspose.Pdf.ImagePlacementAbsorber" /> visitor object that provides functionality to work with image placement objects.
            </summary>
      <param name="visitor">
      </param>
    </member>
    <member name="M:Aspose.Pdf.PageCollection.Accept(Aspose.Pdf.Text.TextFragmentAbsorber)">
      <summary>
            Accepts <see cref="T:Aspose.Pdf.Text.TextFragmentAbsorber" /> visitor object that provides functionality to work with text objects.
            </summary>
      <param name="visitor">
      </param>
    </member>
    <member name="M:Aspose.Pdf.PageCollection.Accept(Aspose.Pdf.Text.TextAbsorber)">
      <summary>
            Accepts <see cref="T:Aspose.Pdf.Text.TextAbsorber" /> visitor object that provides functionality to work with text objects.
            </summary>
      <param name="visitor">
      </param>
    </member>
    <member name="M:Aspose.Pdf.PageCollection.Add(Aspose.Pdf.Page[])">
      <summary>
            Adds to collection all pages from array.
            </summary>
      <param name="pages">Array of pages which will be added.</param>
    </member>
    <member name="M:Aspose.Pdf.PageCollection.Insert(System.Int32,Aspose.Pdf.Page,Aspose.Pdf.Copier)">
      <summary>
            Inserts page into document using specified copier.
            </summary>
      <param name="pageNumber">Starting position of the new pages.</param>
      <param name="entity">Page to be inserted.</param>
      <param name="copier">Copier object.</param>
    </member>
    <member name="M:Aspose.Pdf.PageCollection.Insert(System.Int32,System.Collections.ICollection)">
      <summary>
            Inserts pages from the collection into document. 
            </summary>
      <param name="pageNumber">Starting position of the new pages.</param>
      <param name="pages">Pages collection.</param>
    </member>
    <member name="M:Aspose.Pdf.PageCollection.Insert(System.Int32,Aspose.Pdf.Page[])">
      <summary>
            Inserts pages of the array into document.
            </summary>
      <param name="pageNumber">Starting number of the new pages. </param>
      <param name="pages">Array of pages which will be inserted.</param>
    </member>
    <member name="M:Aspose.Pdf.PageCollection.Flatten">
      <summary>
            Removes all fields located on the pages and place their values instead.
            </summary>
    </member>
    <member name="M:Aspose.Pdf.PageCollection.Add(Aspose.Pdf.Page,Aspose.Pdf.Copier)">
      <summary>
            Adds page to document using passed copier object.
            </summary>
      <param name="entity">
      </param>
      <param name="copier">
      </param>
    </member>
    <member name="M:Aspose.Pdf.PageCollection.FreeMemory">
      <summary>
            Clears cached data
            </summary>
    </member>
    <member name="P:Aspose.Pdf.PageCollection.Count">
      <summary>
            Gets count of pages in the document.
            </summary>
    </member>
    <member name="P:Aspose.Pdf.PageCollection.IsSynchronized">
      <summary>
            Returns true of object is synchorinzed.
            </summary>
    </member>
    <member name="P:Aspose.Pdf.PageCollection.SyncRoot">
      <summary>
            Gets synchronization object of the collection.
            </summary>
    </member>
    <member name="P:Aspose.Pdf.PageCollection.Item(System.Int32)">
      <summary>
            Gets page by index.
            </summary>
      <param name="index">Index of page.</param>
      <returns>Retreived page.</returns>
    </member>
    <member name="T:Aspose.Pdf.PageLayout">
      <summary>
            Descibes page layout.
            </summary>
    </member>
    <member name="F:Aspose.Pdf.PageLayout.SinglePage">
      <summary>
            Single page.
            </summary>
    </member>
    <member name="F:Aspose.Pdf.PageLayout.OneColumn">
      <summary>
            Display the pages in one column.
            </summary>
    </member>
    <member name="F:Aspose.Pdf.PageLayout.TwoColumnLeft">
      <summary>
            Display the pages in two columns, with odd-numbered pages on the left.
            </summary>
    </member>
    <member name="F:Aspose.Pdf.PageLayout.TwoColumnRight">
      <summary>
            Display the pages in two columns, with odd-numbered pages on the right.
            </summary>
    </member>
    <member name="F:Aspose.Pdf.PageLayout.TwoPageLeft">
      <summary>
            Display the pages two at a time, with odd-numbered pages on the left.
            </summary>
    </member>
    <member name="F:Aspose.Pdf.PageLayout.TwoPageRight">
      <summary>
            Display the pages two at a time, with odd-numbered pages on the right.
            </summary>
    </member>
    <member name="T:Aspose.Pdf.PageNumberStamp">
      <summary>
            Represents page number stamp and used to number pages. 
            </summary>
    </member>
    <member name="T:Aspose.Pdf.TextStamp">
      <summary>
            Reresents textual stamp.
            </summary>
    </member>
    <member name="M:Aspose.Pdf.TextStamp.#ctor(System.String)">
      <summary>
            Initializes a new instance of the <see cref="T:Aspose.Pdf.TextStamp" /> class.
            </summary>
      <param name="value">
            Stamp value.
            </param>
    </member>
    <member name="M:Aspose.Pdf.TextStamp.Put(Aspose.Pdf.Page)">
      <summary>
            Adds textual stamp on the page.
            </summary>
      <param name="page">
            Page for stamping.
            </param>
    </member>
    <member name="M:Aspose.Pdf.TextStamp.#ctor(Aspose.Pdf.Facades.FormattedText)">
      <summary>
            Initializes a new instance of the <see cref="T:Aspose.Pdf.TextStamp" /> class with formattedText object
            </summary>
    </member>
    <member name="P:Aspose.Pdf.TextStamp.WordWrap">
      <summary>
            Defines word wrap. If this property set to true and Width value specified, text will be broken in the several lines to fit into specified width. Default value: false.
            </summary>
    </member>
    <member name="P:Aspose.Pdf.TextStamp.Justify">
      <summary>
            Defines text justification. If this property is set to true, both left and right edges of the text are aligned. Default value: false.
            </summary>
    </member>
    <member name="P:Aspose.Pdf.TextStamp.Scale">
      <summary>
            Defines scaling of the text. If this property is set to true and Width value specified, text will be scaled in order to fit to specified width.
            </summary>
    </member>
    <member name="P:Aspose.Pdf.TextStamp.Value">
      <summary>
            Gets or sets string value which is used as stamp on the page.
            </summary>
    </member>
    <member name="P:Aspose.Pdf.TextStamp.TextState">
      <summary>
            Gets text properties of the stamp. See <see cref="P:Aspose.Pdf.TextStamp.TextState" /> for details.
            </summary>
    </member>
    <member name="P:Aspose.Pdf.TextStamp.TextAlignment">
      <summary>
            Alignment of the text inside the stamp.
            </summary>
    </member>
    <member name="P:Aspose.Pdf.TextStamp.Width">
      <summary>
            Desired width of the stamp on the page. 
            </summary>
    </member>
    <member name="P:Aspose.Pdf.TextStamp.Height">
      <summary>
            Desired height of the stamp on the page. 
            </summary>
    </member>
    <member name="M:Aspose.Pdf.PageNumberStamp.#ctor(System.String)">
      <summary>
            Initializes a new instance of the <see cref="T:Aspose.Pdf.PageNumberStamp" /> class.
            </summary>
      <param name="format">
            String value used for stamping. See <see cref="P:Aspose.Pdf.PageNumberStamp.Format" /> property for details.
            </param>
    </member>
    <member name="M:Aspose.Pdf.PageNumberStamp.Put(Aspose.Pdf.Page)">
      <summary>
            Adds page number.
            </summary>
      <param name="page">
            Page for stamping.
            </param>
    </member>
    <member name="M:Aspose.Pdf.PageNumberStamp.#ctor">
      <summary>
            Initializes a new instance of the <see cref="T:Aspose.Pdf.PageNumberStamp" /> class. Format is set to "#".
            </summary>
    </member>
    <member name="M:Aspose.Pdf.PageNumberStamp.#ctor(Aspose.Pdf.Facades.FormattedText)">
      <summary>
            Creates PageNumberStamp by formatted text.
            </summary>
      <param name="formattedText">Formatted text which used to create Page Number Stamp.</param>
    </member>
    <member name="P:Aspose.Pdf.PageNumberStamp.Format">
      <summary>
            String value for stamping page numbers. 
            Value must include char '#' which is replaced with the page number in the process of stamping.
            </summary>
    </member>
    <member name="P:Aspose.Pdf.PageNumberStamp.StartingNumber">
      <summary>
            Gets or sets value of the number of starting page. Other pages will be numbered starting from this value.
            </summary>
    </member>
    <member name="T:Aspose.Pdf.PdfPageStamp">
      <summary>
            Class represents stamp which uses PDF page as stamp.
            </summary>
    </member>
    <member name="M:Aspose.Pdf.PdfPageStamp.#ctor(Aspose.Pdf.Page)">
      <summary>
            Constructor of PdfPageStamp.
            </summary>
      <param name="pdfPage">Page which is used for stamping.</param>
    </member>
    <member name="M:Aspose.Pdf.PdfPageStamp.Put(Aspose.Pdf.Page)">
      <summary>
            Put stamp on the specified page.
            </summary>
      <param name="page">Page where stamp will be placed.</param>
    </member>
    <member name="M:Aspose.Pdf.PdfPageStamp.#ctor(System.String,System.Int32)">
      <summary>
            Creates Pdf page stamp from specifed page of the document in specified file.
            </summary>
      <param name="fileName">Name and page of PDF file.</param>
      <param name="pageIndex">Index of the page.</param>
    </member>
    <member name="M:Aspose.Pdf.PdfPageStamp.#ctor(System.IO.Stream,System.Int32)">
      <summary>
            Creates Pdf page stamp from specifed page in the document from the stream.
            </summary>
      <param name="stream">Stream which contains PDF </param>
      <param name="pageIndex">
      </param>
    </member>
    <member name="P:Aspose.Pdf.PdfPageStamp.PdfPage">
      <summary>
            Gets or sets page which will be used as stamp.
            </summary>
    </member>
    <member name="T:Aspose.Pdf.Permissions">
      <summary>
            This enum represents user's permissions for a pdf.
            </summary>
    </member>
    <member name="F:Aspose.Pdf.Permissions.PrintDocument">
      <summary>
            (Security handlers of revision 2) Print the document.
            (Security handlers of revision 3 or greater) Print the document 
            (possibly not at the highest quality level, 
            depending on whether <see cref="F:Aspose.Pdf.Permissions.PrintingQuality" /> is also set).
            </summary>
    </member>
    <member name="F:Aspose.Pdf.Permissions.ModifyContent">
      <summary>
            Modify the contents of the document by operations other 
            than those controlled by  <see cref="F:Aspose.Pdf.Permissions.ModifyTextAnnotations" />, 
            <see cref="F:Aspose.Pdf.Permissions.FillForm" />, and 11.
            </summary>
    </member>
    <member name="F:Aspose.Pdf.Permissions.ExtractContent">
      <summary>
            (Security handlers of revision 2) Copy or otherwise extract 
            text and graphics from the document, including extracting 
            text and graphics (in support of accessibility to users 
            with disabilities or for other purposes).
            (Security handlers of revision 3 or greater) Copy or otherwise 
            extract text and graphics from the document by operations 
            other than that controlled by <see cref="F:Aspose.Pdf.Permissions.ExtractContentWithDisabilities" />.
            </summary>
    </member>
    <member name="F:Aspose.Pdf.Permissions.ModifyTextAnnotations">
      <summary>
            Add or modify text annotations, fill in interactive form fields, 
            and, if <see cref="F:Aspose.Pdf.Permissions.ModifyContent" /> is also set, create or modify interactive form 
            fields (including signature fields).
            </summary>
    </member>
    <member name="F:Aspose.Pdf.Permissions.FillForm">
      <summary>
            (Security handlers of revision 3 or greater) Fill in existing 
            interactive form fields (including signature fields), even if 
            <see cref="F:Aspose.Pdf.Permissions.ModifyTextAnnotations" /> is clear.
            </summary>
    </member>
    <member name="F:Aspose.Pdf.Permissions.ExtractContentWithDisabilities">
      <summary>
            (Security handlers of revision 3 or greater) Extract text and 
            graphics (in support of accessibility to users with disabilities 
            or for other purposes).
            </summary>
    </member>
    <member name="F:Aspose.Pdf.Permissions.AssembleDocument">
      <summary>
            (Security handlers of revision 3 or greater) Assemble the document 
            (insert, rotate, or delete pages and create bookmarks or thumbnail 
            images), even if <see cref="F:Aspose.Pdf.Permissions.ModifyContent" /> is clear.
            </summary>
    </member>
    <member name="F:Aspose.Pdf.Permissions.PrintingQuality">
      <summary>
            (Security handlers of revision 3 or greater) Print the document to 
            a representation from which a faithful digital copy of the PDF content 
            could be generated. When this bit is clear (and bit 3 is set), 
            printing is limited to a low-level representation of the appearance, 
            possibly of degraded quality.
            </summary>
    </member>
    <member name="T:Aspose.Pdf.Point">
      <summary>
            Represent point with fractional coordinates.
            </summary>
    </member>
    <member name="M:Aspose.Pdf.Point.#ctor(System.Double,System.Double)">
      <summary>
            Initializes new instance of the <see cref="T:Aspose.Pdf.Point" />.
            </summary>
      <param name="x">
            x value.
            </param>
      <param name="y">
            y value.
            </param>
    </member>
    <member name="M:Aspose.Pdf.Point.ToPoint">
      <summary>
            Converts point into System.Drawing.PointF object.
            </summary>
    </member>
    <member name="P:Aspose.Pdf.Point.X">
      <summary>
            X value.
            </summary>
    </member>
    <member name="P:Aspose.Pdf.Point.Y">
      <summary>
            Y value.
            </summary>
    </member>
    <member name="P:Aspose.Pdf.Point.Trivial">
      <summary>
            Gets point with zero coordinates.
            </summary>
    </member>
    <member name="T:Aspose.Pdf.Rectangle">
      <summary>
            Class represents rectangle.
            </summary>
    </member>
    <member name="M:Aspose.Pdf.Rectangle.#ctor(System.Double,System.Double,System.Double,System.Double)">
      <summary>
            Constructor of Rectangle.
            </summary>
      <param name="llx">X of lower left corner.</param>
      <param name="lly">Y of lower left corner.</param>
      <param name="urx">X of upper right corner.</param>
      <param name="ury">Y of upper right corner.</param>
    </member>
    <member name="M:Aspose.Pdf.Rectangle.#ctor(System.Double,System.Double,System.Double,System.Double,System.Boolean)">
      <summary>
            Constructor of Rectangle.
            </summary>
      <param name="llx">X of lower left corner.</param>
      <param name="lly">Y of lower left corner.</param>
      <param name="urx">X of upper right corner.</param>
      <param name="ury">Y of upper right corner.</param>
    </member>
    <member name="M:Aspose.Pdf.Rectangle.ToRect">
      <summary>
            Converts rectangle to instance of System.Drawing.Rectangle. Floating-point positions and size are truncated.
            </summary>
      <returns>Result of conversion.</returns>
    </member>
    <member name="M:Aspose.Pdf.Rectangle.FromRect(System.Drawing.Rectangle)">
      <summary>
            Initializes new rectangle from given instance of System.Drawing.Rectangle.
            </summary>
      <param name="src">Source rectangle which position and size will be set to new rectangle.</param>
      <returns>New rectangle.</returns>
    </member>
    <member name="M:Aspose.Pdf.Rectangle.ToString">
      <summary>
            Gets rectangle string representation.
            </summary>
      <returns>
            String has format llx,lly,urx,ury.
            </returns>
    </member>
    <member name="M:Aspose.Pdf.Rectangle.Parse(System.String)">
      <summary>
            Try to parse string and extract from it rectangle components llx, lly, urx, ury.
            </summary>
      <param name="value">
            String to parse.
            </param>
      <returns>
            Rectangle object.
            </returns>
    </member>
    <member name="F:Aspose.Pdf.Rectangle.Empty">
      <summary>
            Empty rectangle
            </summary>
    </member>
    <member name="M:Aspose.Pdf.Rectangle.Equals(Aspose.Pdf.Rectangle)">
      <summary>
            Check if rectangles are equal i.e. hase same position and sizes.
            </summary>
      <param name="other">Rectangle which will be compared.</param>
      <returns>True if rectangles are eqals, false otherwise.</returns>
    </member>
    <member name="M:Aspose.Pdf.Rectangle.Rotate(Aspose.Pdf.Rotation)">
      <summary>
            Rotate rectangle by the specified angle.
            </summary>
      <param name="angle">Angle of rotation. Member of Rotation enumeration.</param>
    </member>
    <member name="M:Aspose.Pdf.Rectangle.Rotate(System.Int32)">
      <summary>
            Rotate rectangle by the specified angle.
            </summary>
      <param name="angle">Angle of rotation in degrees between 0 and 360.</param>
    </member>
    <member name="M:Aspose.Pdf.Rectangle.Clone">
      <summary>
            Clones the Rectangle object.
            </summary>
      <returns>
      </returns>
    </member>
    <member name="P:Aspose.Pdf.Rectangle.Width">
      <summary>
            Width of rectangle.
            </summary>
    </member>
    <member name="P:Aspose.Pdf.Rectangle.Height">
      <summary>
            Height of rectangle.
            </summary>
    </member>
    <member name="P:Aspose.Pdf.Rectangle.LLX">
      <summary>
            X-coordinate of lower - left corner.
            </summary>
    </member>
    <member name="P:Aspose.Pdf.Rectangle.LLY">
      <summary>
            Y - coordinate of lower-left corner.
            </summary>
    </member>
    <member name="P:Aspose.Pdf.Rectangle.URX">
      <summary>
            X - coordinate of upper-right corner.
            </summary>
    </member>
    <member name="P:Aspose.Pdf.Rectangle.URY">
      <summary>
            Y - coordinate of upper-right corner.
            </summary>
    </member>
    <member name="P:Aspose.Pdf.Rectangle.Trivial">
      <summary>
            Initializes trivial rectangle i.e. rectangle with zero position and size.
            </summary>
    </member>
    <member name="P:Aspose.Pdf.Rectangle.IsTrivial">
      <summary>
            Checks if rectangle is trivial i.e. has zero size and position.
            </summary>
    </member>
    <member name="P:Aspose.Pdf.Rectangle.IsEmpty">
      <summary>
            Checks if rectangle is empty.
            </summary>
    </member>
    <member name="P:Aspose.Pdf.Rectangle.IsPoint">
      <summary>
            Checks if rectangle is point i.e. LLX is equal URX and LLY is equal URY.
            </summary>
    </member>
    <member name="T:Aspose.Pdf.Resources">
      <summary>
            Class representing page resources.
            </summary>
    </member>
    <member name="P:Aspose.Pdf.Resources.Forms">
      <summary>
            Gets <see cref="P:Aspose.Pdf.Resources.Forms" /> forms collection
            </summary>
    </member>
    <member name="P:Aspose.Pdf.Resources.Images">
      <summary>
            Gets <see cref="P:Aspose.Pdf.Resources.Images" /> images collection
            </summary>
    </member>
    <member name="P:Aspose.Pdf.Resources.Fonts">
      <summary>
            Gets <see cref="P:Aspose.Pdf.Resources.Fonts" /> resources collection
            </summary>
    </member>
    <member name="T:Aspose.Pdf.Rotation">
      <summary>
            Enumeration of possible rotation values.
            </summary>
    </member>
    <member name="F:Aspose.Pdf.Rotation.None">
      <summary>
            Non-rotated.
            </summary>
    </member>
    <member name="F:Aspose.Pdf.Rotation.on90">
      <summary>
            Rotated on 90 degrees clockwise.
            </summary>
    </member>
    <member name="F:Aspose.Pdf.Rotation.on180">
      <summary>
            Rotated on 180 degrees.
            </summary>
    </member>
    <member name="F:Aspose.Pdf.Rotation.on270">
      <summary>
            Rotated on 270 degrees clockwise.
            </summary>
    </member>
    <member name="T:Aspose.Pdf.ImagePlacement">
      <summary>
            Represents characteristics of an image placed to Pdf document page.
            </summary>
      <remarks>
            When an image is placed to a page it may have dimensions other than physical dimensions defined in <see cref="T:Aspose.Pdf.Resources" />.
            The object <see cref="T:Aspose.Pdf.ImagePlacement" /> is intended to provide such information like dimensions, resolution and so on.
            </remarks>
      <example>
            The example demonstrates how to find images on the first PDF document page and get images as bitmaps with visible dimensions.
            <code lang="C#"> 
            // Open document
            Document doc = new Document(@"D:\Tests\input.pdf");
            
            // Create ImagePlacementAbsorber object to perform image placement search
            ImagePlacementAbsorber abs = new ImagePlacementAbsorber();
            
            // Accept the absorber for first page
            doc.Pages[1].Accept(abs);
            
            // Retrieve images with visible dimensions
            foreach (ImagePlacement imagePlacement in abs.ImagePlacements)
            {
                Bitmap scaledImage;
                using (MemoryStream imageStream = new MemoryStream())
                {
                    // Retrieve image from resources
                    imagePlacement.Image.Save(imageStream, ImageFormat.Png);
                    Bitmap resourceImage = (Bitmap) Bitmap.FromStream(imageStream);
                    // Create new bitmap with actual dimensions
                    scaledImage = new Bitmap(resourceImage, (int)imagePlacement.Rectangle.Width, (int)imagePlacement.Rectangle.Height);
                }
            } 
            </code></example>
    </member>
    <member name="P:Aspose.Pdf.ImagePlacement.Rectangle">
      <summary>
            Gets rectangle of the Image.
            </summary>
    </member>
    <member name="P:Aspose.Pdf.ImagePlacement.Resolution">
      <summary>
            Gets resolution of the Image.
            </summary>
    </member>
    <member name="P:Aspose.Pdf.ImagePlacement.Image">
      <summary>
            Gets related XImage resource object.
            </summary>
    </member>
    <member name="P:Aspose.Pdf.ImagePlacement.Page">
      <summary>
            Gets the page containing the image.
            </summary>
    </member>
    <member name="P:Aspose.Pdf.ImagePlacement.CompositingParameters">
      <summary>
            Gets compositing parameters of graphics state active for the image placed to the page.
            </summary>
    </member>
    <member name="T:Aspose.Pdf.ImagePlacementCollection">
      <summary>
            Represents an image placements collection
            </summary>
    </member>
    <member name="M:Aspose.Pdf.ImagePlacementCollection.GetEnumerator">
      <summary>
             Returns an enumerator for the entire collection.
            </summary>
    </member>
    <member name="M:Aspose.Pdf.ImagePlacementCollection.CopyTo(System.Array,System.Int32)">
      <summary>
             Copies the entire collection to a compatible one-dimensional Array, starting at the specified index of the target array
            </summary>
    </member>
    <member name="P:Aspose.Pdf.ImagePlacementCollection.Count">
      <summary>
             Gets the number of <see cref="T:Aspose.Pdf.ImagePlacement" /> object elements actually contained in the collection. 
             </summary>
    </member>
    <member name="P:Aspose.Pdf.ImagePlacementCollection.SyncRoot">
      <summary>
             Gets an object that can be used to synchronize access to the collection.
             </summary>
    </member>
    <member name="P:Aspose.Pdf.ImagePlacementCollection.IsSynchronized">
      <summary>
             Gets a value indicating whether access to the collection is synchronized (thread safe). 
            </summary>
    </member>
    <member name="P:Aspose.Pdf.ImagePlacementCollection.Item(System.Int32)">
      <summary>
            Gets the text fragment element at the specified index.
            </summary>
      <param name="index">
      </param>
      <returns>
      </returns>
    </member>
    <member name="T:Aspose.Pdf.ImagePlacementAbsorber">
      <summary>
            Represents an absorber object of image placement objects.
            Performs search of image usages and provides access to search results via <see cref="P:Aspose.Pdf.ImagePlacementAbsorber.ImagePlacements" /> collection.
            </summary>
      <remarks>
            The <see cref="T:Aspose.Pdf.ImagePlacementAbsorber" /> object is basically used in images search scenario.
            When the search is completed the occurrences are represented with <see cref="T:Aspose.Pdf.ImagePlacement" /> objects that the <see cref="P:Aspose.Pdf.ImagePlacementAbsorber.ImagePlacements" /> collection contains.
            The <see cref="T:Aspose.Pdf.ImagePlacement" /> object provides access to the image placement properties: dimensions, resolution etc.
            </remarks>
      <example>
            The example demonstrates how to find images on the first PDF document page and get the image placement properties.
            <code lang="C#"> 
            // Open document
            Document doc = new Document(@"D:\Tests\input.pdf");
            
            // Create ImagePlacementAbsorber object to perform image placement search
            ImagePlacementAbsorber abs = new ImagePlacementAbsorber();
            
            // Accept the absorber for first page
            doc.Pages[1].Accept(abs);
            
            // Display image placement properties for all placements
            foreach (ImagePlacement imagePlacement in abs.ImagePlacements)
            {     
                Console.Out.WriteLine("image width:" + imagePlacement.Rectangle.Width);
                Console.Out.WriteLine("image height:" + imagePlacement.Rectangle.Height);
                Console.Out.WriteLine("image LLX:" + imagePlacement.Rectangle.LLX);
                Console.Out.WriteLine("image LLY:" + imagePlacement.Rectangle.LLY);
                Console.Out.WriteLine("image horizontal resolution:" + imagePlacement.Resolution.X);
                Console.Out.WriteLine("image vertical resolution:" + imagePlacement.Resolution.Y);
            }
            </code></example>
    </member>
    <member name="M:Aspose.Pdf.ImagePlacementAbsorber.#ctor">
      <summary>
            Initializes new instance of the <see cref="T:Aspose.Pdf.ImagePlacementAbsorber" /> object.
            </summary>
    </member>
    <member name="M:Aspose.Pdf.ImagePlacementAbsorber.Visit(Aspose.Pdf.Page)">
      <summary>
            Performs search on the specified page.
            </summary>
    </member>
    <member name="M:Aspose.Pdf.ImagePlacementAbsorber.Visit(Aspose.Pdf.Document)">
      <summary>
            Performs search on the specified document.
            </summary>
    </member>
    <member name="P:Aspose.Pdf.ImagePlacementAbsorber.ImagePlacements">
      <summary>
            Gets collection of image placement occurrences that are presented with <see cref="T:Aspose.Pdf.ImagePlacement" /> objects.
            </summary>
    </member>
    <member name="T:Aspose.Pdf.Cell">
      <summary>
            Represents a cell of the table's row.
            </summary>
    </member>
    <member name="M:Aspose.Pdf.Cell.#ctor(Aspose.Pdf.Rectangle)">
      <summary>
            Initializes a new instance of the Cell class.
            </summary>
      <param name="rect">The rectangle of the cell in page's coordinates.</param>
    </member>
    <member name="M:Aspose.Pdf.Cell.#ctor">
      <summary>
            Initializes a new instance of the Cell class.
            </summary>
    </member>
    <member name="M:Aspose.Pdf.Cell.Clone">
      <summary>
            Clone the cell.
            </summary>
    </member>
    <member name="P:Aspose.Pdf.Cell.IsNoBorder">
      <summary>
            Gets or sets the cell have border.
            </summary>
    </member>
    <member name="P:Aspose.Pdf.Cell.Margin">
      <summary>
            Gets or sets the padding.
            </summary>
    </member>
    <member name="P:Aspose.Pdf.Cell.Border">
      <summary>
            Gets or sets the border.
            </summary>
    </member>
    <member name="P:Aspose.Pdf.Cell.BackgroundColor">
      <summary>
            Gets or sets the background color.
            </summary>
    </member>
    <member name="P:Aspose.Pdf.Cell.BackgroundImageFile">
      <summary>
            Gets or sets the background image file.
            </summary>
    </member>
    <member name="P:Aspose.Pdf.Cell.Alignment">
      <summary>
            Gets or sets the alignment.
            </summary>
    </member>
    <member name="P:Aspose.Pdf.Cell.DefaultCellTextState">
      <summary>
            Gets or sets the default cell text state.
            </summary>
    </member>
    <member name="P:Aspose.Pdf.Cell.Paragraphs">
      <summary>
            Gets or sets the cell's formatted text.
            </summary>
    </member>
    <member name="P:Aspose.Pdf.Cell.IsWordWrapped">
      <summary>
            Gets or sets the cell's text word wrapped.
            </summary>
    </member>
    <member name="P:Aspose.Pdf.Cell.VerticalAlignment">
      <summary>
            Gets or sets the vertical alignment.
            </summary>
    </member>
    <member name="P:Aspose.Pdf.Cell.ColSpan">
      <summary>
            Gets or sets the column span.
            </summary>
    </member>
    <member name="P:Aspose.Pdf.Cell.RowSpan">
      <summary>
            Gets or sets the row span.
            </summary>
    </member>
    <member name="T:Aspose.Pdf.Cells">
      <summary>
            Represents a cells collection of row.
            </summary>
    </member>
    <member name="M:Aspose.Pdf.Cells.Add">
      <summary>
            Add cell to collection.
            </summary>
    </member>
    <member name="M:Aspose.Pdf.Cells.Add(System.String,Aspose.Pdf.Text.TextState)">
      <summary>
            Add cell to collection.
            </summary>
      <param name="text">The text.</param>
      <param name="ts">The text state.</param>
    </member>
    <member name="M:Aspose.Pdf.Cells.Add(System.String)">
      <summary>
            Add cell to collection.
            </summary>
      <param name="text">The text.</param>
    </member>
    <member name="M:Aspose.Pdf.Cells.Add(Aspose.Pdf.Cell)">
      <summary>
            Add cell to collection.
            </summary>
      <param name="cell">The cell.</param>
    </member>
    <member name="M:Aspose.Pdf.Cells.RemoveRange(System.Int32,System.Int32)">
      <summary>
            Remove cell set from collection.
            </summary>
      <param name="index">The collection index.</param>
      <param name="count">The rows count.</param>
    </member>
    <member name="M:Aspose.Pdf.Cells.Remove(System.Object)">
      <summary>
            Remove cell set from collection.
            </summary>
      <param name="obj">The object.</param>
    </member>
    <member name="M:Aspose.Pdf.Cells.Insert(System.Int32,Aspose.Pdf.Cell)">
      <summary>
            Insert cell to collection.
            </summary>
    </member>
    <member name="P:Aspose.Pdf.Cells.Count">
      <summary>
            The items count.
            </summary>
    </member>
    <member name="P:Aspose.Pdf.Cells.Item(System.Int32)">
      <summary>
            Returns cell.
            </summary>
    </member>
    <member name="T:Aspose.Pdf.Row">
      <summary>
            Represents a row of the table.
            </summary>
    </member>
    <member name="M:Aspose.Pdf.Row.#ctor">
      <summary>
            Initializes a new instance of the Row class.
            </summary>
    </member>
    <member name="M:Aspose.Pdf.Row.#ctor(System.Double[],Aspose.Pdf.Rectangle)">
      <summary>
            Initializes a new instance of the Row class.
            </summary>
      <param name="columnWidths">The array of column widths.</param>
      <param name="rect">The general rectangle of the row in page's coordinates.</param>
    </member>
    <member name="M:Aspose.Pdf.Row.#ctor(System.Int32,Aspose.Pdf.Rectangle)">
      <summary>
            Initializes a new instance of the Row class.
            </summary>
      <param name="columnNum">The number of table columns.</param>
      <param name="rect">The general rectangle of the row in page's coordinates.</param>
    </member>
    <member name="M:Aspose.Pdf.Row.Clone">
      <summary>
            Clone the row.
            </summary>
    </member>
    <member name="P:Aspose.Pdf.Row.BackgroundColor">
      <summary>
            Gets or sets the background color.
            </summary>
    </member>
    <member name="P:Aspose.Pdf.Row.Border">
      <summary>
            Gets or sets the border.
            </summary>
    </member>
    <member name="P:Aspose.Pdf.Row.Cells">
      <summary>
            Gets the cells of the row.
            </summary>
    </member>
    <member name="P:Aspose.Pdf.Row.DefaultCellBorder">
      <summary>
            Gets default cell border;
            </summary>
    </member>
    <member name="P:Aspose.Pdf.Row.MinRowHeight">
      <summary>
            Gets height for row;
            </summary>
    </member>
    <member name="P:Aspose.Pdf.Row.FixedRowHeight">
      <summary>
            Gets fixed row height - row may have fixed height;
            </summary>
    </member>
    <member name="P:Aspose.Pdf.Row.IsInNewPage">
      <summary>
            Gets fixed row is in new page - page with this property should be printed to next page Default false;
            </summary>
    </member>
    <member name="P:Aspose.Pdf.Row.IsRowBroken">
      <summary>
            Gets is row can be broken between two pages
            </summary>
    </member>
    <member name="P:Aspose.Pdf.Row.DefaultCellTextState">
      <summary>
            Gets or sets default text state for row cells
            </summary>
    </member>
    <member name="P:Aspose.Pdf.Row.DefaultCellPadding">
      <summary>
            Gets or sets default margin for row cells
            </summary>
    </member>
    <member name="T:Aspose.Pdf.Rows">
      <summary>
            Represents a rows collection of table.
            </summary>
    </member>
    <member name="M:Aspose.Pdf.Rows.Add">
      <summary>
            Add row to collection.
            </summary>
    </member>
    <member name="M:Aspose.Pdf.Rows.Add(Aspose.Pdf.Row)">
      <summary>
            Add row to cellection.
            </summary>
    </member>
    <member name="M:Aspose.Pdf.Rows.IndexOf(Aspose.Pdf.Row)">
      <summary>
            Returns index of row in collection.
            </summary>
      <param name="row">The row.</param>
    </member>
    <member name="M:Aspose.Pdf.Rows.Remove(Aspose.Pdf.Row)">
      <summary>
            Remove row from collection.
            </summary>
      <param name="row">The row.</param>
    </member>
    <member name="M:Aspose.Pdf.Rows.RemoveAt(System.Int32)">
      <summary>
            Remove row at position from collection.
            </summary>
      <param name="index">The collection index.</param>
    </member>
    <member name="M:Aspose.Pdf.Rows.RemoveRange(System.Int32,System.Int32)">
      <summary>
            Remove row set from collection.
            </summary>
      <param name="index">The collection index.</param>
      <param name="count">The rows count.</param>
    </member>
    <member name="P:Aspose.Pdf.Rows.Count">
      <summary>
            The items count.
            </summary>
    </member>
    <member name="P:Aspose.Pdf.Rows.Item(System.Int32)">
      <summary>
            Returns row.
            </summary>
    </member>
    <member name="T:Aspose.Pdf.TableBroken">
      <summary>
            Enumerates the table broken.
            </summary>
    </member>
    <member name="F:Aspose.Pdf.TableBroken.None">
      <summary>
            No broken.
            </summary>
    </member>
    <member name="F:Aspose.Pdf.TableBroken.Vertical">
      <summary>
            Vertical broken.
            </summary>
    </member>
    <member name="F:Aspose.Pdf.TableBroken.VerticalInSamePage">
      <summary>
            Vertical broken in same page.
            </summary>
    </member>
    <member name="T:Aspose.Pdf.RenderingOptions">
      <summary>
            Represents rendering options
            </summary>
    </member>
    <member name="M:Aspose.Pdf.RenderingOptions.#ctor">
      <summary>
            Initializes new instance of the <see cref="T:Aspose.Pdf.RenderingOptions" /> object.
            </summary>
    </member>
    <member name="P:Aspose.Pdf.RenderingOptions.BarcodeOptimization">
      <summary>
            Gets or sets barcode optimization mode. 
            </summary>
    </member>
    <member name="P:Aspose.Pdf.RenderingOptions.SystemFontsNativeRendering">
      <summary>
            Gets or sets a mode where system fonts are rendered natively 
            </summary>
    </member>
    <member name="T:Aspose.Pdf.Text.CharInfoCollection">
      <summary>
            Represents CharInfo objects collection.  
            </summary>
      <remarks>
            Provides access to positioning information of text segment characters.
            </remarks>
      <example>
            The example demonstrates how to iterate throught all the characters and retrieve the charact
            <code lang="C#"> 
            //open document
            Document pdfDocument = new Document(inFile);
            //create TextFragmentAbsorber object to collect all the text objects of the page
            TextFragmentAbsorber textFragmentAbsorber = new TextFragmentAbsorber();
            //accept the absorber for all the pages
            pdfDocument.Pages[1].Accept(textFragmentAbsorber);
            //get the extracted text fragments
            TextFragmentCollection textFragmentCollection = textFragmentAbsorber.TextFragments;
                        
            //loop through the fragments
            foreach (TextFragment textFragment in textFragmentCollection)
            {
                //loop through the segments
                foreach (TextSegment textSegment in textFragment.Segments)
                {
                    //loop through the characters
                    for (int i = 1; i &lt;= textSegment.Text.Length; i++)
                    {
                        CharInfo charInfo = textSegment.Characters[i];
            
                        // print character position and rectangle info
                        Console.WriteLine("XIndent : {0} ", charInfo.Position.XIndent);
                        Console.WriteLine("YIndent : {0} ", charInfo.Position.YIndent);
                        Console.WriteLine("Width : {0} ", charInfo.Rectangle.Width);
                        Console.WriteLine("Height : {0} ", charInfo.Rectangle.Height);
                    }
                }
            }
            </code></example>
    </member>
    <member name="M:Aspose.Pdf.Text.CharInfoCollection.GetEnumerator">
      <summary>
             Returns an enumerator for the entire collection.
            </summary>
    </member>
    <member name="M:Aspose.Pdf.Text.CharInfoCollection.CopyTo(System.Array,System.Int32)">
      <summary>
             Copies the entire collection to a compatible one-dimensional Array, starting at the specified index of the target array
            </summary>
    </member>
    <member name="P:Aspose.Pdf.Text.CharInfoCollection.Count">
      <summary>
             Gets the number of <see cref="T:Aspose.Pdf.Text.CharInfo" /> object elements actually contained in the collection. 
             </summary>
    </member>
    <member name="P:Aspose.Pdf.Text.CharInfoCollection.SyncRoot">
      <summary>
             Gets an object that can be used to synchronize access to the collection.
             </summary>
    </member>
    <member name="P:Aspose.Pdf.Text.CharInfoCollection.IsSynchronized">
      <summary>
             Gets a value indicating whether access to the collection is synchronized (thread safe). 
            </summary>
    </member>
    <member name="P:Aspose.Pdf.Text.CharInfoCollection.Item(System.Int32)">
      <summary>
            Gets the CharInfo element at the specified index.
            </summary>
      <param name="index">
      </param>
    </member>
    <member name="T:Aspose.Pdf.Text.FontTypes">
      <summary>
            Supported font types enumeration.
            </summary>
    </member>
    <member name="F:Aspose.Pdf.Text.FontTypes.TTF">
      <summary>
            TTF font type
            </summary>
    </member>
    <member name="F:Aspose.Pdf.Text.FontTypes.OTF">
      <summary>
            OTF font type
            </summary>
    </member>
    <member name="T:Aspose.Pdf.Text.Position">
      <summary>
            Represents a position object
            </summary>
    </member>
    <member name="M:Aspose.Pdf.Text.Position.#ctor(System.Double,System.Double)">
      <summary>
            Initializes a new instance of <see cref="T:Aspose.Pdf.Text.Position" /> class
            </summary>
    </member>
    <member name="M:Aspose.Pdf.Text.Position.ToString">
      <summary>
            Gets string representation for the current <see cref="T:Aspose.Pdf.Text.Position" /> object. 
            </summary>
    </member>
    <member name="M:Aspose.Pdf.Text.Position.Equals(System.Object)">
      <summary>
            Determines whether the specified object is equal to the current <see cref="T:Aspose.Pdf.Text.Position" /> object. 
            </summary>
    </member>
    <member name="P:Aspose.Pdf.Text.Position.XIndent">
      <summary>
            Gets the X coordinate of the object
            </summary>
    </member>
    <member name="P:Aspose.Pdf.Text.Position.YIndent">
      <summary>
            Gets the X coordinate of the object
            </summary>
    </member>
    <member name="T:Aspose.Pdf.Text.TextOptions.TextFormattingOptions">
      <summary>
            Represents text formatting options
            </summary>
    </member>
    <member name="T:Aspose.Pdf.Text.TextOptions.TextOptions">
      <summary>
            Represents text processing options
            </summary>
    </member>
    <member name="M:Aspose.Pdf.Text.TextOptions.TextFormattingOptions.#ctor(Aspose.Pdf.Text.TextOptions.TextFormattingOptions.WordWrapMode)">
      <summary>
            Initializes new instance of the <see cref="T:Aspose.Pdf.Text.TextOptions.TextFormattingOptions" /> object for the specified word wrap mode.
            </summary>
    </member>
    <member name="P:Aspose.Pdf.Text.TextOptions.TextFormattingOptions.WrapMode">
      <summary>
            Gets or sets word wrap mode. 
            Default value is WordWrapMode.NoWrap
            </summary>
    </member>
    <member name="T:Aspose.Pdf.Text.TextParagraph">
      <summary>
            Represents text paragraphs as multiline text object.
            </summary>
      <example>
            The example demonstrates how to create text paragraph object and append it to the Pdf page.
            <code lang="C#"> 
            Document doc = new Document(inFile);
            
            Page page = (Page)doc.Pages[1];
            
            // create text paragraph
            TextParagraph paragraph = new TextParagraph();
                       
            // set the paragraph rectangle
            paragraph.Rectangle = new Rectangle(100, 600, 200, 700);
            
            // set word wrapping options
            paragraph.FormattingOptions.WrapMode = TextFormattingOptions.WordWrapMode.ByWords;
            
            // append string lines
            paragraph.AppendLine("the quick brown fox jumps over the lazy dog");
            paragraph.AppendLine("line2");
            paragraph.AppendLine("line3");
            
            // append the paragraph to the Pdf page with the TextBuilder
            TextBuilder textBuilder = new TextBuilder(page);
            textBuilder.AppendParagraph(paragraph);
            
            // save Pdf document
            doc.Save(outFile);
            </code></example>
    </member>
    <member name="M:Aspose.Pdf.Text.TextParagraph.#ctor">
      <summary>
            Creates <see cref="T:Aspose.Pdf.Text.TextParagraph" /> object.
            </summary>
    </member>
    <member name="M:Aspose.Pdf.Text.TextParagraph.BeginEdit">
      <summary>
            Begins the editing of the TextParagraph. 
            </summary>
      <remarks>
            Improves performance of TextParagraph population.
            Any layout calculation is suspended until EndEdit method is invoked.
            
            Note that method invoke can't be nested.
            </remarks>
    </member>
    <member name="M:Aspose.Pdf.Text.TextParagraph.EndEdit">
      <summary>
            Ends the editing of the TextParagraph.
            </summary>
      <remarks>
            Improves performance of TextParagraph population.
            Any layout calculation is suspended until EndEdit method is invoked.
            
            Note that method invoke can't be nested.
            </remarks>
    </member>
    <member name="M:Aspose.Pdf.Text.TextParagraph.AppendLine(System.String)">
      <summary>
            Appends text line
            </summary>
      <param name="line">The new line's text.</param>
    </member>
    <member name="M:Aspose.Pdf.Text.TextParagraph.AppendLine(System.String,System.Single)">
      <summary>
            Appends text line.
            </summary>
      <param name="line">The new line's text.</param>
      <param name="lineSpacing">Additional spacing (0.0 is default and corresponds to default text line height). The spacing value is added to default line spacing for the particular line, so you may specify 12.0 to get empty row AFTER a text line drawn with 12pt font.</param>
    </member>
    <member name="M:Aspose.Pdf.Text.TextParagraph.AppendLine(System.String,Aspose.Pdf.Text.TextState)">
      <summary>
            Appends text line with text state parameters.
            </summary>
      <param name="line">The new line's text.</param>
      <param name="textState">Text state of the new line.</param>
    </member>
    <member name="M:Aspose.Pdf.Text.TextParagraph.AppendLine(System.String,Aspose.Pdf.Text.TextState,System.Single)">
      <summary>
            Appends text line with text state parameters
            </summary>
      <param name="line">The new line's text.</param>
      <param name="textState">Text state of the new line.</param>
      <param name="lineSpacing">Additional spacing (0.0 is default and corresponds to default text line height). The spacing value is added to default line spacing for the particular line, so you may specify 12.0 to get empty row AFTER a text line drawn with 12pt font.</param>
    </member>
    <member name="M:Aspose.Pdf.Text.TextParagraph.AppendLine(Aspose.Pdf.Text.TextFragment)">
      <summary>
            Appends text line with text state parameters.
            </summary>
      <param name="line">The new line's text.</param>
    </member>
    <member name="M:Aspose.Pdf.Text.TextParagraph.AppendLine(Aspose.Pdf.Text.TextFragment,Aspose.Pdf.Text.TextState)">
      <summary>
            Appends text line with text state parameters.
            </summary>
      <param name="line">The new line's text.</param>
      <param name="textState">Text state of the new line.</param>
    </member>
    <member name="M:Aspose.Pdf.Text.TextParagraph.AppendLine(Aspose.Pdf.Text.TextFragment,Aspose.Pdf.Text.TextState,System.Single)">
      <summary>
            Appends text line with text state parameters
            </summary>
      <param name="line">The new line's text.</param>
      <param name="textState">Text state of the new line.</param>
      <param name="lineSpacing">Additional spacing (0.0 is default and corresponds to default text line height). The spacing value is added to default line spacing for the particular line, so you may specify 12.0 to get empty row AFTER a text line drawn with 12pt font.</param>
    </member>
    <member name="P:Aspose.Pdf.Text.TextParagraph.VerticalAlignment">
      <summary>
            Gets or sets vertical alignment for the text inside paragrph's <see cref="P:Aspose.Pdf.Text.TextParagraph.Rectangle" />. 
            </summary>
      <remarks>
            VerticalAlignment.None is equal to VerticalAlignment.Bottom.
            </remarks>
    </member>
    <member name="P:Aspose.Pdf.Text.TextParagraph.HorizontalAlignment">
      <summary>
            Gets or sets horizontal alignment for the text inside paragrph's <see cref="P:Aspose.Pdf.Text.TextParagraph.Rectangle" />. 
            </summary>
      <remarks>
            HorizontalAlignment.None is equal to HorizontalAlignment.Left.
            </remarks>
    </member>
    <member name="P:Aspose.Pdf.Text.TextParagraph.FormattingOptions">
      <summary>
            Gets or sets formatting options.
            </summary>
    </member>
    <member name="P:Aspose.Pdf.Text.TextParagraph.Position">
      <summary>
            Gets or sets position of the paragraph.
            </summary>
    </member>
    <member name="P:Aspose.Pdf.Text.TextParagraph.TextRectangle">
      <summary>
            Gets rectangle of the text placed to the paragraph.
            </summary>
    </member>
    <member name="P:Aspose.Pdf.Text.TextParagraph.Rectangle">
      <summary>
            Gets or sets rectangle of the paragraph.
            </summary>
    </member>
    <member name="P:Aspose.Pdf.Text.TextParagraph.Margin">
      <summary>
            Gets or sets the padding.
            </summary>
    </member>
    <member name="T:Aspose.Pdf.Text.Font">
      <summary>
             Represents font object.
             </summary>
      <example>
             The example demonstrates how to search text on first page and change font of a first search occurrence.
             <code lang="C#"> 
             // Open document
             Document doc = new Document(@"D:\Tests\input.pdf");
            
             // Create TextFragmentAbsorber object to find all "hello world" text occurrences
             TextFragmentAbsorber absorber = new TextFragmentAbsorber("hello world");
             
             // Accept the absorber for first page
             doc.Pages[1].Accept(absorber);
             
             // Create font and mark it to be embedded
             Font font = FontRepository.FindFont("Arial");
             font.IsEmbedded = true;
             
             // Change font of the first text occurrence
             absorber.TextFragments[1].TextState.Font = font;
             
             
             // Save document
             doc.Save(@"D:\Tests\output.pdf"); 
            	</code></example>
      <seealso cref="T:Aspose.Pdf.Text.TextFragmentAbsorber" />
      <seealso cref="T:Aspose.Pdf.Text.FontRepository" />
      <seealso cref="T:Aspose.Pdf.Document" />
    </member>
    <member name="P:Aspose.Pdf.Text.Font.FontName">
      <summary>
             Gets font name of the <see cref="T:Aspose.Pdf.Text.Font" /> object.
             </summary>
      <example>
             The example demonstrates how to search text on first page and view font name of a first text occurrence.
             <code lang="C#"> 
             // Open document
             Document doc = new Document(@"D:\Tests\input.pdf");
            
             // Create TextFragmentAbsorber object to find all "hello world" text occurrences
             TextFragmentAbsorber absorber = new TextFragmentAbsorber("hello world");
             
             // Accept the absorber for first page
             doc.Pages[1].Accept(absorber);
             
             // View font name of first text occurrence
             Console.Out.WriteLine(absorber.TextFragments[1].TextState.Font.FontName); 
            	</code></example>
      <seealso cref="T:Aspose.Pdf.Text.TextFragmentAbsorber" />
      <seealso cref="T:Aspose.Pdf.Document" />
    </member>
    <member name="P:Aspose.Pdf.Text.Font.IsEmbedded">
      <summary>
            Gets or sets a value that indicates whether the font is embedded.
            </summary>
      <example>
            The following example demonstrates how to find a font, mark it as embedded, search text on the document's page and replace the text font.
            <code lang="C#">
            // Create font and mark it to be embedded
            Font font = FontRepository.FindFont("Arial");
            font.IsEmbedded = true;
            
            // open document
            Document doc = new Document(@"D:\Tests\input.pdf");
            
            // create TextFragmentAbsorber object to find all "hello world" text occurrences
            TextFragmentAbsorber absorber = new TextFragmentAbsorber("hello world");
            // accept the absorber for first page
            doc.Pages[1].Accept(absorber);
            
            // change font for the first text occurrence
            absorber.TextFragments[1].TextState.Font = font;
            
            // save document
            doc.Save(@"D:\Tests\output.pdf"); 
            </code></example>
      <seealso cref="T:Aspose.Pdf.Text.TextFragmentAbsorber" />
      <seealso cref="T:Aspose.Pdf.Text.FontRepository" />
      <seealso cref="T:Aspose.Pdf.Document" />
    </member>
    <member name="P:Aspose.Pdf.Text.Font.IsSubset">
      <summary>
             Gets or sets a value that indicates whether the font is a subset.
             </summary>
      <example>
             The example demonstrates how to search text on first page and get the value that indicates whether the font is a subset.
             <code lang="C#"> 
             // Open document
             Document doc = new Document(@"D:\Tests\input.pdf");
            
             // Create TextFragmentAbsorber object to find all "hello world" text occurrences
             TextFragmentAbsorber absorber = new TextFragmentAbsorber("hello world");
             
             // Accept the absorber for first page
             doc.Pages[1].Accept(absorber);
             
             // View font's IsSubset value of first text occurrence
             if(absorber.TextFragments[1].TextState.Font.IsSubset)
                Console.Out.WriteLine("the font is a subset");
            	</code></example>
      <seealso cref="T:Aspose.Pdf.Text.TextFragmentAbsorber" />
      <seealso cref="T:Aspose.Pdf.Document" />
    </member>
    <member name="P:Aspose.Pdf.Text.Font.IsAccessible">
      <summary>
             Gets indicating whether the font is present (installed) in the system.
             </summary>
      <remarks>
             Some operations are not available with fonts that could not be found in the system.
             </remarks>
      <example>
             The example demonstrates how to search text on first page and get the value that indicates whether the font is installed in the system.
             <code lang="C#"> 
             // Open document
             Document doc = new Document(@"D:\Tests\input.pdf");
            
             // Create TextFragmentAbsorber object to find all "hello world" text occurrences
             TextFragmentAbsorber absorber = new TextFragmentAbsorber("hello world");
             
             // Accept the absorber for first page
             doc.Pages[1].Accept(absorber);
             
             // View font's IsSubset value of first text occurrence
             if(absorber.TextFragments[1].TextState.Font.IsAccessible)
                Console.Out.WriteLine("the font is installed in the system");
            	</code></example>
      <seealso cref="T:Aspose.Pdf.Text.TextFragmentAbsorber" />
      <seealso cref="T:Aspose.Pdf.Document" />
    </member>
    <member name="T:Aspose.Pdf.Text.FontCollection">
      <summary>
            Represents font collection.
            </summary>
      <remarks>
            Font collections represented by <see cref="T:Aspose.Pdf.Text.FontCollection" /> class are used in several scenarios. 
            For example, in resources with <see cref="P:Aspose.Pdf.Resources.Fonts" /> property. 
            </remarks>
      <example>
            The example demonstrates how to make all font declared on page as embedded.
            <code lang="C#"> 
            // Open document
            Document doc = new Document(@"D:\Tests\input.pdf");
            
            // ensure all fonts declared on page resources are embedded
            // note that if fonts are declared on form resources they are not accessible from page resources
            foreach(Aspose.Pdf.Txt.Font font in doc.Pages[1].Resources.Fonts)
            {
                if(!font.IsEmbedded)
                    font.IsEmbedded = true;
            }
            
            doc.Save(@"D:\Tests\input.pdf");
            </code></example>
    </member>
    <member name="M:Aspose.Pdf.Text.FontCollection.GetEnumerator">
      <summary>
             Returns an enumerator for the entire collection.
            </summary>
    </member>
    <member name="M:Aspose.Pdf.Text.FontCollection.CopyTo(System.Array,System.Int32)">
      <summary>
             Copies the entire collection to a compatible one-dimensional Array, starting at the specified index of the target array
            </summary>
    </member>
    <member name="M:Aspose.Pdf.Text.FontCollection.Add(Aspose.Pdf.Text.Font,System.String@)">
      <summary>
            Adds new font to font resources and returns automatically assigned name of font resource.
            </summary>
      <param name="newFont">Font.</param>
      <param name="resName">The automatically assigned resource item name.</param>
    </member>
    <member name="M:Aspose.Pdf.Text.FontCollection.Add(Aspose.Pdf.Text.Font)">
      <summary>
            Adds the font element at the specified index.
            </summary>
    </member>
    <member name="M:Aspose.Pdf.Text.FontCollection.Contains(System.String)">
      <summary>
            Checks if font exists in font collection.
            </summary>
      <param name="name">Font name.</param>
    </member>
    <member name="M:Aspose.Pdf.Text.FontCollection.Add(System.String,Aspose.Pdf.Engine.Data.IPdfObject)">
      <summary>
            Add new font to font collection.
            </summary>
      <param name="resName">
      </param>
      <param name="newFont">
      </param>
    </member>
    <member name="M:Aspose.Pdf.Text.FontCollection.Add(System.String,System.String)">
      <summary>
            Adds to font resources new font entry with specified base font name. 
            </summary>
      <param name="resName">
      </param>
      <param name="baseFontName">
      </param>
    </member>
    <member name="P:Aspose.Pdf.Text.FontCollection.Count">
      <summary>
             Gets the number of <see cref="T:Aspose.Pdf.Text.Font" /> object elements actually contained in the collection. 
             </summary>
    </member>
    <member name="P:Aspose.Pdf.Text.FontCollection.SyncRoot">
      <summary>
             Gets an object that can be used to synchronize access to the collection.
             </summary>
    </member>
    <member name="P:Aspose.Pdf.Text.FontCollection.IsSynchronized">
      <summary>
             Gets a value indicating whether access to the collection is synchronized (thread safe). 
            </summary>
    </member>
    <member name="P:Aspose.Pdf.Text.FontCollection.Item(System.Int32)">
      <summary>
            Gets the font element at the specified index.
            </summary>
      <param name="index">
      </param>
      <returns>
      </returns>
    </member>
    <member name="P:Aspose.Pdf.Text.FontCollection.Item(System.String)">
      <summary>
            Gets font from the collection by font name.
            Exception is thrown if font was not found.
            </summary>
      <param name="name">Name of the font.</param>
      <returns>Found font.</returns>
    </member>
    <member name="T:Aspose.Pdf.Text.FontRepository">
      <summary>
             Performs font search. Searches in system installed fonts and standard Pdf fonts.
             Also provides functionality to open custom fonts.
             </summary>
      <example>
             The example demonstrates how to find font and replace the font of text of first page.
             <code lang="C#"> 
             // Find font
             Font font = FontRepository.FindFont("Arial");
             
             // Open document
             Document doc = new Document(@"D:\Tests\input.pdf");
            
             // Create TextFragmentAbsorber object to find all "hello world" text occurrences
             TextFragmentAbsorber absorber = new TextFragmentAbsorber("hello world");
             
             // Accept the absorber for first page
             doc.Pages[1].Accept(absorber);
             
             // Change font of the first text occurrence
             absorber.TextFragments[1].TextState.Font = font;
             
             // Save document
             doc.Save(@"D:\Tests\output.pdf"); 
            	</code></example>
      <seealso cref="T:Aspose.Pdf.Text.TextFragmentAbsorber" />
      <seealso cref="T:Aspose.Pdf.Document" />
    </member>
    <member name="M:Aspose.Pdf.Text.FontRepository.FindFont(System.String)">
      <summary>
             Searches and returns font with specified font name.
             </summary>
      <example>
             The example demonstrates how to find font and replace the font of text of first page.
             <code lang="C#"> 
             // Find font
             Font font = FontRepository.FindFont("Arial");
             
             // Open document
             Document doc = new Document(@"D:\Tests\input.pdf");
            
             // Create TextFragmentAbsorber object to find all "hello world" text occurrences
             TextFragmentAbsorber absorber = new TextFragmentAbsorber("hello world");
             
             // Accept the absorber for first page
             doc.Pages[1].Accept(absorber);
             
             // Change font of the first text occurrence
             absorber.TextFragments[1].TextState.Font = font;
             
             // Save document
             doc.Save(@"D:\Tests\output.pdf"); 
            	</code></example>
    </member>
    <member name="M:Aspose.Pdf.Text.FontRepository.FindFont(System.String,Aspose.Pdf.Text.FontStyles)">
      <summary>
             Searches and returns font with specified font name and font style.
             </summary>
      <example>
             The example demonstrates how to find font and replace the font of text of first page.
             <code lang="C#"> 
             // Find font
             Font font = FontRepository.FindFont("Arial", FontStyle.Italic);
             
             // Open document
             Document doc = new Document(@"D:\Tests\input.pdf");
            
             // Create TextFragmentAbsorber object to find all "hello world" text occurences
             TextFragmentAbsorber absorber = new TextFragmentAbsorber("hello world");
             
             // Accept the absorber for first page
             doc.Pages[1].Accept(absorber);
             
             // Change font of the first text occurence
             absorber.TextFragments[1].TextState.Font = font;
             
             // Save document
             doc.Save(@"D:\Tests\output.pdf"); 
            	</code></example>
    </member>
    <member name="M:Aspose.Pdf.Text.FontRepository.OpenFont(System.IO.Stream,Aspose.Pdf.Text.FontTypes)">
      <summary>
             Opens font with specified font stream.
             </summary>
      <example>
             The example demonstrates how to open font and replace the font of text of first page.
             <code lang="C#">  
             // Open font
             using (FileStream fontStream = File.OpenRead(@"C:\WINDOWS\Fonts\arial.ttf"))
             {
                 Font font = FontRepository.OpenFont(fontStream, , FontTypes.TTF);
             
                 // Open document
                 Document doc = new Document(@"D:\Tests\input.pdf");
            
                 // Create TextFragmentAbsorber object to find all "hello world" text occurrences
                 TextFragmentAbsorber absorber = new TextFragmentAbsorber("hello world");
             
                 // Accept the absorber for first page
                 doc.Pages[1].Accept(absorber);
             
                 // Change font of the first text occurrence
                 absorber.TextFragments[1].TextState.Font = font;
             
                 // Save document
                 doc.Save(@"D:\Tests\output.pdf"); 
             }
            	</code></example>
    </member>
    <member name="M:Aspose.Pdf.Text.FontRepository.OpenFont(System.String)">
      <summary>
             Opens font with specified font file path.
             </summary>
      <example>
             The example demonstrates how to open font and replace the font of text of first page.
             <code lang="C#"> 
             // Open font
             Font font = FontRepository.OpenFont(@"C:\WINDOWS\Fonts\arial.ttf");
             
             // Open document
             Document doc = new Document(@"D:\Tests\input.pdf");
            
             // Create TextFragmentAbsorber object to find all "hello world" text occurrences
             TextFragmentAbsorber absorber = new TextFragmentAbsorber("hello world");
             
             // Accept the absorber for first page
             doc.Pages[1].Accept(absorber);
             
             // Change font of the first text occurrence
             absorber.TextFragments[1].TextState.Font = font;
             
             // Save document
             doc.Save(@"D:\Tests\output.pdf"); 
            	</code></example>
    </member>
    <member name="M:Aspose.Pdf.Text.FontRepository.OpenFont(System.String,System.String)">
      <summary>
             Opens font with specified font file path and metrics file path.
             </summary>
      <example>
             The example demonstrates how to open Type1 font with metrics and replace the font of text of first page.
             <code lang="C#"> 
             // Open font
             Font font = FontRepository.OpenFont("courier.pfb", "courier.afm");
             
             // Open document
             Document doc = new Document(@"D:\Tests\input.pdf");
            
             // Create TextFragmentAbsorber object to find all "hello world" text occurrences
             TextFragmentAbsorber absorber = new TextFragmentAbsorber("hello world");
             
             // Accept the absorber for first page
             doc.Pages[1].Accept(absorber);
             
             // Change font of the first text occurrence
             absorber.TextFragments[1].TextState.Font = font;
             
             // Save document
             doc.Save(@"D:\Tests\output.pdf"); 
            	</code></example>
    </member>
    <member name="P:Aspose.Pdf.Text.FontRepository.Substitutions">
      <summary>
            Gets font substitution strategies collection.
            </summary>
    </member>
    <member name="P:Aspose.Pdf.Text.FontRepository.Sources">
      <summary>
            Gets font sources collection.
            </summary>
    </member>
    <member name="T:Aspose.Pdf.Text.FontStyles">
      <summary>
            Specifies style information applied to text.
            </summary>
      <remarks>
            This enumeration has a <see cref="T:System.FlagsAttribute" /> attribute that allows a combination of its member values. 
            </remarks>
    </member>
    <member name="F:Aspose.Pdf.Text.FontStyles.Regular">
      <summary>
            Regular text
            </summary>
    </member>
    <member name="F:Aspose.Pdf.Text.FontStyles.Bold">
      <summary>
            Bold text
            </summary>
    </member>
    <member name="F:Aspose.Pdf.Text.FontStyles.Italic">
      <summary>
            Italic text
            </summary>
    </member>
    <member name="T:Aspose.Pdf.Text.CharInfo">
      <summary>
            Represents a character info object.
            Provides character positioning information.
            </summary>
    </member>
    <member name="P:Aspose.Pdf.Text.CharInfo.Position">
      <summary>
            Gets position of the character.
            </summary>
    </member>
    <member name="P:Aspose.Pdf.Text.CharInfo.Rectangle">
      <summary>
            Gets rectangle of the character.
            </summary>
    </member>
    <member name="T:Aspose.Pdf.Text.TextAbsorber">
      <summary>
            Represents an absorber object of a text.
            Performs text extraction and provides access to the result via <see cref="P:Aspose.Pdf.Text.TextAbsorber.Text" /> object.
            </summary>
      <remarks>
            The <see cref="T:Aspose.Pdf.Text.TextAbsorber" /> object is used to extract text from a Pdf document or the document's page. 
            </remarks>
      <example>
            The example demonstrates how to extract text on the first PDF document page.
            <code lang="C#"> 
            // open document
            Document doc = new Document(inFile);
            
            // create TextAbsorber object to extract text
            TextAbsorber absorber = new TextAbsorber();
            
            // accept the absorber for first page
            doc.Pages[1].Accept(absorber);
            
            // get the extracted text
            string extractedText = absorber.Text;
            
            </code></example>
    </member>
    <member name="M:Aspose.Pdf.Text.TextAbsorber.Visit(Aspose.Pdf.Page)">
      <summary>
            Extracts text on the specified page
            </summary>
      <example>
            The example demonstrates how to extract text on the first PDF document page.
            <code lang="C#"> 
            // open document
            Document doc = new Document(inFile);
            
            // create TextAbsorber object to extract text
            TextAbsorber absorber = new TextAbsorber();
            
            // accept the absorber for all document's pages
            absorber.Visit(doc.Pages[1]);
            
            // get the extracted text
            string extractedText = absorber.Text;
            </code></example>
    </member>
    <member name="M:Aspose.Pdf.Text.TextAbsorber.Visit(Aspose.Pdf.XForm)">
      <summary>
            Extracts text on the specified XForm.
            </summary>
      <example>
            The example demonstrates how to extract text on the first PDF document page.
            <code lang="C#"> 
            // open document
            Document doc = new Document(inFile);
            
            // create TextAbsorber object to extract text
            TextAbsorber absorber = new TextAbsorber();
            
            // accept the absorber for all document's pages
            absorber.Visit(doc.Pages[1].Resources.Forms["Xform1"]);
            
            // get the extracted text
            string extractedText = absorber.Text;
            </code></example>
      <param name="form">
      </param>
    </member>
    <member name="M:Aspose.Pdf.Text.TextAbsorber.Visit(Aspose.Pdf.Document)">
      <summary>
            Extracts text on the specified document
            </summary>
      <example>
            The example demonstrates how to extract text on PDF document.
            <code lang="C#"> 
            // open document
            Document doc = new Document(inFile);
            
            // create TextAbsorber object to extract text
            TextAbsorber absorber = new TextAbsorber();
            
            // accept the absorber for all document's pages
            absorber.Visit(doc);
            
            // get the extracted text
            string extractedText = absorber.Text;
            </code></example>
    </member>
    <member name="M:Aspose.Pdf.Text.TextAbsorber.#ctor">
      <summary>
            Initializes a new instance of the <see cref="T:Aspose.Pdf.Text.TextAbsorber" />.
            </summary>
      <remarks>
            Performs text extraction and provides access to the extracted text via <see cref="P:Aspose.Pdf.Text.TextAbsorber.Text" /> object.
            </remarks>
      <example>
            The example demonstrates how to extract text from all pages of the PDF document.
            <code lang="C#"> 
            // open document
            Document doc = new Document(inFile);
            
            // create TextAbsorber object to extract text
            TextAbsorber absorber = new TextAbsorber();
            
            // accept the absorber for all document's pages
            doc.Pages.Accept(absorber);
            
            // get the extracted text
            string extractedText = absorber.Text;
            
            </code></example>
    </member>
    <member name="M:Aspose.Pdf.Text.TextAbsorber.#ctor(Aspose.Pdf.Text.TextOptions.TextExtractionOptions)">
      <summary>
            Initializes a new instance of the <see cref="T:Aspose.Pdf.Text.TextAbsorber" /> with extraction options.
            </summary>
      <remarks>
            Performs text extraction and provides access to the extracted text via <see cref="P:Aspose.Pdf.Text.TextAbsorber.Text" /> object.
            </remarks>
      <example>
            The example demonstrates how to extract text from all pages of the PDF document.
            <code lang="C#"> 
            // open document
            Document doc = new Document(inFile);
            
            // create TextAbsorber object to extract text with formatting
            TextAbsorber absorber = new TextAbsorber(new TextExtractionOptions(TextExtractionOptions.TextFormattingMode.Pure));
            
            // accept the absorber for all document's pages
            doc.Pages.Accept(absorber);
            
            // get the extracted text
            string extractedText = absorber.Text;
            
            </code></example>
    </member>
    <member name="M:Aspose.Pdf.Text.TextAbsorber.#ctor(Aspose.Pdf.Text.TextOptions.TextExtractionOptions,Aspose.Pdf.Text.TextOptions.TextSearchOptions)">
      <summary>
            Initializes a new instance of the <see cref="T:Aspose.Pdf.Text.TextAbsorber" /> with extraction and text search options.
            </summary>
      <remarks>
            Performs text extraction and provides access to the extracted text via <see cref="P:Aspose.Pdf.Text.TextAbsorber.Text" /> object.
            </remarks>
    </member>
    <member name="M:Aspose.Pdf.Text.TextAbsorber.#ctor(Aspose.Pdf.Text.TextOptions.TextSearchOptions)">
      <summary>
            Initializes a new instance of the <see cref="T:Aspose.Pdf.Text.TextAbsorber" /> with text search options.
            </summary>
      <remarks>
            Performs text extraction and provides access to the extracted text via <see cref="P:Aspose.Pdf.Text.TextAbsorber.Text" /> object.
            </remarks>
    </member>
    <member name="P:Aspose.Pdf.Text.TextAbsorber.Text">
      <summary>
            Gets extracted text that the <see cref="T:Aspose.Pdf.Text.TextAbsorber" /> extracts on the PDF document or page.
            </summary>
      <example>
            The example demonstrates how to extract text from all pages of the PDF document.
            <code lang="C#"> 
            // open document
            Document doc = new Document(inFile);
            
            // create TextAbsorber object to extract text
            TextAbsorber absorber = new TextAbsorber();
            
            // accept the absorber for all document's pages
            doc.Pages.Accept(absorber);
            
            // get the extracted text
            string extractedText = absorber.Text;
            
            </code></example>
    </member>
    <member name="P:Aspose.Pdf.Text.TextAbsorber.ExtractionOptions">
      <summary>
            Gets or sets text extraction options.
            </summary>
      <remarks>
            Allows to define text formatting mode <see cref="T:Aspose.Pdf.Text.TextOptions.TextExtractionOptions" /> during extraction.
            The default mode is <see cref="F:Aspose.Pdf.Text.TextOptions.TextExtractionOptions.TextFormattingMode.Pure" /></remarks>
      <example>
            The example demonstrates how to set Pure text formatting mode and perform text extraction.
            <code lang="C#"> 
            // open document
            Document doc = new Document(inFile);
            
            // create TextAbsorber object to extract text with formatting
            TextAbsorber absorber = new TextAbsorber();
            
            // set pure text formatting mode
            absorber.ExtractionOptions = new TextExtractionOptions(TextExtractionOptions.TextFormattingMode.Pure);
            
            // accept the absorber for all document's pages
            doc.Pages.Accept(absorber);
            
            // get the extracted text
            string extractedText = absorber.Text;
            </code></example>
    </member>
    <member name="P:Aspose.Pdf.Text.TextAbsorber.TextSearchOptions">
      <summary>
            Gets or sets text search options.
            </summary>
      <remarks>
            Allows to define rectangle which delimits the extracted text.
            By default the rectangle is empty. That means page boundaries only defines the text extraction region.
            </remarks>
    </member>
    <member name="T:Aspose.Pdf.Text.TextBuilder">
      <summary>
            Appends text object to Pdf page.
            </summary>
    </member>
    <member name="M:Aspose.Pdf.Text.TextBuilder.#ctor(Aspose.Pdf.Page)">
      <summary>
            Initializes a new instance of <see cref="T:Aspose.Pdf.Text.TextBuilder" /> class for the Pdf page.
            </summary>
      <remarks>
            The TextBuilder allows to append text objects to Pdf pages.
            </remarks>
    </member>
    <member name="M:Aspose.Pdf.Text.TextBuilder.#ctor(Aspose.Pdf.Page,Aspose.Pdf.OperatorCollection)">
      <summary>
            Initializes a new instance of <see cref="T:Aspose.Pdf.Text.TextBuilder" /> class for the Pdf page.
            </summary>
      <remarks>
            The TextBuilder allows to append text objects to Pdf pages.
            </remarks>
    </member>
    <member name="M:Aspose.Pdf.Text.TextBuilder.AppendParagraph(Aspose.Pdf.Text.TextParagraph)">
      <summary>
            Appends text paragraph to Pdf page.
            </summary>
      <example>
            The example demonstrates how to create text paragraph object and append it to the Pdf page.
            <code lang="C#"> 
            Document doc = new Document(inFile);
            
            Page page = (Page)doc.Pages[1];
            
            // create text paragraph
            TextParagraph paragraph = new TextParagraph();
                       
            // set the paragraph rectangle
            paragraph.Rectangle = new Rectangle(100, 600, 200, 700);
            
            // set word wrapping options
            paragraph.FormattingOptions.WrapMode = TextFormattingOptions.WordWrapMode.ByWords;
            
            // append string lines
            paragraph.AppendLine("the quick brown fox jumps over the lazy dog");
            paragraph.AppendLine("line2");
            paragraph.AppendLine("line3");
            
            // append the paragraph to the Pdf page with the TextBuilder
            TextBuilder textBuilder = new TextBuilder(page);
            textBuilder.AppendParagraph(paragraph);
            
            // save Pdf document
            doc.Save(outFile);
            </code></example>
      <param name="textParagraph">Text paragraph object.</param>
    </member>
    <member name="M:Aspose.Pdf.Text.TextBuilder.AppendText(Aspose.Pdf.Text.TextFragment)">
      <summary>
            Appends text fragment to Pdf page
            </summary>
      <example>
            The example demonstrates how to create text fragment object, customize it's text segments and append it to the Pdf page.
            <code lang="C#"> 
            Document doc = new Document(inFile);
            Page page = (Page)doc.Pages[1];
            
            // create text fragment
            TextFragment tf = new TextFragment("main text");
            tf.Position = new Position(100, 600);
            
            // set it's text properties
            tf.TextState.FontSize = 5;
            tf.TextState.Font = FontRepository.FindFont("TimesNewRoman");
            tf.TextState.BackgroundColor = Color.LightGray;
            tf.TextState.ForegroundColor = Color.Red;
            
            // add one more segment to text fragment's Segments collection
            TextSegment segment2 = new TextSegment();
            segment2.Text = "another segment";
            
            tf.Segments.Add(segment2);
            
            // create TextBuilder object
            TextBuilder builder = new TextBuilder(page);
            
            // append the text fragment to the Pdf page
            builder.AppendText(tf);
            
            //save document
            doc.Save(outFile);
            </code></example>
      <param name="textFragment">
      </param>
    </member>
    <member name="M:Aspose.Pdf.Text.TextBuilder.AppendText(Aspose.Pdf.Text.TextFragment,System.Int32,System.Boolean)">
      <summary>
            Appends text with rotation
            </summary>
    </member>
    <member name="M:Aspose.Pdf.Text.TextBuilder.AppendParagraph(Aspose.Pdf.Text.TextParagraph,System.Int32)">
      <summary>
            Appends paragraph with rotation
            </summary>
      <param name="textParagraph">
      </param>
      <param name="rotation">
      </param>
    </member>
    <member name="T:Aspose.Pdf.Text.TextFragmentAbsorber">
      <summary>
            Represents an absorber object of text fragments.
            Performs text search and provides access to search results via <see cref="P:Aspose.Pdf.Text.TextFragmentAbsorber.TextFragments" /> collection.
            </summary>
      <remarks>
            The <see cref="T:Aspose.Pdf.Text.TextFragmentAbsorber" /> object is basically used in text search scenario.
            When the search is completed the occurrences are represented with <see cref="T:Aspose.Pdf.Text.TextFragment" /> objects that the <see cref="P:Aspose.Pdf.Text.TextFragmentAbsorber.TextFragments" /> collection contains.
            The <see cref="T:Aspose.Pdf.Text.TextFragment" /> object provides access to the search occurrence text, text properties, and allows to edit text and change the text state (font, font size, color etc).
            </remarks>
      <example>
            The example demonstrates how to find text on the first PDF document page and replace the text and it's font.
            <code lang="C#"> 
            // Open document
            Document doc = new Document(@"D:\Tests\input.pdf");
            
            // Find font that will be used to change document text font
            Aspose.Pdf.Txt.Font font = FontRepository.FindFont("Arial");
            
            // Create TextFragmentAbsorber object to find all "hello world" text occurrences
            TextFragmentAbsorber absorber = new TextFragmentAbsorber("hello world");
            
            // Accept the absorber for first page
            doc.Pages[1].Accept(absorber);
            
            // Change text and font of the first text occurrence
            absorber.TextFragments[1].Text = "hi world";
            absorber.TextFragments[1].TextState.Font = font;
            
            // Save document
            doc.Save(@"D:\Tests\output.pdf");  
            </code></example>
    </member>
    <member name="M:Aspose.Pdf.Text.TextFragmentAbsorber.#ctor">
      <summary>
            Initializes a new instance of the <see cref="T:Aspose.Pdf.Text.TextFragmentAbsorber" /> that performs search of all text segments of the document or page.
            </summary>
      <remarks>
            Performs text search and provides access to search results via <see cref="P:Aspose.Pdf.Text.TextFragmentAbsorber.TextFragments" /> collection. 
            </remarks>
      <example>
            The example demonstrates how to find text on the first PDF document page and replace the text.
            <code lang="C#"> 
            // Open document
            Document doc = new Document(@"D:\Tests\input.pdf");
            
            // Find font that will be used to change document text font
            Aspose.Pdf.Txt.Font font = FontRepository.FindFont("Arial");
            
            // Create TextFragmentAbsorber object
            TextFragmentAbsorber absorber = new TextFragmentAbsorber();
            
            // Make the absorber to search all "hello world" text occurrences
            absorber.Phrase = "hello world";
            
            // Accept the absorber for first page
            doc.Pages[1].Accept(absorber);
            
            // Change text of the first text occurrence
            absorber.TextFragments[1].Text = "hi world";
            
            // Save document
            doc.Save(@"D:\Tests\output.pdf");  
            </code></example>
    </member>
    <member name="M:Aspose.Pdf.Text.TextFragmentAbsorber.#ctor(Aspose.Pdf.Text.TextOptions.TextEditOptions)">
      <summary>
             Initializes a new instance of the <see cref="T:Aspose.Pdf.Text.TextFragmentAbsorber" /> with text edit options, that performs search of all text segments of the document or page.  
             </summary>
      <remarks>
             Performs text search and provides access to search results via <see cref="P:Aspose.Pdf.Text.TextFragmentAbsorber.TextFragments" /> collection. 
             </remarks>
      <example>
             The example demonstrates how to find all text fragments on the first PDF document page and replace font for them.
             <code lang="C#"> 
             // Open document
             Document doc = new Document(@"D:\Tests\input.pdf");
             
             // Create TextFragmentAbsorber object
             TextFragmentAbsorber absorber = new TextFragmentAbsorber(new TextEditOptions(TextEditOptions.FontReplace.RemoveUnusedFonts));
             
             // Accept the absorber for first page
             doc.Pages[1].Accept(absorber);
             
             // Find Courier font
             Pdf.Text.Font font = FontRepository.FindFont("Courier");
            
             // Set the font for all the text fragments
             foreach (TextFragment textFragment in absorber.TextFragments)
             {
                 textFragment.TextState.Font = font;
             }
            
             // Save document
             doc.Save(@"D:\Tests\output.pdf");
             </code></example>
      <param name="textEditOptions">Text edit options (Allows to turn on some edit features).</param>
    </member>
    <member name="M:Aspose.Pdf.Text.TextFragmentAbsorber.#ctor(System.String)">
      <summary>
            Initializes a new instance of the <see cref="T:Aspose.Pdf.Text.TextFragmentAbsorber" /> class for the specified text phrase.
            </summary>
      <remarks>
            Performs text search of the specified phrase and provides access to search results via <see cref="P:Aspose.Pdf.Text.TextFragmentAbsorber.TextFragments" /> collection.
            </remarks>
      <example>
            The example demonstrates how to find text on the first PDF document page and replace the text and it's font.
            <code lang="C#"> 
            // Open document
            Document doc = new Document(@"D:\Tests\input.pdf");
            
            // Find font that will be used to change document text font
            Aspose.Pdf.Txt.Font font = FontRepository.FindFont("Arial");
            
            // Create TextFragmentAbsorber object to find all "hello world" text occurrences
            TextFragmentAbsorber absorber = new TextFragmentAbsorber("hello world");
            
            // Accept the absorber for first page
            doc.Pages[1].Accept(absorber);
            
            // Change text and font of the first text occurrence
            absorber.TextFragments[1].Text = "hi world";
            absorber.TextFragments[1].TextState.Font = font;
            
            // Save document
            doc.Save(@"D:\Tests\output.pdf");  
            </code></example>
      <param name="phrase">Phrase that the <see cref="T:Aspose.Pdf.Text.TextFragmentAbsorber" /> searches</param>
    </member>
    <member name="M:Aspose.Pdf.Text.TextFragmentAbsorber.#ctor(System.String,Aspose.Pdf.Text.TextOptions.TextSearchOptions)">
      <summary>
            Initializes a new instance of the <see cref="T:Aspose.Pdf.Text.TextFragmentAbsorber" /> class for the specified text phrase and text search options.
            </summary>
      <remarks>
            Performs text search of the specified phrase and provides access to search results via <see cref="P:Aspose.Pdf.Text.TextFragmentAbsorber.TextFragments" /> collection.
            </remarks>
      <example>
            The example demonstrates how to find text with regular expression on the first PDF document page and replace the text.
            <code lang="C#"> 
            // Open document
            Document doc = new Document(@"D:\Tests\input.pdf");
            
            // Create TextFragmentAbsorber object that seatches all words starting 'h' and ending 'o' using regular expression.
            TextFragmentAbsorber absorber = new TextFragmentAbsorber(@"h\w*?o", new TextSearchOptions(true));
            
            // we should find "hello" word and replace it with "Hi"
            doc.Pages[1].Accept(absorber);
            absorber.TextFragments[1].Text = "Hi"; 
             
            // Save document
            doc.Save(@"D:\Tests\output.pdf");  
            </code></example>
      <param name="phrase">Phrase that the <see cref="T:Aspose.Pdf.Text.TextFragmentAbsorber" /> searches</param>
      <param name="textSearchOptions">Text search options (Allows to turn on some search features. For example, search with regular expression)</param>
    </member>
    <member name="M:Aspose.Pdf.Text.TextFragmentAbsorber.#ctor(System.String,Aspose.Pdf.Text.TextOptions.TextSearchOptions,Aspose.Pdf.Text.TextOptions.TextEditOptions)">
      <summary>
            Initializes a new instance of the <see cref="T:Aspose.Pdf.Text.TextFragmentAbsorber" /> class for the specified text phrase, text search options and text edit options.
            </summary>
      <remarks>
            Performs text search of the specified phrase and provides access to search results via <see cref="P:Aspose.Pdf.Text.TextFragmentAbsorber.TextFragments" /> collection.
            </remarks>
      <example>
            The example demonstrates how to find text with regular expression on the first PDF document page and replace the text.
            <code lang="C#"> 
            // Open document
            Document doc = new Document(@"D:\Tests\input.pdf");
            
            // Create TextFragmentAbsorber object that seatches all words starting 'h' and ending 'o' using regular expression.
            TextFragmentAbsorber absorber = new TextFragmentAbsorber(@"h\w*?o", new TextSearchOptions(true));
            
            // we should find "hello" word and replace it with "Hi"
            doc.Pages[1].Accept(absorber);
            absorber.TextFragments[1].Text = "Hi"; 
            
            // Save document
            doc.Save(@"D:\Tests\output.pdf");  
            </code></example>
      <param name="phrase">Phrase that the <see cref="T:Aspose.Pdf.Text.TextFragmentAbsorber" /> searches</param>
      <param name="textSearchOptions">Text search options (Allows to turn on some search features. For example, search with regular expression)</param>
      <param name="textEditOptions">Text edit options (Allows to turn on some edit features).</param>
    </member>
    <member name="M:Aspose.Pdf.Text.TextFragmentAbsorber.#ctor(System.String,Aspose.Pdf.Text.TextOptions.TextEditOptions)">
      <summary>
            Initializes a new instance of the <see cref="T:Aspose.Pdf.Text.TextFragmentAbsorber" /> class for the specified text phrase and text edit options.
            </summary>
      <remarks>
            Performs text search of the specified phrase and provides access to search results via <see cref="P:Aspose.Pdf.Text.TextFragmentAbsorber.TextFragments" /> collection.
            </remarks>
      <param name="phrase">Phrase that the <see cref="T:Aspose.Pdf.Text.TextFragmentAbsorber" /> searches</param>
      <param name="textEditOptions">Text edit options (Allows to turn on some edit features).</param>
    </member>
    <member name="M:Aspose.Pdf.Text.TextFragmentAbsorber.Visit(Aspose.Pdf.Page)">
      <summary>
            Performs search on the specified page.
            </summary>
      <example>
            The example demonstrates how to find text on the first PDF document page and replace the text.
            <code lang="C#"> 
            // Open document
            Document doc = new Document(@"D:\Tests\input.pdf");
            
            // Find font that will be used to change document text font
            Aspose.Pdf.Txt.Font font = FontRepository.FindFont("Arial");
            
            // Create TextFragmentAbsorber object to find all "hello world" text occurrences
            TextFragmentAbsorber absorber = new TextFragmentAbsorber("hello world");
            
            // Accept the absorber for first page
            absorber.Visit(doc.Pages[1]);
            
            // Change text of all search occurrences
            foreach (TextFragment textFragment in absorber.TextFragments)
            {
                textFragment.Text = "hi world";
            }
            
            // Save document
            doc.Save(@"D:\Tests\output.pdf");  
            </code></example>
    </member>
    <member name="M:Aspose.Pdf.Text.TextFragmentAbsorber.Visit(Aspose.Pdf.Document)">
      <summary>
            Performs search on the specified document.
            </summary>
      <example>
            The example demonstrates how to find text on PDF document and replace text of all search occurrences.
            <code lang="C#"> 
            // Open document
            Document doc = new Document(@"D:\Tests\input.pdf");
            
            // Find font that will be used to change document text font
            Aspose.Pdf.Txt.Font font = FontRepository.FindFont("Arial");
            
            // Create TextFragmentAbsorber object to find all "hello world" text occurrences
            TextFragmentAbsorber absorber = new TextFragmentAbsorber("hello world");
            
            // Accept the absorber for first page
            absorber.Visit(doc);
            
            // Change text of the first text occurrence
            absorber.TextFragments[1].Text = "hi world";
            
            // Save document
            doc.Save(@"D:\Tests\output.pdf");  
            </code></example>
    </member>
    <member name="M:Aspose.Pdf.Text.TextFragmentAbsorber.Visit(Aspose.Pdf.XForm)">
      <summary>
            Performs search on the specified form object.
            </summary>
    </member>
    <member name="P:Aspose.Pdf.Text.TextFragmentAbsorber.TextFragments">
      <summary>
            Gets collection of search occurrences that are presented with <see cref="T:Aspose.Pdf.Text.TextFragment" /> objects.
            </summary>
      <example>
            The example demonstrates how to find text on the first PDF document page and replace all search occurrences with new text.
            <code lang="C#"> 
            // Open document
            Document doc = new Document(@"D:\Tests\input.pdf");
            
            // Find font that will be used to change document text font
            Aspose.Pdf.Txt.Font font = FontRepository.FindFont("Arial");
            
            // Create TextFragmentAbsorber object to find all "hello world" text occurrences
            TextFragmentAbsorber absorber = new TextFragmentAbsorber("hello world");
            
            // Accept the absorber for first page
            doc.Pages[1].Accept(absorber);
            
            // Change text of all search occurrences
            foreach (TextFragment textFragment in absorber.TextFragments)
            {
                textFragment.Text = "hi world";
            }
            
            // Save document
            doc.Save(@"D:\Tests\output.pdf");  
            </code></example>
    </member>
    <member name="P:Aspose.Pdf.Text.TextFragmentAbsorber.Phrase">
      <summary>
            Gets or sets phrase that the <see cref="T:Aspose.Pdf.Text.TextFragmentAbsorber" /> searches on the PDF document or page.
            </summary>
      <example>
            The example demonstrates how to perform search text several times and perform text replacements.
            <code lang="C#"> 
            // Open document
            Document doc = new Document(@"D:\Tests\input.pdf");
            
            // Create TextFragmentAbsorber object to find all "hello" text occurrences
            TextFragmentAbsorber absorber = new TextFragmentAbsorber("hello");
            
            doc.Pages[1].Accept(absorber);
            absorber.TextFragments[1].Text = "Hi";
            
            // search another word and replace it
            absorber.Phrase = "world";
            
            doc.Pages[1].Accept(absorber);
            absorber.TextFragments[1].Text = "John";
            
            // Save document
            doc.Save(@"D:\Tests\output.pdf");  
            </code></example>
    </member>
    <member name="P:Aspose.Pdf.Text.TextFragmentAbsorber.TextSearchOptions">
      <summary>
            Gets or sets search options. The options enable search using regular expressions.
            </summary>
      <example>
            The example demonstrates how to perform search text using regular expression.
            <code lang="C#"> 
            // Open document
            Document doc = new Document(@"D:\Tests\input.pdf");
            
            // Create TextFragmentAbsorber object
            TextFragmentAbsorber absorber = new TextFragmentAbsorber();
            
            // make the absorber to search all words starting 'h' and ending 'o' using regular expression.
            absorber.Phrase = @"h\w*?o";
            absorber.TextSearchOptions = new TextSearchOptions(true);
            
            // we should find "hello" word and replace it with "Hi"
            doc.Pages[1].Accept(absorber);
            absorber.TextFragments[1].Text = "Hi"; 
            
            // Save document
            doc.Save(@"D:\Tests\output.pdf"); 
            </code></example>
    </member>
    <member name="P:Aspose.Pdf.Text.TextFragmentAbsorber.TextEditOptions">
      <summary>
            Gets or sets text edit options. The options define special behavior when requested symbol cannot be written with font.
            </summary>
    </member>
    <member name="P:Aspose.Pdf.Text.TextFragmentAbsorber.ExtractionOptions">
      <summary>
            Gets or sets text extraction options.
            </summary>
    </member>
    <member name="T:Aspose.Pdf.Text.TextFragmentCollection">
      <summary>
            Represents a text fragments collection
            </summary>
    </member>
    <member name="M:Aspose.Pdf.Text.TextFragmentCollection.GetEnumerator">
      <summary>
             Returns an enumerator for the entire collection.
            </summary>
    </member>
    <member name="M:Aspose.Pdf.Text.TextFragmentCollection.CopyTo(System.Array,System.Int32)">
      <summary>
             Copies the entire collection to a compatible one-dimensional Array, starting at the specified index of the target array
            </summary>
    </member>
    <member name="P:Aspose.Pdf.Text.TextFragmentCollection.Count">
      <summary>
             Gets the number of <see cref="T:Aspose.Pdf.Text.TextFragment" /> object elements actually contained in the collection. 
             </summary>
    </member>
    <member name="P:Aspose.Pdf.Text.TextFragmentCollection.SyncRoot">
      <summary>
             Gets an object that can be used to synchronize access to the collection.
             </summary>
    </member>
    <member name="P:Aspose.Pdf.Text.TextFragmentCollection.IsSynchronized">
      <summary>
             Gets a value indicating whether access to the collection is synchronized (thread safe). 
            </summary>
    </member>
    <member name="P:Aspose.Pdf.Text.TextFragmentCollection.Item(System.Int32)">
      <summary>
            Gets the text fragment element at the specified index.
            </summary>
      <param name="index">
      </param>
      <returns>
      </returns>
    </member>
    <member name="T:Aspose.Pdf.Text.TextFragmentState">
      <summary>
            Represents a text state of a text fragment.
            </summary>
      <remarks>
            Provides a way to change following properties of the text:
               font (<see cref="P:Aspose.Pdf.Text.TextFragmentState.Font" /> property)
               font size (<see cref="P:Aspose.Pdf.Text.TextFragmentState.FontSize" /> property)
               font style (<see cref="P:Aspose.Pdf.Text.TextFragmentState.FontStyle" /> property)
               foreground color (<see cref="P:Aspose.Pdf.Text.TextFragmentState.ForegroundColor" /> property)
               background color (<see cref="P:Aspose.Pdf.Text.TextFragmentState.BackgroundColor" /> property)
            
            Note that changing <see cref="T:Aspose.Pdf.Text.TextFragmentState" /> properties may change inner <see cref="P:Aspose.Pdf.Text.TextFragment.Segments" /> collection because TextFragment is an aggregate object and it may rearrange internal segments or merge them into single segment.
            If your requirement is to leave the <see cref="P:Aspose.Pdf.Text.TextFragment.Segments" /> collection unchanged, please change inner segments individually.
            </remarks>
      <example>
            The example demonstrates how to change text color and font size of the text with <see cref="T:Aspose.Pdf.Text.TextState" /> object.
            <code lang="C#"> 
            // Open document
            Document doc = new Document(@"D:\Tests\input.pdf");
            
            // Create TextFragmentAbsorber object to find all "hello world" text occurrences
            TextFragmentAbsorber absorber = new TextFragmentAbsorber("hello world");
            
            // Accept the absorber for first page
            doc.Pages[1].Accept(absorber);
            
            // Change foreground color of the first text occurrence
            absorber.TextFragments[1].TextState.ForegroundColor = Color.FromRgb(System.Drawing.Color.Red);
            // Change font size of the first text occurrence
            absorber.TextFragments[1].TextState.FontSize = 15;
            
            // Save document
            doc.Save(@"D:\Tests\output.pdf");  
            </code></example>
      <seealso cref="T:Aspose.Pdf.Text.TextFragmentAbsorber" />
      <seealso cref="T:Aspose.Pdf.Document" />
    </member>
    <member name="T:Aspose.Pdf.Text.TextState">
      <summary>
            Represents a text state of a text
            </summary>
    </member>
    <member name="M:Aspose.Pdf.Text.TextState.#ctor">
      <summary>
            Creates text state object.
            </summary>
    </member>
    <member name="M:Aspose.Pdf.Text.TextState.#ctor(Aspose.Pdf.Text.TextSegment)">
      <summary>
            Copying constructor
            Copies properties from <see cref="T:Aspose.Pdf.Engine.CommonData.Text.Segmenting.PhysicalTextState" /></summary>
    </member>
    <member name="M:Aspose.Pdf.Text.TextState.#ctor(System.Double)">
      <summary>
            Creates text state object with font size specification.
            </summary>
      <param name="fontSize">
      </param>
    </member>
    <member name="M:Aspose.Pdf.Text.TextState.#ctor(System.Drawing.Color)">
      <summary>
            Creates text state object with foreground color specification.
            </summary>
      <param name="foregroundColor">
      </param>
    </member>
    <member name="M:Aspose.Pdf.Text.TextState.#ctor(System.Drawing.Color,System.Double)">
      <summary>
            Creates text state object with foreground color and font size specification.
            </summary>
      <param name="foregroundColor">
      </param>
      <param name="fontSize">
      </param>
    </member>
    <member name="M:Aspose.Pdf.Text.TextState.#ctor(System.String)">
      <summary>
            Creates text state object with font family specification.
            </summary>
      <param name="fontFamily">
      </param>
    </member>
    <member name="M:Aspose.Pdf.Text.TextState.#ctor(System.String,System.Boolean,System.Boolean)">
      <summary>
            Creates text state object with font family and font style specification.
            </summary>
      <param name="fontFamily">
      </param>
      <param name="bold">
      </param>
      <param name="italic">
      </param>
    </member>
    <member name="M:Aspose.Pdf.Text.TextState.#ctor(System.String,System.Double)">
      <summary>
            Creates text state object with font family and font size specification.
            </summary>
      <param name="fontFamily">
      </param>
      <param name="fontSize">
      </param>
    </member>
    <member name="P:Aspose.Pdf.Text.TextState.LineSpacing">
      <summary>
            Gets or sets line spacing of the text.
            </summary>
      <remarks>
            Note that the value is not preserved as a text characteristic within the document.
            The LineSpacing property getter works for an object in case it was explicitly set previously with LineSpacing setter for those object.
            
            The property is used by runtime in context of current generation/modification process.
            </remarks>
    </member>
    <member name="P:Aspose.Pdf.Text.TextState.HorizontalScaling">
      <summary>
            Gets or sets horizontal scaling of the text.
            </summary>
    </member>
    <member name="P:Aspose.Pdf.Text.TextState.FontSize">
      <summary>
            Gets or sets font size of the text.
            </summary>
    </member>
    <member name="P:Aspose.Pdf.Text.TextState.Font">
      <summary>
            Gets or sets font of the text.
            </summary>
    </member>
    <member name="P:Aspose.Pdf.Text.TextState.ForegroundColor">
      <summary>
            Gets or sets foreground color of the text.
            </summary>
    </member>
    <member name="P:Aspose.Pdf.Text.TextState.Underline">
      <summary>
            Sets underline for the text, represented by the <see cref="T:Aspose.Pdf.Text.TextFragment" /> object
            </summary>
    </member>
    <member name="P:Aspose.Pdf.Text.TextState.BackgroundColor">
      <summary>
            Sets background color of the text.
            </summary>
      <remarks>
            Note that the value is not preserved as a text characteristic within the document.
            The BackgroundColor property getter works for an object in case it was explicitly set previously with BackgroundColor setter for those object.
            
            The property is used by runtime in context of current generation/modification process.
            </remarks>
    </member>
    <member name="P:Aspose.Pdf.Text.TextState.FontStyle">
      <summary>
            Sets font style of the text.
            </summary>
    </member>
    <member name="M:Aspose.Pdf.Text.TextFragmentState.#ctor(Aspose.Pdf.Text.TextFragment)">
      <summary>
            Initializes new instance of the <see cref="T:Aspose.Pdf.Text.TextFragmentState" /> object with specified <see cref="T:Aspose.Pdf.Text.TextFragment" /> object.
            This <see cref="T:Aspose.Pdf.Text.TextFragmentState" /> initialization is not supported.
            TextFragmentState is only available with <see cref="P:Aspose.Pdf.Text.TextFragment.TextState" /> property.
            </summary>
    </member>
    <member name="P:Aspose.Pdf.Text.TextFragmentState.HorizontalScaling">
      <summary>
            Gets or sets horizontal scaling of the text, represented by the <see cref="T:Aspose.Pdf.Text.TextFragment" /> object.
            </summary>
    </member>
    <member name="P:Aspose.Pdf.Text.TextFragmentState.LineSpacing">
      <summary>
            Gets or sets line spacing of the text.
            </summary>
      <remarks>
            Note that the value is not preserved as a text characteristic within the document.
            The LineSpacing property getter works for an object in case it was explicitly set previously with LineSpacing setter for those object.
            
            The property is used by runtime in context of current generation/modification process.
            </remarks>
    </member>
    <member name="P:Aspose.Pdf.Text.TextFragmentState.ForegroundColor">
      <summary>
            Gets or sets foreground color of the text, represented by the <see cref="T:Aspose.Pdf.Text.TextFragment" /> object
            </summary>
    </member>
    <member name="P:Aspose.Pdf.Text.TextFragmentState.BackgroundColor">
      <summary>
            Sets background color of the text, represented by the <see cref="T:Aspose.Pdf.Text.TextFragment" /> object
            </summary>
    </member>
    <member name="P:Aspose.Pdf.Text.TextFragmentState.Underline">
      <summary>
            Sets underline for the text, represented by the <see cref="T:Aspose.Pdf.Text.TextFragment" /> object
            </summary>
    </member>
    <member name="P:Aspose.Pdf.Text.TextFragmentState.FontStyle">
      <summary>
            Sets font style of the text, represented by the <see cref="T:Aspose.Pdf.Text.TextFragment" /> object
            </summary>
    </member>
    <member name="P:Aspose.Pdf.Text.TextFragmentState.Font">
      <summary>
            Gets or sets font of the text, represented by the <see cref="T:Aspose.Pdf.Text.TextFragment" /> object
            </summary>
    </member>
    <member name="P:Aspose.Pdf.Text.TextFragmentState.FontSize">
      <summary>
            Gets or sets font size of the text, represented by the <see cref="T:Aspose.Pdf.Text.TextFragment" /> object
            </summary>
    </member>
    <member name="T:Aspose.Pdf.Text.TextOptions.TextEditOptions">
      <summary>
            Descubes options of text edit operations.
            </summary>
    </member>
    <member name="M:Aspose.Pdf.Text.TextOptions.TextEditOptions.#ctor(Aspose.Pdf.Text.TextOptions.TextEditOptions.NoCharacterAction)">
      <summary>
            Initializes new instance of the <see cref="T:Aspose.Pdf.Text.TextOptions.TextEditOptions" /> object for the specified no-character behavior mode.
            </summary>
      <param name="noCharacterBehavior">
      </param>
    </member>
    <member name="M:Aspose.Pdf.Text.TextOptions.TextEditOptions.#ctor(Aspose.Pdf.Text.TextOptions.TextEditOptions.TextRearrangement)">
      <summary>
            Initializes new instance of the <see cref="T:Aspose.Pdf.Text.TextOptions.TextEditOptions" /> object for the specified text rearrangement mode.
            </summary>
      <param name="rearrangementMode">
      </param>
    </member>
    <member name="M:Aspose.Pdf.Text.TextOptions.TextEditOptions.#ctor(Aspose.Pdf.Text.TextOptions.TextEditOptions.FontReplace)">
      <summary>
            Initializes new instance of the <see cref="T:Aspose.Pdf.Text.TextOptions.TextEditOptions" /> object for the specified font replacement behavior mode.
            </summary>
      <param name="fontReplaceBehavior">
      </param>
    </member>
    <member name="P:Aspose.Pdf.Text.TextOptions.TextEditOptions.NoCharacterBehavior">
      <summary>
            Gets or sets mode that defines behavior in case fonts don't contain requested characters.
            </summary>
    </member>
    <member name="P:Aspose.Pdf.Text.TextOptions.TextEditOptions.FontReplaceBehavior">
      <summary>
            Gets mode that defines behavior for fonts replacement scenarios.
            </summary>
    </member>
    <member name="T:Aspose.Pdf.Text.TextOptions.TextExtractionOptions">
      <summary>
            Represents text extraction options
            </summary>
    </member>
    <member name="M:Aspose.Pdf.Text.TextOptions.TextExtractionOptions.#ctor(Aspose.Pdf.Text.TextOptions.TextExtractionOptions.TextFormattingMode)">
      <summary>
            Initializes new instance of the <see cref="T:Aspose.Pdf.Text.TextOptions.TextExtractionOptions" /> object for the specified text formatting mode.
            </summary>
    </member>
    <member name="P:Aspose.Pdf.Text.TextOptions.TextExtractionOptions.FormattingMode">
      <summary>
            Gets formatting mode. 
            </summary>
    </member>
    <member name="T:Aspose.Pdf.Text.TextOptions.TextReplaceOptions">
      <summary>
            Represents text replace options
            </summary>
    </member>
    <member name="M:Aspose.Pdf.Text.TextOptions.TextReplaceOptions.#ctor(Aspose.Pdf.Text.TextOptions.TextReplaceOptions.Scope)">
      <summary>
            Initializes new instance of the <see cref="T:Aspose.Pdf.Text.TextOptions.TextReplaceOptions" /> object for the specified scope.
            </summary>
      <param name="scope">
      </param>
    </member>
    <member name="P:Aspose.Pdf.Text.TextOptions.TextReplaceOptions.ReplaceScope">
      <summary>
            Gets or sets a scope where replace text operation is applied 
            </summary>
    </member>
    <member name="T:Aspose.Pdf.Text.TextOptions.TextSearchOptions">
      <summary>
            Represents text search options
            </summary>
    </member>
    <member name="M:Aspose.Pdf.Text.TextOptions.TextSearchOptions.#ctor(System.Boolean)">
      <summary>
            Initializes new instance of the <see cref="T:Aspose.Pdf.Text.TextOptions.TextSearchOptions" /> object.
            Specifies regular expression usage mode.
            </summary>
    </member>
    <member name="M:Aspose.Pdf.Text.TextOptions.TextSearchOptions.#ctor(Aspose.Pdf.Rectangle)">
      <summary>
            Initializes new instance of the <see cref="T:Aspose.Pdf.Text.TextOptions.TextSearchOptions" /> object.
            Specifies rectangle that delimits the searched text.
            </summary>
    </member>
    <member name="M:Aspose.Pdf.Text.TextOptions.TextSearchOptions.#ctor(Aspose.Pdf.Rectangle,System.Boolean)">
      <summary>
            Initializes new instance of the <see cref="T:Aspose.Pdf.Text.TextOptions.TextSearchOptions" /> object.
            Specifies rectangle that delimits the searched text and regular expression usage mode.
            </summary>
    </member>
    <member name="P:Aspose.Pdf.Text.TextOptions.TextSearchOptions.IsRegularExpressionUsed">
      <summary>
            Gets or sets indication that regular expression is used.
            </summary>
    </member>
    <member name="P:Aspose.Pdf.Text.TextOptions.TextSearchOptions.LimitToPageBounds">
      <summary>
            Gets or sets indication that text is searched within the page bounds.
            </summary>
    </member>
    <member name="P:Aspose.Pdf.Text.TextOptions.TextSearchOptions.Rectangle">
      <summary>
            Gets or sets rectangle that bounds the searched text.
            </summary>
      <remarks>
            The property may be used in case it is required to delimit text extraction or text replace region.
            </remarks>
    </member>
    <member name="T:Aspose.Pdf.Text.TextSegment">
      <summary>
             Represents segment of Pdf text.
             </summary>
      <remarks>
             In a few words, <see cref="T:Aspose.Pdf.Text.TextSegment" /> objects are children of <see cref="T:Aspose.Pdf.Text.TextFragment" /> object.
             
             In details:
             
             Text of pdf document in <see cref="N:Aspose.Pdf" /> is represented by two basic objects: <see cref="T:Aspose.Pdf.Text.TextFragment" /> and <see cref="T:Aspose.Pdf.Text.TextSegment" />
            
             The differences between them is mostly context-dependent.
            
             Let's consider following scenario. User searches text "hello world" to operate with it, change it's properties, look etc.
             <code lang="C#">
             Document doc = new Document(docFile);
             TextFragmentAbsorber absorber = new TextFragmentAbsorber("hello world");
             doc.Pages[1].Accept(absorber);
             </code>
             Phisycally pdf text's representation is very complex.
             The text "hello world" may consist of several phisycally independent text segments.
            
             The Aspose.Pdf text model basically establishes that <see cref="T:Aspose.Pdf.Text.TextFragment" /> object
             provides single logic operation set over physical <see cref="T:Aspose.Pdf.Text.TextSegment" /> objects set that represent user's query.
            
             In text search scenario, <see cref="T:Aspose.Pdf.Text.TextFragment" /> is logical "hello world" text representation,
             and <see cref="T:Aspose.Pdf.Text.TextSegment" /> object collection represents all physical segments that construct "hello world" text object.
            
             So, <see cref="T:Aspose.Pdf.Text.TextFragment" /> is close to logical text representation.
             And <see cref="T:Aspose.Pdf.Text.TextSegment" /> is close to physical text representation.
            
             Obviously each <see cref="T:Aspose.Pdf.Text.TextSegment" /> object may have it's own font, coloring, positioning properties.
            
             <see cref="T:Aspose.Pdf.Text.TextFragment" /> provides simple way to change text with it's properties: set font, set font size, set font color etc.
             Meanwhile <see cref="T:Aspose.Pdf.Text.TextSegment" /> objects are accessible and users are able to operate with <see cref="T:Aspose.Pdf.Text.TextSegment" /> objects independently.
             </remarks>
      <example>
             The example demonstrates how to change text color and font size of the text with <see cref="P:Aspose.Pdf.Text.TextSegment.TextState" /> object of <see cref="T:Aspose.Pdf.Text.TextSegment" /> object.
             <code lang="C#"> 
             // Open document
             Document doc = new Document(@"D:\Tests\input.pdf");
             
             // Create TextFragmentAbsorber object to find all "hello world" text occurrences
             TextFragmentAbsorber absorber = new TextFragmentAbsorber("hello world");
             
             // Accept the absorber for first page
             doc.Pages[1].Accept(absorber);
             
             // Change foreground color of the first text segment of the first text occurrence
             absorber.TextFragments[1].Segments[1].TextState.ForegroundColor = Color.FromRgb(System.Drawing.Color.Red);
             // Change font size of the first text segment of the first text occurrence
             absorber.TextFragments[1].Segments[1].TextState.FontSize = 15;
             
             // Save document
             doc.Save(@"D:\Tests\output.pdf");  
            	</code></example>
    </member>
    <member name="M:Aspose.Pdf.Text.TextSegment.#ctor">
      <summary>
            Creates TextSegment object.
            </summary>
      <example>
            The example demonstrates how to create text fragment object, add a text segment to the text fragment collection and append it to the Pdf page.
            <code lang="C#"> 
            Document doc = new Document(inFile);
            Page page = (Page)doc.Pages[1];
            
            // create text fragment
            TextFragment tf = new TextFragment("main text");
            tf.Position = new Position(100, 600);
            
            // set it's text properties
            tf.TextState.FontSize = 5;
            tf.TextState.Font = FontRepository.FindFont("TimesNewRoman");
            tf.TextState.BackgroundColor = Color.LightGray;
            tf.TextState.ForegroundColor = Color.Red;
            
            // add one more segment to text fragment's Segments collection
            TextSegment segment2 = new TextSegment();
            segment2.Text = "another segment";
            
            tf.Segments.Add(segment2);
            
            // create TextBuilder object
            TextBuilder builder = new TextBuilder(page);
            
            // append the text fragment to the Pdf page
            builder.AppendText(tf);
            
            //save document
            doc.Save(outFile);
            </code></example>
    </member>
    <member name="M:Aspose.Pdf.Text.TextSegment.#ctor(System.String)">
      <summary>
            Creates TextSegment object.
            </summary>
      <example>
            The example demonstrates how to create text fragment object, add a text segment to the text fragment collection and append it to the Pdf page.
            <code lang="C#"> 
            Document doc = new Document(inFile);
            Page page = (Page)doc.Pages[1];
            
            // create text fragment
            TextFragment tf = new TextFragment("main text");
            tf.Position = new Position(100, 600);
            
            // set it's text properties
            tf.TextState.FontSize = 5;
            tf.TextState.Font = FontRepository.FindFont("TimesNewRoman");
            tf.TextState.BackgroundColor = Color.LightGray;
            tf.TextState.ForegroundColor = Color.Red;
            
            // add one more segment to text fragment's Segments collection
            TextSegment segment2 = new TextSegment("another segment");
            
            tf.Segments.Add(segment2);
            
            // create TextBuilder object
            TextBuilder builder = new TextBuilder(page);
            
            // append the text fragment to the Pdf page
            builder.AppendText(tf);
            
            //save document
            doc.Save(outFile);
            </code></example>
      <param name="text">Text segment's text.</param>
    </member>
    <member name="P:Aspose.Pdf.Text.TextSegment.Text">
      <summary>
            Gets or sets <see cref="T:System.String" /> text object that the <see cref="T:Aspose.Pdf.Text.TextSegment" /> object represents.
            </summary>
    </member>
    <member name="P:Aspose.Pdf.Text.TextSegment.TextState">
      <summary>
            Gets or sets text state for the text that <see cref="T:Aspose.Pdf.Text.TextSegment" /> object represents.
            </summary>
      <remarks>
            Provides a way to change following properties of the text:
               Font
               FontSize
               FontStyle
               ForegroundColor
               BackgroundColor
            </remarks>
    </member>
    <member name="P:Aspose.Pdf.Text.TextSegment.Position">
      <summary>
            Gets text position for text, represented with <see cref="T:Aspose.Pdf.Text.TextSegment" /> object.
            </summary>
    </member>
    <member name="P:Aspose.Pdf.Text.TextSegment.BaselinePosition">
      <summary>
            Gets text position for text, represented with <see cref="T:Aspose.Pdf.Text.TextSegment" /> object.
            The YIndent of the Position structure represents baseline coordinate of the text segment.
            </summary>
    </member>
    <member name="P:Aspose.Pdf.Text.TextSegment.TextEditOptions">
      <summary>
            Gets or sets text edit options. The options define special behavior when requested symbol cannot be written with font.
            </summary>
    </member>
    <member name="P:Aspose.Pdf.Text.TextSegment.Characters">
      <summary>
            Gets collection of CharInfo objects that represent information on characters in the text segment.
            </summary>
    </member>
    <member name="T:Aspose.Pdf.Text.TextSegmentCollection">
      <summary>
            Represents a text segments collection
            </summary>
    </member>
    <member name="M:Aspose.Pdf.Text.TextSegmentCollection.Add(Aspose.Pdf.Text.TextSegment)">
      <summary>
            Adds the text segment element at the specified index.
            </summary>
    </member>
    <member name="M:Aspose.Pdf.Text.TextSegmentCollection.GetEnumerator">
      <summary>
             Returns an enumerator for the entire collection.
            </summary>
    </member>
    <member name="M:Aspose.Pdf.Text.TextSegmentCollection.CopyTo(System.Array,System.Int32)">
      <summary>
             Copies the entire collection to a compatible one-dimensional Array, starting at the specified index of the target array
            </summary>
    </member>
    <member name="P:Aspose.Pdf.Text.TextSegmentCollection.Count">
      <summary>
             Gets the number of <see cref="T:Aspose.Pdf.Text.TextSegment" /> object elements actually contained in the collection. 
             </summary>
    </member>
    <member name="P:Aspose.Pdf.Text.TextSegmentCollection.SyncRoot">
      <summary>
             Gets an object that can be used to synchronize access to the collection.
             </summary>
    </member>
    <member name="P:Aspose.Pdf.Text.TextSegmentCollection.IsSynchronized">
      <summary>
             Gets a value indicating whether access to the collection is synchronized (thread safe). 
            </summary>
    </member>
    <member name="P:Aspose.Pdf.Text.TextSegmentCollection.Item(System.Int32)">
      <summary>
            Gets the text segment element at the specified index.
            </summary>
      <param name="index">
      </param>
      <returns>
      </returns>
    </member>
    <member name="T:Aspose.Pdf.VerticalAlignment">
      <summary>
            Enumeration of possible vertical alignment values.
            </summary>
    </member>
    <member name="F:Aspose.Pdf.VerticalAlignment.None">
      <summary>
            No alignment (use specified position).
            </summary>
    </member>
    <member name="F:Aspose.Pdf.VerticalAlignment.Top">
      <summary>
            Align to top.
            </summary>
    </member>
    <member name="F:Aspose.Pdf.VerticalAlignment.Center">
      <summary>
            Center alignment.
            </summary>
    </member>
    <member name="F:Aspose.Pdf.VerticalAlignment.Bottom">
      <summary>
            Align to bottom.
            </summary>
    </member>
    <member name="T:Aspose.Pdf.XForm">
      <summary>
            Class represent XForm
            </summary>
    </member>
    <member name="M:Aspose.Pdf.XForm.CreateNewForm(Aspose.Pdf.Engine.Data.ITrailerable)">
      <summary>
            Creates new XForm in the document.
            </summary>
      <param name="trailerable">Describes ITrailerable object</param>
      <returns>Newly created XForm</returns>
    </member>
    <member name="M:Aspose.Pdf.XForm.CreateNewForm(Aspose.Pdf.Page,Aspose.Pdf.Document)">
      <summary>
            Creates XForm which duplicates contents of the page. 
            </summary>
      <param name="source">Source page</param>
      <param name="document">Document where new XForm will be added.</param>
      <returns>Newly created XForm.</returns>
    </member>
    <member name="P:Aspose.Pdf.XForm.BBox">
      <summary>
            Gets or sets form bounding box.
            </summary>
    </member>
    <member name="P:Aspose.Pdf.XForm.Name">
      <summary>
            Gets or sets form name. Form name is name which used to reference form in XObejct ductionary in page resources.
            </summary>
    </member>
    <member name="P:Aspose.Pdf.XForm.Contents">
      <summary>
            Gets operators of the form
            </summary>
    </member>
    <member name="P:Aspose.Pdf.XForm.Matrix">
      <summary>
            Gets or sets matrix of the form.
            </summary>
    </member>
    <member name="P:Aspose.Pdf.XForm.Resources">
      <summary>
            Gets Form XObject resources.
            </summary>
    </member>
    <member name="T:Aspose.Pdf.XFormCollection">
      <summary>
            Class represents collection of XFormCollection.
            </summary>
    </member>
    <member name="M:Aspose.Pdf.XFormCollection.Add(Aspose.Pdf.XForm)">
      <summary>
            Adds new XForm into collection.
            </summary>
      <param name="xform">XForm to add into collection</param>
    </member>
    <member name="M:Aspose.Pdf.XFormCollection.Delete(System.Int32)">
      <summary>
            Delete XForm from collectin
            </summary>
      <param name="index">Index of XForm which must be deleted</param>
    </member>
    <member name="M:Aspose.Pdf.XFormCollection.Delete">
      <summary>
            Deletes all XForms from collection.
            </summary>
    </member>
    <member name="M:Aspose.Pdf.XFormCollection.CopyTo(System.Array,System.Int32)">
      <summary>
            Copies XFormCollection into collection. 
            </summary>
      <param name="array">Array of XForm to be copied</param>
      <param name="index">Index where XFormCollection will be copied</param>
    </member>
    <member name="M:Aspose.Pdf.XFormCollection.GetEnumerator">
      <summary>
            Retunrs collection enumerator.
            </summary>
      <returns>Enumerator for collection</returns>
    </member>
    <member name="M:Aspose.Pdf.XFormCollection.Delete(System.String)">
      <summary>
            Deletes XForm from collection by form name.
            </summary>
      <param name="name">Name of XForm to be deleted.</param>
    </member>
    <member name="P:Aspose.Pdf.XFormCollection.Count">
      <summary>
            Gets count of XForms in collection.
            </summary>
    </member>
    <member name="P:Aspose.Pdf.XFormCollection.IsSynchronized">
      <summary>
            Returns true if object is synchronized.
            </summary>
    </member>
    <member name="P:Aspose.Pdf.XFormCollection.SyncRoot">
      <summary>
            Synchronization object.
            </summary>
    </member>
    <member name="P:Aspose.Pdf.XFormCollection.Item(System.Int32)">
      <summary>
            Returns XForm by index.
            </summary>
      <param name="index">Index of XFormCollection. XForms numbering is started from 1</param>
      <returns>Retreived XForm</returns>
    </member>
    <member name="P:Aspose.Pdf.XFormCollection.Item(System.String)">
      <summary>
            Returns XForm by its name. Exception is thrown if XForm with specified name is not found.
            </summary>
      <param name="name">Name of XForm</param>
      <returns>
      </returns>
    </member>
    <member name="T:Aspose.Pdf.XImage">
      <summary>
            Class representing image X-Object.
            </summary>
    </member>
    <member name="M:Aspose.Pdf.XImage.Save(System.IO.Stream)">
      <summary>
            Saves image data into stream as JPEG image.
            </summary>
      <param name="stream">Stream where image data will be saved.</param>
    </member>
    <member name="M:Aspose.Pdf.XImage.Save(System.IO.Stream,System.Drawing.Imaging.ImageFormat)">
      <summary>
            Saves image into stream with requested format. 
            </summary>
      <param name="stream">Stream where image will be saved</param>
      <param name="format">Format which will be used for image enconding. <see cref="T:System.Drawing.Imaging.ImageFormat" /></param>
    </member>
    <member name="M:Aspose.Pdf.XImage.Save(System.IO.Stream,System.Int32)">
      <summary>
            Saves image data into stream as JPEG image with specified resolution.
            </summary>
      <param name="stream">Stream where image data will be saved.</param>
      <param name="resolution">Image resolution</param>
    </member>
    <member name="M:Aspose.Pdf.XImage.Save(System.IO.Stream,System.Drawing.Imaging.ImageFormat,System.Int32)">
      <summary>
            Saves image into stream with requested format with specified resolution. 
            </summary>
      <param name="stream">Stream where image will be saved</param>
      <param name="format">Format which will be used for image enconding. <see cref="T:System.Drawing.Imaging.ImageFormat" /></param>
      <param name="resolution">Image resolution</param>
    </member>
    <member name="P:Aspose.Pdf.XImage.Grayscaled">
      <summary>
            Gets grayscaled version of image.
            </summary>
    </member>
    <member name="P:Aspose.Pdf.XImage.Width">
      <summary>
            Gets width of the image.
            </summary>
    </member>
    <member name="P:Aspose.Pdf.XImage.Height">
      <summary>
            Gets height of the image.
            </summary>
    </member>
    <member name="P:Aspose.Pdf.XImage.Name">
      <summary>
            Gets or sets image name.
            </summary>
    </member>
    <member name="T:Aspose.Pdf.XImageCollection">
      <summary>
            Class representing XImage collection.
            </summary>
    </member>
    <member name="M:Aspose.Pdf.XImageCollection.Add(System.IO.Stream)">
      <summary>
            Adds entity to the end of the collection, so entity can be accessed by the last index.
            </summary>
    </member>
    <member name="M:Aspose.Pdf.XImageCollection.Delete(System.Int32)">
      <summary>
            Removes index from collection by index.
            </summary>
      <param name="index">Image index.</param>
    </member>
    <member name="M:Aspose.Pdf.XImageCollection.Delete(System.String)">
      <summary>
            Removes index from collection by name.
            </summary>
      <param name="name">Name of image which must to be deleted.</param>
    </member>
    <member name="M:Aspose.Pdf.XImageCollection.Delete">
      <summary>
            Deletes images from collection.
            </summary>
    </member>
    <member name="M:Aspose.Pdf.XImageCollection.GetEnumerator">
      <summary>
            Returns collection enumerator.
            </summary>
      <returns>Enumerator of collection</returns>
    </member>
    <member name="M:Aspose.Pdf.XImageCollection.CopyTo(System.Array,System.Int32)">
      <summary>
            Copies array of images into collection.
            </summary>
      <param name="array">Array to be copied.</param>
      <param name="index">Index where images will be copied into collection.</param>
    </member>
    <member name="M:Aspose.Pdf.XImageCollection.Replace(System.Int32,System.IO.Stream)">
      <summary>
            Replace image in collection with another image. 
            </summary>
      <param name="index">Index of collection item which will be replaced.</param>
      <param name="stream">Stream containing image data (in JPEG format).</param>
    </member>
    <member name="P:Aspose.Pdf.XImageCollection.Count">
      <summary>
            Count of images in collection.
            </summary>
    </member>
    <member name="P:Aspose.Pdf.XImageCollection.IsSynchronized">
      <summary>
            Returns true if object is synchronized.
            </summary>
    </member>
    <member name="P:Aspose.Pdf.XImageCollection.SyncRoot">
      <summary>
            Returns synchronization object.
            </summary>
    </member>
    <member name="P:Aspose.Pdf.XImageCollection.Names">
      <summary>
            Gets array of image names.
            </summary>
    </member>
    <member name="P:Aspose.Pdf.XImageCollection.Item(System.Int32)">
      <summary>
            Gets image from collection by its index.
            </summary>
      <param name="index">Image index</param>
      <returns>Retreived image.</returns>
    </member>
    <member name="P:Aspose.Pdf.XImageCollection.Item(System.String)">
      <summary>
            Gets image from collection by its name.
            </summary>
      <param name="name">Image name.</param>
      <returns>Retreived image.</returns>
    </member>
    <member name="T:Aspose.Pdf.Devices.EmfDevice">
      <summary>
            Represents image device that helps to save pdf document pages into emf. 
            </summary>
    </member>
    <member name="M:Aspose.Pdf.Devices.EmfDevice.#ctor">
      <summary>
            Initializes a new instance of the <see cref="T:Aspose.Pdf.Devices.EmfDevice" /> class with default resolution of raster image written to emf.
            </summary>
    </member>
    <member name="M:Aspose.Pdf.Devices.EmfDevice.#ctor(Aspose.Pdf.Devices.Resolution)">
      <summary>
            Initializes a new instance of the <see cref="T:Aspose.Pdf.Devices.EmfDevice" /> class.
            <param name="resolution">
            Resolution for the raster image written to emf, see <see cref="T:Aspose.Pdf.Devices.Resolution" /> class.
            </param></summary>
    </member>
    <member name="M:Aspose.Pdf.Devices.EmfDevice.#ctor(System.Int32,System.Int32)">
      <summary>
            Initializes a new instance of the <see cref="T:Aspose.Pdf.Devices.EmfDevice" /> class with provided image dimensions, 
            and default resolution for the raster image written to emf (=150)
            </summary>
      <param name="width">
            Image output width.
            </param>
      <param name="height">
            Image output height.
            </param>
    </member>
    <member name="M:Aspose.Pdf.Devices.EmfDevice.#ctor(Aspose.Pdf.PageSize)">
      <summary>
            Initializes a new instance of the <see cref="T:Aspose.Pdf.Devices.EmfDevice" /> class with provided page size, 
            and default resolution for the raster image written to emf (=150)
            </summary>
      <param name="pageSize">
            Page size of the output image.
            </param>
    </member>
    <member name="M:Aspose.Pdf.Devices.EmfDevice.#ctor(System.Int32,System.Int32,Aspose.Pdf.Devices.Resolution)">
      <summary>
            Initializes a new instance of the <see cref="T:Aspose.Pdf.Devices.JpegDevice" /> class with provided image dimensions, 
            and resolution for the raster image written to emf.
            </summary>
      <param name="width">
            Image output width.
            </param>
      <param name="height">
            Image output height.
            </param>
      <param name="resolution">
            Resolution for the for the raster image written to emf, see <see cref="T:Aspose.Pdf.Devices.Resolution" /> class.
            </param>
    </member>
    <member name="M:Aspose.Pdf.Devices.EmfDevice.#ctor(Aspose.Pdf.PageSize,Aspose.Pdf.Devices.Resolution)">
      <summary>
            Initializes a new instance of the <see cref="T:Aspose.Pdf.Devices.JpegDevice" /> class with provided page size, 
            and resolution for the raster image written to emf.
            </summary>
      <param name="pageSize">
            Page size of the output image.
            </param>
      <param name="resolution">
            Resolution for the for the raster image written to emf, see <see cref="T:Aspose.Pdf.Devices.Resolution" /> class.
            </param>
    </member>
    <member name="M:Aspose.Pdf.Devices.EmfDevice.Process(Aspose.Pdf.Page,System.IO.Stream)">
      <summary>
            Converts the page into emf and saves it in the output stream.
            </summary>
      <param name="page">
            The page to convert.
            </param>
      <param name="output">
            Output stream with emf image.
            </param>
    </member>
    <member name="T:Aspose.Pdf.DocSaveOptions">
      <summary>
            Save options for export to Doc format
            </summary>
    </member>
    <member name="M:Aspose.Pdf.DocSaveOptions.#ctor">
      <summary>
            Constructor
            </summary>
    </member>
    <member name="P:Aspose.Pdf.DocSaveOptions.Mode">
      <summary>
            Recognition mode.
            </summary>
    </member>
    <member name="P:Aspose.Pdf.DocSaveOptions.RelativeHorizontalProximity">
      <summary>
            Relative proximity between textual elements means that distance is normed by the font size.
            Bigger fonts may have bigger distances between syllables and still may be looked at as single
            whole. Specified in hundreds of percent of the font size. E.g. 1 = 100% meaning that
            two chars of 12pt are placed 12 pt apart are proximal.
            </summary>
    </member>
    <member name="P:Aspose.Pdf.DocSaveOptions.RecognizeBullets">
      <summary>
            Switch on the recognition of bullets
            </summary>
    </member>
    <member name="P:Aspose.Pdf.DocSaveOptions.Format">
      <summary>
            Output format
            </summary>
    </member>
    <member name="T:Aspose.Pdf.Facades.ReplaceTextStrategy">
      <summary>
            This class contains parameters which define PdfContentEditor behavior when ReplaceText operation is performed. 
            </summary>
    </member>
    <member name="P:Aspose.Pdf.Facades.ReplaceTextStrategy.IsRegularExpressionUsed">
      <summary>
            If false, string to find is a simple text. If true, string to find is regular expression.
            </summary>
    </member>
    <member name="P:Aspose.Pdf.Facades.ReplaceTextStrategy.NoCharacterBehavior">
      <summary>
            Action which is performed when no approppriate font found for changed text
            (Throw exception / Substitute other font / Replace anyway).
            </summary>
    </member>
    <member name="P:Aspose.Pdf.Facades.ReplaceTextStrategy.ReplaceScope">
      <summary>
            Scope of the replacement operation (replace first occurence or replace all occurences).
            </summary>
    </member>
    <member name="T:Aspose.Pdf.InteractiveFeatures.ExplicitDestinationType">
      <summary>
            Enumerates the types of explicit destinations.
            </summary>
    </member>
    <member name="F:Aspose.Pdf.InteractiveFeatures.ExplicitDestinationType.XYZ">
      <summary>
            Display the page with the coordinates (left, top) positioned at the upper-left corner of the window
            and the contents of the page magnified by the factor zoom. A null value for any of the parameters
            left, top, or zoom specifies that the current value of that parameter is to be retained unchanged. 
            A zoom value of 0 has the same meaning as a null value.
            </summary>
    </member>
    <member name="F:Aspose.Pdf.InteractiveFeatures.ExplicitDestinationType.Fit">
      <summary>
            Display the page with its contents magnified just enough to fit the entire page within the window
            both horizontally and vertically. If the required horizontal and vertical magnification factors are
            different, use the smaller of the two, centering the page within the window in the other dimension.
            </summary>
    </member>
    <member name="F:Aspose.Pdf.InteractiveFeatures.ExplicitDestinationType.FitH">
      <summary>
            Display the page with the vertical coordinate top positioned at the top edge of the window and
            the contents of the page magnified just enough to fit the entire width of the page within the window.
            A null value for top specifies that the current value of that parameter is to be retained unchanged.
            </summary>
    </member>
    <member name="F:Aspose.Pdf.InteractiveFeatures.ExplicitDestinationType.FitV">
      <summary>
            Display the page with the horizontal coordinate left positioned at the left edge of the window
            and the contents of the page magnified just enough to fit the entire height of the page within the window.
            A null value for left specifies that the current value of that parameter is to be retained unchanged.
            </summary>
    </member>
    <member name="F:Aspose.Pdf.InteractiveFeatures.ExplicitDestinationType.FitR">
      <summary>
            Display the page with its contents magnified just enough to fit the rectangle specified by the
            coordinates left, bottom, right, and topentirely within the window both horizontally and vertically.
            If the required horizontal and vertical magnification factors are different, use the smaller of
            the two, centering the rectangle within the window in the other dimension. A null value for any
            of the parameters may result in unpredictable behavior.
            </summary>
    </member>
    <member name="F:Aspose.Pdf.InteractiveFeatures.ExplicitDestinationType.FitB">
      <summary>
            Display the page with its contents magnified just enough to fit its bounding box entirely within
            the window both horizontally and vertically. If the required horizontal and vertical magnification
            factors are different, use the smaller of the two, centering the bounding box within the window
            in the other dimension.
            </summary>
    </member>
    <member name="F:Aspose.Pdf.InteractiveFeatures.ExplicitDestinationType.FitBH">
      <summary>
            Display the page with the vertical coordinate top positioned at the top edge of the window and the
            contents of the page magnified just enough to fit the entire width of its bounding box within the window.
            A null value for top specifies that the current value of that parameter is to be retained unchanged.
            </summary>
    </member>
    <member name="F:Aspose.Pdf.InteractiveFeatures.ExplicitDestinationType.FitBV">
      <summary>
            Display the page with the horizontal coordinate left positioned at the left edge of the window and the
            contents of the page magnified just enough to fit the entire height of its bounding box within the window.
            A null value for left specifies that the current value of that parameter is to be retained unchanged.
            </summary>
    </member>
    <member name="T:Aspose.Pdf.InteractiveFeatures.NamedDestination">
      <summary>
            Instead of being defined directly with the explicit syntax, a destination may be referred to indirectly by means of a name object or a byte string.
            </summary>
    </member>
    <member name="M:Aspose.Pdf.InteractiveFeatures.NamedDestination.ToString">
      <summary>
            Converts destination to string value.
            </summary>
      <returns>String value.</returns>
    </member>
    <member name="P:Aspose.Pdf.InteractiveFeatures.NamedDestination.Name">
      <summary>
            Gets the name of named destination.
            </summary>
    </member>
    <member name="T:Aspose.Pdf.PdfSaveOptions">
      <summary>
            Save options for export to Pdf format
            </summary>
    </member>
    <member name="M:Aspose.Pdf.PdfSaveOptions.#ctor">
      <summary>
            Constructor
            </summary>
    </member>
    <member name="T:Aspose.Pdf.SaveFormat">
      <summary>
             Specifies format 
            </summary>
    </member>
    <member name="T:Aspose.Pdf.CgmLoadOptions">
      <summary>
            Contains options for loading/importing CGM file into pdf document.
            </summary>
    </member>
    <member name="T:Aspose.Pdf.LoadOptions">
      <summary>
             LoadOptions type holds level of abstraction on individual load options
            </summary>
    </member>
    <member name="P:Aspose.Pdf.LoadOptions.WarningHandler">
      <summary>
            Callback to handle any warnings generated. 
            The WarningHandler returns ReturnAction enum item specifying either Continue or Abort. 
            Continue is the default action and the Load operation continues, however the user may also return Abort in which case the Load operation should cease.
            </summary>
    </member>
    <member name="P:Aspose.Pdf.LoadOptions.LoadFormat">
      <summary>
            Represents file format which <see cref="T:Aspose.Pdf.LoadOptions" /> describes.
            </summary>
    </member>
    <member name="M:Aspose.Pdf.CgmLoadOptions.#ctor">
      <summary>
            Creates default load options for converting CGM file into pdf document. 
            Default pdf page size - A4 300dpi 2480 X 3508.
            </summary>
    </member>
    <member name="M:Aspose.Pdf.CgmLoadOptions.#ctor(System.Drawing.SizeF)">
      <summary>
            Creates load options with defined <see cref="!:pageSize" />.
            </summary>
      <param name="pageSize">
            Defines pdf page width and height.
            </param>
    </member>
    <member name="P:Aspose.Pdf.CgmLoadOptions.PageSize">
      <summary>
            Gets or sets output page size for import.
            </summary>
    </member>
    <member name="T:Aspose.Pdf.Facades.AutoRotateMode">
      <summary>
            rotate mode
            </summary>
    </member>
    <member name="T:Aspose.Pdf.HtmlLoadOptions">
      <summary>
            Represents options for loading/importing html file into pdf document.
            </summary>
    </member>
    <member name="M:Aspose.Pdf.HtmlLoadOptions.#ctor">
      <summary>
            Creates load options for converting html into pdf document with empty base path.
            </summary>
    </member>
    <member name="M:Aspose.Pdf.HtmlLoadOptions.#ctor(System.String)">
      <summary>
            Creates load options for converting html into pdf document with defined base path.
            </summary>
      <param name="basePath">
            The base path/url for the html file.
            </param>
    </member>
    <member name="P:Aspose.Pdf.HtmlLoadOptions.BasePath">
      <summary>
            The base path/url for the html file.
            </summary>
    </member>
    <member name="T:Aspose.Pdf.LoadFormat">
      <summary>
            Specifies load format.
            </summary>
    </member>
    <member name="T:Aspose.Pdf.WarningType">
      <summary>
            Enum represented warning type.
            </summary>
    </member>
    <member name="F:Aspose.Pdf.WarningType.SourceFileCorruption">
      <summary>
            The file is corrupted.
            </summary>
    </member>
    <member name="F:Aspose.Pdf.WarningType.DataLoss">
      <summary>
            Text/chart/image or other data is completely missing from either the documet tree following load, or the created document following save. 
            </summary>
    </member>
    <member name="F:Aspose.Pdf.WarningType.MajorFormattingLoss">
      <summary>
            Major formatting losses compared to the original document. This is for occasions when the formatting loss is substantial but the data is still there.
            </summary>
    </member>
    <member name="F:Aspose.Pdf.WarningType.MinorFormattingLoss">
      <summary>
            Minor formatting losses compared to the original document. This is for minor losses of fidelity.
            </summary>
    </member>
    <member name="F:Aspose.Pdf.WarningType.CompatibilityIssue">
      <summary>
            Known issue that will prevent the document being opened by certain user agents, or previous versions of user agents.
            </summary>
    </member>
    <member name="F:Aspose.Pdf.WarningType.UnexpectedContent">
      <summary>
            The file has unexpected content.
            </summary>
    </member>
    <member name="T:Aspose.Pdf.WarningInfo">
      <summary>
            Immutable object for encapsulating warning information.
            </summary>
    </member>
    <member name="M:Aspose.Pdf.WarningInfo.#ctor(Aspose.Pdf.WarningType,System.String)">
      <summary>
            Constructs instance for gathering information.
            </summary>
      <param name="type">
            the warning type to set
            </param>
      <param name="message">
            the warning message to set
            </param>
    </member>
    <member name="P:Aspose.Pdf.WarningInfo.WarningMessage">
      <summary>
              Returns string representation of warning message.
            </summary>
      <returns> 
            the warning message
            </returns>
    </member>
    <member name="P:Aspose.Pdf.WarningInfo.WarningTypeProperty">
      <summary>
              Returns warning type.
            </summary>
      <returns> 
            the warning type
            </returns>
    </member>
    <member name="T:Aspose.Pdf.IWarningCallback">
      <summary>
            Interface for user's callback mechanism support.
            </summary>
    </member>
    <member name="M:Aspose.Pdf.IWarningCallback.Warning(Aspose.Pdf.WarningInfo)">
      <summary>
            The callback method for some program notifications. 
            </summary>
      <param name="warning">
            the warning information for some happened warning
            </param>
      <returns>
            the result of further program workflow
            </returns>
    </member>
    <member name="T:Aspose.Pdf.ReturnAction">
      <summary>
            Enum represented a program workflow action in case of invoking the
            <see cref="M:Aspose.Pdf.IWarningCallback.Warning(Aspose.Pdf.WarningInfo)" /> method.
            </summary>
    </member>
    <member name="F:Aspose.Pdf.ReturnAction.Continue">
      <summary>
            Used for continue flow.
            </summary>
    </member>
    <member name="F:Aspose.Pdf.ReturnAction.Abort">
      <summary>
            Used for abort flow.
            </summary>
    </member>
    <member name="T:Aspose.Pdf.PasswordType">
      <summary>
            This enum represents  known password types used for password protected pdf documents.
            </summary>
    </member>
    <member name="F:Aspose.Pdf.PasswordType.None">
      <summary>
            Pdf document is not password protected.
            </summary>
    </member>
    <member name="F:Aspose.Pdf.PasswordType.User">
      <summary>
            Pdf document was opened using document open password (restricted access).
            </summary>
    </member>
    <member name="F:Aspose.Pdf.PasswordType.Owner">
      <summary>
            Pdf document was opened using change permissions password (full access).
            </summary>
    </member>
    <member name="F:Aspose.Pdf.PasswordType.Inaccessible">
      <summary>
            Pdf document is password protected but both user and owner passwords are not empty and 
            none of the passwords was defined or supplied password was incorrect. So it impossible to deduce the type of the password.
            </summary>
    </member>
    <member name="T:Aspose.Pdf.Structure.Element">
      <summary>
            Class representing base element of logical structure.
            </summary>
    </member>
    <member name="P:Aspose.Pdf.Structure.Element.Children">
      <summary>
            Gets child elements collection.
            </summary>
    </member>
    <member name="P:Aspose.Pdf.Structure.Element.Lang">
      <summary>
            (Optional; PDF 1.4) A language specifying the natural language for all text
            in the structure element except where overridden by language specifications for nested structure
            elements or marked content.
            </summary>
    </member>
    <member name="P:Aspose.Pdf.Structure.Element.ActualText">
      <summary>
            (Optional; PDF 1.4) Text that is an exact replacement for the structure element and its children.
            This replacement text (which should apply to as small a piece of content as possible)
            is useful when extracting the document’s contents in support of accessibility to users
            with disabilities or for other purposes.
            </summary>
    </member>
    <member name="P:Aspose.Pdf.Structure.Element.Alt">
      <summary>
            (Optional) An alternate description of the structure element and its children in
            human-readableform, which is useful when extracting the document’s contents in support
            of accessibility to users with disabilities or for other purposes.
            </summary>
    </member>
    <member name="P:Aspose.Pdf.Structure.Element.E">
      <summary>
            (Optional; PDF 1.5) The expanded form of an abbreviation.
            </summary>
    </member>
    <member name="T:Aspose.Pdf.Structure.StructElement">
      <summary>
            General structure element.
            </summary>
    </member>
    <member name="T:Aspose.Pdf.Structure.RootElement">
      <summary>
            Root structure element.
            </summary>
    </member>
    <member name="T:Aspose.Pdf.Structure.FigureElement">
      <summary>
            Class representing logical structure figure.
            </summary>
    </member>
    <member name="P:Aspose.Pdf.Structure.FigureElement.Image">
      <summary>
            Gets the value of figure structure element.
            </summary>
    </member>
    <member name="T:Aspose.Pdf.Structure.TextElement">
      <summary>
            General text element of document logical structure.
            </summary>
    </member>
    <member name="P:Aspose.Pdf.Structure.TextElement.Text">
      <summary>
            Gets the value of text structure element.
            </summary>
    </member>
    <member name="T:Aspose.Pdf.PclLoadOptions">
      <summary>
            Represents options for loading/importing PCL file into pdf document.
            </summary>
    </member>
    <member name="M:Aspose.Pdf.PclLoadOptions.#ctor">
      <summary>
            Creates <see cref="T:Aspose.Pdf.PclLoadOptions" /> object.
            </summary>
    </member>
    <member name="T:Aspose.Pdf.SvgLoadOptions">
      <summary>
            Represents options for loading/importing SVG file into pdf document.
            </summary>
    </member>
    <member name="M:Aspose.Pdf.SvgLoadOptions.#ctor">
      <summary>
            Creates <see cref="T:Aspose.Pdf.SvgLoadOptions" /> object.
            </summary>
    </member>
    <member name="P:Aspose.Pdf.SvgLoadOptions.AdjustPageSize">
      <summary>
            Adust pdf page size to svg size
            </summary>
    </member>
    <member name="T:Aspose.Pdf.Collection">
      <summary>
            Represents class for Collection(12.3.5 Collections).
            </summary>
    </member>
    <member name="T:Aspose.Pdf.XmlLoadOptions">
      <summary>
            Represents options for loading/importing XML file into pdf document.
            </summary>
    </member>
    <member name="M:Aspose.Pdf.XmlLoadOptions.#ctor">
      <summary>
            Creates <see cref="T:Aspose.Pdf.XmlLoadOptions" /> object without xsl data.
            </summary>
    </member>
    <member name="M:Aspose.Pdf.XmlLoadOptions.#ctor(System.String)">
      <summary>
            Creates <see cref="T:Aspose.Pdf.XmlLoadOptions" /> object with xsl data.
            </summary>
      <param name="xslFile">
            Xsl file to convert xml document into pdf document.
            </param>
    </member>
    <member name="M:Aspose.Pdf.XmlLoadOptions.#ctor(System.IO.Stream)">
      <summary>
            Creates <see cref="T:Aspose.Pdf.XmlLoadOptions" /> object with xsl data.
            </summary>
      <param name="xslStream">
            Xsl stream to convert xml document into pdf document.
            </param>
    </member>
    <member name="P:Aspose.Pdf.XmlLoadOptions.XslStream">
      <summary>
            Gets xsl data for converting xml into pdf document.
            </summary>
    </member>
    <member name="T:Aspose.Pdf.XmlSaveOptions">
      <summary>
            Save options for export to Xml format
            </summary>
    </member>
    <member name="M:Aspose.Pdf.XmlSaveOptions.#ctor">
      <summary>
            Constructor
            </summary>
    </member>
    <member name="T:Aspose.Pdf.XpsSaveOptions">
      <summary>
            Save options for export to Xps format
            </summary>
    </member>
    <member name="M:Aspose.Pdf.XpsSaveOptions.#ctor">
      <summary>
            Constructor
            </summary>
    </member>
    <member name="T:Aspose.Pdf.XslFoLoadOptions">
      <summary>
            Represents options for loading/importing XSL-FO file into pdf document.
            </summary>
    </member>
    <member name="M:Aspose.Pdf.XslFoLoadOptions.#ctor">
      <summary>
            Creates <see cref="T:Aspose.Pdf.XslFoLoadOptions" /> object without xsl data.
            </summary>
    </member>
    <member name="M:Aspose.Pdf.XslFoLoadOptions.#ctor(System.String)">
      <summary>
            Creates <see cref="T:Aspose.Pdf.XslFoLoadOptions" /> object with xsl data.
            </summary>
      <param name="xslFile">
            Xsl file to convert XSL-FO document into pdf document.
            </param>
    </member>
    <member name="M:Aspose.Pdf.XslFoLoadOptions.#ctor(System.IO.Stream)">
      <summary>
            Creates <see cref="T:Aspose.Pdf.XslFoLoadOptions" /> object with xsl data.
            </summary>
      <param name="xslStream">
            Xsl stream to convert XSL-FO document into pdf document.
            </param>
    </member>
    <member name="P:Aspose.Pdf.XslFoLoadOptions.UseOldXslFoEngine">
      <summary>
             This property will be available during migration to new XSL-FO engine.
             If this property is true, the previous version of XSL-FO engine will be used.
            </summary>
    </member>
    <member name="T:Aspose.Pdf.LaTeXSaveOptions">
      <summary>
            Save options for export to TeX format
            </summary>
    </member>
    <member name="M:Aspose.Pdf.LaTeXSaveOptions.#ctor">
      <summary>
            Initializes a new instance of the <see cref="T:Aspose.Pdf.LaTeXSaveOptions" /> class. 
            </summary>
    </member>
    <member name="P:Aspose.Pdf.LaTeXSaveOptions.OutDirectoryPath">
      <summary>
            Property for <see cref="F:Aspose.Pdf.LaTeXSaveOptions._outDirectoryPath" /> parameter.
            </summary>
    </member>
    <member name="T:Aspose.Pdf.LatexLoadOptions">
      <summary>
            Represents options for loading/importing TeX file into PDF document.
            </summary>
    </member>
    <member name="M:Aspose.Pdf.LatexLoadOptions.#ctor">
      <summary>
            Creates default load options for converting TeX file into PDF document. 
            </summary>
    </member>
    <member name="P:Aspose.Pdf.LatexLoadOptions.TextFontName">
      <summary>
            Sets/Gets name of the font used for rendering math formulas.
            </summary>
    </member>
    <member name="P:Aspose.Pdf.LatexLoadOptions.WarningCallback">
      <summary>
            Sets/Gets callback object for info/errors notification.
            </summary>
    </member>
    <member name="P:Aspose.Pdf.LatexLoadOptions.MathFontName">
      <summary>
            Sets/Gets name of the font used for rendering math formulas.
            </summary>
    </member>
    <member name="P:Aspose.Pdf.LatexLoadOptions.SpecSymbolsFontName">
      <summary>
            Sets/Gets name of the font used for rendering special symbols, e.g. \sigma, \textbraceright, \vdots, etc.
            </summary>
    </member>
    <member name="T:Aspose.Pdf.ColorSpace">
      <summary>
            The color spaces enumeration.
            </summary>
    </member>
    <member name="F:Aspose.Pdf.ColorSpace.DeviceRGB">
      <summary>
            The device-dependent RGB color space.
            </summary>
    </member>
    <member name="F:Aspose.Pdf.ColorSpace.DeviceCMYK">
      <summary>
            The device-dependent CMYK color space.
            </summary>
    </member>
    <member name="F:Aspose.Pdf.ColorSpace.DeviceGray">
      <summary>
            The device-dependent gray color space.
            </summary>
    </member>
    <member name="T:Aspose.Pdf.Group">
      <summary>
            A group attributes class specifying the attributes of the page’s page group for use in the transparent imaging model.
            </summary>
    </member>
    <member name="M:Aspose.Pdf.Group.#ctor(Aspose.Pdf.Page)">
      <summary>
            The constructor.
            </summary>
      <param name="page">The page.</param>
    </member>
    <member name="P:Aspose.Pdf.Group.ColorSpace">
      <summary>
            The group color space.
            </summary>
    </member>
    <member name="T:Aspose.Pdf.InteractiveFeatures.Annotations.ScreenAnnotation">
      <summary>
            A screen annotation that specifies a region of a page upon which media clips may be played.
            </summary>
    </member>
    <member name="M:Aspose.Pdf.InteractiveFeatures.Annotations.ScreenAnnotation.#ctor(Aspose.Pdf.Page,Aspose.Pdf.Rectangle,System.String)">
      <summary>
            Creates new Screen annotation on the specified page.
            </summary>
      <param name="page">The document's page where annotation should be created.</param>
      <param name="rect">The annotation rectangle, defining the location of the annotation on the page.</param>
      <param name="mediaFile">The path to multimedia file.</param>
    </member>
    <member name="M:Aspose.Pdf.InteractiveFeatures.Annotations.ScreenAnnotation.Accept(Aspose.Pdf.InteractiveFeatures.Annotations.AnnotationSelector)">
      <summary>
            Accepts visitor object to process the annotation.
            </summary>
      <param name="visitor">Visitor object.</param>
    </member>
    <member name="P:Aspose.Pdf.InteractiveFeatures.Annotations.ScreenAnnotation.Title">
      <summary>
            Gets or sets the title of the screen annotation.
            </summary>
    </member>
    <member name="P:Aspose.Pdf.InteractiveFeatures.Annotations.ScreenAnnotation.Action">
      <summary>
            Gets or sets an action to be performed when the annotation is activated.
            </summary>
    </member>
    <member name="T:Aspose.Pdf.InteractiveFeatures.RenditionAction">
      <summary>
            A rendition action that controls the playing of multimedia content.
            </summary>
    </member>
    <member name="T:Aspose.Pdf.XpsLoadOptions">
      <summary>
            Represents options for loading/importing xps file into pdf document.
            </summary>
    </member>
    <member name="M:Aspose.Pdf.XpsLoadOptions.#ctor">
      <summary>
            Creates default load options for converting xps file into pdf document. 
            </summary>
    </member>
    <member name="T:Aspose.Pdf.InteractiveFeatures.LaunchActionOperation">
      <summary>
            Enumerates the operations to perform with document during launch action executing.
            </summary>
    </member>
    <member name="F:Aspose.Pdf.InteractiveFeatures.LaunchActionOperation.Undefined">
      <summary>
            Undefined state.
            </summary>
    </member>
    <member name="F:Aspose.Pdf.InteractiveFeatures.LaunchActionOperation.Open">
      <summary>
            Open a document.
            </summary>
    </member>
    <member name="F:Aspose.Pdf.InteractiveFeatures.LaunchActionOperation.Print">
      <summary>
            Print a document.
            </summary>
    </member>
    <member name="T:Aspose.Pdf.Table">
      <summary>
            Represents a table that can be added to the page.
            </summary>
    </member>
    <member name="M:Aspose.Pdf.Table.GetHeight">
      <summary>
            Get height.
            </summary>
    </member>
    <member name="M:Aspose.Pdf.Table.SetColumnTextState(System.Int32,Aspose.Pdf.Text.TextState,Aspose.Pdf.HorizontalAlignment)">
      <summary>
            Set height.
            </summary>
      <param name="colNumber">The column number.</param>
      <param name="textState">The text state for column.</param>
      <param name="horizontalAlignment">The horizontal cell alignment.</param>
    </member>
    <member name="M:Aspose.Pdf.Table.Clone">
      <summary>
            Clone the table.
            </summary>
    </member>
    <member name="P:Aspose.Pdf.Table.BackgroundColor">
      <summary>
            Gets or sets table background color
            </summary>
    </member>
    <member name="P:Aspose.Pdf.Table.CornerStyle">
      <summary>
            Gets the styles of the border corners
            </summary>
    </member>
    <member name="P:Aspose.Pdf.Table.RepeatingRowsStyle">
      <summary>
            Gets the style for repeating rows
            </summary>
    </member>
    <member name="P:Aspose.Pdf.Table.RepeatingRowsCount">
      <summary>
            Gets the first rows count repeated for several pages
            </summary>
    </member>
    <member name="P:Aspose.Pdf.Table.ColumnWidths">
      <summary>
            Gets the column widths of the table.
            </summary>
    </member>
    <member name="P:Aspose.Pdf.Table.Broken">
      <summary>
            Gets is vertial broken.;
            </summary>
    </member>
    <member name="P:Aspose.Pdf.Table.DefaultCellBorder">
      <summary>
            Gets default cell border;
            </summary>
    </member>
    <member name="P:Aspose.Pdf.Table.DefaultColumnWidth">
      <summary>
            Gets default cell border;
            </summary>
    </member>
    <member name="P:Aspose.Pdf.Table.Rows">
      <summary>
            Gets the rows of the table.
            </summary>
    </member>
    <member name="P:Aspose.Pdf.Table.Border">
      <summary>
            Gets or sets the border.
            </summary>
    </member>
    <member name="P:Aspose.Pdf.Table.DefaultCellPadding">
      <summary>
            Gets or sets the default cell padding.
            </summary>
    </member>
    <member name="P:Aspose.Pdf.Table.DefaultCellTextState">
      <summary>
            Gets or sets the default cell text state.
            </summary>
    </member>
    <member name="P:Aspose.Pdf.Table.Alignment">
      <summary>
            Gets or sets the table alignment.
            </summary>
    </member>
    <member name="P:Aspose.Pdf.Table.Left">
      <summary>
            Gets or sets the table left coordinate.
            </summary>
    </member>
    <member name="P:Aspose.Pdf.Table.Top">
      <summary>
            Gets or sets the table top coordinate.
            </summary>
    </member>
    <member name="P:Aspose.Pdf.Table.IsBroken">
      <summary>
            Gets or sets the table is broken - will be truncated for next page.
            </summary>
    </member>
    <member name="T:Aspose.Pdf.Watermark">
      <summary>
            Represents a watermark of the page.
            </summary>
    </member>
    <member name="M:Aspose.Pdf.Watermark.#ctor(System.Drawing.Image,Aspose.Pdf.Rectangle)">
      <summary>
            Initializes a watermark structure with an image and it's position on a page.
            </summary>
      <param name="image">
      </param>
      <param name="rect">
      </param>
    </member>
    <member name="M:Aspose.Pdf.Watermark.#ctor(System.Drawing.Image)">
      <summary>
            Initializes a watermark structure with an image.
            </summary>
      <param name="image">
      </param>
    </member>
    <member name="P:Aspose.Pdf.Watermark.Image">
      <summary>
            Gets an image of the watermark.
            </summary>
    </member>
    <member name="P:Aspose.Pdf.Watermark.Position">
      <summary>
            Gets a position of the watermark's image on a page.
            </summary>
    </member>
    <member name="P:Aspose.Pdf.Watermark.Available">
      <summary>
            Gets a flag the watermark is present.
            </summary>
    </member>
    <member name="M:Aspose.Pdf.Artifact.#ctor(Aspose.Pdf.ArtifactCollection,Aspose.Pdf.Resources,Aspose.Pdf.DOM.Matrix,System.Collections.ArrayList,Aspose.Pdf.Engine.Data.IPdfDictionary)">
      <summary>
            This constructor is used when artifact is read from the page. 
            ARtifactCollection passes page resources, initial matrix, operators of the artifact ("contents") and properties dictionary.
            </summary>
      <param name="owner">
      </param>
      <param name="resources">
      </param>
      <param name="matrix">
      </param>
      <param name="_contents">
      </param>
      <param name="_properties">
      </param>
    </member>
    <member name="M:Aspose.Pdf.Artifact.#ctor(System.String,System.String)">
      <summary>
            Constructor of artifact with specified type and subtype
            </summary>
      <param name="type">Name of artifact type.</param>
      <param name="subType">NAme of artifact subtype.</param>
    </member>
    <member name="M:Aspose.Pdf.Artifact.#ctor(Aspose.Pdf.Artifact.ArtifactType,Aspose.Pdf.Artifact.ArtifactSubtype)">
      <summary>
            Constructor of artifact with specified type and subtype
            </summary>
      <param name="type">Artifact type.</param>
      <param name="subType">Artifact subtype.</param>
    </member>
    <member name="M:Aspose.Pdf.Artifact.SetText(Aspose.Pdf.Facades.FormattedText)">
      <summary>
            Sets text of the artifact. 
            </summary>
      <param name="formattedText">FormattedText object which contains artifact text.</param>
    </member>
    <member name="M:Aspose.Pdf.Artifact.SetImage(System.IO.Stream)">
      <summary>
            Sets image of the artifact. 
            </summary>
      <param name="imageStream">Stream which contains image data.</param>
    </member>
    <member name="M:Aspose.Pdf.Artifact.SetImage(System.String)">
      <summary>
            Sets image of the artifact. 
            </summary>
      <param name="imageName">Name of image file.</param>
    </member>
    <member name="M:Aspose.Pdf.Artifact.SetPdfPage(Aspose.Pdf.Page)">
      <summary>
            Sets PDF page which is placed on the document page as artifact. 
            </summary>
      <param name="page">
      </param>
    </member>
    <member name="M:Aspose.Pdf.Artifact.GetValue(System.String)">
      <summary>
            Gets custom value of artifact. 
            </summary>
      <param name="name">Name of value.</param>
      <returns>Value, or null if value does not exists.</returns>
    </member>
    <member name="M:Aspose.Pdf.Artifact.SetValue(System.String,System.String)">
      <summary>
            Sets custom value of artifact.
            </summary>
      <param name="name">Name of custom value.</param>
      <param name="value">Value</param>
    </member>
    <member name="M:Aspose.Pdf.Artifact.RemoveValue(System.String)">
      <summary>
            Remove custom value from the artifact.
            </summary>
      <param name="name">Name of custom value to be removed.</param>
    </member>
    <member name="M:Aspose.Pdf.Artifact.BeginUpdates">
      <summary>
            Start delated updates. Use this feature if you need make several changes to the same artifact to improve performance. 
            Usually artifact operators are changed anytime when artifact property was changed. This causes changing of page contents
            everytime when artifact was changed. To avoid this effect put all artifact updates between StartUpdates/SaveUpdates calls.
            This allows to change page contents only once.
            </summary>
      <example>
        <code lang="C#">
            Artifact art = doc.Pages[1].Artifacts[1];
            art.BeginUpdates();
            art.Opacity = 0.3f;
            art.Position = new Point(10,10);
            art.Rotation = 30;
            art.SaveUpdates();
            </code>
      </example>
    </member>
    <member name="M:Aspose.Pdf.Artifact.SaveUpdates">
      <summary>
            Saves all updates in artifact which were made after BeginUpdates() call.
            </summary>
    </member>
    <member name="P:Aspose.Pdf.Artifact.CustomType">
      <summary>
            Gets name of artifact type. May be used if artifact type is non standard.
            </summary>
    </member>
    <member name="P:Aspose.Pdf.Artifact.CustomSubtype">
      <summary>
            Gets name of artifact subtype. May be used  if artifact subtype is not standard subtype.
            </summary>
    </member>
    <member name="P:Aspose.Pdf.Artifact.Type">
      <summary>
            Gets artifact type. 
            </summary>
    </member>
    <member name="P:Aspose.Pdf.Artifact.Subtype">
      <summary>
            Gets artifact subtype. If artifact has non-standard subtype, name of the subtype may be read via CustomSubtype.
            </summary>
    </member>
    <member name="P:Aspose.Pdf.Artifact.Contents">
      <summary>
            Gets collection of artifact internal operators.
            </summary>
    </member>
    <member name="P:Aspose.Pdf.Artifact.Form">
      <summary>
            Gets XForm of the artifact (if XForm is used).
            </summary>
    </member>
    <member name="P:Aspose.Pdf.Artifact.Rectangle">
      <summary>
            Gets rectangle of the artifact.
            </summary>
    </member>
    <member name="P:Aspose.Pdf.Artifact.Position">
      <summary>
            Gets or sets artifact position.
            If this property is specified, then margins and alignments are ignored.
            </summary>
    </member>
    <member name="P:Aspose.Pdf.Artifact.RightMargin">
      <summary>
            Right margin of artifact. 
            If position is specified explicitly (in Position property) this value is ignored.
            </summary>
    </member>
    <member name="P:Aspose.Pdf.Artifact.LeftMargin">
      <summary>
            Left margin of artifact. 
            If position is specified explicitly (in Position property) this value is ignored.
            </summary>
    </member>
    <member name="P:Aspose.Pdf.Artifact.TopMargin">
      <summary>
            Top margin of artifact. 
            If position is specified explicitly (in Position property) this value is ignored.
            </summary>
    </member>
    <member name="P:Aspose.Pdf.Artifact.BottomMargin">
      <summary>
            Bottom margin of artifact. 
            If position is specified explicitly (in Position property) this value is ignored.
            </summary>
    </member>
    <member name="P:Aspose.Pdf.Artifact.ArtifactHorizontalAlignment">
      <summary>
            Horizontal alignment of artifact. 
            If position is specified explicitly (in Position property) this value is ignored.
            </summary>
    </member>
    <member name="P:Aspose.Pdf.Artifact.ArtifactVerticalAlignment">
      <summary>
            Vertical alignment of artifact. 
            If position is specified explicitly (in Position property) this value is ignored.
            </summary>
    </member>
    <member name="P:Aspose.Pdf.Artifact.Rotation">
      <summary>
            Gets or sets articat rotatin angle.
            </summary>
    </member>
    <member name="P:Aspose.Pdf.Artifact.Text">
      <summary>
            Gets text of the artifact.
            </summary>
    </member>
    <member name="P:Aspose.Pdf.Artifact.Image">
      <summary>
            Gets image of the artifact (if presents).
            </summary>
    </member>
    <member name="P:Aspose.Pdf.Artifact.Opacity">
      <summary>
            Gets or sets opacity of the artifact. Possible values are in range 0..1.
            </summary>
    </member>
    <member name="T:Aspose.Pdf.ArtifactCollection">
      <summary>
            Class represents artifact collection. 
            </summary>
    </member>
    <member name="M:Aspose.Pdf.ArtifactCollection.CopyTo(System.Array,System.Int32)">
      <summary>
            Copies colection into an array.
            </summary>
      <param name="dest">
      </param>
      <param name="index">
      </param>
    </member>
    <member name="M:Aspose.Pdf.ArtifactCollection.GetEnumerator">
      <summary>
            Gets enumerator for the collection. 
            </summary>
      <returns>
      </returns>
    </member>
    <member name="M:Aspose.Pdf.ArtifactCollection.Add(Aspose.Pdf.Artifact)">
      <summary>
            Adds artifacts to the collection.
            </summary>
      <param name="artifact">Artifact which sould be added to collection.</param>
    </member>
    <member name="M:Aspose.Pdf.ArtifactCollection.FindByValue(System.String,System.String)">
      <summary>
            Finds artifacts by custom value.
            </summary>
      <param name="name">Name of custom value.</param>
      <param name="expectedValue">Value to find.</param>
      <returns>
      </returns>
    </member>
    <member name="M:Aspose.Pdf.ArtifactCollection.Delete(Aspose.Pdf.Artifact)">
      <summary>
            Deletes specified artifact.
            </summary>
      <param name="artifact">Artifact which will be deleted.</param>
    </member>
    <member name="M:Aspose.Pdf.ArtifactCollection.Delete(System.Int32)">
      <summary>
            Deletes artifact by its index. 
            </summary>
      <param name="index">Index of artifact to delete.</param>
    </member>
    <member name="P:Aspose.Pdf.ArtifactCollection.Count">
      <summary>
            Gets count of artifacts in collection.
            </summary>
    </member>
    <member name="P:Aspose.Pdf.ArtifactCollection.SyncRoot">
      <summary>
            Gets synchronization object of the collection.
            </summary>
    </member>
    <member name="P:Aspose.Pdf.ArtifactCollection.Item(System.Int32)">
      <summary>
            Gets artifact by index. Index is started from 1.
            </summary>
      <param name="index">Index of the artifact.</param>
      <returns>Artifact on the page.</returns>
    </member>
    <member name="T:Aspose.Pdf.BackgroundArtifact">
      <summary>
            Class descibes background artifact. This artifact allows to set background of the page.
            </summary>
    </member>
    <member name="P:Aspose.Pdf.BackgroundArtifact.BackgroundColor">
      <summary>
            Gets or sets bacground color of background artifact
            </summary>
    </member>
    <member name="P:Aspose.Pdf.BackgroundArtifact.BackgroundImage">
      <summary>
            Gets or sets bacground image of background artifact
            </summary>
    </member>
    <member name="T:Aspose.Pdf.FooterArtifact">
      <summary>
            Describes footer artifact. This may be used to set footer of the page.
            </summary>
    </member>
    <member name="M:Aspose.Pdf.FooterArtifact.#ctor">
      <summary>
            Creates Footer Artifact instance.
            </summary>
    </member>
    <member name="T:Aspose.Pdf.HeaderArtifact">
      <summary>
            Class describes Heaader artifact. This artifacgt may be used to set heading of the page.
            </summary>
    </member>
    <member name="M:Aspose.Pdf.HeaderArtifact.#ctor">
      <summary>
            Creates Header Artifact instance. 
            </summary>
    </member>
    <member name="T:Aspose.Pdf.WatermarkArtifact">
      <summary>
            Class describes watermark artifact. This may be used to 
            </summary>
    </member>
    <member name="M:Aspose.Pdf.WatermarkArtifact.#ctor">
      <summary>
            Creates instance of Watermark artifact.
            </summary>
    </member>
    <member name="T:Aspose.Pdf.EpubLoadOptions">
      <summary>
            Contains options for loading/importing EPUB file into pdf document.
            </summary>
    </member>
    <member name="M:Aspose.Pdf.EpubLoadOptions.#ctor">
      <summary>
            Creates default load options for converting EPUB file into pdf document. 
            Default pdf page size - A4 300dpi 2480 X 3508.
            </summary>
    </member>
    <member name="M:Aspose.Pdf.EpubLoadOptions.#ctor(System.Drawing.SizeF)">
      <summary>
            Creates load options with specified page size.
            </summary>
      <param name="pageSize">
            Defines pdf page width and height.
            </param>
    </member>
    <member name="P:Aspose.Pdf.EpubLoadOptions.PageSize">
      <summary>
            Gets or sets output page size for import.
            </summary>
    </member>
    <member name="P:Aspose.Pdf.EpubLoadOptions.Margin">
      <summary>
            Gets reference on object that represent marging info.
            </summary>
    </member>
  </members>
</doc>